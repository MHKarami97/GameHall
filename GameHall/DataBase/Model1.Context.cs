//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GameHall.DataBase
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HospitalDbEntities : DbContext
    {
        public HospitalDbEntities()
            : base("name=HospitalDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<action> actions { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<ArchiveType> ArchiveTypes { get; set; }
        public virtual DbSet<Assistant> Assistants { get; set; }
        public virtual DbSet<AssistantType> AssistantTypes { get; set; }
        public virtual DbSet<Attendance> Attendances { get; set; }
        public virtual DbSet<AttendanceType> AttendanceTypes { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<BankType> BankTypes { get; set; }
        public virtual DbSet<Bed> Beds { get; set; }
        public virtual DbSet<Body> Bodies { get; set; }
        public virtual DbSet<BodyType> BodyTypes { get; set; }
        public virtual DbSet<Call> Calls { get; set; }
        public virtual DbSet<Car> Cars { get; set; }
        public virtual DbSet<Cash> Cashes { get; set; }
        public virtual DbSet<Central> Centrals { get; set; }
        public virtual DbSet<Cheque_payment> Cheque_payment { get; set; }
        public virtual DbSet<Cheque_Received> Cheque_Received { get; set; }
        public virtual DbSet<ChequeBook> ChequeBooks { get; set; }
        public virtual DbSet<ChequeBookType> ChequeBookTypes { get; set; }
        public virtual DbSet<ChequeState> ChequeStates { get; set; }
        public virtual DbSet<ChequeType> ChequeTypes { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Config> Configs { get; set; }
        public virtual DbSet<CountingUnit> CountingUnits { get; set; }
        public virtual DbSet<CRM> CRMs { get; set; }
        public virtual DbSet<CRMJobCategory> CRMJobCategories { get; set; }
        public virtual DbSet<CRMJob> CRMJobs { get; set; }
        public virtual DbSet<CRMJobSubCategory> CRMJobSubCategories { get; set; }
        public virtual DbSet<CRMResultCategory> CRMResultCategories { get; set; }
        public virtual DbSet<CRMResult> CRMResults { get; set; }
        public virtual DbSet<CRMResultSubCategory> CRMResultSubCategories { get; set; }
        public virtual DbSet<CRMState> CRMStates { get; set; }
        public virtual DbSet<CRMStatesView> CRMStatesViews { get; set; }
        public virtual DbSet<CRMType> CRMTypes { get; set; }
        public virtual DbSet<CustomerGroup> CustomerGroups { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerSubGroup> CustomerSubGroups { get; set; }
        public virtual DbSet<CustomGroup> CustomGroups { get; set; }
        public virtual DbSet<DentalInformation> DentalInformations { get; set; }
        public virtual DbSet<DentalKind> DentalKinds { get; set; }
        public virtual DbSet<DentalState> DentalStates { get; set; }
        public virtual DbSet<DentColor> DentColors { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Description> Descriptions { get; set; }
        public virtual DbSet<Desk> Desks { get; set; }
        public virtual DbSet<DiagnosisCategory> DiagnosisCategories { get; set; }
        public virtual DbSet<Diagnosis> Diagnosises { get; set; }
        public virtual DbSet<DiagnosisSubCategory> DiagnosisSubCategories { get; set; }
        public virtual DbSet<DiseaseHistory> DiseaseHistories { get; set; }
        public virtual DbSet<DiseaseHistoryType> DiseaseHistoryTypes { get; set; }
        public virtual DbSet<Doctor> Doctors { get; set; }
        public virtual DbSet<DoctorsNobat> DoctorsNobats { get; set; }
        public virtual DbSet<DocumentIcon> DocumentIcons { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<DocumentState> DocumentStates { get; set; }
        public virtual DbSet<DocumentType> DocumentTypes { get; set; }
        public virtual DbSet<Driver> Drivers { get; set; }
        public virtual DbSet<DriversNobat> DriversNobats { get; set; }
        public virtual DbSet<DrugCategory> DrugCategories { get; set; }
        public virtual DbSet<DrugClass> DrugClasses { get; set; }
        public virtual DbSet<Drug> Drugs { get; set; }
        public virtual DbSet<DrugSubCategory> DrugSubCategories { get; set; }
        public virtual DbSet<DrugType> DrugTypes { get; set; }
        public virtual DbSet<DscCategory> DscCategories { get; set; }
        public virtual DbSet<DscSubCategory> DscSubCategories { get; set; }
        public virtual DbSet<Education> Educations { get; set; }
        public virtual DbSet<EducationType> EducationTypes { get; set; }
        public virtual DbSet<EeducationType> EeducationTypes { get; set; }
        public virtual DbSet<Email> Emails { get; set; }
        public virtual DbSet<EnglishWeekDay> EnglishWeekDays { get; set; }
        public virtual DbSet<FundCategory> FundCategories { get; set; }
        public virtual DbSet<Fund> Funds { get; set; }
        public virtual DbSet<FundSubCategory> FundSubCategories { get; set; }
        public virtual DbSet<FundTypeCategory> FundTypeCategories { get; set; }
        public virtual DbSet<FundType> FundTypes { get; set; }
        public virtual DbSet<GhToDayMessage> GhToDayMessages { get; set; }
        public virtual DbSet<GlassesType> GlassesTypes { get; set; }
        public virtual DbSet<Identification> Identifications { get; set; }
        public virtual DbSet<ImagePostType> ImagePostTypes { get; set; }
        public virtual DbSet<image> images { get; set; }
        public virtual DbSet<InOutType> InOutTypes { get; set; }
        public virtual DbSet<Insurance> Insurances { get; set; }
        public virtual DbSet<Inventory> Inventories { get; set; }
        public virtual DbSet<InventoryDetail> InventoryDetails { get; set; }
        public virtual DbSet<InventoryHeader> InventoryHeaders { get; set; }
        public virtual DbSet<InventoryType> InventoryTypes { get; set; }
        public virtual DbSet<ItemCategory> ItemCategories { get; set; }
        public virtual DbSet<ItemClass> ItemClasses { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<ItemSubCategory> ItemSubCategories { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<Lab> Labs { get; set; }
        public virtual DbSet<LabCenter> LabCenters { get; set; }
        public virtual DbSet<LabColor> LabColors { get; set; }
        public virtual DbSet<LabDetail> LabDetails { get; set; }
        public virtual DbSet<LabGroup> LabGroups { get; set; }
        public virtual DbSet<LabJob> LabJobs { get; set; }
        public virtual DbSet<Laboratory> Laboratories { get; set; }
        public virtual DbSet<LabRefrenceRanx> LabRefrenceRanges { get; set; }
        public virtual DbSet<LabResult> LabResults { get; set; }
        public virtual DbSet<LabServiceCategory> LabServiceCategories { get; set; }
        public virtual DbSet<LabService> LabServices { get; set; }
        public virtual DbSet<LabServiceSubCategory> LabServiceSubCategories { get; set; }
        public virtual DbSet<LabState> LabStates { get; set; }
        public virtual DbSet<LabSubGroup> LabSubGroups { get; set; }
        public virtual DbSet<LabTest> LabTests { get; set; }
        public virtual DbSet<LabType> LabTypes { get; set; }
        public virtual DbSet<LabUnit> LabUnits { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Login> Logins { get; set; }
        public virtual DbSet<MailSetting> MailSettings { get; set; }
        public virtual DbSet<MarriageType> MarriageTypes { get; set; }
        public virtual DbSet<MedicalService> MedicalServices { get; set; }
        public virtual DbSet<MessageKind> MessageKinds { get; set; }
        public virtual DbSet<MessageState> MessageStates { get; set; }
        public virtual DbSet<MessageTypeCategory> MessageTypeCategories { get; set; }
        public virtual DbSet<MessageType> MessageTypes { get; set; }
        public virtual DbSet<MessageTypeSubCategory> MessageTypeSubCategories { get; set; }
        public virtual DbSet<Moein> Moeins { get; set; }
        public virtual DbSet<MoeinCategory> MoeinCategories { get; set; }
        public virtual DbSet<MoeinSubCategory> MoeinSubCategories { get; set; }
        public virtual DbSet<MoeinType> MoeinTypes { get; set; }
        public virtual DbSet<Mokamel> Mokamels { get; set; }
        public virtual DbSet<MToDayMessage> MToDayMessages { get; set; }
        public virtual DbSet<NoteHidden> NoteHiddens { get; set; }
        public virtual DbSet<NotePad> NotePads { get; set; }
        public virtual DbSet<NotePriority> NotePriorities { get; set; }
        public virtual DbSet<NoteState> NoteStates { get; set; }
        public virtual DbSet<NoteType> NoteTypes { get; set; }
        public virtual DbSet<NoteView> NoteViews { get; set; }
        public virtual DbSet<ObjectName> ObjectNames { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<PaintHeader> PaintHeaders { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<PaymentInOutType> PaymentInOutTypes { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<PaymentState> PaymentStates { get; set; }
        public virtual DbSet<PaymentType> PaymentTypes { get; set; }
        public virtual DbSet<Perm> Perms { get; set; }
        public virtual DbSet<PersianWeekDay> PersianWeekDays { get; set; }
        public virtual DbSet<PetRace> PetRaces { get; set; }
        public virtual DbSet<Pet> Pets { get; set; }
        public virtual DbSet<PetSexType> PetSexTypes { get; set; }
        public virtual DbSet<PetType> PetTypes { get; set; }
        public virtual DbSet<PhoneNumber> PhoneNumbers { get; set; }
        public virtual DbSet<PhoneType> PhoneTypes { get; set; }
        public virtual DbSet<Poetry> Poetries { get; set; }
        public virtual DbSet<PrescriptionCashType> PrescriptionCashTypes { get; set; }
        public virtual DbSet<PrescriptionDrug> PrescriptionDrugs { get; set; }
        public virtual DbSet<PrescriptionGlass> PrescriptionGlasses { get; set; }
        public virtual DbSet<Prescription> Prescriptions { get; set; }
        public virtual DbSet<PrescriptionServiceType> PrescriptionServiceTypes { get; set; }
        public virtual DbSet<PrescriptionType> PrescriptionTypes { get; set; }
        public virtual DbSet<ReasonCategory> ReasonCategories { get; set; }
        public virtual DbSet<Reason> Reasons { get; set; }
        public virtual DbSet<ReasonSubCategory> ReasonSubCategories { get; set; }
        public virtual DbSet<ReceptionDrug> ReceptionDrugs { get; set; }
        public virtual DbSet<ReceptionForm> ReceptionForms { get; set; }
        public virtual DbSet<ReceptionImage> ReceptionImages { get; set; }
        public virtual DbSet<Reception> Receptions { get; set; }
        public virtual DbSet<ReceptionService> ReceptionServices { get; set; }
        public virtual DbSet<ReceptionState> ReceptionStates { get; set; }
        public virtual DbSet<ReceptionType> ReceptionTypes { get; set; }
        public virtual DbSet<ReceptionVisit> ReceptionVisits { get; set; }
        public virtual DbSet<ReminderView> ReminderViews { get; set; }
        public virtual DbSet<Rol> Rols { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<SaleType> SaleTypes { get; set; }
        public virtual DbSet<Sanad> Sanads { get; set; }
        public virtual DbSet<SanadCategory> SanadCategories { get; set; }
        public virtual DbSet<SanadSubCategory> SanadSubCategories { get; set; }
        public virtual DbSet<SanadType> SanadTypes { get; set; }
        public virtual DbSet<SentState> SentStates { get; set; }
        public virtual DbSet<SentType> SentTypes { get; set; }
        public virtual DbSet<ServiceCategory> ServiceCategories { get; set; }
        public virtual DbSet<ServiceSubCategory> ServiceSubCategories { get; set; }
        public virtual DbSet<SexType> SexTypes { get; set; }
        public virtual DbSet<Shift> Shifts { get; set; }
        public virtual DbSet<ShToDayMessage> ShToDayMessages { get; set; }
        public virtual DbSet<SMSBank> SMSBanks { get; set; }
        public virtual DbSet<SMSDevice> SMSDevices { get; set; }
        public virtual DbSet<SMSType> SMSTypes { get; set; }
        public virtual DbSet<SoldieingType> SoldieingTypes { get; set; }
        public virtual DbSet<SoldierType> SoldierTypes { get; set; }
        public virtual DbSet<SpecialSexType> SpecialSexTypes { get; set; }
        public virtual DbSet<Specialty> Specialties { get; set; }
        public virtual DbSet<station> stations { get; set; }
        public virtual DbSet<Storekeeper> Storekeepers { get; set; }
        public virtual DbSet<SubjectCategory> SubjectCategories { get; set; }
        public virtual DbSet<Subject> Subjects { get; set; }
        public virtual DbSet<SubjectSubCategory> SubjectSubCategories { get; set; }
        public virtual DbSet<Therapy> Therapies { get; set; }
        public virtual DbSet<TherapyCategory> TherapyCategories { get; set; }
        public virtual DbSet<TherapyItem> TherapyItems { get; set; }
        public virtual DbSet<TherapyService> TherapyServices { get; set; }
        public virtual DbSet<TherapySubCategory> TherapySubCategories { get; set; }
        public virtual DbSet<ToDayPoetry> ToDayPoetries { get; set; }
        public virtual DbSet<tran> trans { get; set; }
        public virtual DbSet<user> users { get; set; }
        public virtual DbSet<usertype> usertypes { get; set; }
        public virtual DbSet<VisitCategory> VisitCategories { get; set; }
        public virtual DbSet<Visit> Visits { get; set; }
        public virtual DbSet<VisitSubCategory> VisitSubCategories { get; set; }
        public virtual DbSet<WebSite> WebSites { get; set; }
        public virtual DbSet<WorkCalendar> WorkCalendars { get; set; }
        public virtual DbSet<WorkCalendarState> WorkCalendarStates { get; set; }
        public virtual DbSet<Yaraneh> Yaranehs { get; set; }
        public virtual DbSet<Alley> Alleys { get; set; }
        public virtual DbSet<City> Citys { get; set; }
        public virtual DbSet<Country> Countrys { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<Street> Streets { get; set; }
    
        public virtual ObjectResult<sp_10_drug_Result> sp_10_drug(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_10_drug_Result>("sp_10_drug", nameParameter);
        }
    
        public virtual ObjectResult<sp_10_Item_Result> sp_10_Item(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_10_Item_Result>("sp_10_Item", nameParameter);
        }
    
        public virtual ObjectResult<sp_10_MedicalServices_Result> sp_10_MedicalServices(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_10_MedicalServices_Result>("sp_10_MedicalServices", nameParameter);
        }
    
        public virtual ObjectResult<sp_10_Patient_Result> sp_10_Patient(string firstName, string lastName, string phone)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_10_Patient_Result>("sp_10_Patient", firstNameParameter, lastNameParameter, phoneParameter);
        }
    
        public virtual ObjectResult<sp_20_Location_Result> sp_20_Location(string locationName)
        {
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_20_Location_Result>("sp_20_Location", locationNameParameter);
        }
    
        public virtual ObjectResult<sp_Addresses_Select_Result> sp_Addresses_Select(Nullable<int> iD, Nullable<int> customerID, Nullable<byte> addressTypeID, string address)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var addressTypeIDParameter = addressTypeID.HasValue ?
                new ObjectParameter("AddressTypeID", addressTypeID) :
                new ObjectParameter("AddressTypeID", typeof(byte));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Addresses_Select_Result>("sp_Addresses_Select", iDParameter, customerIDParameter, addressTypeIDParameter, addressParameter);
        }
    
        public virtual int sp_ArchiveTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ArchiveTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_ArchiveTypes_Insert(string name, string dsc, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ArchiveTypes_Insert", nameParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_ArchiveTypes_Select_Result> sp_ArchiveTypes_Select(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ArchiveTypes_Select_Result>("sp_ArchiveTypes_Select", nameParameter);
        }
    
        public virtual int sp_ArchiveTypes_Update(Nullable<int> iD, string name, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ArchiveTypes_Update", iDParameter, nameParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_Assistants_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Assistants_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Assistants_Insert(Nullable<int> departmentID, Nullable<int> assistantTypeID, Nullable<int> doctorID, Nullable<int> iD, string name, Nullable<double> darsad, Nullable<int> tafzilID, Nullable<System.DateTime> birthDay, Nullable<byte> sexTypeID, string meli, Nullable<int> soldieingTypeID, string general, string mobile, string webSite, string email, string homeAddress, string dsc, Nullable<bool> active, Nullable<int> imageID, Nullable<bool> del, Nullable<bool> @lock, Nullable<int> userid)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var assistantTypeIDParameter = assistantTypeID.HasValue ?
                new ObjectParameter("AssistantTypeID", assistantTypeID) :
                new ObjectParameter("AssistantTypeID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var darsadParameter = darsad.HasValue ?
                new ObjectParameter("Darsad", darsad) :
                new ObjectParameter("Darsad", typeof(double));
    
            var tafzilIDParameter = tafzilID.HasValue ?
                new ObjectParameter("TafzilID", tafzilID) :
                new ObjectParameter("TafzilID", typeof(int));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("BirthDay", birthDay) :
                new ObjectParameter("BirthDay", typeof(System.DateTime));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var meliParameter = meli != null ?
                new ObjectParameter("Meli", meli) :
                new ObjectParameter("Meli", typeof(string));
    
            var soldieingTypeIDParameter = soldieingTypeID.HasValue ?
                new ObjectParameter("SoldieingTypeID", soldieingTypeID) :
                new ObjectParameter("SoldieingTypeID", typeof(int));
    
            var generalParameter = general != null ?
                new ObjectParameter("General", general) :
                new ObjectParameter("General", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var webSiteParameter = webSite != null ?
                new ObjectParameter("WebSite", webSite) :
                new ObjectParameter("WebSite", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var homeAddressParameter = homeAddress != null ?
                new ObjectParameter("HomeAddress", homeAddress) :
                new ObjectParameter("HomeAddress", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(int));
    
            var delParameter = del.HasValue ?
                new ObjectParameter("Del", del) :
                new ObjectParameter("Del", typeof(bool));
    
            var lockParameter = @lock.HasValue ?
                new ObjectParameter("Lock", @lock) :
                new ObjectParameter("Lock", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Assistants_Insert", departmentIDParameter, assistantTypeIDParameter, doctorIDParameter, iDParameter, nameParameter, darsadParameter, tafzilIDParameter, birthDayParameter, sexTypeIDParameter, meliParameter, soldieingTypeIDParameter, generalParameter, mobileParameter, webSiteParameter, emailParameter, homeAddressParameter, dscParameter, activeParameter, imageIDParameter, delParameter, lockParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Assistants_Select_Result> sp_Assistants_Select(Nullable<int> departmentID, Nullable<int> assistantTypeID, Nullable<int> doctorID, Nullable<int> iD, string name, Nullable<byte> sexTypeID, Nullable<int> active)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var assistantTypeIDParameter = assistantTypeID.HasValue ?
                new ObjectParameter("AssistantTypeID", assistantTypeID) :
                new ObjectParameter("AssistantTypeID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Assistants_Select_Result>("sp_Assistants_Select", departmentIDParameter, assistantTypeIDParameter, doctorIDParameter, iDParameter, nameParameter, sexTypeIDParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_Assistants_SelectRow_Result> sp_Assistants_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Assistants_SelectRow_Result>("sp_Assistants_SelectRow", iDParameter);
        }
    
        public virtual int sp_Assistants_Update(Nullable<int> departmentID, Nullable<int> assistantTypeID, Nullable<int> doctorID, Nullable<int> iD, string name, Nullable<double> darsad, Nullable<int> tafzilID, Nullable<System.DateTime> birthDay, Nullable<byte> sexTypeID, string meli, Nullable<int> soldieingTypeID, string general, string mobile, string webSite, string email, string homeAddress, string dsc, Nullable<bool> active, Nullable<int> imageID, Nullable<bool> del, Nullable<bool> @lock, Nullable<int> userid)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var assistantTypeIDParameter = assistantTypeID.HasValue ?
                new ObjectParameter("AssistantTypeID", assistantTypeID) :
                new ObjectParameter("AssistantTypeID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var darsadParameter = darsad.HasValue ?
                new ObjectParameter("Darsad", darsad) :
                new ObjectParameter("Darsad", typeof(double));
    
            var tafzilIDParameter = tafzilID.HasValue ?
                new ObjectParameter("TafzilID", tafzilID) :
                new ObjectParameter("TafzilID", typeof(int));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("BirthDay", birthDay) :
                new ObjectParameter("BirthDay", typeof(System.DateTime));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var meliParameter = meli != null ?
                new ObjectParameter("Meli", meli) :
                new ObjectParameter("Meli", typeof(string));
    
            var soldieingTypeIDParameter = soldieingTypeID.HasValue ?
                new ObjectParameter("SoldieingTypeID", soldieingTypeID) :
                new ObjectParameter("SoldieingTypeID", typeof(int));
    
            var generalParameter = general != null ?
                new ObjectParameter("General", general) :
                new ObjectParameter("General", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var webSiteParameter = webSite != null ?
                new ObjectParameter("WebSite", webSite) :
                new ObjectParameter("WebSite", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var homeAddressParameter = homeAddress != null ?
                new ObjectParameter("HomeAddress", homeAddress) :
                new ObjectParameter("HomeAddress", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(int));
    
            var delParameter = del.HasValue ?
                new ObjectParameter("Del", del) :
                new ObjectParameter("Del", typeof(bool));
    
            var lockParameter = @lock.HasValue ?
                new ObjectParameter("Lock", @lock) :
                new ObjectParameter("Lock", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Assistants_Update", departmentIDParameter, assistantTypeIDParameter, doctorIDParameter, iDParameter, nameParameter, darsadParameter, tafzilIDParameter, birthDayParameter, sexTypeIDParameter, meliParameter, soldieingTypeIDParameter, generalParameter, mobileParameter, webSiteParameter, emailParameter, homeAddressParameter, dscParameter, activeParameter, imageIDParameter, delParameter, lockParameter, useridParameter);
        }
    
        public virtual int sp_AssistantTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AssistantTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_AssistantTypes_Insert(Nullable<int> departmentID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AssistantTypes_Insert", departmentIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_AssistantTypes_Select_Result> sp_AssistantTypes_Select(Nullable<int> departmentID, string name, Nullable<int> active)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AssistantTypes_Select_Result>("sp_AssistantTypes_Select", departmentIDParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_AssistantTypes_Update(Nullable<int> departmentID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AssistantTypes_Update", departmentIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Attendance_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Attendance_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Attendance_Insert(Nullable<short> attendanceTypeID, string dsc, Nullable<System.DateTime> registerDate, Nullable<System.DateTime> registerTime, Nullable<int> customerID, string rFID, Nullable<byte> shiftID, Nullable<bool> alarm, Nullable<short> alarmTask, Nullable<System.DateTime> alarmDate, string alarmFile, Nullable<byte> alarmMode, Nullable<bool> sendSMS, string sMSNumber, string sMSMessage, Nullable<int> userid)
        {
            var attendanceTypeIDParameter = attendanceTypeID.HasValue ?
                new ObjectParameter("AttendanceTypeID", attendanceTypeID) :
                new ObjectParameter("AttendanceTypeID", typeof(short));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var registerTimeParameter = registerTime.HasValue ?
                new ObjectParameter("RegisterTime", registerTime) :
                new ObjectParameter("RegisterTime", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var rFIDParameter = rFID != null ?
                new ObjectParameter("RFID", rFID) :
                new ObjectParameter("RFID", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(byte));
    
            var alarmParameter = alarm.HasValue ?
                new ObjectParameter("Alarm", alarm) :
                new ObjectParameter("Alarm", typeof(bool));
    
            var alarmTaskParameter = alarmTask.HasValue ?
                new ObjectParameter("AlarmTask", alarmTask) :
                new ObjectParameter("AlarmTask", typeof(short));
    
            var alarmDateParameter = alarmDate.HasValue ?
                new ObjectParameter("AlarmDate", alarmDate) :
                new ObjectParameter("AlarmDate", typeof(System.DateTime));
    
            var alarmFileParameter = alarmFile != null ?
                new ObjectParameter("AlarmFile", alarmFile) :
                new ObjectParameter("AlarmFile", typeof(string));
    
            var alarmModeParameter = alarmMode.HasValue ?
                new ObjectParameter("AlarmMode", alarmMode) :
                new ObjectParameter("AlarmMode", typeof(byte));
    
            var sendSMSParameter = sendSMS.HasValue ?
                new ObjectParameter("SendSMS", sendSMS) :
                new ObjectParameter("SendSMS", typeof(bool));
    
            var sMSNumberParameter = sMSNumber != null ?
                new ObjectParameter("SMSNumber", sMSNumber) :
                new ObjectParameter("SMSNumber", typeof(string));
    
            var sMSMessageParameter = sMSMessage != null ?
                new ObjectParameter("SMSMessage", sMSMessage) :
                new ObjectParameter("SMSMessage", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Attendance_Insert", attendanceTypeIDParameter, dscParameter, registerDateParameter, registerTimeParameter, customerIDParameter, rFIDParameter, shiftIDParameter, alarmParameter, alarmTaskParameter, alarmDateParameter, alarmFileParameter, alarmModeParameter, sendSMSParameter, sMSNumberParameter, sMSMessageParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Attendance_Select_Result> sp_Attendance_Select(Nullable<short> attendanceTypeID, string registerDate_Start, string registerDate_End, string registerTime_Start, string registerTime_End, Nullable<int> customerID, Nullable<byte> shiftID, string dsc, Nullable<int> userid)
        {
            var attendanceTypeIDParameter = attendanceTypeID.HasValue ?
                new ObjectParameter("AttendanceTypeID", attendanceTypeID) :
                new ObjectParameter("AttendanceTypeID", typeof(short));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var registerTime_StartParameter = registerTime_Start != null ?
                new ObjectParameter("RegisterTime_Start", registerTime_Start) :
                new ObjectParameter("RegisterTime_Start", typeof(string));
    
            var registerTime_EndParameter = registerTime_End != null ?
                new ObjectParameter("RegisterTime_End", registerTime_End) :
                new ObjectParameter("RegisterTime_End", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(byte));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Attendance_Select_Result>("sp_Attendance_Select", attendanceTypeIDParameter, registerDate_StartParameter, registerDate_EndParameter, registerTime_StartParameter, registerTime_EndParameter, customerIDParameter, shiftIDParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Attendance_SelectRow_Result> sp_Attendance_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Attendance_SelectRow_Result>("sp_Attendance_SelectRow", iDParameter);
        }
    
        public virtual ObjectResult<sp_Attendance_SelectRowRFID_Result> sp_Attendance_SelectRowRFID(string rFID, string registerDate, Nullable<short> attendanceTypeID)
        {
            var rFIDParameter = rFID != null ?
                new ObjectParameter("RFID", rFID) :
                new ObjectParameter("RFID", typeof(string));
    
            var registerDateParameter = registerDate != null ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(string));
    
            var attendanceTypeIDParameter = attendanceTypeID.HasValue ?
                new ObjectParameter("AttendanceTypeID", attendanceTypeID) :
                new ObjectParameter("AttendanceTypeID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Attendance_SelectRowRFID_Result>("sp_Attendance_SelectRowRFID", rFIDParameter, registerDateParameter, attendanceTypeIDParameter);
        }
    
        public virtual int sp_Attendance_Update(Nullable<int> iD, Nullable<short> attendanceTypeID, string dsc, Nullable<System.DateTime> registerDate, Nullable<System.DateTime> registerTime, Nullable<int> customerID, string rFID, Nullable<byte> shiftID, Nullable<bool> alarm, Nullable<short> alarmTask, Nullable<System.DateTime> alarmDate, string alarmFile, Nullable<byte> alarmMode, Nullable<bool> sendSMS, string sMSNumber, string sMSMessage, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var attendanceTypeIDParameter = attendanceTypeID.HasValue ?
                new ObjectParameter("AttendanceTypeID", attendanceTypeID) :
                new ObjectParameter("AttendanceTypeID", typeof(short));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var registerTimeParameter = registerTime.HasValue ?
                new ObjectParameter("RegisterTime", registerTime) :
                new ObjectParameter("RegisterTime", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var rFIDParameter = rFID != null ?
                new ObjectParameter("RFID", rFID) :
                new ObjectParameter("RFID", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(byte));
    
            var alarmParameter = alarm.HasValue ?
                new ObjectParameter("Alarm", alarm) :
                new ObjectParameter("Alarm", typeof(bool));
    
            var alarmTaskParameter = alarmTask.HasValue ?
                new ObjectParameter("AlarmTask", alarmTask) :
                new ObjectParameter("AlarmTask", typeof(short));
    
            var alarmDateParameter = alarmDate.HasValue ?
                new ObjectParameter("AlarmDate", alarmDate) :
                new ObjectParameter("AlarmDate", typeof(System.DateTime));
    
            var alarmFileParameter = alarmFile != null ?
                new ObjectParameter("AlarmFile", alarmFile) :
                new ObjectParameter("AlarmFile", typeof(string));
    
            var alarmModeParameter = alarmMode.HasValue ?
                new ObjectParameter("AlarmMode", alarmMode) :
                new ObjectParameter("AlarmMode", typeof(byte));
    
            var sendSMSParameter = sendSMS.HasValue ?
                new ObjectParameter("SendSMS", sendSMS) :
                new ObjectParameter("SendSMS", typeof(bool));
    
            var sMSNumberParameter = sMSNumber != null ?
                new ObjectParameter("SMSNumber", sMSNumber) :
                new ObjectParameter("SMSNumber", typeof(string));
    
            var sMSMessageParameter = sMSMessage != null ?
                new ObjectParameter("SMSMessage", sMSMessage) :
                new ObjectParameter("SMSMessage", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Attendance_Update", iDParameter, attendanceTypeIDParameter, dscParameter, registerDateParameter, registerTimeParameter, customerIDParameter, rFIDParameter, shiftIDParameter, alarmParameter, alarmTaskParameter, alarmDateParameter, alarmFileParameter, alarmModeParameter, sendSMSParameter, sMSNumberParameter, sMSMessageParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Attendance1_Select_Result> sp_Attendance1_Select(Nullable<short> attendanceTypeID, string registerDate_Start, string registerDate_End, string registerTime_Start, string registerTime_End, Nullable<int> customerID, Nullable<byte> shiftID, string dsc, Nullable<int> userid)
        {
            var attendanceTypeIDParameter = attendanceTypeID.HasValue ?
                new ObjectParameter("AttendanceTypeID", attendanceTypeID) :
                new ObjectParameter("AttendanceTypeID", typeof(short));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var registerTime_StartParameter = registerTime_Start != null ?
                new ObjectParameter("RegisterTime_Start", registerTime_Start) :
                new ObjectParameter("RegisterTime_Start", typeof(string));
    
            var registerTime_EndParameter = registerTime_End != null ?
                new ObjectParameter("RegisterTime_End", registerTime_End) :
                new ObjectParameter("RegisterTime_End", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(byte));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Attendance1_Select_Result>("sp_Attendance1_Select", attendanceTypeIDParameter, registerDate_StartParameter, registerDate_EndParameter, registerTime_StartParameter, registerTime_EndParameter, customerIDParameter, shiftIDParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Attendance2_Select_Result> sp_Attendance2_Select(Nullable<short> attendanceTypeID, string registerDate_Start, string registerDate_End, string registerTime_Start, string registerTime_End, Nullable<int> customerID, Nullable<byte> shiftID, string dsc, Nullable<int> userid)
        {
            var attendanceTypeIDParameter = attendanceTypeID.HasValue ?
                new ObjectParameter("AttendanceTypeID", attendanceTypeID) :
                new ObjectParameter("AttendanceTypeID", typeof(short));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var registerTime_StartParameter = registerTime_Start != null ?
                new ObjectParameter("RegisterTime_Start", registerTime_Start) :
                new ObjectParameter("RegisterTime_Start", typeof(string));
    
            var registerTime_EndParameter = registerTime_End != null ?
                new ObjectParameter("RegisterTime_End", registerTime_End) :
                new ObjectParameter("RegisterTime_End", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(byte));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Attendance2_Select_Result>("sp_Attendance2_Select", attendanceTypeIDParameter, registerDate_StartParameter, registerDate_EndParameter, registerTime_StartParameter, registerTime_EndParameter, customerIDParameter, shiftIDParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_AttendanceTypes_Delete(Nullable<short> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AttendanceTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_AttendanceTypes_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AttendanceTypes_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_AttendanceTypes_Select_Result> sp_AttendanceTypes_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AttendanceTypes_Select_Result>("sp_AttendanceTypes_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_AttendanceTypes_SelectRow_Result> sp_AttendanceTypes_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AttendanceTypes_SelectRow_Result>("sp_AttendanceTypes_SelectRow", iDParameter);
        }
    
        public virtual int sp_AttendanceTypes_Update(Nullable<short> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AttendanceTypes_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Banks_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Banks_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Banks_Insert(Nullable<int> iD, Nullable<byte> bankTypeID, string bankName, string bankBranch, string accountNumber, string accountType, Nullable<double> balance, string tel, string fax, string dsc, Nullable<int> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var bankTypeIDParameter = bankTypeID.HasValue ?
                new ObjectParameter("BankTypeID", bankTypeID) :
                new ObjectParameter("BankTypeID", typeof(byte));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var bankBranchParameter = bankBranch != null ?
                new ObjectParameter("BankBranch", bankBranch) :
                new ObjectParameter("BankBranch", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(double));
    
            var telParameter = tel != null ?
                new ObjectParameter("Tel", tel) :
                new ObjectParameter("Tel", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Banks_Insert", iDParameter, bankTypeIDParameter, bankNameParameter, bankBranchParameter, accountNumberParameter, accountTypeParameter, balanceParameter, telParameter, faxParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Banks_Select_Result> sp_Banks_Select(Nullable<short> bankTypeID, string bankName, string bankBranch, string accountNumber, string accountType, Nullable<int> active)
        {
            var bankTypeIDParameter = bankTypeID.HasValue ?
                new ObjectParameter("BankTypeID", bankTypeID) :
                new ObjectParameter("BankTypeID", typeof(short));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var bankBranchParameter = bankBranch != null ?
                new ObjectParameter("BankBranch", bankBranch) :
                new ObjectParameter("BankBranch", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Banks_Select_Result>("sp_Banks_Select", bankTypeIDParameter, bankNameParameter, bankBranchParameter, accountNumberParameter, accountTypeParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_Banks_SelectRow_Result> sp_Banks_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Banks_SelectRow_Result>("sp_Banks_SelectRow", iDParameter);
        }
    
        public virtual int sp_Banks_Update(Nullable<int> iD, Nullable<byte> bankTypeID, string bankName, string bankBranch, string accountNumber, string accountType, Nullable<double> balance, string tel, string fax, string dsc, Nullable<int> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var bankTypeIDParameter = bankTypeID.HasValue ?
                new ObjectParameter("BankTypeID", bankTypeID) :
                new ObjectParameter("BankTypeID", typeof(byte));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var bankBranchParameter = bankBranch != null ?
                new ObjectParameter("BankBranch", bankBranch) :
                new ObjectParameter("BankBranch", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(double));
    
            var telParameter = tel != null ?
                new ObjectParameter("Tel", tel) :
                new ObjectParameter("Tel", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Banks_Update", iDParameter, bankTypeIDParameter, bankNameParameter, bankBranchParameter, accountNumberParameter, accountTypeParameter, balanceParameter, telParameter, faxParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_BankTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BankTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_BankTypes_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BankTypes_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_BankTypes_Select_Result> sp_BankTypes_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BankTypes_Select_Result>("sp_BankTypes_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_BankTypes_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BankTypes_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Beds_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Beds_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Beds_Insert(Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Beds_Insert", departmentIDParameter, roomIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Beds_Select_Result> sp_Beds_Select(Nullable<int> departmentID, Nullable<int> roomID, string name, Nullable<int> active)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Beds_Select_Result>("sp_Beds_Select", departmentIDParameter, roomIDParameter, nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_Beds_SelectRow_Result> sp_Beds_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Beds_SelectRow_Result>("sp_Beds_SelectRow", iDParameter);
        }
    
        public virtual int sp_Beds_Update(Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Beds_Update", departmentIDParameter, roomIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Bodies_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Bodies_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Bodies_Insert(Nullable<short> bodyTypeID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var bodyTypeIDParameter = bodyTypeID.HasValue ?
                new ObjectParameter("BodyTypeID", bodyTypeID) :
                new ObjectParameter("BodyTypeID", typeof(short));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Bodies_Insert", bodyTypeIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Bodies_Select_Result> sp_Bodies_Select(Nullable<short> bodyTypeID, string name, Nullable<int> active)
        {
            var bodyTypeIDParameter = bodyTypeID.HasValue ?
                new ObjectParameter("BodyTypeID", bodyTypeID) :
                new ObjectParameter("BodyTypeID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Bodies_Select_Result>("sp_Bodies_Select", bodyTypeIDParameter, nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_Bodies_SelectRow_Result> sp_Bodies_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Bodies_SelectRow_Result>("sp_Bodies_SelectRow", iDParameter);
        }
    
        public virtual int sp_Bodies_Update(Nullable<short> bodyTypeID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var bodyTypeIDParameter = bodyTypeID.HasValue ?
                new ObjectParameter("BodyTypeID", bodyTypeID) :
                new ObjectParameter("BodyTypeID", typeof(short));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Bodies_Update", bodyTypeIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_BodyTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BodyTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_BodyTypes_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BodyTypes_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_BodyTypes_Select_Result> sp_BodyTypes_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BodyTypes_Select_Result>("sp_BodyTypes_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_BodyTypes_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BodyTypes_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Calls_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Calls_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Calls_DeleteAll(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Calls_DeleteAll", useridParameter);
        }
    
        public virtual int sp_Calls_Insert(string telNumber, Nullable<byte> channel, string computerName, Nullable<int> userid)
        {
            var telNumberParameter = telNumber != null ?
                new ObjectParameter("TelNumber", telNumber) :
                new ObjectParameter("TelNumber", typeof(string));
    
            var channelParameter = channel.HasValue ?
                new ObjectParameter("Channel", channel) :
                new ObjectParameter("Channel", typeof(byte));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Calls_Insert", telNumberParameter, channelParameter, computerNameParameter, useridParameter);
        }
    
        public virtual ObjectResult<SP_Calls_Select_Result> SP_Calls_Select(Nullable<int> customerID, string telNumber, Nullable<byte> channel, string callDate_start, string callDate_end, string callTime_start, string callTime_end, string station, Nullable<int> userid, Nullable<int> topRange)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var telNumberParameter = telNumber != null ?
                new ObjectParameter("TelNumber", telNumber) :
                new ObjectParameter("TelNumber", typeof(string));
    
            var channelParameter = channel.HasValue ?
                new ObjectParameter("Channel", channel) :
                new ObjectParameter("Channel", typeof(byte));
    
            var callDate_startParameter = callDate_start != null ?
                new ObjectParameter("CallDate_start", callDate_start) :
                new ObjectParameter("CallDate_start", typeof(string));
    
            var callDate_endParameter = callDate_end != null ?
                new ObjectParameter("CallDate_end", callDate_end) :
                new ObjectParameter("CallDate_end", typeof(string));
    
            var callTime_startParameter = callTime_start != null ?
                new ObjectParameter("CallTime_start", callTime_start) :
                new ObjectParameter("CallTime_start", typeof(string));
    
            var callTime_endParameter = callTime_end != null ?
                new ObjectParameter("CallTime_end", callTime_end) :
                new ObjectParameter("CallTime_end", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Calls_Select_Result>("SP_Calls_Select", customerIDParameter, telNumberParameter, channelParameter, callDate_startParameter, callDate_endParameter, callTime_startParameter, callTime_endParameter, stationParameter, useridParameter, topRangeParameter);
        }
    
        public virtual int sp_Cars_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cars_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Cars_Insert(Nullable<int> iD, Nullable<int> driverID, string name, string carClass, string color, string model, string plak, string bimeh, string landLord, string country, Nullable<int> imageID1, Nullable<int> imageID2, Nullable<int> imageID3, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var carClassParameter = carClass != null ?
                new ObjectParameter("CarClass", carClass) :
                new ObjectParameter("CarClass", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var plakParameter = plak != null ?
                new ObjectParameter("Plak", plak) :
                new ObjectParameter("Plak", typeof(string));
    
            var bimehParameter = bimeh != null ?
                new ObjectParameter("Bimeh", bimeh) :
                new ObjectParameter("Bimeh", typeof(string));
    
            var landLordParameter = landLord != null ?
                new ObjectParameter("LandLord", landLord) :
                new ObjectParameter("LandLord", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var imageID1Parameter = imageID1.HasValue ?
                new ObjectParameter("ImageID1", imageID1) :
                new ObjectParameter("ImageID1", typeof(int));
    
            var imageID2Parameter = imageID2.HasValue ?
                new ObjectParameter("ImageID2", imageID2) :
                new ObjectParameter("ImageID2", typeof(int));
    
            var imageID3Parameter = imageID3.HasValue ?
                new ObjectParameter("ImageID3", imageID3) :
                new ObjectParameter("ImageID3", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cars_Insert", iDParameter, driverIDParameter, nameParameter, carClassParameter, colorParameter, modelParameter, plakParameter, bimehParameter, landLordParameter, countryParameter, imageID1Parameter, imageID2Parameter, imageID3Parameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Cars_Select_Result> sp_Cars_Select(Nullable<int> driverID, string name, string color, string plak, string carClass)
        {
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var plakParameter = plak != null ?
                new ObjectParameter("Plak", plak) :
                new ObjectParameter("Plak", typeof(string));
    
            var carClassParameter = carClass != null ?
                new ObjectParameter("CarClass", carClass) :
                new ObjectParameter("CarClass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Cars_Select_Result>("sp_Cars_Select", driverIDParameter, nameParameter, colorParameter, plakParameter, carClassParameter);
        }
    
        public virtual ObjectResult<sp_Cars_SelectRow_Result> sp_Cars_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Cars_SelectRow_Result>("sp_Cars_SelectRow", iDParameter);
        }
    
        public virtual int sp_Cars_Update(Nullable<int> iD, Nullable<int> driverID, string name, string carClass, string color, string model, string plak, string bimeh, string landLord, string country, Nullable<int> imageID1, Nullable<int> imageID2, Nullable<int> imageID3, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var carClassParameter = carClass != null ?
                new ObjectParameter("CarClass", carClass) :
                new ObjectParameter("CarClass", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var plakParameter = plak != null ?
                new ObjectParameter("Plak", plak) :
                new ObjectParameter("Plak", typeof(string));
    
            var bimehParameter = bimeh != null ?
                new ObjectParameter("Bimeh", bimeh) :
                new ObjectParameter("Bimeh", typeof(string));
    
            var landLordParameter = landLord != null ?
                new ObjectParameter("LandLord", landLord) :
                new ObjectParameter("LandLord", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var imageID1Parameter = imageID1.HasValue ?
                new ObjectParameter("ImageID1", imageID1) :
                new ObjectParameter("ImageID1", typeof(int));
    
            var imageID2Parameter = imageID2.HasValue ?
                new ObjectParameter("ImageID2", imageID2) :
                new ObjectParameter("ImageID2", typeof(int));
    
            var imageID3Parameter = imageID3.HasValue ?
                new ObjectParameter("ImageID3", imageID3) :
                new ObjectParameter("ImageID3", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cars_Update", iDParameter, driverIDParameter, nameParameter, carClassParameter, colorParameter, modelParameter, plakParameter, bimehParameter, landLordParameter, countryParameter, imageID1Parameter, imageID2Parameter, imageID3Parameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_Cashes_Delete(Nullable<short> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cashes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Cashes_Insert(Nullable<short> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cashes_Insert", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Cashes_Select_Result> sp_Cashes_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Cashes_Select_Result>("sp_Cashes_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_Cashes_SelectRow_Result> sp_Cashes_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Cashes_SelectRow_Result>("sp_Cashes_SelectRow", iDParameter);
        }
    
        public virtual int sp_Cashes_Update(Nullable<short> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cashes_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_CashReport_Select_Result> sp_CashReport_Select(Nullable<short> cashID, string moein_date_Start, string moein_date_End, string moein_Time_Start, string moein_Time_End, Nullable<int> rolid, Nullable<int> userid)
        {
            var cashIDParameter = cashID.HasValue ?
                new ObjectParameter("CashID", cashID) :
                new ObjectParameter("CashID", typeof(short));
    
            var moein_date_StartParameter = moein_date_Start != null ?
                new ObjectParameter("Moein_date_Start", moein_date_Start) :
                new ObjectParameter("Moein_date_Start", typeof(string));
    
            var moein_date_EndParameter = moein_date_End != null ?
                new ObjectParameter("Moein_date_End", moein_date_End) :
                new ObjectParameter("Moein_date_End", typeof(string));
    
            var moein_Time_StartParameter = moein_Time_Start != null ?
                new ObjectParameter("Moein_Time_Start", moein_Time_Start) :
                new ObjectParameter("Moein_Time_Start", typeof(string));
    
            var moein_Time_EndParameter = moein_Time_End != null ?
                new ObjectParameter("Moein_Time_End", moein_Time_End) :
                new ObjectParameter("Moein_Time_End", typeof(string));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CashReport_Select_Result>("sp_CashReport_Select", cashIDParameter, moein_date_StartParameter, moein_date_EndParameter, moein_Time_StartParameter, moein_Time_EndParameter, rolidParameter, useridParameter);
        }
    
        public virtual int sp_Centrals_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Centrals_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Centrals_Insert(Nullable<int> iD, string name, byte[] logo, string dsc1, string dsc2, string dsc3, string dsc4, string dayMessage, string tel, string address, string manager, string currency1, string currency2, string currencyEndChar, string serverName, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(byte[]));
    
            var dsc1Parameter = dsc1 != null ?
                new ObjectParameter("Dsc1", dsc1) :
                new ObjectParameter("Dsc1", typeof(string));
    
            var dsc2Parameter = dsc2 != null ?
                new ObjectParameter("Dsc2", dsc2) :
                new ObjectParameter("Dsc2", typeof(string));
    
            var dsc3Parameter = dsc3 != null ?
                new ObjectParameter("Dsc3", dsc3) :
                new ObjectParameter("Dsc3", typeof(string));
    
            var dsc4Parameter = dsc4 != null ?
                new ObjectParameter("Dsc4", dsc4) :
                new ObjectParameter("Dsc4", typeof(string));
    
            var dayMessageParameter = dayMessage != null ?
                new ObjectParameter("DayMessage", dayMessage) :
                new ObjectParameter("DayMessage", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("Tel", tel) :
                new ObjectParameter("Tel", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var managerParameter = manager != null ?
                new ObjectParameter("Manager", manager) :
                new ObjectParameter("Manager", typeof(string));
    
            var currency1Parameter = currency1 != null ?
                new ObjectParameter("Currency1", currency1) :
                new ObjectParameter("Currency1", typeof(string));
    
            var currency2Parameter = currency2 != null ?
                new ObjectParameter("Currency2", currency2) :
                new ObjectParameter("Currency2", typeof(string));
    
            var currencyEndCharParameter = currencyEndChar != null ?
                new ObjectParameter("CurrencyEndChar", currencyEndChar) :
                new ObjectParameter("CurrencyEndChar", typeof(string));
    
            var serverNameParameter = serverName != null ?
                new ObjectParameter("ServerName", serverName) :
                new ObjectParameter("ServerName", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Centrals_Insert", iDParameter, nameParameter, logoParameter, dsc1Parameter, dsc2Parameter, dsc3Parameter, dsc4Parameter, dayMessageParameter, telParameter, addressParameter, managerParameter, currency1Parameter, currency2Parameter, currencyEndCharParameter, serverNameParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Centrals_Select_Result> sp_Centrals_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Centrals_Select_Result>("sp_Centrals_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_Centrals_SelectRow_Result> sp_Centrals_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Centrals_SelectRow_Result>("sp_Centrals_SelectRow", iDParameter);
        }
    
        public virtual int sp_Centrals_Update(Nullable<int> iD, string name, byte[] logo, string dsc1, string dsc2, string dsc3, string dsc4, string dayMessage, string tel, string address, string manager, string currency1, string currency2, string currencyEndChar, string serverName, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(byte[]));
    
            var dsc1Parameter = dsc1 != null ?
                new ObjectParameter("Dsc1", dsc1) :
                new ObjectParameter("Dsc1", typeof(string));
    
            var dsc2Parameter = dsc2 != null ?
                new ObjectParameter("Dsc2", dsc2) :
                new ObjectParameter("Dsc2", typeof(string));
    
            var dsc3Parameter = dsc3 != null ?
                new ObjectParameter("Dsc3", dsc3) :
                new ObjectParameter("Dsc3", typeof(string));
    
            var dsc4Parameter = dsc4 != null ?
                new ObjectParameter("Dsc4", dsc4) :
                new ObjectParameter("Dsc4", typeof(string));
    
            var dayMessageParameter = dayMessage != null ?
                new ObjectParameter("DayMessage", dayMessage) :
                new ObjectParameter("DayMessage", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("Tel", tel) :
                new ObjectParameter("Tel", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var managerParameter = manager != null ?
                new ObjectParameter("Manager", manager) :
                new ObjectParameter("Manager", typeof(string));
    
            var currency1Parameter = currency1 != null ?
                new ObjectParameter("Currency1", currency1) :
                new ObjectParameter("Currency1", typeof(string));
    
            var currency2Parameter = currency2 != null ?
                new ObjectParameter("Currency2", currency2) :
                new ObjectParameter("Currency2", typeof(string));
    
            var currencyEndCharParameter = currencyEndChar != null ?
                new ObjectParameter("CurrencyEndChar", currencyEndChar) :
                new ObjectParameter("CurrencyEndChar", typeof(string));
    
            var serverNameParameter = serverName != null ?
                new ObjectParameter("ServerName", serverName) :
                new ObjectParameter("ServerName", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Centrals_Update", iDParameter, nameParameter, logoParameter, dsc1Parameter, dsc2Parameter, dsc3Parameter, dsc4Parameter, dayMessageParameter, telParameter, addressParameter, managerParameter, currency1Parameter, currency2Parameter, currencyEndCharParameter, serverNameParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Cheque_payment_Archive(Nullable<int> iD, Nullable<byte> archiveStateID, string archiveDsc, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var archiveStateIDParameter = archiveStateID.HasValue ?
                new ObjectParameter("ArchiveStateID", archiveStateID) :
                new ObjectParameter("ArchiveStateID", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cheque_payment_Archive", iDParameter, archiveStateIDParameter, archiveDscParameter, userIDParameter);
        }
    
        public virtual int sp_Cheque_payment_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cheque_payment_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Cheque_payment_DeleteAll(Nullable<byte> chequeStateID, Nullable<int> bankID, Nullable<short> chequeBookTypeID, Nullable<short> chequeBookID, string chequeNumber, Nullable<double> chequeAmount_start, Nullable<double> chequeAmount_end, string receiver, Nullable<int> customerID, string dsc, string chequeDate_start, string chequeDate_End, string create_date_start, string create_date_end, string payment_date_start, string payment_date_end, Nullable<byte> archive, Nullable<byte> archiveStateID, string archiveDate_Start, string archiveDate_End, Nullable<int> archiveUserID, string archiveDsc, Nullable<int> userid, Nullable<int> topRange, Nullable<int> delUserid)
        {
            var chequeStateIDParameter = chequeStateID.HasValue ?
                new ObjectParameter("ChequeStateID", chequeStateID) :
                new ObjectParameter("ChequeStateID", typeof(byte));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var chequeBookTypeIDParameter = chequeBookTypeID.HasValue ?
                new ObjectParameter("ChequeBookTypeID", chequeBookTypeID) :
                new ObjectParameter("ChequeBookTypeID", typeof(short));
    
            var chequeBookIDParameter = chequeBookID.HasValue ?
                new ObjectParameter("ChequeBookID", chequeBookID) :
                new ObjectParameter("ChequeBookID", typeof(short));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var chequeAmount_startParameter = chequeAmount_start.HasValue ?
                new ObjectParameter("ChequeAmount_start", chequeAmount_start) :
                new ObjectParameter("ChequeAmount_start", typeof(double));
    
            var chequeAmount_endParameter = chequeAmount_end.HasValue ?
                new ObjectParameter("ChequeAmount_end", chequeAmount_end) :
                new ObjectParameter("ChequeAmount_end", typeof(double));
    
            var receiverParameter = receiver != null ?
                new ObjectParameter("Receiver", receiver) :
                new ObjectParameter("Receiver", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var chequeDate_startParameter = chequeDate_start != null ?
                new ObjectParameter("ChequeDate_start", chequeDate_start) :
                new ObjectParameter("ChequeDate_start", typeof(string));
    
            var chequeDate_EndParameter = chequeDate_End != null ?
                new ObjectParameter("ChequeDate_End", chequeDate_End) :
                new ObjectParameter("ChequeDate_End", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var payment_date_startParameter = payment_date_start != null ?
                new ObjectParameter("payment_date_start", payment_date_start) :
                new ObjectParameter("payment_date_start", typeof(string));
    
            var payment_date_endParameter = payment_date_end != null ?
                new ObjectParameter("payment_date_end", payment_date_end) :
                new ObjectParameter("payment_date_end", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveStateIDParameter = archiveStateID.HasValue ?
                new ObjectParameter("ArchiveStateID", archiveStateID) :
                new ObjectParameter("ArchiveStateID", typeof(byte));
    
            var archiveDate_StartParameter = archiveDate_Start != null ?
                new ObjectParameter("ArchiveDate_Start", archiveDate_Start) :
                new ObjectParameter("ArchiveDate_Start", typeof(string));
    
            var archiveDate_EndParameter = archiveDate_End != null ?
                new ObjectParameter("ArchiveDate_End", archiveDate_End) :
                new ObjectParameter("ArchiveDate_End", typeof(string));
    
            var archiveUserIDParameter = archiveUserID.HasValue ?
                new ObjectParameter("ArchiveUserID", archiveUserID) :
                new ObjectParameter("ArchiveUserID", typeof(int));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            var delUseridParameter = delUserid.HasValue ?
                new ObjectParameter("DelUserid", delUserid) :
                new ObjectParameter("DelUserid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cheque_payment_DeleteAll", chequeStateIDParameter, bankIDParameter, chequeBookTypeIDParameter, chequeBookIDParameter, chequeNumberParameter, chequeAmount_startParameter, chequeAmount_endParameter, receiverParameter, customerIDParameter, dscParameter, chequeDate_startParameter, chequeDate_EndParameter, create_date_startParameter, create_date_endParameter, payment_date_startParameter, payment_date_endParameter, archiveParameter, archiveStateIDParameter, archiveDate_StartParameter, archiveDate_EndParameter, archiveUserIDParameter, archiveDscParameter, useridParameter, topRangeParameter, delUseridParameter);
        }
    
        public virtual int sp_Cheque_payment_Insert(Nullable<int> iD, Nullable<int> bankID, Nullable<short> chequeBookTypeID, Nullable<short> chequeBookID, Nullable<System.DateTime> chequeDate, Nullable<System.DateTime> paymentDate, string chequeNumber, Nullable<double> chequeAmount, Nullable<int> customerID, Nullable<byte> chequeStateID, string receiver, string dsc, Nullable<bool> en, Nullable<int> noteID, Nullable<int> imageID1, Nullable<int> imageID2, Nullable<int> imageID3, Nullable<int> imageID4, Nullable<int> rolID, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var chequeBookTypeIDParameter = chequeBookTypeID.HasValue ?
                new ObjectParameter("ChequeBookTypeID", chequeBookTypeID) :
                new ObjectParameter("ChequeBookTypeID", typeof(short));
    
            var chequeBookIDParameter = chequeBookID.HasValue ?
                new ObjectParameter("ChequeBookID", chequeBookID) :
                new ObjectParameter("ChequeBookID", typeof(short));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var chequeAmountParameter = chequeAmount.HasValue ?
                new ObjectParameter("ChequeAmount", chequeAmount) :
                new ObjectParameter("ChequeAmount", typeof(double));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var chequeStateIDParameter = chequeStateID.HasValue ?
                new ObjectParameter("ChequeStateID", chequeStateID) :
                new ObjectParameter("ChequeStateID", typeof(byte));
    
            var receiverParameter = receiver != null ?
                new ObjectParameter("Receiver", receiver) :
                new ObjectParameter("Receiver", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var enParameter = en.HasValue ?
                new ObjectParameter("En", en) :
                new ObjectParameter("En", typeof(bool));
    
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var imageID1Parameter = imageID1.HasValue ?
                new ObjectParameter("ImageID1", imageID1) :
                new ObjectParameter("ImageID1", typeof(int));
    
            var imageID2Parameter = imageID2.HasValue ?
                new ObjectParameter("ImageID2", imageID2) :
                new ObjectParameter("ImageID2", typeof(int));
    
            var imageID3Parameter = imageID3.HasValue ?
                new ObjectParameter("ImageID3", imageID3) :
                new ObjectParameter("ImageID3", typeof(int));
    
            var imageID4Parameter = imageID4.HasValue ?
                new ObjectParameter("ImageID4", imageID4) :
                new ObjectParameter("ImageID4", typeof(int));
    
            var rolIDParameter = rolID.HasValue ?
                new ObjectParameter("RolID", rolID) :
                new ObjectParameter("RolID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cheque_payment_Insert", iDParameter, bankIDParameter, chequeBookTypeIDParameter, chequeBookIDParameter, chequeDateParameter, paymentDateParameter, chequeNumberParameter, chequeAmountParameter, customerIDParameter, chequeStateIDParameter, receiverParameter, dscParameter, enParameter, noteIDParameter, imageID1Parameter, imageID2Parameter, imageID3Parameter, imageID4Parameter, rolIDParameter, userIDParameter);
        }
    
        public virtual int sp_Cheque_payment_Recovery(Nullable<int> iD, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cheque_payment_Recovery", iDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_Cheque_payment_Select_Result> sp_Cheque_payment_Select(Nullable<byte> chequeStateID, Nullable<int> bankID, Nullable<short> chequeBookTypeID, Nullable<short> chequeBookID, string chequeNumber, Nullable<double> chequeAmount_start, Nullable<double> chequeAmount_end, string receiver, Nullable<int> customerID, string dsc, string chequeDate_start, string chequeDate_End, string create_date_start, string create_date_end, string payment_date_start, string payment_date_end, Nullable<byte> archive, Nullable<byte> archiveStateID, string archiveDate_Start, string archiveDate_End, Nullable<int> archiveUserID, string archiveDsc, Nullable<int> userid, Nullable<int> topRange)
        {
            var chequeStateIDParameter = chequeStateID.HasValue ?
                new ObjectParameter("ChequeStateID", chequeStateID) :
                new ObjectParameter("ChequeStateID", typeof(byte));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var chequeBookTypeIDParameter = chequeBookTypeID.HasValue ?
                new ObjectParameter("ChequeBookTypeID", chequeBookTypeID) :
                new ObjectParameter("ChequeBookTypeID", typeof(short));
    
            var chequeBookIDParameter = chequeBookID.HasValue ?
                new ObjectParameter("ChequeBookID", chequeBookID) :
                new ObjectParameter("ChequeBookID", typeof(short));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var chequeAmount_startParameter = chequeAmount_start.HasValue ?
                new ObjectParameter("ChequeAmount_start", chequeAmount_start) :
                new ObjectParameter("ChequeAmount_start", typeof(double));
    
            var chequeAmount_endParameter = chequeAmount_end.HasValue ?
                new ObjectParameter("ChequeAmount_end", chequeAmount_end) :
                new ObjectParameter("ChequeAmount_end", typeof(double));
    
            var receiverParameter = receiver != null ?
                new ObjectParameter("Receiver", receiver) :
                new ObjectParameter("Receiver", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var chequeDate_startParameter = chequeDate_start != null ?
                new ObjectParameter("ChequeDate_start", chequeDate_start) :
                new ObjectParameter("ChequeDate_start", typeof(string));
    
            var chequeDate_EndParameter = chequeDate_End != null ?
                new ObjectParameter("ChequeDate_End", chequeDate_End) :
                new ObjectParameter("ChequeDate_End", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var payment_date_startParameter = payment_date_start != null ?
                new ObjectParameter("payment_date_start", payment_date_start) :
                new ObjectParameter("payment_date_start", typeof(string));
    
            var payment_date_endParameter = payment_date_end != null ?
                new ObjectParameter("payment_date_end", payment_date_end) :
                new ObjectParameter("payment_date_end", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveStateIDParameter = archiveStateID.HasValue ?
                new ObjectParameter("ArchiveStateID", archiveStateID) :
                new ObjectParameter("ArchiveStateID", typeof(byte));
    
            var archiveDate_StartParameter = archiveDate_Start != null ?
                new ObjectParameter("ArchiveDate_Start", archiveDate_Start) :
                new ObjectParameter("ArchiveDate_Start", typeof(string));
    
            var archiveDate_EndParameter = archiveDate_End != null ?
                new ObjectParameter("ArchiveDate_End", archiveDate_End) :
                new ObjectParameter("ArchiveDate_End", typeof(string));
    
            var archiveUserIDParameter = archiveUserID.HasValue ?
                new ObjectParameter("ArchiveUserID", archiveUserID) :
                new ObjectParameter("ArchiveUserID", typeof(int));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Cheque_payment_Select_Result>("sp_Cheque_payment_Select", chequeStateIDParameter, bankIDParameter, chequeBookTypeIDParameter, chequeBookIDParameter, chequeNumberParameter, chequeAmount_startParameter, chequeAmount_endParameter, receiverParameter, customerIDParameter, dscParameter, chequeDate_startParameter, chequeDate_EndParameter, create_date_startParameter, create_date_endParameter, payment_date_startParameter, payment_date_endParameter, archiveParameter, archiveStateIDParameter, archiveDate_StartParameter, archiveDate_EndParameter, archiveUserIDParameter, archiveDscParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Cheque_payment_SelectRow_Result> sp_Cheque_payment_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Cheque_payment_SelectRow_Result>("sp_Cheque_payment_SelectRow", iDParameter);
        }
    
        public virtual int sp_Cheque_payment_Update(Nullable<int> iD, Nullable<int> bankID, Nullable<short> chequeBookTypeID, Nullable<short> chequeBookID, Nullable<System.DateTime> chequeDate, Nullable<System.DateTime> paymentDate, string chequeNumber, Nullable<double> chequeAmount, Nullable<int> customerID, Nullable<byte> chequeStateID, string receiver, string dsc, Nullable<bool> en, Nullable<int> noteID, Nullable<int> imageID1, Nullable<int> imageID2, Nullable<int> imageID3, Nullable<int> imageID4, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var chequeBookTypeIDParameter = chequeBookTypeID.HasValue ?
                new ObjectParameter("ChequeBookTypeID", chequeBookTypeID) :
                new ObjectParameter("ChequeBookTypeID", typeof(short));
    
            var chequeBookIDParameter = chequeBookID.HasValue ?
                new ObjectParameter("ChequeBookID", chequeBookID) :
                new ObjectParameter("ChequeBookID", typeof(short));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var chequeAmountParameter = chequeAmount.HasValue ?
                new ObjectParameter("ChequeAmount", chequeAmount) :
                new ObjectParameter("ChequeAmount", typeof(double));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var chequeStateIDParameter = chequeStateID.HasValue ?
                new ObjectParameter("ChequeStateID", chequeStateID) :
                new ObjectParameter("ChequeStateID", typeof(byte));
    
            var receiverParameter = receiver != null ?
                new ObjectParameter("Receiver", receiver) :
                new ObjectParameter("Receiver", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var enParameter = en.HasValue ?
                new ObjectParameter("En", en) :
                new ObjectParameter("En", typeof(bool));
    
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var imageID1Parameter = imageID1.HasValue ?
                new ObjectParameter("ImageID1", imageID1) :
                new ObjectParameter("ImageID1", typeof(int));
    
            var imageID2Parameter = imageID2.HasValue ?
                new ObjectParameter("ImageID2", imageID2) :
                new ObjectParameter("ImageID2", typeof(int));
    
            var imageID3Parameter = imageID3.HasValue ?
                new ObjectParameter("ImageID3", imageID3) :
                new ObjectParameter("ImageID3", typeof(int));
    
            var imageID4Parameter = imageID4.HasValue ?
                new ObjectParameter("ImageID4", imageID4) :
                new ObjectParameter("ImageID4", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cheque_payment_Update", iDParameter, bankIDParameter, chequeBookTypeIDParameter, chequeBookIDParameter, chequeDateParameter, paymentDateParameter, chequeNumberParameter, chequeAmountParameter, customerIDParameter, chequeStateIDParameter, receiverParameter, dscParameter, enParameter, noteIDParameter, imageID1Parameter, imageID2Parameter, imageID3Parameter, imageID4Parameter, useridParameter);
        }
    
        public virtual int sp_Cheque_Received_Archive(Nullable<int> iD, Nullable<byte> archiveStateID, string archiveDsc, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var archiveStateIDParameter = archiveStateID.HasValue ?
                new ObjectParameter("ArchiveStateID", archiveStateID) :
                new ObjectParameter("ArchiveStateID", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cheque_Received_Archive", iDParameter, archiveStateIDParameter, archiveDscParameter, userIDParameter);
        }
    
        public virtual int sp_Cheque_Received_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cheque_Received_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Cheque_Received_DeleteAll(Nullable<int> chequeTypeID, Nullable<byte> chequeStateID, Nullable<int> bankID, string bankName, string bankBranch, string accountNumber, string chequeNumber, Nullable<double> chequeAmount_start, Nullable<double> chequeAmount_end, string receiver, Nullable<int> customerID, string dsc, string chequeDate_start, string chequeDate_end, string create_date_start, string create_date_end, string receive_date_start, string receive_date_end, Nullable<byte> archive, Nullable<byte> archiveStateID, string archiveDate_Start, string archiveDate_End, Nullable<int> archiveUserID, string archiveDsc, Nullable<int> userid, Nullable<int> topRange, Nullable<int> delUserid)
        {
            var chequeTypeIDParameter = chequeTypeID.HasValue ?
                new ObjectParameter("ChequeTypeID", chequeTypeID) :
                new ObjectParameter("ChequeTypeID", typeof(int));
    
            var chequeStateIDParameter = chequeStateID.HasValue ?
                new ObjectParameter("ChequeStateID", chequeStateID) :
                new ObjectParameter("ChequeStateID", typeof(byte));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var bankBranchParameter = bankBranch != null ?
                new ObjectParameter("BankBranch", bankBranch) :
                new ObjectParameter("BankBranch", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var chequeAmount_startParameter = chequeAmount_start.HasValue ?
                new ObjectParameter("ChequeAmount_start", chequeAmount_start) :
                new ObjectParameter("ChequeAmount_start", typeof(double));
    
            var chequeAmount_endParameter = chequeAmount_end.HasValue ?
                new ObjectParameter("ChequeAmount_end", chequeAmount_end) :
                new ObjectParameter("ChequeAmount_end", typeof(double));
    
            var receiverParameter = receiver != null ?
                new ObjectParameter("Receiver", receiver) :
                new ObjectParameter("Receiver", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var chequeDate_startParameter = chequeDate_start != null ?
                new ObjectParameter("ChequeDate_start", chequeDate_start) :
                new ObjectParameter("ChequeDate_start", typeof(string));
    
            var chequeDate_endParameter = chequeDate_end != null ?
                new ObjectParameter("ChequeDate_end", chequeDate_end) :
                new ObjectParameter("ChequeDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var receive_date_startParameter = receive_date_start != null ?
                new ObjectParameter("Receive_date_start", receive_date_start) :
                new ObjectParameter("Receive_date_start", typeof(string));
    
            var receive_date_endParameter = receive_date_end != null ?
                new ObjectParameter("Receive_date_end", receive_date_end) :
                new ObjectParameter("Receive_date_end", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveStateIDParameter = archiveStateID.HasValue ?
                new ObjectParameter("ArchiveStateID", archiveStateID) :
                new ObjectParameter("ArchiveStateID", typeof(byte));
    
            var archiveDate_StartParameter = archiveDate_Start != null ?
                new ObjectParameter("ArchiveDate_Start", archiveDate_Start) :
                new ObjectParameter("ArchiveDate_Start", typeof(string));
    
            var archiveDate_EndParameter = archiveDate_End != null ?
                new ObjectParameter("ArchiveDate_End", archiveDate_End) :
                new ObjectParameter("ArchiveDate_End", typeof(string));
    
            var archiveUserIDParameter = archiveUserID.HasValue ?
                new ObjectParameter("ArchiveUserID", archiveUserID) :
                new ObjectParameter("ArchiveUserID", typeof(int));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            var delUseridParameter = delUserid.HasValue ?
                new ObjectParameter("DelUserid", delUserid) :
                new ObjectParameter("DelUserid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cheque_Received_DeleteAll", chequeTypeIDParameter, chequeStateIDParameter, bankIDParameter, bankNameParameter, bankBranchParameter, accountNumberParameter, chequeNumberParameter, chequeAmount_startParameter, chequeAmount_endParameter, receiverParameter, customerIDParameter, dscParameter, chequeDate_startParameter, chequeDate_endParameter, create_date_startParameter, create_date_endParameter, receive_date_startParameter, receive_date_endParameter, archiveParameter, archiveStateIDParameter, archiveDate_StartParameter, archiveDate_EndParameter, archiveUserIDParameter, archiveDscParameter, useridParameter, topRangeParameter, delUseridParameter);
        }
    
        public virtual int sp_Cheque_Received_Insert(Nullable<int> iD, Nullable<int> chequeTypeID, Nullable<int> bankID, string bankName, string bankBranch, string accountNumber, Nullable<System.DateTime> receiveDate, Nullable<System.DateTime> chequeDate, string chequeNumber, Nullable<double> chequeAmount, string receiver, string dsc, Nullable<int> customerID, Nullable<byte> chequeStateID, Nullable<int> noteID, Nullable<int> imageID1, Nullable<int> imageID2, Nullable<int> imageID3, Nullable<int> imageID4, Nullable<int> rolID, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var chequeTypeIDParameter = chequeTypeID.HasValue ?
                new ObjectParameter("ChequeTypeID", chequeTypeID) :
                new ObjectParameter("ChequeTypeID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var bankBranchParameter = bankBranch != null ?
                new ObjectParameter("BankBranch", bankBranch) :
                new ObjectParameter("BankBranch", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var receiveDateParameter = receiveDate.HasValue ?
                new ObjectParameter("ReceiveDate", receiveDate) :
                new ObjectParameter("ReceiveDate", typeof(System.DateTime));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var chequeAmountParameter = chequeAmount.HasValue ?
                new ObjectParameter("ChequeAmount", chequeAmount) :
                new ObjectParameter("ChequeAmount", typeof(double));
    
            var receiverParameter = receiver != null ?
                new ObjectParameter("Receiver", receiver) :
                new ObjectParameter("Receiver", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var chequeStateIDParameter = chequeStateID.HasValue ?
                new ObjectParameter("ChequeStateID", chequeStateID) :
                new ObjectParameter("ChequeStateID", typeof(byte));
    
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var imageID1Parameter = imageID1.HasValue ?
                new ObjectParameter("ImageID1", imageID1) :
                new ObjectParameter("ImageID1", typeof(int));
    
            var imageID2Parameter = imageID2.HasValue ?
                new ObjectParameter("ImageID2", imageID2) :
                new ObjectParameter("ImageID2", typeof(int));
    
            var imageID3Parameter = imageID3.HasValue ?
                new ObjectParameter("ImageID3", imageID3) :
                new ObjectParameter("ImageID3", typeof(int));
    
            var imageID4Parameter = imageID4.HasValue ?
                new ObjectParameter("ImageID4", imageID4) :
                new ObjectParameter("ImageID4", typeof(int));
    
            var rolIDParameter = rolID.HasValue ?
                new ObjectParameter("RolID", rolID) :
                new ObjectParameter("RolID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cheque_Received_Insert", iDParameter, chequeTypeIDParameter, bankIDParameter, bankNameParameter, bankBranchParameter, accountNumberParameter, receiveDateParameter, chequeDateParameter, chequeNumberParameter, chequeAmountParameter, receiverParameter, dscParameter, customerIDParameter, chequeStateIDParameter, noteIDParameter, imageID1Parameter, imageID2Parameter, imageID3Parameter, imageID4Parameter, rolIDParameter, userIDParameter);
        }
    
        public virtual int sp_Cheque_Received_Recovery(Nullable<int> iD, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cheque_Received_Recovery", iDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_Cheque_Received_Select_Result> sp_Cheque_Received_Select(Nullable<int> chequeTypeID, Nullable<byte> chequeStateID, Nullable<int> bankID, string bankName, string bankBranch, string accountNumber, string chequeNumber, Nullable<double> chequeAmount_start, Nullable<double> chequeAmount_end, string receiver, Nullable<int> customerID, string dsc, string chequeDate_start, string chequeDate_end, string create_date_start, string create_date_end, string receive_date_start, string receive_date_end, Nullable<byte> archive, Nullable<byte> archiveStateID, string archiveDate_Start, string archiveDate_End, Nullable<int> archiveUserID, string archiveDsc, Nullable<int> userid, Nullable<int> topRange)
        {
            var chequeTypeIDParameter = chequeTypeID.HasValue ?
                new ObjectParameter("ChequeTypeID", chequeTypeID) :
                new ObjectParameter("ChequeTypeID", typeof(int));
    
            var chequeStateIDParameter = chequeStateID.HasValue ?
                new ObjectParameter("ChequeStateID", chequeStateID) :
                new ObjectParameter("ChequeStateID", typeof(byte));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var bankBranchParameter = bankBranch != null ?
                new ObjectParameter("BankBranch", bankBranch) :
                new ObjectParameter("BankBranch", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var chequeAmount_startParameter = chequeAmount_start.HasValue ?
                new ObjectParameter("ChequeAmount_start", chequeAmount_start) :
                new ObjectParameter("ChequeAmount_start", typeof(double));
    
            var chequeAmount_endParameter = chequeAmount_end.HasValue ?
                new ObjectParameter("ChequeAmount_end", chequeAmount_end) :
                new ObjectParameter("ChequeAmount_end", typeof(double));
    
            var receiverParameter = receiver != null ?
                new ObjectParameter("Receiver", receiver) :
                new ObjectParameter("Receiver", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var chequeDate_startParameter = chequeDate_start != null ?
                new ObjectParameter("ChequeDate_start", chequeDate_start) :
                new ObjectParameter("ChequeDate_start", typeof(string));
    
            var chequeDate_endParameter = chequeDate_end != null ?
                new ObjectParameter("ChequeDate_end", chequeDate_end) :
                new ObjectParameter("ChequeDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var receive_date_startParameter = receive_date_start != null ?
                new ObjectParameter("Receive_date_start", receive_date_start) :
                new ObjectParameter("Receive_date_start", typeof(string));
    
            var receive_date_endParameter = receive_date_end != null ?
                new ObjectParameter("Receive_date_end", receive_date_end) :
                new ObjectParameter("Receive_date_end", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveStateIDParameter = archiveStateID.HasValue ?
                new ObjectParameter("ArchiveStateID", archiveStateID) :
                new ObjectParameter("ArchiveStateID", typeof(byte));
    
            var archiveDate_StartParameter = archiveDate_Start != null ?
                new ObjectParameter("ArchiveDate_Start", archiveDate_Start) :
                new ObjectParameter("ArchiveDate_Start", typeof(string));
    
            var archiveDate_EndParameter = archiveDate_End != null ?
                new ObjectParameter("ArchiveDate_End", archiveDate_End) :
                new ObjectParameter("ArchiveDate_End", typeof(string));
    
            var archiveUserIDParameter = archiveUserID.HasValue ?
                new ObjectParameter("ArchiveUserID", archiveUserID) :
                new ObjectParameter("ArchiveUserID", typeof(int));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Cheque_Received_Select_Result>("sp_Cheque_Received_Select", chequeTypeIDParameter, chequeStateIDParameter, bankIDParameter, bankNameParameter, bankBranchParameter, accountNumberParameter, chequeNumberParameter, chequeAmount_startParameter, chequeAmount_endParameter, receiverParameter, customerIDParameter, dscParameter, chequeDate_startParameter, chequeDate_endParameter, create_date_startParameter, create_date_endParameter, receive_date_startParameter, receive_date_endParameter, archiveParameter, archiveStateIDParameter, archiveDate_StartParameter, archiveDate_EndParameter, archiveUserIDParameter, archiveDscParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Cheque_Received_SelectRow_Result> sp_Cheque_Received_SelectRow(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Cheque_Received_SelectRow_Result>("sp_Cheque_Received_SelectRow", idParameter);
        }
    
        public virtual int sp_Cheque_Received_Update(Nullable<int> iD, Nullable<int> chequeTypeID, Nullable<int> bankID, string bankName, string bankBranch, string accountNumber, Nullable<System.DateTime> receiveDate, Nullable<System.DateTime> chequeDate, string chequeNumber, Nullable<double> chequeAmount, string receiver, string dsc, Nullable<int> customerID, Nullable<byte> chequeStateID, Nullable<int> noteID, Nullable<int> imageID1, Nullable<int> imageID2, Nullable<int> imageID3, Nullable<int> imageID4, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var chequeTypeIDParameter = chequeTypeID.HasValue ?
                new ObjectParameter("ChequeTypeID", chequeTypeID) :
                new ObjectParameter("ChequeTypeID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var bankBranchParameter = bankBranch != null ?
                new ObjectParameter("BankBranch", bankBranch) :
                new ObjectParameter("BankBranch", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var receiveDateParameter = receiveDate.HasValue ?
                new ObjectParameter("ReceiveDate", receiveDate) :
                new ObjectParameter("ReceiveDate", typeof(System.DateTime));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var chequeAmountParameter = chequeAmount.HasValue ?
                new ObjectParameter("ChequeAmount", chequeAmount) :
                new ObjectParameter("ChequeAmount", typeof(double));
    
            var receiverParameter = receiver != null ?
                new ObjectParameter("Receiver", receiver) :
                new ObjectParameter("Receiver", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var chequeStateIDParameter = chequeStateID.HasValue ?
                new ObjectParameter("ChequeStateID", chequeStateID) :
                new ObjectParameter("ChequeStateID", typeof(byte));
    
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var imageID1Parameter = imageID1.HasValue ?
                new ObjectParameter("ImageID1", imageID1) :
                new ObjectParameter("ImageID1", typeof(int));
    
            var imageID2Parameter = imageID2.HasValue ?
                new ObjectParameter("ImageID2", imageID2) :
                new ObjectParameter("ImageID2", typeof(int));
    
            var imageID3Parameter = imageID3.HasValue ?
                new ObjectParameter("ImageID3", imageID3) :
                new ObjectParameter("ImageID3", typeof(int));
    
            var imageID4Parameter = imageID4.HasValue ?
                new ObjectParameter("ImageID4", imageID4) :
                new ObjectParameter("ImageID4", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cheque_Received_Update", iDParameter, chequeTypeIDParameter, bankIDParameter, bankNameParameter, bankBranchParameter, accountNumberParameter, receiveDateParameter, chequeDateParameter, chequeNumberParameter, chequeAmountParameter, receiverParameter, dscParameter, customerIDParameter, chequeStateIDParameter, noteIDParameter, imageID1Parameter, imageID2Parameter, imageID3Parameter, imageID4Parameter, useridParameter);
        }
    
        public virtual int sp_ChequeBooks_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ChequeBooks_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_ChequeBooks_Insert(Nullable<short> iD, Nullable<int> bankID, Nullable<short> chequeBookTypeid, Nullable<int> firstSerial, Nullable<byte> pageCount, Nullable<System.DateTime> startDate, string dsc, Nullable<bool> active, Nullable<int> rolid, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var chequeBookTypeidParameter = chequeBookTypeid.HasValue ?
                new ObjectParameter("ChequeBookTypeid", chequeBookTypeid) :
                new ObjectParameter("ChequeBookTypeid", typeof(short));
    
            var firstSerialParameter = firstSerial.HasValue ?
                new ObjectParameter("FirstSerial", firstSerial) :
                new ObjectParameter("FirstSerial", typeof(int));
    
            var pageCountParameter = pageCount.HasValue ?
                new ObjectParameter("PageCount", pageCount) :
                new ObjectParameter("PageCount", typeof(byte));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ChequeBooks_Insert", iDParameter, bankIDParameter, chequeBookTypeidParameter, firstSerialParameter, pageCountParameter, startDateParameter, dscParameter, activeParameter, rolidParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_ChequeBooks_Select_Result> sp_ChequeBooks_Select(Nullable<short> chequeBookTypeid, Nullable<int> bankID, string name, Nullable<int> active)
        {
            var chequeBookTypeidParameter = chequeBookTypeid.HasValue ?
                new ObjectParameter("ChequeBookTypeid", chequeBookTypeid) :
                new ObjectParameter("ChequeBookTypeid", typeof(short));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ChequeBooks_Select_Result>("sp_ChequeBooks_Select", chequeBookTypeidParameter, bankIDParameter, nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_ChequeBooks_SelectRow_Result> sp_ChequeBooks_SelectRow(Nullable<short> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ChequeBooks_SelectRow_Result>("sp_ChequeBooks_SelectRow", iDParameter);
        }
    
        public virtual int sp_ChequeBooks_Update(Nullable<short> iD, Nullable<int> bankID, Nullable<short> chequeBookTypeid, Nullable<int> firstSerial, Nullable<byte> pageCount, Nullable<System.DateTime> startDate, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var chequeBookTypeidParameter = chequeBookTypeid.HasValue ?
                new ObjectParameter("ChequeBookTypeid", chequeBookTypeid) :
                new ObjectParameter("ChequeBookTypeid", typeof(short));
    
            var firstSerialParameter = firstSerial.HasValue ?
                new ObjectParameter("FirstSerial", firstSerial) :
                new ObjectParameter("FirstSerial", typeof(int));
    
            var pageCountParameter = pageCount.HasValue ?
                new ObjectParameter("PageCount", pageCount) :
                new ObjectParameter("PageCount", typeof(byte));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ChequeBooks_Update", iDParameter, bankIDParameter, chequeBookTypeidParameter, firstSerialParameter, pageCountParameter, startDateParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_ChequeBookTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ChequeBookTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_ChequeBookTypes_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ChequeBookTypes_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_ChequeBookTypes_Select_Result> sp_ChequeBookTypes_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ChequeBookTypes_Select_Result>("sp_ChequeBookTypes_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_ChequeBookTypes_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ChequeBookTypes_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_ChequeStates_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ChequeStates_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_ChequeStates_Insert(string name, string dsc, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ChequeStates_Insert", nameParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_ChequeStates_Select_Result> sp_ChequeStates_Select(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ChequeStates_Select_Result>("sp_ChequeStates_Select", nameParameter);
        }
    
        public virtual int sp_ChequeStates_Update(Nullable<int> iD, string name, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ChequeStates_Update", iDParameter, nameParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_ChequeTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ChequeTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_ChequeTypes_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ChequeTypes_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_ChequeTypes_Select_Result> sp_ChequeTypes_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ChequeTypes_Select_Result>("sp_ChequeTypes_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_ChequeTypes_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ChequeTypes_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_ChildFunds_Select_Result> sp_ChildFunds_Select(Nullable<int> receptionID)
        {
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ChildFunds_Select_Result>("sp_ChildFunds_Select", receptionIDParameter);
        }
    
        public virtual ObjectResult<sp_ChildReceptionServices_Select_Result> sp_ChildReceptionServices_Select(Nullable<int> receptionID)
        {
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ChildReceptionServices_Select_Result>("sp_ChildReceptionServices_Select", receptionIDParameter);
        }
    
        public virtual ObjectResult<sp_chklogin_Result> sp_chklogin(string loginname, string pwd, string appValid)
        {
            var loginnameParameter = loginname != null ?
                new ObjectParameter("loginname", loginname) :
                new ObjectParameter("loginname", typeof(string));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("pwd", pwd) :
                new ObjectParameter("pwd", typeof(string));
    
            var appValidParameter = appValid != null ?
                new ObjectParameter("AppValid", appValid) :
                new ObjectParameter("AppValid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_chklogin_Result>("sp_chklogin", loginnameParameter, pwdParameter, appValidParameter);
        }
    
        public virtual int sp_chngpass(Nullable<int> iD, string oldPwd, string newPwd, string appValid, ObjectParameter invalid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var oldPwdParameter = oldPwd != null ?
                new ObjectParameter("OldPwd", oldPwd) :
                new ObjectParameter("OldPwd", typeof(string));
    
            var newPwdParameter = newPwd != null ?
                new ObjectParameter("NewPwd", newPwd) :
                new ObjectParameter("NewPwd", typeof(string));
    
            var appValidParameter = appValid != null ?
                new ObjectParameter("AppValid", appValid) :
                new ObjectParameter("AppValid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_chngpass", iDParameter, oldPwdParameter, newPwdParameter, appValidParameter, invalid);
        }
    
        public virtual ObjectResult<sp_Companies_Select_Result> sp_Companies_Select(Nullable<int> iD, Nullable<int> customerID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Companies_Select_Result>("sp_Companies_Select", iDParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<sp_Companies_SelectRow_Result> sp_Companies_SelectRow(Nullable<int> iD, Nullable<int> customerID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Companies_SelectRow_Result>("sp_Companies_SelectRow", iDParameter, customerIDParameter);
        }
    
        public virtual int sp_CountingUnits_Delete(Nullable<byte> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(byte));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CountingUnits_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_CountingUnits_Insert(string name, string dsc, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CountingUnits_Insert", nameParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_CountingUnits_Select_Result> sp_CountingUnits_Select(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CountingUnits_Select_Result>("sp_CountingUnits_Select", nameParameter);
        }
    
        public virtual int sp_CountingUnits_Update(Nullable<byte> iD, string name, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(byte));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CountingUnits_Update", iDParameter, nameParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_CRM_Archive(Nullable<int> iD, Nullable<byte> archiveStateID, string archiveDsc, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var archiveStateIDParameter = archiveStateID.HasValue ?
                new ObjectParameter("ArchiveStateID", archiveStateID) :
                new ObjectParameter("ArchiveStateID", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRM_Archive", iDParameter, archiveStateIDParameter, archiveDscParameter, userIDParameter);
        }
    
        public virtual int sp_CRM_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRM_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_CRM_DeleteAll(Nullable<short> cRMTypeID, Nullable<short> cRMStateID, Nullable<int> iD_start, Nullable<int> iD_end, Nullable<int> customerGroupID, Nullable<int> customerSubGroupID, Nullable<int> customerID, string registerDate_start, string registerDate_end, string registerTime_start, string registerTime_end, string title, Nullable<short> cRMJobCategoryID, Nullable<int> cRMJobSubCategoryID, Nullable<int> cRMJobID, Nullable<short> cRMResultCategoryID, Nullable<int> cRMResultSubCategoryID, Nullable<int> cRMResultID, Nullable<double> bed_start, Nullable<double> bed_end, Nullable<double> bes_start, Nullable<double> bes_end, Nullable<double> mandeh_start, Nullable<double> mandeh_end, Nullable<byte> archive, Nullable<byte> archiveStateID, string archiveDate_Start, string archiveDate_End, Nullable<int> archiveUserID, string archiveDsc, Nullable<int> shiftID, Nullable<int> rolID, Nullable<int> userid, Nullable<int> cRMStateID_UserView, Nullable<int> delUserid)
        {
            var cRMTypeIDParameter = cRMTypeID.HasValue ?
                new ObjectParameter("CRMTypeID", cRMTypeID) :
                new ObjectParameter("CRMTypeID", typeof(short));
    
            var cRMStateIDParameter = cRMStateID.HasValue ?
                new ObjectParameter("CRMStateID", cRMStateID) :
                new ObjectParameter("CRMStateID", typeof(short));
    
            var iD_startParameter = iD_start.HasValue ?
                new ObjectParameter("ID_start", iD_start) :
                new ObjectParameter("ID_start", typeof(int));
    
            var iD_endParameter = iD_end.HasValue ?
                new ObjectParameter("ID_end", iD_end) :
                new ObjectParameter("ID_end", typeof(int));
    
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(int));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var registerTime_startParameter = registerTime_start != null ?
                new ObjectParameter("RegisterTime_start", registerTime_start) :
                new ObjectParameter("RegisterTime_start", typeof(string));
    
            var registerTime_endParameter = registerTime_end != null ?
                new ObjectParameter("RegisterTime_end", registerTime_end) :
                new ObjectParameter("RegisterTime_end", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var cRMJobCategoryIDParameter = cRMJobCategoryID.HasValue ?
                new ObjectParameter("CRMJobCategoryID", cRMJobCategoryID) :
                new ObjectParameter("CRMJobCategoryID", typeof(short));
    
            var cRMJobSubCategoryIDParameter = cRMJobSubCategoryID.HasValue ?
                new ObjectParameter("CRMJobSubCategoryID", cRMJobSubCategoryID) :
                new ObjectParameter("CRMJobSubCategoryID", typeof(int));
    
            var cRMJobIDParameter = cRMJobID.HasValue ?
                new ObjectParameter("CRMJobID", cRMJobID) :
                new ObjectParameter("CRMJobID", typeof(int));
    
            var cRMResultCategoryIDParameter = cRMResultCategoryID.HasValue ?
                new ObjectParameter("CRMResultCategoryID", cRMResultCategoryID) :
                new ObjectParameter("CRMResultCategoryID", typeof(short));
    
            var cRMResultSubCategoryIDParameter = cRMResultSubCategoryID.HasValue ?
                new ObjectParameter("CRMResultSubCategoryID", cRMResultSubCategoryID) :
                new ObjectParameter("CRMResultSubCategoryID", typeof(int));
    
            var cRMResultIDParameter = cRMResultID.HasValue ?
                new ObjectParameter("CRMResultID", cRMResultID) :
                new ObjectParameter("CRMResultID", typeof(int));
    
            var bed_startParameter = bed_start.HasValue ?
                new ObjectParameter("Bed_start", bed_start) :
                new ObjectParameter("Bed_start", typeof(double));
    
            var bed_endParameter = bed_end.HasValue ?
                new ObjectParameter("Bed_end", bed_end) :
                new ObjectParameter("Bed_end", typeof(double));
    
            var bes_startParameter = bes_start.HasValue ?
                new ObjectParameter("Bes_start", bes_start) :
                new ObjectParameter("Bes_start", typeof(double));
    
            var bes_endParameter = bes_end.HasValue ?
                new ObjectParameter("Bes_end", bes_end) :
                new ObjectParameter("Bes_end", typeof(double));
    
            var mandeh_startParameter = mandeh_start.HasValue ?
                new ObjectParameter("Mandeh_start", mandeh_start) :
                new ObjectParameter("Mandeh_start", typeof(double));
    
            var mandeh_endParameter = mandeh_end.HasValue ?
                new ObjectParameter("Mandeh_end", mandeh_end) :
                new ObjectParameter("Mandeh_end", typeof(double));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveStateIDParameter = archiveStateID.HasValue ?
                new ObjectParameter("ArchiveStateID", archiveStateID) :
                new ObjectParameter("ArchiveStateID", typeof(byte));
    
            var archiveDate_StartParameter = archiveDate_Start != null ?
                new ObjectParameter("ArchiveDate_Start", archiveDate_Start) :
                new ObjectParameter("ArchiveDate_Start", typeof(string));
    
            var archiveDate_EndParameter = archiveDate_End != null ?
                new ObjectParameter("ArchiveDate_End", archiveDate_End) :
                new ObjectParameter("ArchiveDate_End", typeof(string));
    
            var archiveUserIDParameter = archiveUserID.HasValue ?
                new ObjectParameter("ArchiveUserID", archiveUserID) :
                new ObjectParameter("ArchiveUserID", typeof(int));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var rolIDParameter = rolID.HasValue ?
                new ObjectParameter("RolID", rolID) :
                new ObjectParameter("RolID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var cRMStateID_UserViewParameter = cRMStateID_UserView.HasValue ?
                new ObjectParameter("CRMStateID_UserView", cRMStateID_UserView) :
                new ObjectParameter("CRMStateID_UserView", typeof(int));
    
            var delUseridParameter = delUserid.HasValue ?
                new ObjectParameter("DelUserid", delUserid) :
                new ObjectParameter("DelUserid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRM_DeleteAll", cRMTypeIDParameter, cRMStateIDParameter, iD_startParameter, iD_endParameter, customerGroupIDParameter, customerSubGroupIDParameter, customerIDParameter, registerDate_startParameter, registerDate_endParameter, registerTime_startParameter, registerTime_endParameter, titleParameter, cRMJobCategoryIDParameter, cRMJobSubCategoryIDParameter, cRMJobIDParameter, cRMResultCategoryIDParameter, cRMResultSubCategoryIDParameter, cRMResultIDParameter, bed_startParameter, bed_endParameter, bes_startParameter, bes_endParameter, mandeh_startParameter, mandeh_endParameter, archiveParameter, archiveStateIDParameter, archiveDate_StartParameter, archiveDate_EndParameter, archiveUserIDParameter, archiveDscParameter, shiftIDParameter, rolIDParameter, useridParameter, cRMStateID_UserViewParameter, delUseridParameter);
        }
    
        public virtual int sp_CRM_Insert(Nullable<short> cRMTypeID, Nullable<short> cRMStateID, Nullable<int> iD, Nullable<int> customerID, Nullable<System.DateTime> registerDate, string title, string dsc, Nullable<short> cRMJobCategoryID, Nullable<int> cRMJobSubCategoryID, Nullable<int> cRMJobID, Nullable<short> cRMResultCategoryID, Nullable<int> cRMResultSubCategoryID, Nullable<int> cRMResultID, Nullable<double> price, Nullable<double> numb, Nullable<double> total, Nullable<double> takh, Nullable<double> tax, Nullable<double> dutiy, Nullable<double> bed, Nullable<double> bes, Nullable<double> mandeh, Nullable<bool> sendSMSWithTime, Nullable<System.DateTime> sendSMSWithTimeDate, string sMSWithTimeNumber, string sMSWithTimeMessage, Nullable<int> imageID1, Nullable<int> imageID2, Nullable<int> imageID3, Nullable<int> imageID4, Nullable<int> imageID5, Nullable<int> imageID6, Nullable<int> imageID7, Nullable<int> imageID8, Nullable<int> imageID9, Nullable<int> imageID10, Nullable<int> imageID11, Nullable<int> imageID12, Nullable<int> imageID13, Nullable<int> imageID14, Nullable<int> imageID15, Nullable<int> imageID16, Nullable<int> imageID17, Nullable<int> imageID18, Nullable<int> imageID19, Nullable<int> imageID20, Nullable<int> noteID, Nullable<int> shiftID, Nullable<int> rolID, Nullable<int> userid)
        {
            var cRMTypeIDParameter = cRMTypeID.HasValue ?
                new ObjectParameter("CRMTypeID", cRMTypeID) :
                new ObjectParameter("CRMTypeID", typeof(short));
    
            var cRMStateIDParameter = cRMStateID.HasValue ?
                new ObjectParameter("CRMStateID", cRMStateID) :
                new ObjectParameter("CRMStateID", typeof(short));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var cRMJobCategoryIDParameter = cRMJobCategoryID.HasValue ?
                new ObjectParameter("CRMJobCategoryID", cRMJobCategoryID) :
                new ObjectParameter("CRMJobCategoryID", typeof(short));
    
            var cRMJobSubCategoryIDParameter = cRMJobSubCategoryID.HasValue ?
                new ObjectParameter("CRMJobSubCategoryID", cRMJobSubCategoryID) :
                new ObjectParameter("CRMJobSubCategoryID", typeof(int));
    
            var cRMJobIDParameter = cRMJobID.HasValue ?
                new ObjectParameter("CRMJobID", cRMJobID) :
                new ObjectParameter("CRMJobID", typeof(int));
    
            var cRMResultCategoryIDParameter = cRMResultCategoryID.HasValue ?
                new ObjectParameter("CRMResultCategoryID", cRMResultCategoryID) :
                new ObjectParameter("CRMResultCategoryID", typeof(short));
    
            var cRMResultSubCategoryIDParameter = cRMResultSubCategoryID.HasValue ?
                new ObjectParameter("CRMResultSubCategoryID", cRMResultSubCategoryID) :
                new ObjectParameter("CRMResultSubCategoryID", typeof(int));
    
            var cRMResultIDParameter = cRMResultID.HasValue ?
                new ObjectParameter("CRMResultID", cRMResultID) :
                new ObjectParameter("CRMResultID", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var numbParameter = numb.HasValue ?
                new ObjectParameter("Numb", numb) :
                new ObjectParameter("Numb", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(double));
    
            var dutiyParameter = dutiy.HasValue ?
                new ObjectParameter("Dutiy", dutiy) :
                new ObjectParameter("Dutiy", typeof(double));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var besParameter = bes.HasValue ?
                new ObjectParameter("Bes", bes) :
                new ObjectParameter("Bes", typeof(double));
    
            var mandehParameter = mandeh.HasValue ?
                new ObjectParameter("Mandeh", mandeh) :
                new ObjectParameter("Mandeh", typeof(double));
    
            var sendSMSWithTimeParameter = sendSMSWithTime.HasValue ?
                new ObjectParameter("SendSMSWithTime", sendSMSWithTime) :
                new ObjectParameter("SendSMSWithTime", typeof(bool));
    
            var sendSMSWithTimeDateParameter = sendSMSWithTimeDate.HasValue ?
                new ObjectParameter("SendSMSWithTimeDate", sendSMSWithTimeDate) :
                new ObjectParameter("SendSMSWithTimeDate", typeof(System.DateTime));
    
            var sMSWithTimeNumberParameter = sMSWithTimeNumber != null ?
                new ObjectParameter("SMSWithTimeNumber", sMSWithTimeNumber) :
                new ObjectParameter("SMSWithTimeNumber", typeof(string));
    
            var sMSWithTimeMessageParameter = sMSWithTimeMessage != null ?
                new ObjectParameter("SMSWithTimeMessage", sMSWithTimeMessage) :
                new ObjectParameter("SMSWithTimeMessage", typeof(string));
    
            var imageID1Parameter = imageID1.HasValue ?
                new ObjectParameter("ImageID1", imageID1) :
                new ObjectParameter("ImageID1", typeof(int));
    
            var imageID2Parameter = imageID2.HasValue ?
                new ObjectParameter("ImageID2", imageID2) :
                new ObjectParameter("ImageID2", typeof(int));
    
            var imageID3Parameter = imageID3.HasValue ?
                new ObjectParameter("ImageID3", imageID3) :
                new ObjectParameter("ImageID3", typeof(int));
    
            var imageID4Parameter = imageID4.HasValue ?
                new ObjectParameter("ImageID4", imageID4) :
                new ObjectParameter("ImageID4", typeof(int));
    
            var imageID5Parameter = imageID5.HasValue ?
                new ObjectParameter("ImageID5", imageID5) :
                new ObjectParameter("ImageID5", typeof(int));
    
            var imageID6Parameter = imageID6.HasValue ?
                new ObjectParameter("ImageID6", imageID6) :
                new ObjectParameter("ImageID6", typeof(int));
    
            var imageID7Parameter = imageID7.HasValue ?
                new ObjectParameter("ImageID7", imageID7) :
                new ObjectParameter("ImageID7", typeof(int));
    
            var imageID8Parameter = imageID8.HasValue ?
                new ObjectParameter("ImageID8", imageID8) :
                new ObjectParameter("ImageID8", typeof(int));
    
            var imageID9Parameter = imageID9.HasValue ?
                new ObjectParameter("ImageID9", imageID9) :
                new ObjectParameter("ImageID9", typeof(int));
    
            var imageID10Parameter = imageID10.HasValue ?
                new ObjectParameter("ImageID10", imageID10) :
                new ObjectParameter("ImageID10", typeof(int));
    
            var imageID11Parameter = imageID11.HasValue ?
                new ObjectParameter("ImageID11", imageID11) :
                new ObjectParameter("ImageID11", typeof(int));
    
            var imageID12Parameter = imageID12.HasValue ?
                new ObjectParameter("ImageID12", imageID12) :
                new ObjectParameter("ImageID12", typeof(int));
    
            var imageID13Parameter = imageID13.HasValue ?
                new ObjectParameter("ImageID13", imageID13) :
                new ObjectParameter("ImageID13", typeof(int));
    
            var imageID14Parameter = imageID14.HasValue ?
                new ObjectParameter("ImageID14", imageID14) :
                new ObjectParameter("ImageID14", typeof(int));
    
            var imageID15Parameter = imageID15.HasValue ?
                new ObjectParameter("ImageID15", imageID15) :
                new ObjectParameter("ImageID15", typeof(int));
    
            var imageID16Parameter = imageID16.HasValue ?
                new ObjectParameter("ImageID16", imageID16) :
                new ObjectParameter("ImageID16", typeof(int));
    
            var imageID17Parameter = imageID17.HasValue ?
                new ObjectParameter("ImageID17", imageID17) :
                new ObjectParameter("ImageID17", typeof(int));
    
            var imageID18Parameter = imageID18.HasValue ?
                new ObjectParameter("ImageID18", imageID18) :
                new ObjectParameter("ImageID18", typeof(int));
    
            var imageID19Parameter = imageID19.HasValue ?
                new ObjectParameter("ImageID19", imageID19) :
                new ObjectParameter("ImageID19", typeof(int));
    
            var imageID20Parameter = imageID20.HasValue ?
                new ObjectParameter("ImageID20", imageID20) :
                new ObjectParameter("ImageID20", typeof(int));
    
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var rolIDParameter = rolID.HasValue ?
                new ObjectParameter("RolID", rolID) :
                new ObjectParameter("RolID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRM_Insert", cRMTypeIDParameter, cRMStateIDParameter, iDParameter, customerIDParameter, registerDateParameter, titleParameter, dscParameter, cRMJobCategoryIDParameter, cRMJobSubCategoryIDParameter, cRMJobIDParameter, cRMResultCategoryIDParameter, cRMResultSubCategoryIDParameter, cRMResultIDParameter, priceParameter, numbParameter, totalParameter, takhParameter, taxParameter, dutiyParameter, bedParameter, besParameter, mandehParameter, sendSMSWithTimeParameter, sendSMSWithTimeDateParameter, sMSWithTimeNumberParameter, sMSWithTimeMessageParameter, imageID1Parameter, imageID2Parameter, imageID3Parameter, imageID4Parameter, imageID5Parameter, imageID6Parameter, imageID7Parameter, imageID8Parameter, imageID9Parameter, imageID10Parameter, imageID11Parameter, imageID12Parameter, imageID13Parameter, imageID14Parameter, imageID15Parameter, imageID16Parameter, imageID17Parameter, imageID18Parameter, imageID19Parameter, imageID20Parameter, noteIDParameter, shiftIDParameter, rolIDParameter, useridParameter);
        }
    
        public virtual int sp_CRM_Recovery(Nullable<int> iD, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRM_Recovery", iDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_CRM_Select_Result> sp_CRM_Select(Nullable<short> cRMTypeID, Nullable<short> cRMStateID, Nullable<int> iD_start, Nullable<int> iD_end, Nullable<int> customerGroupID, Nullable<int> customerSubGroupID, Nullable<int> customerID, string registerDate_start, string registerDate_end, string registerTime_start, string registerTime_end, string title, Nullable<short> cRMJobCategoryID, Nullable<int> cRMJobSubCategoryID, Nullable<int> cRMJobID, Nullable<short> cRMResultCategoryID, Nullable<int> cRMResultSubCategoryID, Nullable<int> cRMResultID, Nullable<double> bed_start, Nullable<double> bed_end, Nullable<double> bes_start, Nullable<double> bes_end, Nullable<double> mandeh_start, Nullable<double> mandeh_end, Nullable<byte> archive, Nullable<byte> archiveStateID, string archiveDate_Start, string archiveDate_End, Nullable<int> archiveUserID, string archiveDsc, Nullable<int> shiftID, Nullable<int> rolID, Nullable<int> userid, Nullable<int> cRMStateID_UserView)
        {
            var cRMTypeIDParameter = cRMTypeID.HasValue ?
                new ObjectParameter("CRMTypeID", cRMTypeID) :
                new ObjectParameter("CRMTypeID", typeof(short));
    
            var cRMStateIDParameter = cRMStateID.HasValue ?
                new ObjectParameter("CRMStateID", cRMStateID) :
                new ObjectParameter("CRMStateID", typeof(short));
    
            var iD_startParameter = iD_start.HasValue ?
                new ObjectParameter("ID_start", iD_start) :
                new ObjectParameter("ID_start", typeof(int));
    
            var iD_endParameter = iD_end.HasValue ?
                new ObjectParameter("ID_end", iD_end) :
                new ObjectParameter("ID_end", typeof(int));
    
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(int));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var registerTime_startParameter = registerTime_start != null ?
                new ObjectParameter("RegisterTime_start", registerTime_start) :
                new ObjectParameter("RegisterTime_start", typeof(string));
    
            var registerTime_endParameter = registerTime_end != null ?
                new ObjectParameter("RegisterTime_end", registerTime_end) :
                new ObjectParameter("RegisterTime_end", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var cRMJobCategoryIDParameter = cRMJobCategoryID.HasValue ?
                new ObjectParameter("CRMJobCategoryID", cRMJobCategoryID) :
                new ObjectParameter("CRMJobCategoryID", typeof(short));
    
            var cRMJobSubCategoryIDParameter = cRMJobSubCategoryID.HasValue ?
                new ObjectParameter("CRMJobSubCategoryID", cRMJobSubCategoryID) :
                new ObjectParameter("CRMJobSubCategoryID", typeof(int));
    
            var cRMJobIDParameter = cRMJobID.HasValue ?
                new ObjectParameter("CRMJobID", cRMJobID) :
                new ObjectParameter("CRMJobID", typeof(int));
    
            var cRMResultCategoryIDParameter = cRMResultCategoryID.HasValue ?
                new ObjectParameter("CRMResultCategoryID", cRMResultCategoryID) :
                new ObjectParameter("CRMResultCategoryID", typeof(short));
    
            var cRMResultSubCategoryIDParameter = cRMResultSubCategoryID.HasValue ?
                new ObjectParameter("CRMResultSubCategoryID", cRMResultSubCategoryID) :
                new ObjectParameter("CRMResultSubCategoryID", typeof(int));
    
            var cRMResultIDParameter = cRMResultID.HasValue ?
                new ObjectParameter("CRMResultID", cRMResultID) :
                new ObjectParameter("CRMResultID", typeof(int));
    
            var bed_startParameter = bed_start.HasValue ?
                new ObjectParameter("Bed_start", bed_start) :
                new ObjectParameter("Bed_start", typeof(double));
    
            var bed_endParameter = bed_end.HasValue ?
                new ObjectParameter("Bed_end", bed_end) :
                new ObjectParameter("Bed_end", typeof(double));
    
            var bes_startParameter = bes_start.HasValue ?
                new ObjectParameter("Bes_start", bes_start) :
                new ObjectParameter("Bes_start", typeof(double));
    
            var bes_endParameter = bes_end.HasValue ?
                new ObjectParameter("Bes_end", bes_end) :
                new ObjectParameter("Bes_end", typeof(double));
    
            var mandeh_startParameter = mandeh_start.HasValue ?
                new ObjectParameter("Mandeh_start", mandeh_start) :
                new ObjectParameter("Mandeh_start", typeof(double));
    
            var mandeh_endParameter = mandeh_end.HasValue ?
                new ObjectParameter("Mandeh_end", mandeh_end) :
                new ObjectParameter("Mandeh_end", typeof(double));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveStateIDParameter = archiveStateID.HasValue ?
                new ObjectParameter("ArchiveStateID", archiveStateID) :
                new ObjectParameter("ArchiveStateID", typeof(byte));
    
            var archiveDate_StartParameter = archiveDate_Start != null ?
                new ObjectParameter("ArchiveDate_Start", archiveDate_Start) :
                new ObjectParameter("ArchiveDate_Start", typeof(string));
    
            var archiveDate_EndParameter = archiveDate_End != null ?
                new ObjectParameter("ArchiveDate_End", archiveDate_End) :
                new ObjectParameter("ArchiveDate_End", typeof(string));
    
            var archiveUserIDParameter = archiveUserID.HasValue ?
                new ObjectParameter("ArchiveUserID", archiveUserID) :
                new ObjectParameter("ArchiveUserID", typeof(int));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var rolIDParameter = rolID.HasValue ?
                new ObjectParameter("RolID", rolID) :
                new ObjectParameter("RolID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var cRMStateID_UserViewParameter = cRMStateID_UserView.HasValue ?
                new ObjectParameter("CRMStateID_UserView", cRMStateID_UserView) :
                new ObjectParameter("CRMStateID_UserView", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CRM_Select_Result>("sp_CRM_Select", cRMTypeIDParameter, cRMStateIDParameter, iD_startParameter, iD_endParameter, customerGroupIDParameter, customerSubGroupIDParameter, customerIDParameter, registerDate_startParameter, registerDate_endParameter, registerTime_startParameter, registerTime_endParameter, titleParameter, cRMJobCategoryIDParameter, cRMJobSubCategoryIDParameter, cRMJobIDParameter, cRMResultCategoryIDParameter, cRMResultSubCategoryIDParameter, cRMResultIDParameter, bed_startParameter, bed_endParameter, bes_startParameter, bes_endParameter, mandeh_startParameter, mandeh_endParameter, archiveParameter, archiveStateIDParameter, archiveDate_StartParameter, archiveDate_EndParameter, archiveUserIDParameter, archiveDscParameter, shiftIDParameter, rolIDParameter, useridParameter, cRMStateID_UserViewParameter);
        }
    
        public virtual ObjectResult<sp_CRM_SelectRow_Result> sp_CRM_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CRM_SelectRow_Result>("sp_CRM_SelectRow", iDParameter);
        }
    
        public virtual int sp_CRM_Update(Nullable<short> cRMTypeID, Nullable<short> cRMStateID, Nullable<int> iD, Nullable<int> customerID, Nullable<System.DateTime> registerDate, string title, string dsc, Nullable<short> cRMJobCategoryID, Nullable<int> cRMJobSubCategoryID, Nullable<int> cRMJobID, Nullable<short> cRMResultCategoryID, Nullable<int> cRMResultSubCategoryID, Nullable<int> cRMResultID, Nullable<double> price, Nullable<double> numb, Nullable<double> total, Nullable<double> takh, Nullable<double> tax, Nullable<double> dutiy, Nullable<double> bed, Nullable<double> bes, Nullable<double> mandeh, Nullable<bool> sendSMSWithTime, Nullable<System.DateTime> sendSMSWithTimeDate, string sMSWithTimeNumber, string sMSWithTimeMessage, Nullable<int> imageID1, Nullable<int> imageID2, Nullable<int> imageID3, Nullable<int> imageID4, Nullable<int> imageID5, Nullable<int> imageID6, Nullable<int> imageID7, Nullable<int> imageID8, Nullable<int> imageID9, Nullable<int> imageID10, Nullable<int> imageID11, Nullable<int> imageID12, Nullable<int> imageID13, Nullable<int> imageID14, Nullable<int> imageID15, Nullable<int> imageID16, Nullable<int> imageID17, Nullable<int> imageID18, Nullable<int> imageID19, Nullable<int> imageID20, Nullable<int> noteID, Nullable<int> shiftID, Nullable<int> rolID, Nullable<int> userid)
        {
            var cRMTypeIDParameter = cRMTypeID.HasValue ?
                new ObjectParameter("CRMTypeID", cRMTypeID) :
                new ObjectParameter("CRMTypeID", typeof(short));
    
            var cRMStateIDParameter = cRMStateID.HasValue ?
                new ObjectParameter("CRMStateID", cRMStateID) :
                new ObjectParameter("CRMStateID", typeof(short));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var cRMJobCategoryIDParameter = cRMJobCategoryID.HasValue ?
                new ObjectParameter("CRMJobCategoryID", cRMJobCategoryID) :
                new ObjectParameter("CRMJobCategoryID", typeof(short));
    
            var cRMJobSubCategoryIDParameter = cRMJobSubCategoryID.HasValue ?
                new ObjectParameter("CRMJobSubCategoryID", cRMJobSubCategoryID) :
                new ObjectParameter("CRMJobSubCategoryID", typeof(int));
    
            var cRMJobIDParameter = cRMJobID.HasValue ?
                new ObjectParameter("CRMJobID", cRMJobID) :
                new ObjectParameter("CRMJobID", typeof(int));
    
            var cRMResultCategoryIDParameter = cRMResultCategoryID.HasValue ?
                new ObjectParameter("CRMResultCategoryID", cRMResultCategoryID) :
                new ObjectParameter("CRMResultCategoryID", typeof(short));
    
            var cRMResultSubCategoryIDParameter = cRMResultSubCategoryID.HasValue ?
                new ObjectParameter("CRMResultSubCategoryID", cRMResultSubCategoryID) :
                new ObjectParameter("CRMResultSubCategoryID", typeof(int));
    
            var cRMResultIDParameter = cRMResultID.HasValue ?
                new ObjectParameter("CRMResultID", cRMResultID) :
                new ObjectParameter("CRMResultID", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var numbParameter = numb.HasValue ?
                new ObjectParameter("Numb", numb) :
                new ObjectParameter("Numb", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(double));
    
            var dutiyParameter = dutiy.HasValue ?
                new ObjectParameter("Dutiy", dutiy) :
                new ObjectParameter("Dutiy", typeof(double));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var besParameter = bes.HasValue ?
                new ObjectParameter("Bes", bes) :
                new ObjectParameter("Bes", typeof(double));
    
            var mandehParameter = mandeh.HasValue ?
                new ObjectParameter("Mandeh", mandeh) :
                new ObjectParameter("Mandeh", typeof(double));
    
            var sendSMSWithTimeParameter = sendSMSWithTime.HasValue ?
                new ObjectParameter("SendSMSWithTime", sendSMSWithTime) :
                new ObjectParameter("SendSMSWithTime", typeof(bool));
    
            var sendSMSWithTimeDateParameter = sendSMSWithTimeDate.HasValue ?
                new ObjectParameter("SendSMSWithTimeDate", sendSMSWithTimeDate) :
                new ObjectParameter("SendSMSWithTimeDate", typeof(System.DateTime));
    
            var sMSWithTimeNumberParameter = sMSWithTimeNumber != null ?
                new ObjectParameter("SMSWithTimeNumber", sMSWithTimeNumber) :
                new ObjectParameter("SMSWithTimeNumber", typeof(string));
    
            var sMSWithTimeMessageParameter = sMSWithTimeMessage != null ?
                new ObjectParameter("SMSWithTimeMessage", sMSWithTimeMessage) :
                new ObjectParameter("SMSWithTimeMessage", typeof(string));
    
            var imageID1Parameter = imageID1.HasValue ?
                new ObjectParameter("ImageID1", imageID1) :
                new ObjectParameter("ImageID1", typeof(int));
    
            var imageID2Parameter = imageID2.HasValue ?
                new ObjectParameter("ImageID2", imageID2) :
                new ObjectParameter("ImageID2", typeof(int));
    
            var imageID3Parameter = imageID3.HasValue ?
                new ObjectParameter("ImageID3", imageID3) :
                new ObjectParameter("ImageID3", typeof(int));
    
            var imageID4Parameter = imageID4.HasValue ?
                new ObjectParameter("ImageID4", imageID4) :
                new ObjectParameter("ImageID4", typeof(int));
    
            var imageID5Parameter = imageID5.HasValue ?
                new ObjectParameter("ImageID5", imageID5) :
                new ObjectParameter("ImageID5", typeof(int));
    
            var imageID6Parameter = imageID6.HasValue ?
                new ObjectParameter("ImageID6", imageID6) :
                new ObjectParameter("ImageID6", typeof(int));
    
            var imageID7Parameter = imageID7.HasValue ?
                new ObjectParameter("ImageID7", imageID7) :
                new ObjectParameter("ImageID7", typeof(int));
    
            var imageID8Parameter = imageID8.HasValue ?
                new ObjectParameter("ImageID8", imageID8) :
                new ObjectParameter("ImageID8", typeof(int));
    
            var imageID9Parameter = imageID9.HasValue ?
                new ObjectParameter("ImageID9", imageID9) :
                new ObjectParameter("ImageID9", typeof(int));
    
            var imageID10Parameter = imageID10.HasValue ?
                new ObjectParameter("ImageID10", imageID10) :
                new ObjectParameter("ImageID10", typeof(int));
    
            var imageID11Parameter = imageID11.HasValue ?
                new ObjectParameter("ImageID11", imageID11) :
                new ObjectParameter("ImageID11", typeof(int));
    
            var imageID12Parameter = imageID12.HasValue ?
                new ObjectParameter("ImageID12", imageID12) :
                new ObjectParameter("ImageID12", typeof(int));
    
            var imageID13Parameter = imageID13.HasValue ?
                new ObjectParameter("ImageID13", imageID13) :
                new ObjectParameter("ImageID13", typeof(int));
    
            var imageID14Parameter = imageID14.HasValue ?
                new ObjectParameter("ImageID14", imageID14) :
                new ObjectParameter("ImageID14", typeof(int));
    
            var imageID15Parameter = imageID15.HasValue ?
                new ObjectParameter("ImageID15", imageID15) :
                new ObjectParameter("ImageID15", typeof(int));
    
            var imageID16Parameter = imageID16.HasValue ?
                new ObjectParameter("ImageID16", imageID16) :
                new ObjectParameter("ImageID16", typeof(int));
    
            var imageID17Parameter = imageID17.HasValue ?
                new ObjectParameter("ImageID17", imageID17) :
                new ObjectParameter("ImageID17", typeof(int));
    
            var imageID18Parameter = imageID18.HasValue ?
                new ObjectParameter("ImageID18", imageID18) :
                new ObjectParameter("ImageID18", typeof(int));
    
            var imageID19Parameter = imageID19.HasValue ?
                new ObjectParameter("ImageID19", imageID19) :
                new ObjectParameter("ImageID19", typeof(int));
    
            var imageID20Parameter = imageID20.HasValue ?
                new ObjectParameter("ImageID20", imageID20) :
                new ObjectParameter("ImageID20", typeof(int));
    
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var rolIDParameter = rolID.HasValue ?
                new ObjectParameter("RolID", rolID) :
                new ObjectParameter("RolID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRM_Update", cRMTypeIDParameter, cRMStateIDParameter, iDParameter, customerIDParameter, registerDateParameter, titleParameter, dscParameter, cRMJobCategoryIDParameter, cRMJobSubCategoryIDParameter, cRMJobIDParameter, cRMResultCategoryIDParameter, cRMResultSubCategoryIDParameter, cRMResultIDParameter, priceParameter, numbParameter, totalParameter, takhParameter, taxParameter, dutiyParameter, bedParameter, besParameter, mandehParameter, sendSMSWithTimeParameter, sendSMSWithTimeDateParameter, sMSWithTimeNumberParameter, sMSWithTimeMessageParameter, imageID1Parameter, imageID2Parameter, imageID3Parameter, imageID4Parameter, imageID5Parameter, imageID6Parameter, imageID7Parameter, imageID8Parameter, imageID9Parameter, imageID10Parameter, imageID11Parameter, imageID12Parameter, imageID13Parameter, imageID14Parameter, imageID15Parameter, imageID16Parameter, imageID17Parameter, imageID18Parameter, imageID19Parameter, imageID20Parameter, noteIDParameter, shiftIDParameter, rolIDParameter, useridParameter);
        }
    
        public virtual int sp_CRMJobCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMJobCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_CRMJobCategories_Insert(Nullable<short> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMJobCategories_Insert", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_CRMJobCategories_Select_Result> sp_CRMJobCategories_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CRMJobCategories_Select_Result>("sp_CRMJobCategories_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_CRMJobCategories_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMJobCategories_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_CRMJobs_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMJobs_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_CRMJobs_Insert(Nullable<short> cRMJobCategoryID, Nullable<int> cRMJobSubCategoryID, Nullable<int> iD, string name, Nullable<double> price, string dsc, Nullable<bool> sendSMS, string sMSMessage, Nullable<bool> active, Nullable<int> userid)
        {
            var cRMJobCategoryIDParameter = cRMJobCategoryID.HasValue ?
                new ObjectParameter("CRMJobCategoryID", cRMJobCategoryID) :
                new ObjectParameter("CRMJobCategoryID", typeof(short));
    
            var cRMJobSubCategoryIDParameter = cRMJobSubCategoryID.HasValue ?
                new ObjectParameter("CRMJobSubCategoryID", cRMJobSubCategoryID) :
                new ObjectParameter("CRMJobSubCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var sendSMSParameter = sendSMS.HasValue ?
                new ObjectParameter("SendSMS", sendSMS) :
                new ObjectParameter("SendSMS", typeof(bool));
    
            var sMSMessageParameter = sMSMessage != null ?
                new ObjectParameter("SMSMessage", sMSMessage) :
                new ObjectParameter("SMSMessage", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMJobs_Insert", cRMJobCategoryIDParameter, cRMJobSubCategoryIDParameter, iDParameter, nameParameter, priceParameter, dscParameter, sendSMSParameter, sMSMessageParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_CRMJobs_Select_Result> sp_CRMJobs_Select(Nullable<short> cRMJobCategoryID, Nullable<int> cRMJobSubCategoryID, string name, Nullable<int> active)
        {
            var cRMJobCategoryIDParameter = cRMJobCategoryID.HasValue ?
                new ObjectParameter("CRMJobCategoryID", cRMJobCategoryID) :
                new ObjectParameter("CRMJobCategoryID", typeof(short));
    
            var cRMJobSubCategoryIDParameter = cRMJobSubCategoryID.HasValue ?
                new ObjectParameter("CRMJobSubCategoryID", cRMJobSubCategoryID) :
                new ObjectParameter("CRMJobSubCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CRMJobs_Select_Result>("sp_CRMJobs_Select", cRMJobCategoryIDParameter, cRMJobSubCategoryIDParameter, nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_CRMJobs_SelectRow_Result> sp_CRMJobs_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CRMJobs_SelectRow_Result>("sp_CRMJobs_SelectRow", iDParameter);
        }
    
        public virtual int sp_CRMJobs_Update(Nullable<short> cRMJobCategoryID, Nullable<int> cRMJobSubCategoryID, Nullable<int> iD, string name, Nullable<double> price, string dsc, Nullable<bool> sendSMS, string sMSMessage, Nullable<bool> active, Nullable<int> userid)
        {
            var cRMJobCategoryIDParameter = cRMJobCategoryID.HasValue ?
                new ObjectParameter("CRMJobCategoryID", cRMJobCategoryID) :
                new ObjectParameter("CRMJobCategoryID", typeof(short));
    
            var cRMJobSubCategoryIDParameter = cRMJobSubCategoryID.HasValue ?
                new ObjectParameter("CRMJobSubCategoryID", cRMJobSubCategoryID) :
                new ObjectParameter("CRMJobSubCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var sendSMSParameter = sendSMS.HasValue ?
                new ObjectParameter("SendSMS", sendSMS) :
                new ObjectParameter("SendSMS", typeof(bool));
    
            var sMSMessageParameter = sMSMessage != null ?
                new ObjectParameter("SMSMessage", sMSMessage) :
                new ObjectParameter("SMSMessage", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMJobs_Update", cRMJobCategoryIDParameter, cRMJobSubCategoryIDParameter, iDParameter, nameParameter, priceParameter, dscParameter, sendSMSParameter, sMSMessageParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_CRMJobSubCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMJobSubCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_CRMJobSubCategories_Insert(Nullable<short> cRMJobCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var cRMJobCategoryIDParameter = cRMJobCategoryID.HasValue ?
                new ObjectParameter("CRMJobCategoryID", cRMJobCategoryID) :
                new ObjectParameter("CRMJobCategoryID", typeof(short));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMJobSubCategories_Insert", cRMJobCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_CRMJobSubCategories_Select_Result> sp_CRMJobSubCategories_Select(Nullable<short> cRMJobCategoryID, string name, Nullable<int> active)
        {
            var cRMJobCategoryIDParameter = cRMJobCategoryID.HasValue ?
                new ObjectParameter("CRMJobCategoryID", cRMJobCategoryID) :
                new ObjectParameter("CRMJobCategoryID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CRMJobSubCategories_Select_Result>("sp_CRMJobSubCategories_Select", cRMJobCategoryIDParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_CRMJobSubCategories_Update(Nullable<short> cRMJobCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var cRMJobCategoryIDParameter = cRMJobCategoryID.HasValue ?
                new ObjectParameter("CRMJobCategoryID", cRMJobCategoryID) :
                new ObjectParameter("CRMJobCategoryID", typeof(short));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMJobSubCategories_Update", cRMJobCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_CRMResultCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMResultCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_CRMResultCategories_Insert(Nullable<short> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMResultCategories_Insert", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_CRMResultCategories_Select_Result> sp_CRMResultCategories_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CRMResultCategories_Select_Result>("sp_CRMResultCategories_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_CRMResultCategories_Update(Nullable<short> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMResultCategories_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_CRMResults_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMResults_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_CRMResults_Insert(Nullable<short> cRMResultCategoryID, Nullable<int> cRMResultSubCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> sendSMS, string sMSMessage, Nullable<bool> active, Nullable<int> userid)
        {
            var cRMResultCategoryIDParameter = cRMResultCategoryID.HasValue ?
                new ObjectParameter("CRMResultCategoryID", cRMResultCategoryID) :
                new ObjectParameter("CRMResultCategoryID", typeof(short));
    
            var cRMResultSubCategoryIDParameter = cRMResultSubCategoryID.HasValue ?
                new ObjectParameter("CRMResultSubCategoryID", cRMResultSubCategoryID) :
                new ObjectParameter("CRMResultSubCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var sendSMSParameter = sendSMS.HasValue ?
                new ObjectParameter("SendSMS", sendSMS) :
                new ObjectParameter("SendSMS", typeof(bool));
    
            var sMSMessageParameter = sMSMessage != null ?
                new ObjectParameter("SMSMessage", sMSMessage) :
                new ObjectParameter("SMSMessage", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMResults_Insert", cRMResultCategoryIDParameter, cRMResultSubCategoryIDParameter, iDParameter, nameParameter, dscParameter, sendSMSParameter, sMSMessageParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_CRMResults_Select_Result> sp_CRMResults_Select(Nullable<short> cRMResultCategoryID, Nullable<int> cRMResultSubCategoryID, string name, Nullable<int> active)
        {
            var cRMResultCategoryIDParameter = cRMResultCategoryID.HasValue ?
                new ObjectParameter("CRMResultCategoryID", cRMResultCategoryID) :
                new ObjectParameter("CRMResultCategoryID", typeof(short));
    
            var cRMResultSubCategoryIDParameter = cRMResultSubCategoryID.HasValue ?
                new ObjectParameter("CRMResultSubCategoryID", cRMResultSubCategoryID) :
                new ObjectParameter("CRMResultSubCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CRMResults_Select_Result>("sp_CRMResults_Select", cRMResultCategoryIDParameter, cRMResultSubCategoryIDParameter, nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_CRMResults_SelectRow_Result> sp_CRMResults_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CRMResults_SelectRow_Result>("sp_CRMResults_SelectRow", iDParameter);
        }
    
        public virtual int sp_CRMResults_Update(Nullable<short> cRMResultCategoryID, Nullable<int> cRMResultSubCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> sendSMS, string sMSMessage, Nullable<bool> active, Nullable<int> userid)
        {
            var cRMResultCategoryIDParameter = cRMResultCategoryID.HasValue ?
                new ObjectParameter("CRMResultCategoryID", cRMResultCategoryID) :
                new ObjectParameter("CRMResultCategoryID", typeof(short));
    
            var cRMResultSubCategoryIDParameter = cRMResultSubCategoryID.HasValue ?
                new ObjectParameter("CRMResultSubCategoryID", cRMResultSubCategoryID) :
                new ObjectParameter("CRMResultSubCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var sendSMSParameter = sendSMS.HasValue ?
                new ObjectParameter("SendSMS", sendSMS) :
                new ObjectParameter("SendSMS", typeof(bool));
    
            var sMSMessageParameter = sMSMessage != null ?
                new ObjectParameter("SMSMessage", sMSMessage) :
                new ObjectParameter("SMSMessage", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMResults_Update", cRMResultCategoryIDParameter, cRMResultSubCategoryIDParameter, iDParameter, nameParameter, dscParameter, sendSMSParameter, sMSMessageParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_CRMResultSubCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMResultSubCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_CRMResultSubCategories_Insert(Nullable<short> cRMResultCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var cRMResultCategoryIDParameter = cRMResultCategoryID.HasValue ?
                new ObjectParameter("CRMResultCategoryID", cRMResultCategoryID) :
                new ObjectParameter("CRMResultCategoryID", typeof(short));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMResultSubCategories_Insert", cRMResultCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_CRMResultSubCategories_Select_Result> sp_CRMResultSubCategories_Select(Nullable<short> cRMResultCategoryID, string name, Nullable<int> active)
        {
            var cRMResultCategoryIDParameter = cRMResultCategoryID.HasValue ?
                new ObjectParameter("CRMResultCategoryID", cRMResultCategoryID) :
                new ObjectParameter("CRMResultCategoryID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CRMResultSubCategories_Select_Result>("sp_CRMResultSubCategories_Select", cRMResultCategoryIDParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_CRMResultSubCategories_Update(Nullable<short> cRMResultCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var cRMResultCategoryIDParameter = cRMResultCategoryID.HasValue ?
                new ObjectParameter("CRMResultCategoryID", cRMResultCategoryID) :
                new ObjectParameter("CRMResultCategoryID", typeof(short));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMResultSubCategories_Update", cRMResultCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_CRMStates_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMStates_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_CRMStates_Insert(Nullable<int> iD, string name, string dsc, Nullable<bool> broadcast, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var broadcastParameter = broadcast.HasValue ?
                new ObjectParameter("Broadcast", broadcast) :
                new ObjectParameter("Broadcast", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMStates_Insert", iDParameter, nameParameter, dscParameter, broadcastParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_CRMStates_Select_Result> sp_CRMStates_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CRMStates_Select_Result>("sp_CRMStates_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_CRMStates_SelectRow_Result> sp_CRMStates_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CRMStates_SelectRow_Result>("sp_CRMStates_SelectRow", iDParameter);
        }
    
        public virtual int sp_CRMStates_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> broadcast, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var broadcastParameter = broadcast.HasValue ?
                new ObjectParameter("Broadcast", broadcast) :
                new ObjectParameter("Broadcast", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMStates_Update", iDParameter, nameParameter, dscParameter, broadcastParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_CRMStatesView_Delete(Nullable<int> cRMStateID, Nullable<int> userID)
        {
            var cRMStateIDParameter = cRMStateID.HasValue ?
                new ObjectParameter("CRMStateID", cRMStateID) :
                new ObjectParameter("CRMStateID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMStatesView_Delete", cRMStateIDParameter, userIDParameter);
        }
    
        public virtual int sp_CRMStatesView_Insert(Nullable<int> cRMStateID, Nullable<int> userID)
        {
            var cRMStateIDParameter = cRMStateID.HasValue ?
                new ObjectParameter("CRMStateID", cRMStateID) :
                new ObjectParameter("CRMStateID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMStatesView_Insert", cRMStateIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_CRMStatesView_Select_Result> sp_CRMStatesView_Select(Nullable<int> cRMStateID, Nullable<int> userID)
        {
            var cRMStateIDParameter = cRMStateID.HasValue ?
                new ObjectParameter("CRMStateID", cRMStateID) :
                new ObjectParameter("CRMStateID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CRMStatesView_Select_Result>("sp_CRMStatesView_Select", cRMStateIDParameter, userIDParameter);
        }
    
        public virtual int sp_CRMTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_CRMTypes_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMTypes_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_CRMTypes_Select_Result> sp_CRMTypes_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CRMTypes_Select_Result>("sp_CRMTypes_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_CRMTypes_SelectRow_Result> sp_CRMTypes_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CRMTypes_SelectRow_Result>("sp_CRMTypes_SelectRow", iDParameter);
        }
    
        public virtual int sp_CRMTypes_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CRMTypes_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_CustomerGroups_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CustomerGroups_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_CustomerGroups_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> rolID, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var rolIDParameter = rolID.HasValue ?
                new ObjectParameter("RolID", rolID) :
                new ObjectParameter("RolID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CustomerGroups_Insert", nameParameter, dscParameter, activeParameter, rolIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_CustomerGroups_Select_Result> sp_CustomerGroups_Select(string name, Nullable<int> active, Nullable<int> rolID, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            var rolIDParameter = rolID.HasValue ?
                new ObjectParameter("RolID", rolID) :
                new ObjectParameter("RolID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CustomerGroups_Select_Result>("sp_CustomerGroups_Select", nameParameter, activeParameter, rolIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_CustomerGroups_SelectRow_Result> sp_CustomerGroups_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CustomerGroups_SelectRow_Result>("sp_CustomerGroups_SelectRow", iDParameter);
        }
    
        public virtual int sp_CustomerGroups_Update(Nullable<short> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CustomerGroups_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Customers_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Customers_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Customers_DeleteAll(string alphabet, Nullable<byte> alphabetFa, Nullable<int> iD, Nullable<int> iD_Start, Nullable<int> iD_End, Nullable<byte> sexTypeID, Nullable<int> customerGroupID, Nullable<int> customerSubGroupID, Nullable<short> customGroupID, Nullable<short> jobID, string firstName, string lastName, string fullName, string meli, string email, string webSite, string address, string postalCode, string phoneNumber, string shsh, Nullable<bool> birthDayNow, string birthPlace, string fatherName, Nullable<byte> marriageTypeID, Nullable<bool> marriageDateNow, string identificationDsc, Nullable<short> educationTypeID, string fieldStudy, string educationDsc, string companyName, string profession, string officePost, string companyDsc, Nullable<int> locationID, string dsc, Nullable<int> active, Nullable<byte> star, string registerDate_Start, string registerDate_End, string create_date_start, string create_date_end, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange, Nullable<int> delUserid)
        {
            var alphabetParameter = alphabet != null ?
                new ObjectParameter("Alphabet", alphabet) :
                new ObjectParameter("Alphabet", typeof(string));
    
            var alphabetFaParameter = alphabetFa.HasValue ?
                new ObjectParameter("AlphabetFa", alphabetFa) :
                new ObjectParameter("AlphabetFa", typeof(byte));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(int));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customGroupIDParameter = customGroupID.HasValue ?
                new ObjectParameter("CustomGroupID", customGroupID) :
                new ObjectParameter("CustomGroupID", typeof(short));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(short));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var meliParameter = meli != null ?
                new ObjectParameter("Meli", meli) :
                new ObjectParameter("Meli", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var webSiteParameter = webSite != null ?
                new ObjectParameter("WebSite", webSite) :
                new ObjectParameter("WebSite", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var shshParameter = shsh != null ?
                new ObjectParameter("Shsh", shsh) :
                new ObjectParameter("Shsh", typeof(string));
    
            var birthDayNowParameter = birthDayNow.HasValue ?
                new ObjectParameter("BirthDayNow", birthDayNow) :
                new ObjectParameter("BirthDayNow", typeof(bool));
    
            var birthPlaceParameter = birthPlace != null ?
                new ObjectParameter("BirthPlace", birthPlace) :
                new ObjectParameter("BirthPlace", typeof(string));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var marriageTypeIDParameter = marriageTypeID.HasValue ?
                new ObjectParameter("MarriageTypeID", marriageTypeID) :
                new ObjectParameter("MarriageTypeID", typeof(byte));
    
            var marriageDateNowParameter = marriageDateNow.HasValue ?
                new ObjectParameter("MarriageDateNow", marriageDateNow) :
                new ObjectParameter("MarriageDateNow", typeof(bool));
    
            var identificationDscParameter = identificationDsc != null ?
                new ObjectParameter("IdentificationDsc", identificationDsc) :
                new ObjectParameter("IdentificationDsc", typeof(string));
    
            var educationTypeIDParameter = educationTypeID.HasValue ?
                new ObjectParameter("EducationTypeID", educationTypeID) :
                new ObjectParameter("EducationTypeID", typeof(short));
    
            var fieldStudyParameter = fieldStudy != null ?
                new ObjectParameter("FieldStudy", fieldStudy) :
                new ObjectParameter("FieldStudy", typeof(string));
    
            var educationDscParameter = educationDsc != null ?
                new ObjectParameter("EducationDsc", educationDsc) :
                new ObjectParameter("EducationDsc", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var professionParameter = profession != null ?
                new ObjectParameter("Profession", profession) :
                new ObjectParameter("Profession", typeof(string));
    
            var officePostParameter = officePost != null ?
                new ObjectParameter("OfficePost", officePost) :
                new ObjectParameter("OfficePost", typeof(string));
    
            var companyDscParameter = companyDsc != null ?
                new ObjectParameter("CompanyDsc", companyDsc) :
                new ObjectParameter("CompanyDsc", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            var starParameter = star.HasValue ?
                new ObjectParameter("Star", star) :
                new ObjectParameter("Star", typeof(byte));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("rolid", rolid) :
                new ObjectParameter("rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            var delUseridParameter = delUserid.HasValue ?
                new ObjectParameter("DelUserid", delUserid) :
                new ObjectParameter("DelUserid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Customers_DeleteAll", alphabetParameter, alphabetFaParameter, iDParameter, iD_StartParameter, iD_EndParameter, sexTypeIDParameter, customerGroupIDParameter, customerSubGroupIDParameter, customGroupIDParameter, jobIDParameter, firstNameParameter, lastNameParameter, fullNameParameter, meliParameter, emailParameter, webSiteParameter, addressParameter, postalCodeParameter, phoneNumberParameter, shshParameter, birthDayNowParameter, birthPlaceParameter, fatherNameParameter, marriageTypeIDParameter, marriageDateNowParameter, identificationDscParameter, educationTypeIDParameter, fieldStudyParameter, educationDscParameter, companyNameParameter, professionParameter, officePostParameter, companyDscParameter, locationIDParameter, dscParameter, activeParameter, starParameter, registerDate_StartParameter, registerDate_EndParameter, create_date_startParameter, create_date_endParameter, rolidParameter, useridParameter, topRangeParameter, delUseridParameter);
        }
    
        public virtual int sp_Customers_FavUpdate(Nullable<int> iD, Nullable<bool> fav)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var favParameter = fav.HasValue ?
                new ObjectParameter("fav", fav) :
                new ObjectParameter("fav", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Customers_FavUpdate", iDParameter, favParameter);
        }
    
        public virtual int sp_Customers_Insert(Nullable<int> iD, Nullable<byte> sexTypeID, Nullable<short> customerGroupID, Nullable<int> customerSubGroupID, Nullable<short> customGroupID, Nullable<short> jobID, string firstName, string lastName, string fullName, string meli, Nullable<byte> emailTypeID, string email1, string email2, string email3, Nullable<byte> webSiteTypeID, string webSite1, string webSite2, string webSite3, Nullable<byte> addressTypeID, string address1, string address2, string address3, string postalCode1, string postalCode2, string postalCode3, Nullable<byte> phoneTypeID1, Nullable<byte> phoneTypeID2, Nullable<byte> phoneTypeID3, Nullable<byte> phoneTypeID4, Nullable<byte> phoneTypeID5, Nullable<byte> phoneTypeID6, string phoneNumber1, string phoneNumber2, string phoneNumber3, string phoneNumber4, string phoneNumber5, string phoneNumber6, string phoneNumber7, string phoneNumber8, string phoneNumber9, string phoneNumber10, string phoneNumber11, string phoneNumber12, string sMS, Nullable<int> imageID, string shsh, Nullable<System.DateTime> birthDay, string birthPlace, string fatherName, Nullable<byte> marriageTypeID, Nullable<System.DateTime> marriageDate, string identificationDsc, Nullable<short> educationTypeID, Nullable<System.DateTime> graduationDate, string fieldStudy, string educationDsc, string companyName, string companyRegisterCode, string companyEconomicCode, string profession, string adminName, string secretary, string officePost, string companyDsc, Nullable<int> locationID, string dsc, Nullable<double> maxBed, string bankAccNo, string bankCardNo, Nullable<System.DateTime> registerDate, Nullable<bool> active, Nullable<bool> del, Nullable<bool> @lock, Nullable<byte> star, Nullable<int> rolid, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(short));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customGroupIDParameter = customGroupID.HasValue ?
                new ObjectParameter("CustomGroupID", customGroupID) :
                new ObjectParameter("CustomGroupID", typeof(short));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(short));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var meliParameter = meli != null ?
                new ObjectParameter("Meli", meli) :
                new ObjectParameter("Meli", typeof(string));
    
            var emailTypeIDParameter = emailTypeID.HasValue ?
                new ObjectParameter("EmailTypeID", emailTypeID) :
                new ObjectParameter("EmailTypeID", typeof(byte));
    
            var email1Parameter = email1 != null ?
                new ObjectParameter("Email1", email1) :
                new ObjectParameter("Email1", typeof(string));
    
            var email2Parameter = email2 != null ?
                new ObjectParameter("Email2", email2) :
                new ObjectParameter("Email2", typeof(string));
    
            var email3Parameter = email3 != null ?
                new ObjectParameter("Email3", email3) :
                new ObjectParameter("Email3", typeof(string));
    
            var webSiteTypeIDParameter = webSiteTypeID.HasValue ?
                new ObjectParameter("WebSiteTypeID", webSiteTypeID) :
                new ObjectParameter("WebSiteTypeID", typeof(byte));
    
            var webSite1Parameter = webSite1 != null ?
                new ObjectParameter("WebSite1", webSite1) :
                new ObjectParameter("WebSite1", typeof(string));
    
            var webSite2Parameter = webSite2 != null ?
                new ObjectParameter("WebSite2", webSite2) :
                new ObjectParameter("WebSite2", typeof(string));
    
            var webSite3Parameter = webSite3 != null ?
                new ObjectParameter("WebSite3", webSite3) :
                new ObjectParameter("WebSite3", typeof(string));
    
            var addressTypeIDParameter = addressTypeID.HasValue ?
                new ObjectParameter("AddressTypeID", addressTypeID) :
                new ObjectParameter("AddressTypeID", typeof(byte));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var address3Parameter = address3 != null ?
                new ObjectParameter("Address3", address3) :
                new ObjectParameter("Address3", typeof(string));
    
            var postalCode1Parameter = postalCode1 != null ?
                new ObjectParameter("PostalCode1", postalCode1) :
                new ObjectParameter("PostalCode1", typeof(string));
    
            var postalCode2Parameter = postalCode2 != null ?
                new ObjectParameter("PostalCode2", postalCode2) :
                new ObjectParameter("PostalCode2", typeof(string));
    
            var postalCode3Parameter = postalCode3 != null ?
                new ObjectParameter("PostalCode3", postalCode3) :
                new ObjectParameter("PostalCode3", typeof(string));
    
            var phoneTypeID1Parameter = phoneTypeID1.HasValue ?
                new ObjectParameter("PhoneTypeID1", phoneTypeID1) :
                new ObjectParameter("PhoneTypeID1", typeof(byte));
    
            var phoneTypeID2Parameter = phoneTypeID2.HasValue ?
                new ObjectParameter("PhoneTypeID2", phoneTypeID2) :
                new ObjectParameter("PhoneTypeID2", typeof(byte));
    
            var phoneTypeID3Parameter = phoneTypeID3.HasValue ?
                new ObjectParameter("PhoneTypeID3", phoneTypeID3) :
                new ObjectParameter("PhoneTypeID3", typeof(byte));
    
            var phoneTypeID4Parameter = phoneTypeID4.HasValue ?
                new ObjectParameter("PhoneTypeID4", phoneTypeID4) :
                new ObjectParameter("PhoneTypeID4", typeof(byte));
    
            var phoneTypeID5Parameter = phoneTypeID5.HasValue ?
                new ObjectParameter("PhoneTypeID5", phoneTypeID5) :
                new ObjectParameter("PhoneTypeID5", typeof(byte));
    
            var phoneTypeID6Parameter = phoneTypeID6.HasValue ?
                new ObjectParameter("PhoneTypeID6", phoneTypeID6) :
                new ObjectParameter("PhoneTypeID6", typeof(byte));
    
            var phoneNumber1Parameter = phoneNumber1 != null ?
                new ObjectParameter("PhoneNumber1", phoneNumber1) :
                new ObjectParameter("PhoneNumber1", typeof(string));
    
            var phoneNumber2Parameter = phoneNumber2 != null ?
                new ObjectParameter("PhoneNumber2", phoneNumber2) :
                new ObjectParameter("PhoneNumber2", typeof(string));
    
            var phoneNumber3Parameter = phoneNumber3 != null ?
                new ObjectParameter("PhoneNumber3", phoneNumber3) :
                new ObjectParameter("PhoneNumber3", typeof(string));
    
            var phoneNumber4Parameter = phoneNumber4 != null ?
                new ObjectParameter("PhoneNumber4", phoneNumber4) :
                new ObjectParameter("PhoneNumber4", typeof(string));
    
            var phoneNumber5Parameter = phoneNumber5 != null ?
                new ObjectParameter("PhoneNumber5", phoneNumber5) :
                new ObjectParameter("PhoneNumber5", typeof(string));
    
            var phoneNumber6Parameter = phoneNumber6 != null ?
                new ObjectParameter("PhoneNumber6", phoneNumber6) :
                new ObjectParameter("PhoneNumber6", typeof(string));
    
            var phoneNumber7Parameter = phoneNumber7 != null ?
                new ObjectParameter("PhoneNumber7", phoneNumber7) :
                new ObjectParameter("PhoneNumber7", typeof(string));
    
            var phoneNumber8Parameter = phoneNumber8 != null ?
                new ObjectParameter("PhoneNumber8", phoneNumber8) :
                new ObjectParameter("PhoneNumber8", typeof(string));
    
            var phoneNumber9Parameter = phoneNumber9 != null ?
                new ObjectParameter("PhoneNumber9", phoneNumber9) :
                new ObjectParameter("PhoneNumber9", typeof(string));
    
            var phoneNumber10Parameter = phoneNumber10 != null ?
                new ObjectParameter("PhoneNumber10", phoneNumber10) :
                new ObjectParameter("PhoneNumber10", typeof(string));
    
            var phoneNumber11Parameter = phoneNumber11 != null ?
                new ObjectParameter("PhoneNumber11", phoneNumber11) :
                new ObjectParameter("PhoneNumber11", typeof(string));
    
            var phoneNumber12Parameter = phoneNumber12 != null ?
                new ObjectParameter("PhoneNumber12", phoneNumber12) :
                new ObjectParameter("PhoneNumber12", typeof(string));
    
            var sMSParameter = sMS != null ?
                new ObjectParameter("SMS", sMS) :
                new ObjectParameter("SMS", typeof(string));
    
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(int));
    
            var shshParameter = shsh != null ?
                new ObjectParameter("Shsh", shsh) :
                new ObjectParameter("Shsh", typeof(string));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("BirthDay", birthDay) :
                new ObjectParameter("BirthDay", typeof(System.DateTime));
    
            var birthPlaceParameter = birthPlace != null ?
                new ObjectParameter("BirthPlace", birthPlace) :
                new ObjectParameter("BirthPlace", typeof(string));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var marriageTypeIDParameter = marriageTypeID.HasValue ?
                new ObjectParameter("MarriageTypeID", marriageTypeID) :
                new ObjectParameter("MarriageTypeID", typeof(byte));
    
            var marriageDateParameter = marriageDate.HasValue ?
                new ObjectParameter("MarriageDate", marriageDate) :
                new ObjectParameter("MarriageDate", typeof(System.DateTime));
    
            var identificationDscParameter = identificationDsc != null ?
                new ObjectParameter("IdentificationDsc", identificationDsc) :
                new ObjectParameter("IdentificationDsc", typeof(string));
    
            var educationTypeIDParameter = educationTypeID.HasValue ?
                new ObjectParameter("EducationTypeID", educationTypeID) :
                new ObjectParameter("EducationTypeID", typeof(short));
    
            var graduationDateParameter = graduationDate.HasValue ?
                new ObjectParameter("GraduationDate", graduationDate) :
                new ObjectParameter("GraduationDate", typeof(System.DateTime));
    
            var fieldStudyParameter = fieldStudy != null ?
                new ObjectParameter("FieldStudy", fieldStudy) :
                new ObjectParameter("FieldStudy", typeof(string));
    
            var educationDscParameter = educationDsc != null ?
                new ObjectParameter("EducationDsc", educationDsc) :
                new ObjectParameter("EducationDsc", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var companyRegisterCodeParameter = companyRegisterCode != null ?
                new ObjectParameter("CompanyRegisterCode", companyRegisterCode) :
                new ObjectParameter("CompanyRegisterCode", typeof(string));
    
            var companyEconomicCodeParameter = companyEconomicCode != null ?
                new ObjectParameter("CompanyEconomicCode", companyEconomicCode) :
                new ObjectParameter("CompanyEconomicCode", typeof(string));
    
            var professionParameter = profession != null ?
                new ObjectParameter("Profession", profession) :
                new ObjectParameter("Profession", typeof(string));
    
            var adminNameParameter = adminName != null ?
                new ObjectParameter("AdminName", adminName) :
                new ObjectParameter("AdminName", typeof(string));
    
            var secretaryParameter = secretary != null ?
                new ObjectParameter("Secretary", secretary) :
                new ObjectParameter("Secretary", typeof(string));
    
            var officePostParameter = officePost != null ?
                new ObjectParameter("OfficePost", officePost) :
                new ObjectParameter("OfficePost", typeof(string));
    
            var companyDscParameter = companyDsc != null ?
                new ObjectParameter("CompanyDsc", companyDsc) :
                new ObjectParameter("CompanyDsc", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var maxBedParameter = maxBed.HasValue ?
                new ObjectParameter("MaxBed", maxBed) :
                new ObjectParameter("MaxBed", typeof(double));
    
            var bankAccNoParameter = bankAccNo != null ?
                new ObjectParameter("BankAccNo", bankAccNo) :
                new ObjectParameter("BankAccNo", typeof(string));
    
            var bankCardNoParameter = bankCardNo != null ?
                new ObjectParameter("BankCardNo", bankCardNo) :
                new ObjectParameter("BankCardNo", typeof(string));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var delParameter = del.HasValue ?
                new ObjectParameter("Del", del) :
                new ObjectParameter("Del", typeof(bool));
    
            var lockParameter = @lock.HasValue ?
                new ObjectParameter("Lock", @lock) :
                new ObjectParameter("Lock", typeof(bool));
    
            var starParameter = star.HasValue ?
                new ObjectParameter("Star", star) :
                new ObjectParameter("Star", typeof(byte));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("rolid", rolid) :
                new ObjectParameter("rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Customers_Insert", iDParameter, sexTypeIDParameter, customerGroupIDParameter, customerSubGroupIDParameter, customGroupIDParameter, jobIDParameter, firstNameParameter, lastNameParameter, fullNameParameter, meliParameter, emailTypeIDParameter, email1Parameter, email2Parameter, email3Parameter, webSiteTypeIDParameter, webSite1Parameter, webSite2Parameter, webSite3Parameter, addressTypeIDParameter, address1Parameter, address2Parameter, address3Parameter, postalCode1Parameter, postalCode2Parameter, postalCode3Parameter, phoneTypeID1Parameter, phoneTypeID2Parameter, phoneTypeID3Parameter, phoneTypeID4Parameter, phoneTypeID5Parameter, phoneTypeID6Parameter, phoneNumber1Parameter, phoneNumber2Parameter, phoneNumber3Parameter, phoneNumber4Parameter, phoneNumber5Parameter, phoneNumber6Parameter, phoneNumber7Parameter, phoneNumber8Parameter, phoneNumber9Parameter, phoneNumber10Parameter, phoneNumber11Parameter, phoneNumber12Parameter, sMSParameter, imageIDParameter, shshParameter, birthDayParameter, birthPlaceParameter, fatherNameParameter, marriageTypeIDParameter, marriageDateParameter, identificationDscParameter, educationTypeIDParameter, graduationDateParameter, fieldStudyParameter, educationDscParameter, companyNameParameter, companyRegisterCodeParameter, companyEconomicCodeParameter, professionParameter, adminNameParameter, secretaryParameter, officePostParameter, companyDscParameter, locationIDParameter, dscParameter, maxBedParameter, bankAccNoParameter, bankCardNoParameter, registerDateParameter, activeParameter, delParameter, lockParameter, starParameter, rolidParameter, useridParameter);
        }
    
        public virtual int sp_Customers_MakeCard(Nullable<int> iD, string rFID, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var rFIDParameter = rFID != null ?
                new ObjectParameter("RFID", rFID) :
                new ObjectParameter("RFID", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Customers_MakeCard", iDParameter, rFIDParameter, useridParameter);
        }
    
        public virtual int sp_Customers_RemoveCard(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Customers_RemoveCard", iDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Customers_Select_Result> sp_Customers_Select(string alphabet, Nullable<byte> alphabetFa, Nullable<int> iD, Nullable<int> iD_Start, Nullable<int> iD_End, Nullable<byte> sexTypeID, Nullable<int> customerGroupID, Nullable<int> customerSubGroupID, Nullable<short> customGroupID, Nullable<short> jobID, string firstName, string lastName, string fullName, string meli, string email, string webSite, string address, string postalCode, string phoneNumber, string shsh, Nullable<bool> birthDayNow, string birthPlace, string fatherName, Nullable<byte> marriageTypeID, Nullable<bool> marriageDateNow, string identificationDsc, Nullable<short> educationTypeID, string fieldStudy, string educationDsc, string companyName, string profession, string officePost, string companyDsc, Nullable<int> locationID, string dsc, Nullable<int> active, Nullable<byte> star, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var alphabetParameter = alphabet != null ?
                new ObjectParameter("Alphabet", alphabet) :
                new ObjectParameter("Alphabet", typeof(string));
    
            var alphabetFaParameter = alphabetFa.HasValue ?
                new ObjectParameter("AlphabetFa", alphabetFa) :
                new ObjectParameter("AlphabetFa", typeof(byte));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(int));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customGroupIDParameter = customGroupID.HasValue ?
                new ObjectParameter("CustomGroupID", customGroupID) :
                new ObjectParameter("CustomGroupID", typeof(short));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(short));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var meliParameter = meli != null ?
                new ObjectParameter("Meli", meli) :
                new ObjectParameter("Meli", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var webSiteParameter = webSite != null ?
                new ObjectParameter("WebSite", webSite) :
                new ObjectParameter("WebSite", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var shshParameter = shsh != null ?
                new ObjectParameter("Shsh", shsh) :
                new ObjectParameter("Shsh", typeof(string));
    
            var birthDayNowParameter = birthDayNow.HasValue ?
                new ObjectParameter("BirthDayNow", birthDayNow) :
                new ObjectParameter("BirthDayNow", typeof(bool));
    
            var birthPlaceParameter = birthPlace != null ?
                new ObjectParameter("BirthPlace", birthPlace) :
                new ObjectParameter("BirthPlace", typeof(string));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var marriageTypeIDParameter = marriageTypeID.HasValue ?
                new ObjectParameter("MarriageTypeID", marriageTypeID) :
                new ObjectParameter("MarriageTypeID", typeof(byte));
    
            var marriageDateNowParameter = marriageDateNow.HasValue ?
                new ObjectParameter("MarriageDateNow", marriageDateNow) :
                new ObjectParameter("MarriageDateNow", typeof(bool));
    
            var identificationDscParameter = identificationDsc != null ?
                new ObjectParameter("IdentificationDsc", identificationDsc) :
                new ObjectParameter("IdentificationDsc", typeof(string));
    
            var educationTypeIDParameter = educationTypeID.HasValue ?
                new ObjectParameter("EducationTypeID", educationTypeID) :
                new ObjectParameter("EducationTypeID", typeof(short));
    
            var fieldStudyParameter = fieldStudy != null ?
                new ObjectParameter("FieldStudy", fieldStudy) :
                new ObjectParameter("FieldStudy", typeof(string));
    
            var educationDscParameter = educationDsc != null ?
                new ObjectParameter("EducationDsc", educationDsc) :
                new ObjectParameter("EducationDsc", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var professionParameter = profession != null ?
                new ObjectParameter("Profession", profession) :
                new ObjectParameter("Profession", typeof(string));
    
            var officePostParameter = officePost != null ?
                new ObjectParameter("OfficePost", officePost) :
                new ObjectParameter("OfficePost", typeof(string));
    
            var companyDscParameter = companyDsc != null ?
                new ObjectParameter("CompanyDsc", companyDsc) :
                new ObjectParameter("CompanyDsc", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            var starParameter = star.HasValue ?
                new ObjectParameter("Star", star) :
                new ObjectParameter("Star", typeof(byte));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("rolid", rolid) :
                new ObjectParameter("rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Customers_Select_Result>("sp_Customers_Select", alphabetParameter, alphabetFaParameter, iDParameter, iD_StartParameter, iD_EndParameter, sexTypeIDParameter, customerGroupIDParameter, customerSubGroupIDParameter, customGroupIDParameter, jobIDParameter, firstNameParameter, lastNameParameter, fullNameParameter, meliParameter, emailParameter, webSiteParameter, addressParameter, postalCodeParameter, phoneNumberParameter, shshParameter, birthDayNowParameter, birthPlaceParameter, fatherNameParameter, marriageTypeIDParameter, marriageDateNowParameter, identificationDscParameter, educationTypeIDParameter, fieldStudyParameter, educationDscParameter, companyNameParameter, professionParameter, officePostParameter, companyDscParameter, locationIDParameter, dscParameter, activeParameter, starParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Customers_SelectRow_Result> sp_Customers_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Customers_SelectRow_Result>("sp_Customers_SelectRow", iDParameter);
        }
    
        public virtual ObjectResult<sp_Customers_SelectRowByTelNumber_Result> sp_Customers_SelectRowByTelNumber(string telNumber)
        {
            var telNumberParameter = telNumber != null ?
                new ObjectParameter("TelNumber", telNumber) :
                new ObjectParameter("TelNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Customers_SelectRowByTelNumber_Result>("sp_Customers_SelectRowByTelNumber", telNumberParameter);
        }
    
        public virtual ObjectResult<sp_Customers_SelectRowRFID_Result> sp_Customers_SelectRowRFID(string rFID)
        {
            var rFIDParameter = rFID != null ?
                new ObjectParameter("RFID", rFID) :
                new ObjectParameter("RFID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Customers_SelectRowRFID_Result>("sp_Customers_SelectRowRFID", rFIDParameter);
        }
    
        public virtual int sp_Customers_StarUpdate(Nullable<int> iD, Nullable<byte> star)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var starParameter = star.HasValue ?
                new ObjectParameter("Star", star) :
                new ObjectParameter("Star", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Customers_StarUpdate", iDParameter, starParameter);
        }
    
        public virtual int sp_Customers_Update(Nullable<int> iD, Nullable<byte> sexTypeID, Nullable<short> customerGroupID, Nullable<int> customerSubGroupID, Nullable<short> customGroupID, Nullable<short> jobID, string firstName, string lastName, string fullName, string meli, Nullable<byte> emailTypeID, string email1, string email2, string email3, Nullable<byte> webSiteTypeID, string webSite1, string webSite2, string webSite3, Nullable<byte> addressTypeID, string address1, string address2, string address3, string postalCode1, string postalCode2, string postalCode3, Nullable<byte> phoneTypeID1, Nullable<byte> phoneTypeID2, Nullable<byte> phoneTypeID3, Nullable<byte> phoneTypeID4, Nullable<byte> phoneTypeID5, Nullable<byte> phoneTypeID6, string phoneNumber1, string phoneNumber2, string phoneNumber3, string phoneNumber4, string phoneNumber5, string phoneNumber6, string phoneNumber7, string phoneNumber8, string phoneNumber9, string phoneNumber10, string phoneNumber11, string phoneNumber12, string sMS, Nullable<int> imageID, string shsh, Nullable<System.DateTime> birthDay, string birthPlace, string fatherName, Nullable<byte> marriageTypeID, Nullable<System.DateTime> marriageDate, string identificationDsc, Nullable<short> educationTypeID, Nullable<System.DateTime> graduationDate, string fieldStudy, string educationDsc, string companyName, string companyRegisterCode, string companyEconomicCode, string profession, string adminName, string secretary, string officePost, string companyDsc, Nullable<int> locationID, string dsc, Nullable<double> maxBed, string bankAccNo, string bankCardNo, Nullable<System.DateTime> registerDate, Nullable<bool> active, Nullable<bool> del, Nullable<bool> @lock, Nullable<byte> star, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(short));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customGroupIDParameter = customGroupID.HasValue ?
                new ObjectParameter("CustomGroupID", customGroupID) :
                new ObjectParameter("CustomGroupID", typeof(short));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(short));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var meliParameter = meli != null ?
                new ObjectParameter("Meli", meli) :
                new ObjectParameter("Meli", typeof(string));
    
            var emailTypeIDParameter = emailTypeID.HasValue ?
                new ObjectParameter("EmailTypeID", emailTypeID) :
                new ObjectParameter("EmailTypeID", typeof(byte));
    
            var email1Parameter = email1 != null ?
                new ObjectParameter("Email1", email1) :
                new ObjectParameter("Email1", typeof(string));
    
            var email2Parameter = email2 != null ?
                new ObjectParameter("Email2", email2) :
                new ObjectParameter("Email2", typeof(string));
    
            var email3Parameter = email3 != null ?
                new ObjectParameter("Email3", email3) :
                new ObjectParameter("Email3", typeof(string));
    
            var webSiteTypeIDParameter = webSiteTypeID.HasValue ?
                new ObjectParameter("WebSiteTypeID", webSiteTypeID) :
                new ObjectParameter("WebSiteTypeID", typeof(byte));
    
            var webSite1Parameter = webSite1 != null ?
                new ObjectParameter("WebSite1", webSite1) :
                new ObjectParameter("WebSite1", typeof(string));
    
            var webSite2Parameter = webSite2 != null ?
                new ObjectParameter("WebSite2", webSite2) :
                new ObjectParameter("WebSite2", typeof(string));
    
            var webSite3Parameter = webSite3 != null ?
                new ObjectParameter("WebSite3", webSite3) :
                new ObjectParameter("WebSite3", typeof(string));
    
            var addressTypeIDParameter = addressTypeID.HasValue ?
                new ObjectParameter("AddressTypeID", addressTypeID) :
                new ObjectParameter("AddressTypeID", typeof(byte));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var address3Parameter = address3 != null ?
                new ObjectParameter("Address3", address3) :
                new ObjectParameter("Address3", typeof(string));
    
            var postalCode1Parameter = postalCode1 != null ?
                new ObjectParameter("PostalCode1", postalCode1) :
                new ObjectParameter("PostalCode1", typeof(string));
    
            var postalCode2Parameter = postalCode2 != null ?
                new ObjectParameter("PostalCode2", postalCode2) :
                new ObjectParameter("PostalCode2", typeof(string));
    
            var postalCode3Parameter = postalCode3 != null ?
                new ObjectParameter("PostalCode3", postalCode3) :
                new ObjectParameter("PostalCode3", typeof(string));
    
            var phoneTypeID1Parameter = phoneTypeID1.HasValue ?
                new ObjectParameter("PhoneTypeID1", phoneTypeID1) :
                new ObjectParameter("PhoneTypeID1", typeof(byte));
    
            var phoneTypeID2Parameter = phoneTypeID2.HasValue ?
                new ObjectParameter("PhoneTypeID2", phoneTypeID2) :
                new ObjectParameter("PhoneTypeID2", typeof(byte));
    
            var phoneTypeID3Parameter = phoneTypeID3.HasValue ?
                new ObjectParameter("PhoneTypeID3", phoneTypeID3) :
                new ObjectParameter("PhoneTypeID3", typeof(byte));
    
            var phoneTypeID4Parameter = phoneTypeID4.HasValue ?
                new ObjectParameter("PhoneTypeID4", phoneTypeID4) :
                new ObjectParameter("PhoneTypeID4", typeof(byte));
    
            var phoneTypeID5Parameter = phoneTypeID5.HasValue ?
                new ObjectParameter("PhoneTypeID5", phoneTypeID5) :
                new ObjectParameter("PhoneTypeID5", typeof(byte));
    
            var phoneTypeID6Parameter = phoneTypeID6.HasValue ?
                new ObjectParameter("PhoneTypeID6", phoneTypeID6) :
                new ObjectParameter("PhoneTypeID6", typeof(byte));
    
            var phoneNumber1Parameter = phoneNumber1 != null ?
                new ObjectParameter("PhoneNumber1", phoneNumber1) :
                new ObjectParameter("PhoneNumber1", typeof(string));
    
            var phoneNumber2Parameter = phoneNumber2 != null ?
                new ObjectParameter("PhoneNumber2", phoneNumber2) :
                new ObjectParameter("PhoneNumber2", typeof(string));
    
            var phoneNumber3Parameter = phoneNumber3 != null ?
                new ObjectParameter("PhoneNumber3", phoneNumber3) :
                new ObjectParameter("PhoneNumber3", typeof(string));
    
            var phoneNumber4Parameter = phoneNumber4 != null ?
                new ObjectParameter("PhoneNumber4", phoneNumber4) :
                new ObjectParameter("PhoneNumber4", typeof(string));
    
            var phoneNumber5Parameter = phoneNumber5 != null ?
                new ObjectParameter("PhoneNumber5", phoneNumber5) :
                new ObjectParameter("PhoneNumber5", typeof(string));
    
            var phoneNumber6Parameter = phoneNumber6 != null ?
                new ObjectParameter("PhoneNumber6", phoneNumber6) :
                new ObjectParameter("PhoneNumber6", typeof(string));
    
            var phoneNumber7Parameter = phoneNumber7 != null ?
                new ObjectParameter("PhoneNumber7", phoneNumber7) :
                new ObjectParameter("PhoneNumber7", typeof(string));
    
            var phoneNumber8Parameter = phoneNumber8 != null ?
                new ObjectParameter("PhoneNumber8", phoneNumber8) :
                new ObjectParameter("PhoneNumber8", typeof(string));
    
            var phoneNumber9Parameter = phoneNumber9 != null ?
                new ObjectParameter("PhoneNumber9", phoneNumber9) :
                new ObjectParameter("PhoneNumber9", typeof(string));
    
            var phoneNumber10Parameter = phoneNumber10 != null ?
                new ObjectParameter("PhoneNumber10", phoneNumber10) :
                new ObjectParameter("PhoneNumber10", typeof(string));
    
            var phoneNumber11Parameter = phoneNumber11 != null ?
                new ObjectParameter("PhoneNumber11", phoneNumber11) :
                new ObjectParameter("PhoneNumber11", typeof(string));
    
            var phoneNumber12Parameter = phoneNumber12 != null ?
                new ObjectParameter("PhoneNumber12", phoneNumber12) :
                new ObjectParameter("PhoneNumber12", typeof(string));
    
            var sMSParameter = sMS != null ?
                new ObjectParameter("SMS", sMS) :
                new ObjectParameter("SMS", typeof(string));
    
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(int));
    
            var shshParameter = shsh != null ?
                new ObjectParameter("Shsh", shsh) :
                new ObjectParameter("Shsh", typeof(string));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("BirthDay", birthDay) :
                new ObjectParameter("BirthDay", typeof(System.DateTime));
    
            var birthPlaceParameter = birthPlace != null ?
                new ObjectParameter("BirthPlace", birthPlace) :
                new ObjectParameter("BirthPlace", typeof(string));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var marriageTypeIDParameter = marriageTypeID.HasValue ?
                new ObjectParameter("MarriageTypeID", marriageTypeID) :
                new ObjectParameter("MarriageTypeID", typeof(byte));
    
            var marriageDateParameter = marriageDate.HasValue ?
                new ObjectParameter("MarriageDate", marriageDate) :
                new ObjectParameter("MarriageDate", typeof(System.DateTime));
    
            var identificationDscParameter = identificationDsc != null ?
                new ObjectParameter("IdentificationDsc", identificationDsc) :
                new ObjectParameter("IdentificationDsc", typeof(string));
    
            var educationTypeIDParameter = educationTypeID.HasValue ?
                new ObjectParameter("EducationTypeID", educationTypeID) :
                new ObjectParameter("EducationTypeID", typeof(short));
    
            var graduationDateParameter = graduationDate.HasValue ?
                new ObjectParameter("GraduationDate", graduationDate) :
                new ObjectParameter("GraduationDate", typeof(System.DateTime));
    
            var fieldStudyParameter = fieldStudy != null ?
                new ObjectParameter("FieldStudy", fieldStudy) :
                new ObjectParameter("FieldStudy", typeof(string));
    
            var educationDscParameter = educationDsc != null ?
                new ObjectParameter("EducationDsc", educationDsc) :
                new ObjectParameter("EducationDsc", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var companyRegisterCodeParameter = companyRegisterCode != null ?
                new ObjectParameter("CompanyRegisterCode", companyRegisterCode) :
                new ObjectParameter("CompanyRegisterCode", typeof(string));
    
            var companyEconomicCodeParameter = companyEconomicCode != null ?
                new ObjectParameter("CompanyEconomicCode", companyEconomicCode) :
                new ObjectParameter("CompanyEconomicCode", typeof(string));
    
            var professionParameter = profession != null ?
                new ObjectParameter("Profession", profession) :
                new ObjectParameter("Profession", typeof(string));
    
            var adminNameParameter = adminName != null ?
                new ObjectParameter("AdminName", adminName) :
                new ObjectParameter("AdminName", typeof(string));
    
            var secretaryParameter = secretary != null ?
                new ObjectParameter("Secretary", secretary) :
                new ObjectParameter("Secretary", typeof(string));
    
            var officePostParameter = officePost != null ?
                new ObjectParameter("OfficePost", officePost) :
                new ObjectParameter("OfficePost", typeof(string));
    
            var companyDscParameter = companyDsc != null ?
                new ObjectParameter("CompanyDsc", companyDsc) :
                new ObjectParameter("CompanyDsc", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var maxBedParameter = maxBed.HasValue ?
                new ObjectParameter("MaxBed", maxBed) :
                new ObjectParameter("MaxBed", typeof(double));
    
            var bankAccNoParameter = bankAccNo != null ?
                new ObjectParameter("BankAccNo", bankAccNo) :
                new ObjectParameter("BankAccNo", typeof(string));
    
            var bankCardNoParameter = bankCardNo != null ?
                new ObjectParameter("BankCardNo", bankCardNo) :
                new ObjectParameter("BankCardNo", typeof(string));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var delParameter = del.HasValue ?
                new ObjectParameter("Del", del) :
                new ObjectParameter("Del", typeof(bool));
    
            var lockParameter = @lock.HasValue ?
                new ObjectParameter("Lock", @lock) :
                new ObjectParameter("Lock", typeof(bool));
    
            var starParameter = star.HasValue ?
                new ObjectParameter("Star", star) :
                new ObjectParameter("Star", typeof(byte));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Customers_Update", iDParameter, sexTypeIDParameter, customerGroupIDParameter, customerSubGroupIDParameter, customGroupIDParameter, jobIDParameter, firstNameParameter, lastNameParameter, fullNameParameter, meliParameter, emailTypeIDParameter, email1Parameter, email2Parameter, email3Parameter, webSiteTypeIDParameter, webSite1Parameter, webSite2Parameter, webSite3Parameter, addressTypeIDParameter, address1Parameter, address2Parameter, address3Parameter, postalCode1Parameter, postalCode2Parameter, postalCode3Parameter, phoneTypeID1Parameter, phoneTypeID2Parameter, phoneTypeID3Parameter, phoneTypeID4Parameter, phoneTypeID5Parameter, phoneTypeID6Parameter, phoneNumber1Parameter, phoneNumber2Parameter, phoneNumber3Parameter, phoneNumber4Parameter, phoneNumber5Parameter, phoneNumber6Parameter, phoneNumber7Parameter, phoneNumber8Parameter, phoneNumber9Parameter, phoneNumber10Parameter, phoneNumber11Parameter, phoneNumber12Parameter, sMSParameter, imageIDParameter, shshParameter, birthDayParameter, birthPlaceParameter, fatherNameParameter, marriageTypeIDParameter, marriageDateParameter, identificationDscParameter, educationTypeIDParameter, graduationDateParameter, fieldStudyParameter, educationDscParameter, companyNameParameter, companyRegisterCodeParameter, companyEconomicCodeParameter, professionParameter, adminNameParameter, secretaryParameter, officePostParameter, companyDscParameter, locationIDParameter, dscParameter, maxBedParameter, bankAccNoParameter, bankCardNoParameter, registerDateParameter, activeParameter, delParameter, lockParameter, starParameter, useridParameter);
        }
    
        public virtual int sp_CustomerSubGroups_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CustomerSubGroups_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_CustomerSubGroups_Insert(Nullable<short> customerGroupID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CustomerSubGroups_Insert", customerGroupIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_CustomerSubGroups_Select_Result> sp_CustomerSubGroups_Select(Nullable<int> customerGroupID, string name, Nullable<int> active)
        {
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CustomerSubGroups_Select_Result>("sp_CustomerSubGroups_Select", customerGroupIDParameter, nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_CustomerSubGroups_SelectRow_Result> sp_CustomerSubGroups_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CustomerSubGroups_SelectRow_Result>("sp_CustomerSubGroups_SelectRow", iDParameter);
        }
    
        public virtual int sp_CustomerSubGroups_Update(Nullable<int> iD, Nullable<short> customerGroupID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CustomerSubGroups_Update", iDParameter, customerGroupIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_CustomGroups_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CustomGroups_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_CustomGroups_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> rolID, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var rolIDParameter = rolID.HasValue ?
                new ObjectParameter("RolID", rolID) :
                new ObjectParameter("RolID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CustomGroups_Insert", nameParameter, dscParameter, activeParameter, rolIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_CustomGroups_Select_Result> sp_CustomGroups_Select(string name, Nullable<int> active, Nullable<int> rolID, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            var rolIDParameter = rolID.HasValue ?
                new ObjectParameter("RolID", rolID) :
                new ObjectParameter("RolID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CustomGroups_Select_Result>("sp_CustomGroups_Select", nameParameter, activeParameter, rolIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_CustomGroups_SelectRow_Result> sp_CustomGroups_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CustomGroups_SelectRow_Result>("sp_CustomGroups_SelectRow", iDParameter);
        }
    
        public virtual int sp_CustomGroups_Update(Nullable<int> iD, string name, Nullable<bool> active, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CustomGroups_Update", iDParameter, nameParameter, activeParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_DentalInformation_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DentalInformation_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_DentalInformation_Insert(Nullable<byte> dentalKindID, Nullable<short> dentalStateID, Nullable<short> shiftID, Nullable<int> receptionID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<byte> sexTypeID, Nullable<int> patientID, Nullable<byte> patientAge, Nullable<System.DateTime> registerDate, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<byte> upLeft1, Nullable<byte> upLeft2, Nullable<byte> upLeft3, Nullable<byte> upLeft4, Nullable<byte> upLeft5, Nullable<byte> upLeft6, Nullable<byte> upLeft7, Nullable<byte> upLeft8, Nullable<byte> upRight1, Nullable<byte> upRight2, Nullable<byte> upRight3, Nullable<byte> upRight4, Nullable<byte> upRight5, Nullable<byte> upRight6, Nullable<byte> upRight7, Nullable<byte> upRight8, Nullable<byte> downLeft1, Nullable<byte> downLeft2, Nullable<byte> downLeft3, Nullable<byte> downLeft4, Nullable<byte> downLeft5, Nullable<byte> downLeft6, Nullable<byte> downLeft7, Nullable<byte> downLeft8, Nullable<byte> downRight1, Nullable<byte> downRight2, Nullable<byte> downRight3, Nullable<byte> downRight4, Nullable<byte> downRight5, Nullable<byte> downRight6, Nullable<byte> downRight7, Nullable<byte> downRight8, Nullable<byte> upLeftA, Nullable<byte> upLeftB, Nullable<byte> upLeftC, Nullable<byte> upLeftD, Nullable<byte> upLeftE, Nullable<byte> upRightA, Nullable<byte> upRightB, Nullable<byte> upRightC, Nullable<byte> upRightD, Nullable<byte> upRightE, Nullable<byte> downLeftA, Nullable<byte> downLeftB, Nullable<byte> downLeftC, Nullable<byte> downLeftD, Nullable<byte> downLeftE, Nullable<byte> downRightA, Nullable<byte> downRightB, Nullable<byte> downRightC, Nullable<byte> downRightD, Nullable<byte> downRightE, string upLeft1Dsc, string upLeft2Dsc, string upLeft3Dsc, string upLeft4Dsc, string upLeft5Dsc, string upLeft6Dsc, string upLeft7Dsc, string upLeft8Dsc, string upRight1Dsc, string upRight2Dsc, string upRight3Dsc, string upRight4Dsc, string upRight5Dsc, string upRight6Dsc, string upRight7Dsc, string upRight8Dsc, string downLeft1Dsc, string downLeft2Dsc, string downLeft3Dsc, string downLeft4Dsc, string downLeft5Dsc, string downLeft6Dsc, string downLeft7Dsc, string downLeft8Dsc, string downRight1Dsc, string downRight2Dsc, string downRight3Dsc, string downRight4Dsc, string downRight5Dsc, string downRight6Dsc, string downRight7Dsc, string downRight8Dsc, string upLeftADsc, string upLeftBDsc, string upLeftCDsc, string upLeftDDsc, string upLeftEDsc, string upRightADsc, string upRightBDsc, string upRightCDsc, string upRightDDsc, string upRightEDsc, string downLeftADsc, string downLeftBDsc, string downLeftCDsc, string downLeftDDsc, string downLeftEDsc, string downRightADsc, string downRightBDsc, string downRightCDsc, string downRightDDsc, string downRightEDsc, byte[] diagram, string dsc, Nullable<int> userid)
        {
            var dentalKindIDParameter = dentalKindID.HasValue ?
                new ObjectParameter("DentalKindID", dentalKindID) :
                new ObjectParameter("DentalKindID", typeof(byte));
    
            var dentalStateIDParameter = dentalStateID.HasValue ?
                new ObjectParameter("DentalStateID", dentalStateID) :
                new ObjectParameter("DentalStateID", typeof(short));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientAgeParameter = patientAge.HasValue ?
                new ObjectParameter("PatientAge", patientAge) :
                new ObjectParameter("PatientAge", typeof(byte));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var upLeft1Parameter = upLeft1.HasValue ?
                new ObjectParameter("UpLeft1", upLeft1) :
                new ObjectParameter("UpLeft1", typeof(byte));
    
            var upLeft2Parameter = upLeft2.HasValue ?
                new ObjectParameter("UpLeft2", upLeft2) :
                new ObjectParameter("UpLeft2", typeof(byte));
    
            var upLeft3Parameter = upLeft3.HasValue ?
                new ObjectParameter("UpLeft3", upLeft3) :
                new ObjectParameter("UpLeft3", typeof(byte));
    
            var upLeft4Parameter = upLeft4.HasValue ?
                new ObjectParameter("UpLeft4", upLeft4) :
                new ObjectParameter("UpLeft4", typeof(byte));
    
            var upLeft5Parameter = upLeft5.HasValue ?
                new ObjectParameter("UpLeft5", upLeft5) :
                new ObjectParameter("UpLeft5", typeof(byte));
    
            var upLeft6Parameter = upLeft6.HasValue ?
                new ObjectParameter("UpLeft6", upLeft6) :
                new ObjectParameter("UpLeft6", typeof(byte));
    
            var upLeft7Parameter = upLeft7.HasValue ?
                new ObjectParameter("UpLeft7", upLeft7) :
                new ObjectParameter("UpLeft7", typeof(byte));
    
            var upLeft8Parameter = upLeft8.HasValue ?
                new ObjectParameter("UpLeft8", upLeft8) :
                new ObjectParameter("UpLeft8", typeof(byte));
    
            var upRight1Parameter = upRight1.HasValue ?
                new ObjectParameter("UpRight1", upRight1) :
                new ObjectParameter("UpRight1", typeof(byte));
    
            var upRight2Parameter = upRight2.HasValue ?
                new ObjectParameter("UpRight2", upRight2) :
                new ObjectParameter("UpRight2", typeof(byte));
    
            var upRight3Parameter = upRight3.HasValue ?
                new ObjectParameter("UpRight3", upRight3) :
                new ObjectParameter("UpRight3", typeof(byte));
    
            var upRight4Parameter = upRight4.HasValue ?
                new ObjectParameter("UpRight4", upRight4) :
                new ObjectParameter("UpRight4", typeof(byte));
    
            var upRight5Parameter = upRight5.HasValue ?
                new ObjectParameter("UpRight5", upRight5) :
                new ObjectParameter("UpRight5", typeof(byte));
    
            var upRight6Parameter = upRight6.HasValue ?
                new ObjectParameter("UpRight6", upRight6) :
                new ObjectParameter("UpRight6", typeof(byte));
    
            var upRight7Parameter = upRight7.HasValue ?
                new ObjectParameter("UpRight7", upRight7) :
                new ObjectParameter("UpRight7", typeof(byte));
    
            var upRight8Parameter = upRight8.HasValue ?
                new ObjectParameter("UpRight8", upRight8) :
                new ObjectParameter("UpRight8", typeof(byte));
    
            var downLeft1Parameter = downLeft1.HasValue ?
                new ObjectParameter("DownLeft1", downLeft1) :
                new ObjectParameter("DownLeft1", typeof(byte));
    
            var downLeft2Parameter = downLeft2.HasValue ?
                new ObjectParameter("DownLeft2", downLeft2) :
                new ObjectParameter("DownLeft2", typeof(byte));
    
            var downLeft3Parameter = downLeft3.HasValue ?
                new ObjectParameter("DownLeft3", downLeft3) :
                new ObjectParameter("DownLeft3", typeof(byte));
    
            var downLeft4Parameter = downLeft4.HasValue ?
                new ObjectParameter("DownLeft4", downLeft4) :
                new ObjectParameter("DownLeft4", typeof(byte));
    
            var downLeft5Parameter = downLeft5.HasValue ?
                new ObjectParameter("DownLeft5", downLeft5) :
                new ObjectParameter("DownLeft5", typeof(byte));
    
            var downLeft6Parameter = downLeft6.HasValue ?
                new ObjectParameter("DownLeft6", downLeft6) :
                new ObjectParameter("DownLeft6", typeof(byte));
    
            var downLeft7Parameter = downLeft7.HasValue ?
                new ObjectParameter("DownLeft7", downLeft7) :
                new ObjectParameter("DownLeft7", typeof(byte));
    
            var downLeft8Parameter = downLeft8.HasValue ?
                new ObjectParameter("DownLeft8", downLeft8) :
                new ObjectParameter("DownLeft8", typeof(byte));
    
            var downRight1Parameter = downRight1.HasValue ?
                new ObjectParameter("DownRight1", downRight1) :
                new ObjectParameter("DownRight1", typeof(byte));
    
            var downRight2Parameter = downRight2.HasValue ?
                new ObjectParameter("DownRight2", downRight2) :
                new ObjectParameter("DownRight2", typeof(byte));
    
            var downRight3Parameter = downRight3.HasValue ?
                new ObjectParameter("DownRight3", downRight3) :
                new ObjectParameter("DownRight3", typeof(byte));
    
            var downRight4Parameter = downRight4.HasValue ?
                new ObjectParameter("DownRight4", downRight4) :
                new ObjectParameter("DownRight4", typeof(byte));
    
            var downRight5Parameter = downRight5.HasValue ?
                new ObjectParameter("DownRight5", downRight5) :
                new ObjectParameter("DownRight5", typeof(byte));
    
            var downRight6Parameter = downRight6.HasValue ?
                new ObjectParameter("DownRight6", downRight6) :
                new ObjectParameter("DownRight6", typeof(byte));
    
            var downRight7Parameter = downRight7.HasValue ?
                new ObjectParameter("DownRight7", downRight7) :
                new ObjectParameter("DownRight7", typeof(byte));
    
            var downRight8Parameter = downRight8.HasValue ?
                new ObjectParameter("DownRight8", downRight8) :
                new ObjectParameter("DownRight8", typeof(byte));
    
            var upLeftAParameter = upLeftA.HasValue ?
                new ObjectParameter("UpLeftA", upLeftA) :
                new ObjectParameter("UpLeftA", typeof(byte));
    
            var upLeftBParameter = upLeftB.HasValue ?
                new ObjectParameter("UpLeftB", upLeftB) :
                new ObjectParameter("UpLeftB", typeof(byte));
    
            var upLeftCParameter = upLeftC.HasValue ?
                new ObjectParameter("UpLeftC", upLeftC) :
                new ObjectParameter("UpLeftC", typeof(byte));
    
            var upLeftDParameter = upLeftD.HasValue ?
                new ObjectParameter("UpLeftD", upLeftD) :
                new ObjectParameter("UpLeftD", typeof(byte));
    
            var upLeftEParameter = upLeftE.HasValue ?
                new ObjectParameter("UpLeftE", upLeftE) :
                new ObjectParameter("UpLeftE", typeof(byte));
    
            var upRightAParameter = upRightA.HasValue ?
                new ObjectParameter("UpRightA", upRightA) :
                new ObjectParameter("UpRightA", typeof(byte));
    
            var upRightBParameter = upRightB.HasValue ?
                new ObjectParameter("UpRightB", upRightB) :
                new ObjectParameter("UpRightB", typeof(byte));
    
            var upRightCParameter = upRightC.HasValue ?
                new ObjectParameter("UpRightC", upRightC) :
                new ObjectParameter("UpRightC", typeof(byte));
    
            var upRightDParameter = upRightD.HasValue ?
                new ObjectParameter("UpRightD", upRightD) :
                new ObjectParameter("UpRightD", typeof(byte));
    
            var upRightEParameter = upRightE.HasValue ?
                new ObjectParameter("UpRightE", upRightE) :
                new ObjectParameter("UpRightE", typeof(byte));
    
            var downLeftAParameter = downLeftA.HasValue ?
                new ObjectParameter("DownLeftA", downLeftA) :
                new ObjectParameter("DownLeftA", typeof(byte));
    
            var downLeftBParameter = downLeftB.HasValue ?
                new ObjectParameter("DownLeftB", downLeftB) :
                new ObjectParameter("DownLeftB", typeof(byte));
    
            var downLeftCParameter = downLeftC.HasValue ?
                new ObjectParameter("DownLeftC", downLeftC) :
                new ObjectParameter("DownLeftC", typeof(byte));
    
            var downLeftDParameter = downLeftD.HasValue ?
                new ObjectParameter("DownLeftD", downLeftD) :
                new ObjectParameter("DownLeftD", typeof(byte));
    
            var downLeftEParameter = downLeftE.HasValue ?
                new ObjectParameter("DownLeftE", downLeftE) :
                new ObjectParameter("DownLeftE", typeof(byte));
    
            var downRightAParameter = downRightA.HasValue ?
                new ObjectParameter("DownRightA", downRightA) :
                new ObjectParameter("DownRightA", typeof(byte));
    
            var downRightBParameter = downRightB.HasValue ?
                new ObjectParameter("DownRightB", downRightB) :
                new ObjectParameter("DownRightB", typeof(byte));
    
            var downRightCParameter = downRightC.HasValue ?
                new ObjectParameter("DownRightC", downRightC) :
                new ObjectParameter("DownRightC", typeof(byte));
    
            var downRightDParameter = downRightD.HasValue ?
                new ObjectParameter("DownRightD", downRightD) :
                new ObjectParameter("DownRightD", typeof(byte));
    
            var downRightEParameter = downRightE.HasValue ?
                new ObjectParameter("DownRightE", downRightE) :
                new ObjectParameter("DownRightE", typeof(byte));
    
            var upLeft1DscParameter = upLeft1Dsc != null ?
                new ObjectParameter("UpLeft1Dsc", upLeft1Dsc) :
                new ObjectParameter("UpLeft1Dsc", typeof(string));
    
            var upLeft2DscParameter = upLeft2Dsc != null ?
                new ObjectParameter("UpLeft2Dsc", upLeft2Dsc) :
                new ObjectParameter("UpLeft2Dsc", typeof(string));
    
            var upLeft3DscParameter = upLeft3Dsc != null ?
                new ObjectParameter("UpLeft3Dsc", upLeft3Dsc) :
                new ObjectParameter("UpLeft3Dsc", typeof(string));
    
            var upLeft4DscParameter = upLeft4Dsc != null ?
                new ObjectParameter("UpLeft4Dsc", upLeft4Dsc) :
                new ObjectParameter("UpLeft4Dsc", typeof(string));
    
            var upLeft5DscParameter = upLeft5Dsc != null ?
                new ObjectParameter("UpLeft5Dsc", upLeft5Dsc) :
                new ObjectParameter("UpLeft5Dsc", typeof(string));
    
            var upLeft6DscParameter = upLeft6Dsc != null ?
                new ObjectParameter("UpLeft6Dsc", upLeft6Dsc) :
                new ObjectParameter("UpLeft6Dsc", typeof(string));
    
            var upLeft7DscParameter = upLeft7Dsc != null ?
                new ObjectParameter("UpLeft7Dsc", upLeft7Dsc) :
                new ObjectParameter("UpLeft7Dsc", typeof(string));
    
            var upLeft8DscParameter = upLeft8Dsc != null ?
                new ObjectParameter("UpLeft8Dsc", upLeft8Dsc) :
                new ObjectParameter("UpLeft8Dsc", typeof(string));
    
            var upRight1DscParameter = upRight1Dsc != null ?
                new ObjectParameter("UpRight1Dsc", upRight1Dsc) :
                new ObjectParameter("UpRight1Dsc", typeof(string));
    
            var upRight2DscParameter = upRight2Dsc != null ?
                new ObjectParameter("UpRight2Dsc", upRight2Dsc) :
                new ObjectParameter("UpRight2Dsc", typeof(string));
    
            var upRight3DscParameter = upRight3Dsc != null ?
                new ObjectParameter("UpRight3Dsc", upRight3Dsc) :
                new ObjectParameter("UpRight3Dsc", typeof(string));
    
            var upRight4DscParameter = upRight4Dsc != null ?
                new ObjectParameter("UpRight4Dsc", upRight4Dsc) :
                new ObjectParameter("UpRight4Dsc", typeof(string));
    
            var upRight5DscParameter = upRight5Dsc != null ?
                new ObjectParameter("UpRight5Dsc", upRight5Dsc) :
                new ObjectParameter("UpRight5Dsc", typeof(string));
    
            var upRight6DscParameter = upRight6Dsc != null ?
                new ObjectParameter("UpRight6Dsc", upRight6Dsc) :
                new ObjectParameter("UpRight6Dsc", typeof(string));
    
            var upRight7DscParameter = upRight7Dsc != null ?
                new ObjectParameter("UpRight7Dsc", upRight7Dsc) :
                new ObjectParameter("UpRight7Dsc", typeof(string));
    
            var upRight8DscParameter = upRight8Dsc != null ?
                new ObjectParameter("UpRight8Dsc", upRight8Dsc) :
                new ObjectParameter("UpRight8Dsc", typeof(string));
    
            var downLeft1DscParameter = downLeft1Dsc != null ?
                new ObjectParameter("DownLeft1Dsc", downLeft1Dsc) :
                new ObjectParameter("DownLeft1Dsc", typeof(string));
    
            var downLeft2DscParameter = downLeft2Dsc != null ?
                new ObjectParameter("DownLeft2Dsc", downLeft2Dsc) :
                new ObjectParameter("DownLeft2Dsc", typeof(string));
    
            var downLeft3DscParameter = downLeft3Dsc != null ?
                new ObjectParameter("DownLeft3Dsc", downLeft3Dsc) :
                new ObjectParameter("DownLeft3Dsc", typeof(string));
    
            var downLeft4DscParameter = downLeft4Dsc != null ?
                new ObjectParameter("DownLeft4Dsc", downLeft4Dsc) :
                new ObjectParameter("DownLeft4Dsc", typeof(string));
    
            var downLeft5DscParameter = downLeft5Dsc != null ?
                new ObjectParameter("DownLeft5Dsc", downLeft5Dsc) :
                new ObjectParameter("DownLeft5Dsc", typeof(string));
    
            var downLeft6DscParameter = downLeft6Dsc != null ?
                new ObjectParameter("DownLeft6Dsc", downLeft6Dsc) :
                new ObjectParameter("DownLeft6Dsc", typeof(string));
    
            var downLeft7DscParameter = downLeft7Dsc != null ?
                new ObjectParameter("DownLeft7Dsc", downLeft7Dsc) :
                new ObjectParameter("DownLeft7Dsc", typeof(string));
    
            var downLeft8DscParameter = downLeft8Dsc != null ?
                new ObjectParameter("DownLeft8Dsc", downLeft8Dsc) :
                new ObjectParameter("DownLeft8Dsc", typeof(string));
    
            var downRight1DscParameter = downRight1Dsc != null ?
                new ObjectParameter("DownRight1Dsc", downRight1Dsc) :
                new ObjectParameter("DownRight1Dsc", typeof(string));
    
            var downRight2DscParameter = downRight2Dsc != null ?
                new ObjectParameter("DownRight2Dsc", downRight2Dsc) :
                new ObjectParameter("DownRight2Dsc", typeof(string));
    
            var downRight3DscParameter = downRight3Dsc != null ?
                new ObjectParameter("DownRight3Dsc", downRight3Dsc) :
                new ObjectParameter("DownRight3Dsc", typeof(string));
    
            var downRight4DscParameter = downRight4Dsc != null ?
                new ObjectParameter("DownRight4Dsc", downRight4Dsc) :
                new ObjectParameter("DownRight4Dsc", typeof(string));
    
            var downRight5DscParameter = downRight5Dsc != null ?
                new ObjectParameter("DownRight5Dsc", downRight5Dsc) :
                new ObjectParameter("DownRight5Dsc", typeof(string));
    
            var downRight6DscParameter = downRight6Dsc != null ?
                new ObjectParameter("DownRight6Dsc", downRight6Dsc) :
                new ObjectParameter("DownRight6Dsc", typeof(string));
    
            var downRight7DscParameter = downRight7Dsc != null ?
                new ObjectParameter("DownRight7Dsc", downRight7Dsc) :
                new ObjectParameter("DownRight7Dsc", typeof(string));
    
            var downRight8DscParameter = downRight8Dsc != null ?
                new ObjectParameter("DownRight8Dsc", downRight8Dsc) :
                new ObjectParameter("DownRight8Dsc", typeof(string));
    
            var upLeftADscParameter = upLeftADsc != null ?
                new ObjectParameter("UpLeftADsc", upLeftADsc) :
                new ObjectParameter("UpLeftADsc", typeof(string));
    
            var upLeftBDscParameter = upLeftBDsc != null ?
                new ObjectParameter("UpLeftBDsc", upLeftBDsc) :
                new ObjectParameter("UpLeftBDsc", typeof(string));
    
            var upLeftCDscParameter = upLeftCDsc != null ?
                new ObjectParameter("UpLeftCDsc", upLeftCDsc) :
                new ObjectParameter("UpLeftCDsc", typeof(string));
    
            var upLeftDDscParameter = upLeftDDsc != null ?
                new ObjectParameter("UpLeftDDsc", upLeftDDsc) :
                new ObjectParameter("UpLeftDDsc", typeof(string));
    
            var upLeftEDscParameter = upLeftEDsc != null ?
                new ObjectParameter("UpLeftEDsc", upLeftEDsc) :
                new ObjectParameter("UpLeftEDsc", typeof(string));
    
            var upRightADscParameter = upRightADsc != null ?
                new ObjectParameter("UpRightADsc", upRightADsc) :
                new ObjectParameter("UpRightADsc", typeof(string));
    
            var upRightBDscParameter = upRightBDsc != null ?
                new ObjectParameter("UpRightBDsc", upRightBDsc) :
                new ObjectParameter("UpRightBDsc", typeof(string));
    
            var upRightCDscParameter = upRightCDsc != null ?
                new ObjectParameter("UpRightCDsc", upRightCDsc) :
                new ObjectParameter("UpRightCDsc", typeof(string));
    
            var upRightDDscParameter = upRightDDsc != null ?
                new ObjectParameter("UpRightDDsc", upRightDDsc) :
                new ObjectParameter("UpRightDDsc", typeof(string));
    
            var upRightEDscParameter = upRightEDsc != null ?
                new ObjectParameter("UpRightEDsc", upRightEDsc) :
                new ObjectParameter("UpRightEDsc", typeof(string));
    
            var downLeftADscParameter = downLeftADsc != null ?
                new ObjectParameter("DownLeftADsc", downLeftADsc) :
                new ObjectParameter("DownLeftADsc", typeof(string));
    
            var downLeftBDscParameter = downLeftBDsc != null ?
                new ObjectParameter("DownLeftBDsc", downLeftBDsc) :
                new ObjectParameter("DownLeftBDsc", typeof(string));
    
            var downLeftCDscParameter = downLeftCDsc != null ?
                new ObjectParameter("DownLeftCDsc", downLeftCDsc) :
                new ObjectParameter("DownLeftCDsc", typeof(string));
    
            var downLeftDDscParameter = downLeftDDsc != null ?
                new ObjectParameter("DownLeftDDsc", downLeftDDsc) :
                new ObjectParameter("DownLeftDDsc", typeof(string));
    
            var downLeftEDscParameter = downLeftEDsc != null ?
                new ObjectParameter("DownLeftEDsc", downLeftEDsc) :
                new ObjectParameter("DownLeftEDsc", typeof(string));
    
            var downRightADscParameter = downRightADsc != null ?
                new ObjectParameter("DownRightADsc", downRightADsc) :
                new ObjectParameter("DownRightADsc", typeof(string));
    
            var downRightBDscParameter = downRightBDsc != null ?
                new ObjectParameter("DownRightBDsc", downRightBDsc) :
                new ObjectParameter("DownRightBDsc", typeof(string));
    
            var downRightCDscParameter = downRightCDsc != null ?
                new ObjectParameter("DownRightCDsc", downRightCDsc) :
                new ObjectParameter("DownRightCDsc", typeof(string));
    
            var downRightDDscParameter = downRightDDsc != null ?
                new ObjectParameter("DownRightDDsc", downRightDDsc) :
                new ObjectParameter("DownRightDDsc", typeof(string));
    
            var downRightEDscParameter = downRightEDsc != null ?
                new ObjectParameter("DownRightEDsc", downRightEDsc) :
                new ObjectParameter("DownRightEDsc", typeof(string));
    
            var diagramParameter = diagram != null ?
                new ObjectParameter("Diagram", diagram) :
                new ObjectParameter("Diagram", typeof(byte[]));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DentalInformation_Insert", dentalKindIDParameter, dentalStateIDParameter, shiftIDParameter, receptionIDParameter, doctorIDParameter, assistantIDParameter, sexTypeIDParameter, patientIDParameter, patientAgeParameter, registerDateParameter, departmentIDParameter, roomIDParameter, bedIDParameter, upLeft1Parameter, upLeft2Parameter, upLeft3Parameter, upLeft4Parameter, upLeft5Parameter, upLeft6Parameter, upLeft7Parameter, upLeft8Parameter, upRight1Parameter, upRight2Parameter, upRight3Parameter, upRight4Parameter, upRight5Parameter, upRight6Parameter, upRight7Parameter, upRight8Parameter, downLeft1Parameter, downLeft2Parameter, downLeft3Parameter, downLeft4Parameter, downLeft5Parameter, downLeft6Parameter, downLeft7Parameter, downLeft8Parameter, downRight1Parameter, downRight2Parameter, downRight3Parameter, downRight4Parameter, downRight5Parameter, downRight6Parameter, downRight7Parameter, downRight8Parameter, upLeftAParameter, upLeftBParameter, upLeftCParameter, upLeftDParameter, upLeftEParameter, upRightAParameter, upRightBParameter, upRightCParameter, upRightDParameter, upRightEParameter, downLeftAParameter, downLeftBParameter, downLeftCParameter, downLeftDParameter, downLeftEParameter, downRightAParameter, downRightBParameter, downRightCParameter, downRightDParameter, downRightEParameter, upLeft1DscParameter, upLeft2DscParameter, upLeft3DscParameter, upLeft4DscParameter, upLeft5DscParameter, upLeft6DscParameter, upLeft7DscParameter, upLeft8DscParameter, upRight1DscParameter, upRight2DscParameter, upRight3DscParameter, upRight4DscParameter, upRight5DscParameter, upRight6DscParameter, upRight7DscParameter, upRight8DscParameter, downLeft1DscParameter, downLeft2DscParameter, downLeft3DscParameter, downLeft4DscParameter, downLeft5DscParameter, downLeft6DscParameter, downLeft7DscParameter, downLeft8DscParameter, downRight1DscParameter, downRight2DscParameter, downRight3DscParameter, downRight4DscParameter, downRight5DscParameter, downRight6DscParameter, downRight7DscParameter, downRight8DscParameter, upLeftADscParameter, upLeftBDscParameter, upLeftCDscParameter, upLeftDDscParameter, upLeftEDscParameter, upRightADscParameter, upRightBDscParameter, upRightCDscParameter, upRightDDscParameter, upRightEDscParameter, downLeftADscParameter, downLeftBDscParameter, downLeftCDscParameter, downLeftDDscParameter, downLeftEDscParameter, downRightADscParameter, downRightBDscParameter, downRightCDscParameter, downRightDDscParameter, downRightEDscParameter, diagramParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_DentalInformation_Select_Result> sp_DentalInformation_Select(Nullable<int> iD_Start, Nullable<int> iD_End, Nullable<byte> dentalKindID, Nullable<short> dentalStateID, Nullable<short> shiftID, Nullable<int> receptionID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, string registerDate_Start, string registerDate_End, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var dentalKindIDParameter = dentalKindID.HasValue ?
                new ObjectParameter("DentalKindID", dentalKindID) :
                new ObjectParameter("DentalKindID", typeof(byte));
    
            var dentalStateIDParameter = dentalStateID.HasValue ?
                new ObjectParameter("DentalStateID", dentalStateID) :
                new ObjectParameter("DentalStateID", typeof(short));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DentalInformation_Select_Result>("sp_DentalInformation_Select", iD_StartParameter, iD_EndParameter, dentalKindIDParameter, dentalStateIDParameter, shiftIDParameter, receptionIDParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, registerDate_StartParameter, registerDate_EndParameter, departmentIDParameter, roomIDParameter, bedIDParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_DentalInformation_SelectRow_Result> sp_DentalInformation_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DentalInformation_SelectRow_Result>("sp_DentalInformation_SelectRow", iDParameter);
        }
    
        public virtual int sp_DentalInformation_Update(Nullable<int> iD, Nullable<byte> dentalKindID, Nullable<short> dentalStateID, Nullable<short> shiftID, Nullable<int> receptionID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<byte> sexTypeID, Nullable<int> patientID, Nullable<byte> patientAge, Nullable<System.DateTime> registerDate, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<byte> upLeft1, Nullable<byte> upLeft2, Nullable<byte> upLeft3, Nullable<byte> upLeft4, Nullable<byte> upLeft5, Nullable<byte> upLeft6, Nullable<byte> upLeft7, Nullable<byte> upLeft8, Nullable<byte> upRight1, Nullable<byte> upRight2, Nullable<byte> upRight3, Nullable<byte> upRight4, Nullable<byte> upRight5, Nullable<byte> upRight6, Nullable<byte> upRight7, Nullable<byte> upRight8, Nullable<byte> downLeft1, Nullable<byte> downLeft2, Nullable<byte> downLeft3, Nullable<byte> downLeft4, Nullable<byte> downLeft5, Nullable<byte> downLeft6, Nullable<byte> downLeft7, Nullable<byte> downLeft8, Nullable<byte> downRight1, Nullable<byte> downRight2, Nullable<byte> downRight3, Nullable<byte> downRight4, Nullable<byte> downRight5, Nullable<byte> downRight6, Nullable<byte> downRight7, Nullable<byte> downRight8, Nullable<byte> upLeftA, Nullable<byte> upLeftB, Nullable<byte> upLeftC, Nullable<byte> upLeftD, Nullable<byte> upLeftE, Nullable<byte> upRightA, Nullable<byte> upRightB, Nullable<byte> upRightC, Nullable<byte> upRightD, Nullable<byte> upRightE, Nullable<byte> downLeftA, Nullable<byte> downLeftB, Nullable<byte> downLeftC, Nullable<byte> downLeftD, Nullable<byte> downLeftE, Nullable<byte> downRightA, Nullable<byte> downRightB, Nullable<byte> downRightC, Nullable<byte> downRightD, Nullable<byte> downRightE, string upLeft1Dsc, string upLeft2Dsc, string upLeft3Dsc, string upLeft4Dsc, string upLeft5Dsc, string upLeft6Dsc, string upLeft7Dsc, string upLeft8Dsc, string upRight1Dsc, string upRight2Dsc, string upRight3Dsc, string upRight4Dsc, string upRight5Dsc, string upRight6Dsc, string upRight7Dsc, string upRight8Dsc, string downLeft1Dsc, string downLeft2Dsc, string downLeft3Dsc, string downLeft4Dsc, string downLeft5Dsc, string downLeft6Dsc, string downLeft7Dsc, string downLeft8Dsc, string downRight1Dsc, string downRight2Dsc, string downRight3Dsc, string downRight4Dsc, string downRight5Dsc, string downRight6Dsc, string downRight7Dsc, string downRight8Dsc, string upLeftADsc, string upLeftBDsc, string upLeftCDsc, string upLeftDDsc, string upLeftEDsc, string upRightADsc, string upRightBDsc, string upRightCDsc, string upRightDDsc, string upRightEDsc, string downLeftADsc, string downLeftBDsc, string downLeftCDsc, string downLeftDDsc, string downLeftEDsc, string downRightADsc, string downRightBDsc, string downRightCDsc, string downRightDDsc, string downRightEDsc, byte[] diagram, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dentalKindIDParameter = dentalKindID.HasValue ?
                new ObjectParameter("DentalKindID", dentalKindID) :
                new ObjectParameter("DentalKindID", typeof(byte));
    
            var dentalStateIDParameter = dentalStateID.HasValue ?
                new ObjectParameter("DentalStateID", dentalStateID) :
                new ObjectParameter("DentalStateID", typeof(short));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientAgeParameter = patientAge.HasValue ?
                new ObjectParameter("PatientAge", patientAge) :
                new ObjectParameter("PatientAge", typeof(byte));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var upLeft1Parameter = upLeft1.HasValue ?
                new ObjectParameter("UpLeft1", upLeft1) :
                new ObjectParameter("UpLeft1", typeof(byte));
    
            var upLeft2Parameter = upLeft2.HasValue ?
                new ObjectParameter("UpLeft2", upLeft2) :
                new ObjectParameter("UpLeft2", typeof(byte));
    
            var upLeft3Parameter = upLeft3.HasValue ?
                new ObjectParameter("UpLeft3", upLeft3) :
                new ObjectParameter("UpLeft3", typeof(byte));
    
            var upLeft4Parameter = upLeft4.HasValue ?
                new ObjectParameter("UpLeft4", upLeft4) :
                new ObjectParameter("UpLeft4", typeof(byte));
    
            var upLeft5Parameter = upLeft5.HasValue ?
                new ObjectParameter("UpLeft5", upLeft5) :
                new ObjectParameter("UpLeft5", typeof(byte));
    
            var upLeft6Parameter = upLeft6.HasValue ?
                new ObjectParameter("UpLeft6", upLeft6) :
                new ObjectParameter("UpLeft6", typeof(byte));
    
            var upLeft7Parameter = upLeft7.HasValue ?
                new ObjectParameter("UpLeft7", upLeft7) :
                new ObjectParameter("UpLeft7", typeof(byte));
    
            var upLeft8Parameter = upLeft8.HasValue ?
                new ObjectParameter("UpLeft8", upLeft8) :
                new ObjectParameter("UpLeft8", typeof(byte));
    
            var upRight1Parameter = upRight1.HasValue ?
                new ObjectParameter("UpRight1", upRight1) :
                new ObjectParameter("UpRight1", typeof(byte));
    
            var upRight2Parameter = upRight2.HasValue ?
                new ObjectParameter("UpRight2", upRight2) :
                new ObjectParameter("UpRight2", typeof(byte));
    
            var upRight3Parameter = upRight3.HasValue ?
                new ObjectParameter("UpRight3", upRight3) :
                new ObjectParameter("UpRight3", typeof(byte));
    
            var upRight4Parameter = upRight4.HasValue ?
                new ObjectParameter("UpRight4", upRight4) :
                new ObjectParameter("UpRight4", typeof(byte));
    
            var upRight5Parameter = upRight5.HasValue ?
                new ObjectParameter("UpRight5", upRight5) :
                new ObjectParameter("UpRight5", typeof(byte));
    
            var upRight6Parameter = upRight6.HasValue ?
                new ObjectParameter("UpRight6", upRight6) :
                new ObjectParameter("UpRight6", typeof(byte));
    
            var upRight7Parameter = upRight7.HasValue ?
                new ObjectParameter("UpRight7", upRight7) :
                new ObjectParameter("UpRight7", typeof(byte));
    
            var upRight8Parameter = upRight8.HasValue ?
                new ObjectParameter("UpRight8", upRight8) :
                new ObjectParameter("UpRight8", typeof(byte));
    
            var downLeft1Parameter = downLeft1.HasValue ?
                new ObjectParameter("DownLeft1", downLeft1) :
                new ObjectParameter("DownLeft1", typeof(byte));
    
            var downLeft2Parameter = downLeft2.HasValue ?
                new ObjectParameter("DownLeft2", downLeft2) :
                new ObjectParameter("DownLeft2", typeof(byte));
    
            var downLeft3Parameter = downLeft3.HasValue ?
                new ObjectParameter("DownLeft3", downLeft3) :
                new ObjectParameter("DownLeft3", typeof(byte));
    
            var downLeft4Parameter = downLeft4.HasValue ?
                new ObjectParameter("DownLeft4", downLeft4) :
                new ObjectParameter("DownLeft4", typeof(byte));
    
            var downLeft5Parameter = downLeft5.HasValue ?
                new ObjectParameter("DownLeft5", downLeft5) :
                new ObjectParameter("DownLeft5", typeof(byte));
    
            var downLeft6Parameter = downLeft6.HasValue ?
                new ObjectParameter("DownLeft6", downLeft6) :
                new ObjectParameter("DownLeft6", typeof(byte));
    
            var downLeft7Parameter = downLeft7.HasValue ?
                new ObjectParameter("DownLeft7", downLeft7) :
                new ObjectParameter("DownLeft7", typeof(byte));
    
            var downLeft8Parameter = downLeft8.HasValue ?
                new ObjectParameter("DownLeft8", downLeft8) :
                new ObjectParameter("DownLeft8", typeof(byte));
    
            var downRight1Parameter = downRight1.HasValue ?
                new ObjectParameter("DownRight1", downRight1) :
                new ObjectParameter("DownRight1", typeof(byte));
    
            var downRight2Parameter = downRight2.HasValue ?
                new ObjectParameter("DownRight2", downRight2) :
                new ObjectParameter("DownRight2", typeof(byte));
    
            var downRight3Parameter = downRight3.HasValue ?
                new ObjectParameter("DownRight3", downRight3) :
                new ObjectParameter("DownRight3", typeof(byte));
    
            var downRight4Parameter = downRight4.HasValue ?
                new ObjectParameter("DownRight4", downRight4) :
                new ObjectParameter("DownRight4", typeof(byte));
    
            var downRight5Parameter = downRight5.HasValue ?
                new ObjectParameter("DownRight5", downRight5) :
                new ObjectParameter("DownRight5", typeof(byte));
    
            var downRight6Parameter = downRight6.HasValue ?
                new ObjectParameter("DownRight6", downRight6) :
                new ObjectParameter("DownRight6", typeof(byte));
    
            var downRight7Parameter = downRight7.HasValue ?
                new ObjectParameter("DownRight7", downRight7) :
                new ObjectParameter("DownRight7", typeof(byte));
    
            var downRight8Parameter = downRight8.HasValue ?
                new ObjectParameter("DownRight8", downRight8) :
                new ObjectParameter("DownRight8", typeof(byte));
    
            var upLeftAParameter = upLeftA.HasValue ?
                new ObjectParameter("UpLeftA", upLeftA) :
                new ObjectParameter("UpLeftA", typeof(byte));
    
            var upLeftBParameter = upLeftB.HasValue ?
                new ObjectParameter("UpLeftB", upLeftB) :
                new ObjectParameter("UpLeftB", typeof(byte));
    
            var upLeftCParameter = upLeftC.HasValue ?
                new ObjectParameter("UpLeftC", upLeftC) :
                new ObjectParameter("UpLeftC", typeof(byte));
    
            var upLeftDParameter = upLeftD.HasValue ?
                new ObjectParameter("UpLeftD", upLeftD) :
                new ObjectParameter("UpLeftD", typeof(byte));
    
            var upLeftEParameter = upLeftE.HasValue ?
                new ObjectParameter("UpLeftE", upLeftE) :
                new ObjectParameter("UpLeftE", typeof(byte));
    
            var upRightAParameter = upRightA.HasValue ?
                new ObjectParameter("UpRightA", upRightA) :
                new ObjectParameter("UpRightA", typeof(byte));
    
            var upRightBParameter = upRightB.HasValue ?
                new ObjectParameter("UpRightB", upRightB) :
                new ObjectParameter("UpRightB", typeof(byte));
    
            var upRightCParameter = upRightC.HasValue ?
                new ObjectParameter("UpRightC", upRightC) :
                new ObjectParameter("UpRightC", typeof(byte));
    
            var upRightDParameter = upRightD.HasValue ?
                new ObjectParameter("UpRightD", upRightD) :
                new ObjectParameter("UpRightD", typeof(byte));
    
            var upRightEParameter = upRightE.HasValue ?
                new ObjectParameter("UpRightE", upRightE) :
                new ObjectParameter("UpRightE", typeof(byte));
    
            var downLeftAParameter = downLeftA.HasValue ?
                new ObjectParameter("DownLeftA", downLeftA) :
                new ObjectParameter("DownLeftA", typeof(byte));
    
            var downLeftBParameter = downLeftB.HasValue ?
                new ObjectParameter("DownLeftB", downLeftB) :
                new ObjectParameter("DownLeftB", typeof(byte));
    
            var downLeftCParameter = downLeftC.HasValue ?
                new ObjectParameter("DownLeftC", downLeftC) :
                new ObjectParameter("DownLeftC", typeof(byte));
    
            var downLeftDParameter = downLeftD.HasValue ?
                new ObjectParameter("DownLeftD", downLeftD) :
                new ObjectParameter("DownLeftD", typeof(byte));
    
            var downLeftEParameter = downLeftE.HasValue ?
                new ObjectParameter("DownLeftE", downLeftE) :
                new ObjectParameter("DownLeftE", typeof(byte));
    
            var downRightAParameter = downRightA.HasValue ?
                new ObjectParameter("DownRightA", downRightA) :
                new ObjectParameter("DownRightA", typeof(byte));
    
            var downRightBParameter = downRightB.HasValue ?
                new ObjectParameter("DownRightB", downRightB) :
                new ObjectParameter("DownRightB", typeof(byte));
    
            var downRightCParameter = downRightC.HasValue ?
                new ObjectParameter("DownRightC", downRightC) :
                new ObjectParameter("DownRightC", typeof(byte));
    
            var downRightDParameter = downRightD.HasValue ?
                new ObjectParameter("DownRightD", downRightD) :
                new ObjectParameter("DownRightD", typeof(byte));
    
            var downRightEParameter = downRightE.HasValue ?
                new ObjectParameter("DownRightE", downRightE) :
                new ObjectParameter("DownRightE", typeof(byte));
    
            var upLeft1DscParameter = upLeft1Dsc != null ?
                new ObjectParameter("UpLeft1Dsc", upLeft1Dsc) :
                new ObjectParameter("UpLeft1Dsc", typeof(string));
    
            var upLeft2DscParameter = upLeft2Dsc != null ?
                new ObjectParameter("UpLeft2Dsc", upLeft2Dsc) :
                new ObjectParameter("UpLeft2Dsc", typeof(string));
    
            var upLeft3DscParameter = upLeft3Dsc != null ?
                new ObjectParameter("UpLeft3Dsc", upLeft3Dsc) :
                new ObjectParameter("UpLeft3Dsc", typeof(string));
    
            var upLeft4DscParameter = upLeft4Dsc != null ?
                new ObjectParameter("UpLeft4Dsc", upLeft4Dsc) :
                new ObjectParameter("UpLeft4Dsc", typeof(string));
    
            var upLeft5DscParameter = upLeft5Dsc != null ?
                new ObjectParameter("UpLeft5Dsc", upLeft5Dsc) :
                new ObjectParameter("UpLeft5Dsc", typeof(string));
    
            var upLeft6DscParameter = upLeft6Dsc != null ?
                new ObjectParameter("UpLeft6Dsc", upLeft6Dsc) :
                new ObjectParameter("UpLeft6Dsc", typeof(string));
    
            var upLeft7DscParameter = upLeft7Dsc != null ?
                new ObjectParameter("UpLeft7Dsc", upLeft7Dsc) :
                new ObjectParameter("UpLeft7Dsc", typeof(string));
    
            var upLeft8DscParameter = upLeft8Dsc != null ?
                new ObjectParameter("UpLeft8Dsc", upLeft8Dsc) :
                new ObjectParameter("UpLeft8Dsc", typeof(string));
    
            var upRight1DscParameter = upRight1Dsc != null ?
                new ObjectParameter("UpRight1Dsc", upRight1Dsc) :
                new ObjectParameter("UpRight1Dsc", typeof(string));
    
            var upRight2DscParameter = upRight2Dsc != null ?
                new ObjectParameter("UpRight2Dsc", upRight2Dsc) :
                new ObjectParameter("UpRight2Dsc", typeof(string));
    
            var upRight3DscParameter = upRight3Dsc != null ?
                new ObjectParameter("UpRight3Dsc", upRight3Dsc) :
                new ObjectParameter("UpRight3Dsc", typeof(string));
    
            var upRight4DscParameter = upRight4Dsc != null ?
                new ObjectParameter("UpRight4Dsc", upRight4Dsc) :
                new ObjectParameter("UpRight4Dsc", typeof(string));
    
            var upRight5DscParameter = upRight5Dsc != null ?
                new ObjectParameter("UpRight5Dsc", upRight5Dsc) :
                new ObjectParameter("UpRight5Dsc", typeof(string));
    
            var upRight6DscParameter = upRight6Dsc != null ?
                new ObjectParameter("UpRight6Dsc", upRight6Dsc) :
                new ObjectParameter("UpRight6Dsc", typeof(string));
    
            var upRight7DscParameter = upRight7Dsc != null ?
                new ObjectParameter("UpRight7Dsc", upRight7Dsc) :
                new ObjectParameter("UpRight7Dsc", typeof(string));
    
            var upRight8DscParameter = upRight8Dsc != null ?
                new ObjectParameter("UpRight8Dsc", upRight8Dsc) :
                new ObjectParameter("UpRight8Dsc", typeof(string));
    
            var downLeft1DscParameter = downLeft1Dsc != null ?
                new ObjectParameter("DownLeft1Dsc", downLeft1Dsc) :
                new ObjectParameter("DownLeft1Dsc", typeof(string));
    
            var downLeft2DscParameter = downLeft2Dsc != null ?
                new ObjectParameter("DownLeft2Dsc", downLeft2Dsc) :
                new ObjectParameter("DownLeft2Dsc", typeof(string));
    
            var downLeft3DscParameter = downLeft3Dsc != null ?
                new ObjectParameter("DownLeft3Dsc", downLeft3Dsc) :
                new ObjectParameter("DownLeft3Dsc", typeof(string));
    
            var downLeft4DscParameter = downLeft4Dsc != null ?
                new ObjectParameter("DownLeft4Dsc", downLeft4Dsc) :
                new ObjectParameter("DownLeft4Dsc", typeof(string));
    
            var downLeft5DscParameter = downLeft5Dsc != null ?
                new ObjectParameter("DownLeft5Dsc", downLeft5Dsc) :
                new ObjectParameter("DownLeft5Dsc", typeof(string));
    
            var downLeft6DscParameter = downLeft6Dsc != null ?
                new ObjectParameter("DownLeft6Dsc", downLeft6Dsc) :
                new ObjectParameter("DownLeft6Dsc", typeof(string));
    
            var downLeft7DscParameter = downLeft7Dsc != null ?
                new ObjectParameter("DownLeft7Dsc", downLeft7Dsc) :
                new ObjectParameter("DownLeft7Dsc", typeof(string));
    
            var downLeft8DscParameter = downLeft8Dsc != null ?
                new ObjectParameter("DownLeft8Dsc", downLeft8Dsc) :
                new ObjectParameter("DownLeft8Dsc", typeof(string));
    
            var downRight1DscParameter = downRight1Dsc != null ?
                new ObjectParameter("DownRight1Dsc", downRight1Dsc) :
                new ObjectParameter("DownRight1Dsc", typeof(string));
    
            var downRight2DscParameter = downRight2Dsc != null ?
                new ObjectParameter("DownRight2Dsc", downRight2Dsc) :
                new ObjectParameter("DownRight2Dsc", typeof(string));
    
            var downRight3DscParameter = downRight3Dsc != null ?
                new ObjectParameter("DownRight3Dsc", downRight3Dsc) :
                new ObjectParameter("DownRight3Dsc", typeof(string));
    
            var downRight4DscParameter = downRight4Dsc != null ?
                new ObjectParameter("DownRight4Dsc", downRight4Dsc) :
                new ObjectParameter("DownRight4Dsc", typeof(string));
    
            var downRight5DscParameter = downRight5Dsc != null ?
                new ObjectParameter("DownRight5Dsc", downRight5Dsc) :
                new ObjectParameter("DownRight5Dsc", typeof(string));
    
            var downRight6DscParameter = downRight6Dsc != null ?
                new ObjectParameter("DownRight6Dsc", downRight6Dsc) :
                new ObjectParameter("DownRight6Dsc", typeof(string));
    
            var downRight7DscParameter = downRight7Dsc != null ?
                new ObjectParameter("DownRight7Dsc", downRight7Dsc) :
                new ObjectParameter("DownRight7Dsc", typeof(string));
    
            var downRight8DscParameter = downRight8Dsc != null ?
                new ObjectParameter("DownRight8Dsc", downRight8Dsc) :
                new ObjectParameter("DownRight8Dsc", typeof(string));
    
            var upLeftADscParameter = upLeftADsc != null ?
                new ObjectParameter("UpLeftADsc", upLeftADsc) :
                new ObjectParameter("UpLeftADsc", typeof(string));
    
            var upLeftBDscParameter = upLeftBDsc != null ?
                new ObjectParameter("UpLeftBDsc", upLeftBDsc) :
                new ObjectParameter("UpLeftBDsc", typeof(string));
    
            var upLeftCDscParameter = upLeftCDsc != null ?
                new ObjectParameter("UpLeftCDsc", upLeftCDsc) :
                new ObjectParameter("UpLeftCDsc", typeof(string));
    
            var upLeftDDscParameter = upLeftDDsc != null ?
                new ObjectParameter("UpLeftDDsc", upLeftDDsc) :
                new ObjectParameter("UpLeftDDsc", typeof(string));
    
            var upLeftEDscParameter = upLeftEDsc != null ?
                new ObjectParameter("UpLeftEDsc", upLeftEDsc) :
                new ObjectParameter("UpLeftEDsc", typeof(string));
    
            var upRightADscParameter = upRightADsc != null ?
                new ObjectParameter("UpRightADsc", upRightADsc) :
                new ObjectParameter("UpRightADsc", typeof(string));
    
            var upRightBDscParameter = upRightBDsc != null ?
                new ObjectParameter("UpRightBDsc", upRightBDsc) :
                new ObjectParameter("UpRightBDsc", typeof(string));
    
            var upRightCDscParameter = upRightCDsc != null ?
                new ObjectParameter("UpRightCDsc", upRightCDsc) :
                new ObjectParameter("UpRightCDsc", typeof(string));
    
            var upRightDDscParameter = upRightDDsc != null ?
                new ObjectParameter("UpRightDDsc", upRightDDsc) :
                new ObjectParameter("UpRightDDsc", typeof(string));
    
            var upRightEDscParameter = upRightEDsc != null ?
                new ObjectParameter("UpRightEDsc", upRightEDsc) :
                new ObjectParameter("UpRightEDsc", typeof(string));
    
            var downLeftADscParameter = downLeftADsc != null ?
                new ObjectParameter("DownLeftADsc", downLeftADsc) :
                new ObjectParameter("DownLeftADsc", typeof(string));
    
            var downLeftBDscParameter = downLeftBDsc != null ?
                new ObjectParameter("DownLeftBDsc", downLeftBDsc) :
                new ObjectParameter("DownLeftBDsc", typeof(string));
    
            var downLeftCDscParameter = downLeftCDsc != null ?
                new ObjectParameter("DownLeftCDsc", downLeftCDsc) :
                new ObjectParameter("DownLeftCDsc", typeof(string));
    
            var downLeftDDscParameter = downLeftDDsc != null ?
                new ObjectParameter("DownLeftDDsc", downLeftDDsc) :
                new ObjectParameter("DownLeftDDsc", typeof(string));
    
            var downLeftEDscParameter = downLeftEDsc != null ?
                new ObjectParameter("DownLeftEDsc", downLeftEDsc) :
                new ObjectParameter("DownLeftEDsc", typeof(string));
    
            var downRightADscParameter = downRightADsc != null ?
                new ObjectParameter("DownRightADsc", downRightADsc) :
                new ObjectParameter("DownRightADsc", typeof(string));
    
            var downRightBDscParameter = downRightBDsc != null ?
                new ObjectParameter("DownRightBDsc", downRightBDsc) :
                new ObjectParameter("DownRightBDsc", typeof(string));
    
            var downRightCDscParameter = downRightCDsc != null ?
                new ObjectParameter("DownRightCDsc", downRightCDsc) :
                new ObjectParameter("DownRightCDsc", typeof(string));
    
            var downRightDDscParameter = downRightDDsc != null ?
                new ObjectParameter("DownRightDDsc", downRightDDsc) :
                new ObjectParameter("DownRightDDsc", typeof(string));
    
            var downRightEDscParameter = downRightEDsc != null ?
                new ObjectParameter("DownRightEDsc", downRightEDsc) :
                new ObjectParameter("DownRightEDsc", typeof(string));
    
            var diagramParameter = diagram != null ?
                new ObjectParameter("Diagram", diagram) :
                new ObjectParameter("Diagram", typeof(byte[]));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DentalInformation_Update", iDParameter, dentalKindIDParameter, dentalStateIDParameter, shiftIDParameter, receptionIDParameter, doctorIDParameter, assistantIDParameter, sexTypeIDParameter, patientIDParameter, patientAgeParameter, registerDateParameter, departmentIDParameter, roomIDParameter, bedIDParameter, upLeft1Parameter, upLeft2Parameter, upLeft3Parameter, upLeft4Parameter, upLeft5Parameter, upLeft6Parameter, upLeft7Parameter, upLeft8Parameter, upRight1Parameter, upRight2Parameter, upRight3Parameter, upRight4Parameter, upRight5Parameter, upRight6Parameter, upRight7Parameter, upRight8Parameter, downLeft1Parameter, downLeft2Parameter, downLeft3Parameter, downLeft4Parameter, downLeft5Parameter, downLeft6Parameter, downLeft7Parameter, downLeft8Parameter, downRight1Parameter, downRight2Parameter, downRight3Parameter, downRight4Parameter, downRight5Parameter, downRight6Parameter, downRight7Parameter, downRight8Parameter, upLeftAParameter, upLeftBParameter, upLeftCParameter, upLeftDParameter, upLeftEParameter, upRightAParameter, upRightBParameter, upRightCParameter, upRightDParameter, upRightEParameter, downLeftAParameter, downLeftBParameter, downLeftCParameter, downLeftDParameter, downLeftEParameter, downRightAParameter, downRightBParameter, downRightCParameter, downRightDParameter, downRightEParameter, upLeft1DscParameter, upLeft2DscParameter, upLeft3DscParameter, upLeft4DscParameter, upLeft5DscParameter, upLeft6DscParameter, upLeft7DscParameter, upLeft8DscParameter, upRight1DscParameter, upRight2DscParameter, upRight3DscParameter, upRight4DscParameter, upRight5DscParameter, upRight6DscParameter, upRight7DscParameter, upRight8DscParameter, downLeft1DscParameter, downLeft2DscParameter, downLeft3DscParameter, downLeft4DscParameter, downLeft5DscParameter, downLeft6DscParameter, downLeft7DscParameter, downLeft8DscParameter, downRight1DscParameter, downRight2DscParameter, downRight3DscParameter, downRight4DscParameter, downRight5DscParameter, downRight6DscParameter, downRight7DscParameter, downRight8DscParameter, upLeftADscParameter, upLeftBDscParameter, upLeftCDscParameter, upLeftDDscParameter, upLeftEDscParameter, upRightADscParameter, upRightBDscParameter, upRightCDscParameter, upRightDDscParameter, upRightEDscParameter, downLeftADscParameter, downLeftBDscParameter, downLeftCDscParameter, downLeftDDscParameter, downLeftEDscParameter, downRightADscParameter, downRightBDscParameter, downRightCDscParameter, downRightDDscParameter, downRightEDscParameter, diagramParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_DentalKinds_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DentalKinds_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_DentalKinds_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DentalKinds_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_DentalKinds_Select_Result> sp_DentalKinds_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DentalKinds_Select_Result>("sp_DentalKinds_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_DentalKinds_SelectRow_Result> sp_DentalKinds_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DentalKinds_SelectRow_Result>("sp_DentalKinds_SelectRow", iDParameter);
        }
    
        public virtual int sp_DentalKinds_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DentalKinds_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_DentalStates_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DentalStates_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_DentalStates_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DentalStates_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_DentalStates_Select_Result> sp_DentalStates_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DentalStates_Select_Result>("sp_DentalStates_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_DentalStates_SelectRow_Result> sp_DentalStates_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DentalStates_SelectRow_Result>("sp_DentalStates_SelectRow", iDParameter);
        }
    
        public virtual int sp_DentalStates_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DentalStates_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_DentColors_SempleInsert(Nullable<byte> iD, string dsc, string iconFile)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(byte));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var iconFileParameter = iconFile != null ?
                new ObjectParameter("IconFile", iconFile) :
                new ObjectParameter("IconFile", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DentColors_SempleInsert", iDParameter, dscParameter, iconFileParameter);
        }
    
        public virtual int sp_Departments_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Departments_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Departments_Insert(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Departments_Insert", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Departments_Select_Result> sp_Departments_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Departments_Select_Result>("sp_Departments_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_Departments_SelectRow_Result> sp_Departments_SelectRow(Nullable<short> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Departments_SelectRow_Result>("sp_Departments_SelectRow", iDParameter);
        }
    
        public virtual int sp_Departments_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Departments_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Descriptions_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Descriptions_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Descriptions_Insert(Nullable<short> kind, Nullable<int> dscCategoryID, Nullable<int> dscSubCategoryID, string name, Nullable<bool> active, Nullable<int> userid)
        {
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var dscCategoryIDParameter = dscCategoryID.HasValue ?
                new ObjectParameter("DscCategoryID", dscCategoryID) :
                new ObjectParameter("DscCategoryID", typeof(int));
    
            var dscSubCategoryIDParameter = dscSubCategoryID.HasValue ?
                new ObjectParameter("DscSubCategoryID", dscSubCategoryID) :
                new ObjectParameter("DscSubCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Descriptions_Insert", kindParameter, dscCategoryIDParameter, dscSubCategoryIDParameter, nameParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Descriptions_Select_Result> sp_Descriptions_Select(Nullable<short> kind, Nullable<int> dscCategoryID, Nullable<int> dscSubCategoryID, string name, Nullable<int> active)
        {
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var dscCategoryIDParameter = dscCategoryID.HasValue ?
                new ObjectParameter("DscCategoryID", dscCategoryID) :
                new ObjectParameter("DscCategoryID", typeof(int));
    
            var dscSubCategoryIDParameter = dscSubCategoryID.HasValue ?
                new ObjectParameter("DscSubCategoryID", dscSubCategoryID) :
                new ObjectParameter("DscSubCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Descriptions_Select_Result>("sp_Descriptions_Select", kindParameter, dscCategoryIDParameter, dscSubCategoryIDParameter, nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_Descriptions_SelectRow_Result> sp_Descriptions_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Descriptions_SelectRow_Result>("sp_Descriptions_SelectRow", iDParameter);
        }
    
        public virtual int sp_Descriptions_Update(Nullable<short> kind, Nullable<int> dscCategoryID, Nullable<int> dscSubCategoryID, Nullable<int> iD, string name, Nullable<bool> active, Nullable<int> userid)
        {
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var dscCategoryIDParameter = dscCategoryID.HasValue ?
                new ObjectParameter("DscCategoryID", dscCategoryID) :
                new ObjectParameter("DscCategoryID", typeof(int));
    
            var dscSubCategoryIDParameter = dscSubCategoryID.HasValue ?
                new ObjectParameter("DscSubCategoryID", dscSubCategoryID) :
                new ObjectParameter("DscSubCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Descriptions_Update", kindParameter, dscCategoryIDParameter, dscSubCategoryIDParameter, iDParameter, nameParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Desks_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Desks_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Desks_Insert(Nullable<int> iD, string name, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Desks_Insert", iDParameter, nameParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Desks_Select_Result> sp_Desks_Select(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Desks_Select_Result>("sp_Desks_Select", nameParameter);
        }
    
        public virtual ObjectResult<sp_Desks_SelectRow_Result> sp_Desks_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Desks_SelectRow_Result>("sp_Desks_SelectRow", iDParameter);
        }
    
        public virtual int sp_Desks_Update(Nullable<int> iD, string name, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Desks_Update", iDParameter, nameParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_DeskState_Update(Nullable<int> dskID, Nullable<byte> deskStateID, Nullable<int> inventoryHeaderID)
        {
            var dskIDParameter = dskID.HasValue ?
                new ObjectParameter("DskID", dskID) :
                new ObjectParameter("DskID", typeof(int));
    
            var deskStateIDParameter = deskStateID.HasValue ?
                new ObjectParameter("DeskStateID", deskStateID) :
                new ObjectParameter("DeskStateID", typeof(byte));
    
            var inventoryHeaderIDParameter = inventoryHeaderID.HasValue ?
                new ObjectParameter("InventoryHeaderID", inventoryHeaderID) :
                new ObjectParameter("InventoryHeaderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeskState_Update", dskIDParameter, deskStateIDParameter, inventoryHeaderIDParameter);
        }
    
        public virtual int sp_DiagnosisCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DiagnosisCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_DiagnosisCategories_Insert(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DiagnosisCategories_Insert", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_DiagnosisCategories_Select_Result> sp_DiagnosisCategories_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DiagnosisCategories_Select_Result>("sp_DiagnosisCategories_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_DiagnosisCategories_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DiagnosisCategories_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Diagnosises_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Diagnosises_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Diagnosises_Insert(Nullable<int> diagnosisCategoryID, Nullable<int> diagnosisSubCategoryID, Nullable<int> doctorID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var diagnosisCategoryIDParameter = diagnosisCategoryID.HasValue ?
                new ObjectParameter("DiagnosisCategoryID", diagnosisCategoryID) :
                new ObjectParameter("DiagnosisCategoryID", typeof(int));
    
            var diagnosisSubCategoryIDParameter = diagnosisSubCategoryID.HasValue ?
                new ObjectParameter("DiagnosisSubCategoryID", diagnosisSubCategoryID) :
                new ObjectParameter("DiagnosisSubCategoryID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Diagnosises_Insert", diagnosisCategoryIDParameter, diagnosisSubCategoryIDParameter, doctorIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Diagnosises_Select_Result> sp_Diagnosises_Select(Nullable<int> diagnosisCategoryID, Nullable<int> diagnosisSubCategoryID, Nullable<int> doctorID, string name, string dsc, Nullable<int> active)
        {
            var diagnosisCategoryIDParameter = diagnosisCategoryID.HasValue ?
                new ObjectParameter("DiagnosisCategoryID", diagnosisCategoryID) :
                new ObjectParameter("DiagnosisCategoryID", typeof(int));
    
            var diagnosisSubCategoryIDParameter = diagnosisSubCategoryID.HasValue ?
                new ObjectParameter("DiagnosisSubCategoryID", diagnosisSubCategoryID) :
                new ObjectParameter("DiagnosisSubCategoryID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Diagnosises_Select_Result>("sp_Diagnosises_Select", diagnosisCategoryIDParameter, diagnosisSubCategoryIDParameter, doctorIDParameter, nameParameter, dscParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_Diagnosises_SelectRow_Result> sp_Diagnosises_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Diagnosises_SelectRow_Result>("sp_Diagnosises_SelectRow", iDParameter);
        }
    
        public virtual int sp_Diagnosises_Update(Nullable<int> diagnosisCategoryID, Nullable<int> diagnosisSubCategoryID, Nullable<int> doctorID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var diagnosisCategoryIDParameter = diagnosisCategoryID.HasValue ?
                new ObjectParameter("DiagnosisCategoryID", diagnosisCategoryID) :
                new ObjectParameter("DiagnosisCategoryID", typeof(int));
    
            var diagnosisSubCategoryIDParameter = diagnosisSubCategoryID.HasValue ?
                new ObjectParameter("DiagnosisSubCategoryID", diagnosisSubCategoryID) :
                new ObjectParameter("DiagnosisSubCategoryID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Diagnosises_Update", diagnosisCategoryIDParameter, diagnosisSubCategoryIDParameter, doctorIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_DiagnosisSubCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DiagnosisSubCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_DiagnosisSubCategories_Insert(Nullable<int> diagnosisCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var diagnosisCategoryIDParameter = diagnosisCategoryID.HasValue ?
                new ObjectParameter("DiagnosisCategoryID", diagnosisCategoryID) :
                new ObjectParameter("DiagnosisCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DiagnosisSubCategories_Insert", diagnosisCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_DiagnosisSubCategories_Select_Result> sp_DiagnosisSubCategories_Select(Nullable<int> diagnosisCategoryID, string name, Nullable<int> active)
        {
            var diagnosisCategoryIDParameter = diagnosisCategoryID.HasValue ?
                new ObjectParameter("DiagnosisCategoryID", diagnosisCategoryID) :
                new ObjectParameter("DiagnosisCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DiagnosisSubCategories_Select_Result>("sp_DiagnosisSubCategories_Select", diagnosisCategoryIDParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_DiagnosisSubCategories_Update(Nullable<int> iD, Nullable<int> diagnosisCategoryID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var diagnosisCategoryIDParameter = diagnosisCategoryID.HasValue ?
                new ObjectParameter("DiagnosisCategoryID", diagnosisCategoryID) :
                new ObjectParameter("DiagnosisCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DiagnosisSubCategories_Update", iDParameter, diagnosisCategoryIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_DiseaseHistories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DiseaseHistories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_DiseaseHistories_Insert(Nullable<int> patientID, Nullable<short> diseaseHistoryTypeID, string dsc, Nullable<int> userid)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var diseaseHistoryTypeIDParameter = diseaseHistoryTypeID.HasValue ?
                new ObjectParameter("DiseaseHistoryTypeID", diseaseHistoryTypeID) :
                new ObjectParameter("DiseaseHistoryTypeID", typeof(short));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DiseaseHistories_Insert", patientIDParameter, diseaseHistoryTypeIDParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_DiseaseHistories_Select_Result> sp_DiseaseHistories_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DiseaseHistories_Select_Result>("sp_DiseaseHistories_Select");
        }
    
        public virtual int sp_DiseaseHistories_Update(Nullable<int> iD, Nullable<int> patientID, Nullable<short> diseaseHistoryTypeID, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var diseaseHistoryTypeIDParameter = diseaseHistoryTypeID.HasValue ?
                new ObjectParameter("DiseaseHistoryTypeID", diseaseHistoryTypeID) :
                new ObjectParameter("DiseaseHistoryTypeID", typeof(short));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DiseaseHistories_Update", iDParameter, patientIDParameter, diseaseHistoryTypeIDParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_DiseaseHistoryTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DiseaseHistoryTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_DiseaseHistoryTypes_Insert(string name, string dsc, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DiseaseHistoryTypes_Insert", nameParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_DiseaseHistoryTypes_Select_Result> sp_DiseaseHistoryTypes_Select(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DiseaseHistoryTypes_Select_Result>("sp_DiseaseHistoryTypes_Select", nameParameter);
        }
    
        public virtual int sp_DiseaseHistoryTypes_Update(Nullable<int> iD, string name, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DiseaseHistoryTypes_Update", iDParameter, nameParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_Doctors_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Doctors_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Doctors_Insert(Nullable<int> iD, string name, Nullable<int> specialtyID, Nullable<int> nezamPezeshki, Nullable<double> darsad, Nullable<int> tafzilID, Nullable<System.DateTime> birthDay, Nullable<byte> sexTypeID, string meli, Nullable<int> soldieingTypeID, string general, string mobile, string webSite, string email, string homeAddress, string dsc, Nullable<bool> active, Nullable<int> imageID, Nullable<bool> del, Nullable<bool> @lock, Nullable<int> limitedUserID, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var specialtyIDParameter = specialtyID.HasValue ?
                new ObjectParameter("SpecialtyID", specialtyID) :
                new ObjectParameter("SpecialtyID", typeof(int));
    
            var nezamPezeshkiParameter = nezamPezeshki.HasValue ?
                new ObjectParameter("NezamPezeshki", nezamPezeshki) :
                new ObjectParameter("NezamPezeshki", typeof(int));
    
            var darsadParameter = darsad.HasValue ?
                new ObjectParameter("Darsad", darsad) :
                new ObjectParameter("Darsad", typeof(double));
    
            var tafzilIDParameter = tafzilID.HasValue ?
                new ObjectParameter("TafzilID", tafzilID) :
                new ObjectParameter("TafzilID", typeof(int));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("BirthDay", birthDay) :
                new ObjectParameter("BirthDay", typeof(System.DateTime));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var meliParameter = meli != null ?
                new ObjectParameter("Meli", meli) :
                new ObjectParameter("Meli", typeof(string));
    
            var soldieingTypeIDParameter = soldieingTypeID.HasValue ?
                new ObjectParameter("SoldieingTypeID", soldieingTypeID) :
                new ObjectParameter("SoldieingTypeID", typeof(int));
    
            var generalParameter = general != null ?
                new ObjectParameter("General", general) :
                new ObjectParameter("General", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var webSiteParameter = webSite != null ?
                new ObjectParameter("WebSite", webSite) :
                new ObjectParameter("WebSite", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var homeAddressParameter = homeAddress != null ?
                new ObjectParameter("HomeAddress", homeAddress) :
                new ObjectParameter("HomeAddress", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(int));
    
            var delParameter = del.HasValue ?
                new ObjectParameter("Del", del) :
                new ObjectParameter("Del", typeof(bool));
    
            var lockParameter = @lock.HasValue ?
                new ObjectParameter("Lock", @lock) :
                new ObjectParameter("Lock", typeof(bool));
    
            var limitedUserIDParameter = limitedUserID.HasValue ?
                new ObjectParameter("limitedUserID", limitedUserID) :
                new ObjectParameter("limitedUserID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Doctors_Insert", iDParameter, nameParameter, specialtyIDParameter, nezamPezeshkiParameter, darsadParameter, tafzilIDParameter, birthDayParameter, sexTypeIDParameter, meliParameter, soldieingTypeIDParameter, generalParameter, mobileParameter, webSiteParameter, emailParameter, homeAddressParameter, dscParameter, activeParameter, imageIDParameter, delParameter, lockParameter, limitedUserIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Doctors_Select_Result> sp_Doctors_Select(Nullable<int> iD, string name, Nullable<short> specialtyID, Nullable<byte> sexTypeID, Nullable<int> active)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var specialtyIDParameter = specialtyID.HasValue ?
                new ObjectParameter("SpecialtyID", specialtyID) :
                new ObjectParameter("SpecialtyID", typeof(short));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Doctors_Select_Result>("sp_Doctors_Select", iDParameter, nameParameter, specialtyIDParameter, sexTypeIDParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_Doctors_SelectRow_Result> sp_Doctors_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Doctors_SelectRow_Result>("sp_Doctors_SelectRow", iDParameter);
        }
    
        public virtual ObjectResult<sp_Doctors_SelectRowByLimitedUserID_Result> sp_Doctors_SelectRowByLimitedUserID(Nullable<int> limitedUserID)
        {
            var limitedUserIDParameter = limitedUserID.HasValue ?
                new ObjectParameter("LimitedUserID", limitedUserID) :
                new ObjectParameter("LimitedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Doctors_SelectRowByLimitedUserID_Result>("sp_Doctors_SelectRowByLimitedUserID", limitedUserIDParameter);
        }
    
        public virtual int sp_Doctors_Update(Nullable<int> iD, string name, Nullable<int> specialtyID, Nullable<int> nezamPezeshki, Nullable<double> darsad, Nullable<int> tafzilID, Nullable<System.DateTime> birthDay, Nullable<byte> sexTypeID, string meli, Nullable<int> soldieingTypeID, string general, string mobile, string webSite, string email, string homeAddress, string dsc, Nullable<bool> active, Nullable<int> imageID, Nullable<bool> del, Nullable<bool> @lock, Nullable<int> limitedUserID, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var specialtyIDParameter = specialtyID.HasValue ?
                new ObjectParameter("SpecialtyID", specialtyID) :
                new ObjectParameter("SpecialtyID", typeof(int));
    
            var nezamPezeshkiParameter = nezamPezeshki.HasValue ?
                new ObjectParameter("NezamPezeshki", nezamPezeshki) :
                new ObjectParameter("NezamPezeshki", typeof(int));
    
            var darsadParameter = darsad.HasValue ?
                new ObjectParameter("Darsad", darsad) :
                new ObjectParameter("Darsad", typeof(double));
    
            var tafzilIDParameter = tafzilID.HasValue ?
                new ObjectParameter("TafzilID", tafzilID) :
                new ObjectParameter("TafzilID", typeof(int));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("BirthDay", birthDay) :
                new ObjectParameter("BirthDay", typeof(System.DateTime));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var meliParameter = meli != null ?
                new ObjectParameter("Meli", meli) :
                new ObjectParameter("Meli", typeof(string));
    
            var soldieingTypeIDParameter = soldieingTypeID.HasValue ?
                new ObjectParameter("SoldieingTypeID", soldieingTypeID) :
                new ObjectParameter("SoldieingTypeID", typeof(int));
    
            var generalParameter = general != null ?
                new ObjectParameter("General", general) :
                new ObjectParameter("General", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var webSiteParameter = webSite != null ?
                new ObjectParameter("WebSite", webSite) :
                new ObjectParameter("WebSite", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var homeAddressParameter = homeAddress != null ?
                new ObjectParameter("HomeAddress", homeAddress) :
                new ObjectParameter("HomeAddress", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(int));
    
            var delParameter = del.HasValue ?
                new ObjectParameter("Del", del) :
                new ObjectParameter("Del", typeof(bool));
    
            var lockParameter = @lock.HasValue ?
                new ObjectParameter("Lock", @lock) :
                new ObjectParameter("Lock", typeof(bool));
    
            var limitedUserIDParameter = limitedUserID.HasValue ?
                new ObjectParameter("limitedUserID", limitedUserID) :
                new ObjectParameter("limitedUserID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Doctors_Update", iDParameter, nameParameter, specialtyIDParameter, nezamPezeshkiParameter, darsadParameter, tafzilIDParameter, birthDayParameter, sexTypeIDParameter, meliParameter, soldieingTypeIDParameter, generalParameter, mobileParameter, webSiteParameter, emailParameter, homeAddressParameter, dscParameter, activeParameter, imageIDParameter, delParameter, lockParameter, limitedUserIDParameter, useridParameter);
        }
    
        public virtual int sp_DoctorsNobat_ChangeNumber(Nullable<int> doctorID, Nullable<short> number, Nullable<int> userid)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(short));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DoctorsNobat_ChangeNumber", doctorIDParameter, numberParameter, useridParameter);
        }
    
        public virtual int sp_DoctorsNobat_ChangeNumberToLast(Nullable<int> doctorID)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DoctorsNobat_ChangeNumberToLast", doctorIDParameter);
        }
    
        public virtual int sp_DoctorsNobat_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DoctorsNobat_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_DoctorsNobat_Insert(Nullable<int> doctorID, string dsc, Nullable<int> userid)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DoctorsNobat_Insert", doctorIDParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_DoctorsNobat_Select_Result> sp_DoctorsNobat_Select(Nullable<int> doctorID, string name)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DoctorsNobat_Select_Result>("sp_DoctorsNobat_Select", doctorIDParameter, nameParameter);
        }
    
        public virtual ObjectResult<sp_DoctorsNobat_SelectFirst_Result> sp_DoctorsNobat_SelectFirst()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DoctorsNobat_SelectFirst_Result>("sp_DoctorsNobat_SelectFirst");
        }
    
        public virtual ObjectResult<sp_DoctorsNobat_SelectRow_Result> sp_DoctorsNobat_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DoctorsNobat_SelectRow_Result>("sp_DoctorsNobat_SelectRow", iDParameter);
        }
    
        public virtual int sp_DoctorsNobat_Update(Nullable<int> iD, Nullable<int> number, Nullable<int> doctorID, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DoctorsNobat_Update", iDParameter, numberParameter, doctorIDParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_DocumentIcons_SempleInsert(string fileExt, string iconFile)
        {
            var fileExtParameter = fileExt != null ?
                new ObjectParameter("FileExt", fileExt) :
                new ObjectParameter("FileExt", typeof(string));
    
            var iconFileParameter = iconFile != null ?
                new ObjectParameter("IconFile", iconFile) :
                new ObjectParameter("IconFile", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DocumentIcons_SempleInsert", fileExtParameter, iconFileParameter);
        }
    
        public virtual int sp_Documents_Archive(Nullable<int> iD, Nullable<byte> archiveStateID, string archiveDsc, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var archiveStateIDParameter = archiveStateID.HasValue ?
                new ObjectParameter("ArchiveStateID", archiveStateID) :
                new ObjectParameter("ArchiveStateID", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Documents_Archive", iDParameter, archiveStateIDParameter, archiveDscParameter, userIDParameter);
        }
    
        public virtual int sp_Documents_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Documents_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Documents_Insert(Nullable<short> kind, Nullable<short> documentTypeID, Nullable<short> documentStateID, Nullable<short> imagePostTypeID, Nullable<System.DateTime> registerDate, Nullable<int> serial, Nullable<int> subjectCategoryID, Nullable<int> subjectSubCategoryID, Nullable<int> subjectID, string title, string shortDsc, string dsc, byte[] documentFile, string fileExt, Nullable<int> receptionID, Nullable<int> departmentID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<int> senderID, Nullable<int> receiverID, string senderName, string receiverName, Nullable<int> userid)
        {
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var documentTypeIDParameter = documentTypeID.HasValue ?
                new ObjectParameter("DocumentTypeID", documentTypeID) :
                new ObjectParameter("DocumentTypeID", typeof(short));
    
            var documentStateIDParameter = documentStateID.HasValue ?
                new ObjectParameter("DocumentStateID", documentStateID) :
                new ObjectParameter("DocumentStateID", typeof(short));
    
            var imagePostTypeIDParameter = imagePostTypeID.HasValue ?
                new ObjectParameter("ImagePostTypeID", imagePostTypeID) :
                new ObjectParameter("ImagePostTypeID", typeof(short));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var subjectCategoryIDParameter = subjectCategoryID.HasValue ?
                new ObjectParameter("SubjectCategoryID", subjectCategoryID) :
                new ObjectParameter("SubjectCategoryID", typeof(int));
    
            var subjectSubCategoryIDParameter = subjectSubCategoryID.HasValue ?
                new ObjectParameter("SubjectSubCategoryID", subjectSubCategoryID) :
                new ObjectParameter("SubjectSubCategoryID", typeof(int));
    
            var subjectIDParameter = subjectID.HasValue ?
                new ObjectParameter("SubjectID", subjectID) :
                new ObjectParameter("SubjectID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var documentFileParameter = documentFile != null ?
                new ObjectParameter("DocumentFile", documentFile) :
                new ObjectParameter("DocumentFile", typeof(byte[]));
    
            var fileExtParameter = fileExt != null ?
                new ObjectParameter("FileExt", fileExt) :
                new ObjectParameter("FileExt", typeof(string));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var receiverIDParameter = receiverID.HasValue ?
                new ObjectParameter("ReceiverID", receiverID) :
                new ObjectParameter("ReceiverID", typeof(int));
    
            var senderNameParameter = senderName != null ?
                new ObjectParameter("SenderName", senderName) :
                new ObjectParameter("SenderName", typeof(string));
    
            var receiverNameParameter = receiverName != null ?
                new ObjectParameter("ReceiverName", receiverName) :
                new ObjectParameter("ReceiverName", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Documents_Insert", kindParameter, documentTypeIDParameter, documentStateIDParameter, imagePostTypeIDParameter, registerDateParameter, serialParameter, subjectCategoryIDParameter, subjectSubCategoryIDParameter, subjectIDParameter, titleParameter, shortDscParameter, dscParameter, documentFileParameter, fileExtParameter, receptionIDParameter, departmentIDParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, senderIDParameter, receiverIDParameter, senderNameParameter, receiverNameParameter, useridParameter);
        }
    
        public virtual int sp_Documents_Recovery(Nullable<int> iD, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Documents_Recovery", iDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_Documents_Select_Result> sp_Documents_Select(Nullable<short> kind, string registerDate_Start, string registerDate_End, Nullable<short> documentTypeID, Nullable<short> documentStateID, Nullable<short> imagePostTypeID, Nullable<int> serial, Nullable<int> subjectID, Nullable<int> receptionID, Nullable<int> departmentID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, string fileExt, Nullable<int> senderID, Nullable<int> receiverID, string senderName, string receiverName, string title, string shortDsc, string dsc, Nullable<byte> archive, string archiveDsc, Nullable<bool> imagePostTypeID_1, Nullable<bool> imagePostTypeID_2, Nullable<bool> imagePostTypeID_3, Nullable<bool> imagePostTypeID_4, Nullable<int> userid, Nullable<int> topRange)
        {
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var documentTypeIDParameter = documentTypeID.HasValue ?
                new ObjectParameter("DocumentTypeID", documentTypeID) :
                new ObjectParameter("DocumentTypeID", typeof(short));
    
            var documentStateIDParameter = documentStateID.HasValue ?
                new ObjectParameter("DocumentStateID", documentStateID) :
                new ObjectParameter("DocumentStateID", typeof(short));
    
            var imagePostTypeIDParameter = imagePostTypeID.HasValue ?
                new ObjectParameter("ImagePostTypeID", imagePostTypeID) :
                new ObjectParameter("ImagePostTypeID", typeof(short));
    
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var subjectIDParameter = subjectID.HasValue ?
                new ObjectParameter("SubjectID", subjectID) :
                new ObjectParameter("SubjectID", typeof(int));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var fileExtParameter = fileExt != null ?
                new ObjectParameter("FileExt", fileExt) :
                new ObjectParameter("FileExt", typeof(string));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var receiverIDParameter = receiverID.HasValue ?
                new ObjectParameter("ReceiverID", receiverID) :
                new ObjectParameter("ReceiverID", typeof(int));
    
            var senderNameParameter = senderName != null ?
                new ObjectParameter("SenderName", senderName) :
                new ObjectParameter("SenderName", typeof(string));
    
            var receiverNameParameter = receiverName != null ?
                new ObjectParameter("ReceiverName", receiverName) :
                new ObjectParameter("ReceiverName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var imagePostTypeID_1Parameter = imagePostTypeID_1.HasValue ?
                new ObjectParameter("ImagePostTypeID_1", imagePostTypeID_1) :
                new ObjectParameter("ImagePostTypeID_1", typeof(bool));
    
            var imagePostTypeID_2Parameter = imagePostTypeID_2.HasValue ?
                new ObjectParameter("ImagePostTypeID_2", imagePostTypeID_2) :
                new ObjectParameter("ImagePostTypeID_2", typeof(bool));
    
            var imagePostTypeID_3Parameter = imagePostTypeID_3.HasValue ?
                new ObjectParameter("ImagePostTypeID_3", imagePostTypeID_3) :
                new ObjectParameter("ImagePostTypeID_3", typeof(bool));
    
            var imagePostTypeID_4Parameter = imagePostTypeID_4.HasValue ?
                new ObjectParameter("ImagePostTypeID_4", imagePostTypeID_4) :
                new ObjectParameter("ImagePostTypeID_4", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Documents_Select_Result>("sp_Documents_Select", kindParameter, registerDate_StartParameter, registerDate_EndParameter, documentTypeIDParameter, documentStateIDParameter, imagePostTypeIDParameter, serialParameter, subjectIDParameter, receptionIDParameter, departmentIDParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, fileExtParameter, senderIDParameter, receiverIDParameter, senderNameParameter, receiverNameParameter, titleParameter, shortDscParameter, dscParameter, archiveParameter, archiveDscParameter, imagePostTypeID_1Parameter, imagePostTypeID_2Parameter, imagePostTypeID_3Parameter, imagePostTypeID_4Parameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Documents_SelectRow_Result> sp_Documents_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Documents_SelectRow_Result>("sp_Documents_SelectRow", iDParameter);
        }
    
        public virtual int sp_Documents_Update(Nullable<short> kind, Nullable<short> documentTypeID, Nullable<short> documentStateID, Nullable<short> imagePostTypeID, Nullable<int> iD, Nullable<System.DateTime> registerDate, Nullable<int> serial, Nullable<int> subjectCategoryID, Nullable<int> subjectSubCategoryID, Nullable<int> subjectID, string title, string shortDsc, string dsc, byte[] documentFile, string fileExt, Nullable<int> receptionID, Nullable<int> departmentID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<int> senderID, Nullable<int> receiverID, string senderName, string receiverName, Nullable<int> userid)
        {
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var documentTypeIDParameter = documentTypeID.HasValue ?
                new ObjectParameter("DocumentTypeID", documentTypeID) :
                new ObjectParameter("DocumentTypeID", typeof(short));
    
            var documentStateIDParameter = documentStateID.HasValue ?
                new ObjectParameter("DocumentStateID", documentStateID) :
                new ObjectParameter("DocumentStateID", typeof(short));
    
            var imagePostTypeIDParameter = imagePostTypeID.HasValue ?
                new ObjectParameter("ImagePostTypeID", imagePostTypeID) :
                new ObjectParameter("ImagePostTypeID", typeof(short));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var subjectCategoryIDParameter = subjectCategoryID.HasValue ?
                new ObjectParameter("SubjectCategoryID", subjectCategoryID) :
                new ObjectParameter("SubjectCategoryID", typeof(int));
    
            var subjectSubCategoryIDParameter = subjectSubCategoryID.HasValue ?
                new ObjectParameter("SubjectSubCategoryID", subjectSubCategoryID) :
                new ObjectParameter("SubjectSubCategoryID", typeof(int));
    
            var subjectIDParameter = subjectID.HasValue ?
                new ObjectParameter("SubjectID", subjectID) :
                new ObjectParameter("SubjectID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var documentFileParameter = documentFile != null ?
                new ObjectParameter("DocumentFile", documentFile) :
                new ObjectParameter("DocumentFile", typeof(byte[]));
    
            var fileExtParameter = fileExt != null ?
                new ObjectParameter("FileExt", fileExt) :
                new ObjectParameter("FileExt", typeof(string));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var receiverIDParameter = receiverID.HasValue ?
                new ObjectParameter("ReceiverID", receiverID) :
                new ObjectParameter("ReceiverID", typeof(int));
    
            var senderNameParameter = senderName != null ?
                new ObjectParameter("SenderName", senderName) :
                new ObjectParameter("SenderName", typeof(string));
    
            var receiverNameParameter = receiverName != null ?
                new ObjectParameter("ReceiverName", receiverName) :
                new ObjectParameter("ReceiverName", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Documents_Update", kindParameter, documentTypeIDParameter, documentStateIDParameter, imagePostTypeIDParameter, iDParameter, registerDateParameter, serialParameter, subjectCategoryIDParameter, subjectSubCategoryIDParameter, subjectIDParameter, titleParameter, shortDscParameter, dscParameter, documentFileParameter, fileExtParameter, receptionIDParameter, departmentIDParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, senderIDParameter, receiverIDParameter, senderNameParameter, receiverNameParameter, useridParameter);
        }
    
        public virtual int sp_DocumentStates_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DocumentStates_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_DocumentStates_Insert(Nullable<short> kind, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DocumentStates_Insert", kindParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_DocumentStates_Select_Result> sp_DocumentStates_Select(Nullable<short> kind, string name, Nullable<int> active)
        {
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DocumentStates_Select_Result>("sp_DocumentStates_Select", kindParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_DocumentStates_Update(Nullable<short> kind, Nullable<short> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DocumentStates_Update", kindParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_DocumentTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DocumentTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_DocumentTypes_Insert(Nullable<short> kind, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DocumentTypes_Insert", kindParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_DocumentTypes_Select_Result> sp_DocumentTypes_Select(Nullable<short> kind, string name, Nullable<int> active)
        {
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DocumentTypes_Select_Result>("sp_DocumentTypes_Select", kindParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_DocumentTypes_Update(Nullable<short> iD, Nullable<short> kind, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DocumentTypes_Update", iDParameter, kindParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Drivers_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Drivers_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Drivers_Insert(Nullable<int> iD, Nullable<byte> sex, string name, string fatherName, Nullable<byte> eeducationID, Nullable<System.DateTime> birthDay, Nullable<System.DateTime> marriage, string birthPlace, string shsh, string meli, Nullable<byte> soldierTypeID, Nullable<byte> marriageTypeID, Nullable<System.DateTime> certificateExp, string general, string home, string mobile, string other, string moaref, string vasigheh, string webSite, string email, string homeAddress, string homePostalCode, Nullable<int> carID, Nullable<double> maxBed, Nullable<bool> viewStatus, Nullable<int> imageID, string dsc, Nullable<double> darsad, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var sexParameter = sex.HasValue ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(byte));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var eeducationIDParameter = eeducationID.HasValue ?
                new ObjectParameter("EeducationID", eeducationID) :
                new ObjectParameter("EeducationID", typeof(byte));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("BirthDay", birthDay) :
                new ObjectParameter("BirthDay", typeof(System.DateTime));
    
            var marriageParameter = marriage.HasValue ?
                new ObjectParameter("Marriage", marriage) :
                new ObjectParameter("Marriage", typeof(System.DateTime));
    
            var birthPlaceParameter = birthPlace != null ?
                new ObjectParameter("BirthPlace", birthPlace) :
                new ObjectParameter("BirthPlace", typeof(string));
    
            var shshParameter = shsh != null ?
                new ObjectParameter("Shsh", shsh) :
                new ObjectParameter("Shsh", typeof(string));
    
            var meliParameter = meli != null ?
                new ObjectParameter("Meli", meli) :
                new ObjectParameter("Meli", typeof(string));
    
            var soldierTypeIDParameter = soldierTypeID.HasValue ?
                new ObjectParameter("SoldierTypeID", soldierTypeID) :
                new ObjectParameter("SoldierTypeID", typeof(byte));
    
            var marriageTypeIDParameter = marriageTypeID.HasValue ?
                new ObjectParameter("MarriageTypeID", marriageTypeID) :
                new ObjectParameter("MarriageTypeID", typeof(byte));
    
            var certificateExpParameter = certificateExp.HasValue ?
                new ObjectParameter("CertificateExp", certificateExp) :
                new ObjectParameter("CertificateExp", typeof(System.DateTime));
    
            var generalParameter = general != null ?
                new ObjectParameter("General", general) :
                new ObjectParameter("General", typeof(string));
    
            var homeParameter = home != null ?
                new ObjectParameter("Home", home) :
                new ObjectParameter("Home", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var otherParameter = other != null ?
                new ObjectParameter("Other", other) :
                new ObjectParameter("Other", typeof(string));
    
            var moarefParameter = moaref != null ?
                new ObjectParameter("Moaref", moaref) :
                new ObjectParameter("Moaref", typeof(string));
    
            var vasighehParameter = vasigheh != null ?
                new ObjectParameter("Vasigheh", vasigheh) :
                new ObjectParameter("Vasigheh", typeof(string));
    
            var webSiteParameter = webSite != null ?
                new ObjectParameter("WebSite", webSite) :
                new ObjectParameter("WebSite", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var homeAddressParameter = homeAddress != null ?
                new ObjectParameter("HomeAddress", homeAddress) :
                new ObjectParameter("HomeAddress", typeof(string));
    
            var homePostalCodeParameter = homePostalCode != null ?
                new ObjectParameter("HomePostalCode", homePostalCode) :
                new ObjectParameter("HomePostalCode", typeof(string));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var maxBedParameter = maxBed.HasValue ?
                new ObjectParameter("MaxBed", maxBed) :
                new ObjectParameter("MaxBed", typeof(double));
    
            var viewStatusParameter = viewStatus.HasValue ?
                new ObjectParameter("ViewStatus", viewStatus) :
                new ObjectParameter("ViewStatus", typeof(bool));
    
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var darsadParameter = darsad.HasValue ?
                new ObjectParameter("Darsad", darsad) :
                new ObjectParameter("Darsad", typeof(double));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Drivers_Insert", iDParameter, sexParameter, nameParameter, fatherNameParameter, eeducationIDParameter, birthDayParameter, marriageParameter, birthPlaceParameter, shshParameter, meliParameter, soldierTypeIDParameter, marriageTypeIDParameter, certificateExpParameter, generalParameter, homeParameter, mobileParameter, otherParameter, moarefParameter, vasighehParameter, webSiteParameter, emailParameter, homeAddressParameter, homePostalCodeParameter, carIDParameter, maxBedParameter, viewStatusParameter, imageIDParameter, dscParameter, darsadParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Drivers_Select_Result> sp_Drivers_Select(string name, string carName, string carColor, string carPlak, Nullable<bool> viewStatus)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var carNameParameter = carName != null ?
                new ObjectParameter("CarName", carName) :
                new ObjectParameter("CarName", typeof(string));
    
            var carColorParameter = carColor != null ?
                new ObjectParameter("CarColor", carColor) :
                new ObjectParameter("CarColor", typeof(string));
    
            var carPlakParameter = carPlak != null ?
                new ObjectParameter("CarPlak", carPlak) :
                new ObjectParameter("CarPlak", typeof(string));
    
            var viewStatusParameter = viewStatus.HasValue ?
                new ObjectParameter("ViewStatus", viewStatus) :
                new ObjectParameter("ViewStatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Drivers_Select_Result>("sp_Drivers_Select", nameParameter, carNameParameter, carColorParameter, carPlakParameter, viewStatusParameter);
        }
    
        public virtual ObjectResult<sp_Drivers_SelectRow_Result> sp_Drivers_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Drivers_SelectRow_Result>("sp_Drivers_SelectRow", iDParameter);
        }
    
        public virtual int sp_Drivers_Update(Nullable<int> iD, Nullable<byte> sex, string name, string fatherName, Nullable<byte> eeducationID, Nullable<System.DateTime> birthDay, Nullable<System.DateTime> marriage, string birthPlace, string shsh, string meli, Nullable<byte> soldierTypeID, Nullable<byte> marriageTypeID, Nullable<System.DateTime> certificateExp, string general, string home, string mobile, string other, string moaref, string vasigheh, string webSite, string email, string homeAddress, string homePostalCode, Nullable<int> carID, Nullable<double> maxBed, Nullable<bool> viewStatus, Nullable<int> imageID, string dsc, Nullable<double> darsad, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var sexParameter = sex.HasValue ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(byte));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var eeducationIDParameter = eeducationID.HasValue ?
                new ObjectParameter("EeducationID", eeducationID) :
                new ObjectParameter("EeducationID", typeof(byte));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("BirthDay", birthDay) :
                new ObjectParameter("BirthDay", typeof(System.DateTime));
    
            var marriageParameter = marriage.HasValue ?
                new ObjectParameter("Marriage", marriage) :
                new ObjectParameter("Marriage", typeof(System.DateTime));
    
            var birthPlaceParameter = birthPlace != null ?
                new ObjectParameter("BirthPlace", birthPlace) :
                new ObjectParameter("BirthPlace", typeof(string));
    
            var shshParameter = shsh != null ?
                new ObjectParameter("Shsh", shsh) :
                new ObjectParameter("Shsh", typeof(string));
    
            var meliParameter = meli != null ?
                new ObjectParameter("Meli", meli) :
                new ObjectParameter("Meli", typeof(string));
    
            var soldierTypeIDParameter = soldierTypeID.HasValue ?
                new ObjectParameter("SoldierTypeID", soldierTypeID) :
                new ObjectParameter("SoldierTypeID", typeof(byte));
    
            var marriageTypeIDParameter = marriageTypeID.HasValue ?
                new ObjectParameter("MarriageTypeID", marriageTypeID) :
                new ObjectParameter("MarriageTypeID", typeof(byte));
    
            var certificateExpParameter = certificateExp.HasValue ?
                new ObjectParameter("CertificateExp", certificateExp) :
                new ObjectParameter("CertificateExp", typeof(System.DateTime));
    
            var generalParameter = general != null ?
                new ObjectParameter("General", general) :
                new ObjectParameter("General", typeof(string));
    
            var homeParameter = home != null ?
                new ObjectParameter("Home", home) :
                new ObjectParameter("Home", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var otherParameter = other != null ?
                new ObjectParameter("Other", other) :
                new ObjectParameter("Other", typeof(string));
    
            var moarefParameter = moaref != null ?
                new ObjectParameter("Moaref", moaref) :
                new ObjectParameter("Moaref", typeof(string));
    
            var vasighehParameter = vasigheh != null ?
                new ObjectParameter("Vasigheh", vasigheh) :
                new ObjectParameter("Vasigheh", typeof(string));
    
            var webSiteParameter = webSite != null ?
                new ObjectParameter("WebSite", webSite) :
                new ObjectParameter("WebSite", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var homeAddressParameter = homeAddress != null ?
                new ObjectParameter("HomeAddress", homeAddress) :
                new ObjectParameter("HomeAddress", typeof(string));
    
            var homePostalCodeParameter = homePostalCode != null ?
                new ObjectParameter("HomePostalCode", homePostalCode) :
                new ObjectParameter("HomePostalCode", typeof(string));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var maxBedParameter = maxBed.HasValue ?
                new ObjectParameter("MaxBed", maxBed) :
                new ObjectParameter("MaxBed", typeof(double));
    
            var viewStatusParameter = viewStatus.HasValue ?
                new ObjectParameter("ViewStatus", viewStatus) :
                new ObjectParameter("ViewStatus", typeof(bool));
    
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var darsadParameter = darsad.HasValue ?
                new ObjectParameter("Darsad", darsad) :
                new ObjectParameter("Darsad", typeof(double));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Drivers_Update", iDParameter, sexParameter, nameParameter, fatherNameParameter, eeducationIDParameter, birthDayParameter, marriageParameter, birthPlaceParameter, shshParameter, meliParameter, soldierTypeIDParameter, marriageTypeIDParameter, certificateExpParameter, generalParameter, homeParameter, mobileParameter, otherParameter, moarefParameter, vasighehParameter, webSiteParameter, emailParameter, homeAddressParameter, homePostalCodeParameter, carIDParameter, maxBedParameter, viewStatusParameter, imageIDParameter, dscParameter, darsadParameter, useridParameter);
        }
    
        public virtual int sp_DriversNobat_ChangeNumber(Nullable<int> driverID, Nullable<short> number, Nullable<int> userid)
        {
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(short));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DriversNobat_ChangeNumber", driverIDParameter, numberParameter, useridParameter);
        }
    
        public virtual int sp_DriversNobat_ChangeNumberToLast(Nullable<int> driverID)
        {
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DriversNobat_ChangeNumberToLast", driverIDParameter);
        }
    
        public virtual int sp_DriversNobat_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DriversNobat_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_DriversNobat_DeleteByDriverID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DriversNobat_DeleteByDriverID", iDParameter);
        }
    
        public virtual int sp_DriversNobat_Insert(Nullable<int> driverID, Nullable<int> carID, string dsc, Nullable<int> userid)
        {
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DriversNobat_Insert", driverIDParameter, carIDParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_DriversNobat_Select_Result> sp_DriversNobat_Select(Nullable<int> driverID, Nullable<int> carID, string name)
        {
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DriversNobat_Select_Result>("sp_DriversNobat_Select", driverIDParameter, carIDParameter, nameParameter);
        }
    
        public virtual ObjectResult<sp_DriversNobat_SelectFirst_Result> sp_DriversNobat_SelectFirst()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DriversNobat_SelectFirst_Result>("sp_DriversNobat_SelectFirst");
        }
    
        public virtual ObjectResult<sp_DriversNobat_SelectRow_Result> sp_DriversNobat_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DriversNobat_SelectRow_Result>("sp_DriversNobat_SelectRow", iDParameter);
        }
    
        public virtual int sp_DriversNobat_Update(Nullable<int> iD, Nullable<int> number, Nullable<int> driverID, Nullable<int> carID, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DriversNobat_Update", iDParameter, numberParameter, driverIDParameter, carIDParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_DrugCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DrugCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_DrugCategories_Insert(string name, string dsc, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DrugCategories_Insert", nameParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_DrugCategories_Select_Result> sp_DrugCategories_Select(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DrugCategories_Select_Result>("sp_DrugCategories_Select", nameParameter);
        }
    
        public virtual int sp_DrugCategories_Update(Nullable<int> iD, string name, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DrugCategories_Update", iDParameter, nameParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_DrugClasses_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DrugClasses_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_DrugClasses_Insert(Nullable<short> drugCategoryID, Nullable<int> drugSubCategoryID, Nullable<int> iD, string name, string dsc, byte[] iCon, Nullable<bool> active, Nullable<int> userid)
        {
            var drugCategoryIDParameter = drugCategoryID.HasValue ?
                new ObjectParameter("DrugCategoryID", drugCategoryID) :
                new ObjectParameter("DrugCategoryID", typeof(short));
    
            var drugSubCategoryIDParameter = drugSubCategoryID.HasValue ?
                new ObjectParameter("DrugSubCategoryID", drugSubCategoryID) :
                new ObjectParameter("DrugSubCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var iConParameter = iCon != null ?
                new ObjectParameter("ICon", iCon) :
                new ObjectParameter("ICon", typeof(byte[]));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DrugClasses_Insert", drugCategoryIDParameter, drugSubCategoryIDParameter, iDParameter, nameParameter, dscParameter, iConParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_DrugClasses_Select_Result> sp_DrugClasses_Select(Nullable<short> drugCategoryID, Nullable<int> drugSubCategoryID, string name, Nullable<int> active)
        {
            var drugCategoryIDParameter = drugCategoryID.HasValue ?
                new ObjectParameter("DrugCategoryID", drugCategoryID) :
                new ObjectParameter("DrugCategoryID", typeof(short));
    
            var drugSubCategoryIDParameter = drugSubCategoryID.HasValue ?
                new ObjectParameter("DrugSubCategoryID", drugSubCategoryID) :
                new ObjectParameter("DrugSubCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DrugClasses_Select_Result>("sp_DrugClasses_Select", drugCategoryIDParameter, drugSubCategoryIDParameter, nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_DrugClasses_SelectRow_Result> sp_DrugClasses_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DrugClasses_SelectRow_Result>("sp_DrugClasses_SelectRow", iDParameter);
        }
    
        public virtual int sp_DrugClasses_Update(Nullable<short> drugCategoryID, Nullable<int> drugSubCategoryID, Nullable<int> iD, string name, string dsc, byte[] iCon, Nullable<bool> active, Nullable<int> userid)
        {
            var drugCategoryIDParameter = drugCategoryID.HasValue ?
                new ObjectParameter("DrugCategoryID", drugCategoryID) :
                new ObjectParameter("DrugCategoryID", typeof(short));
    
            var drugSubCategoryIDParameter = drugSubCategoryID.HasValue ?
                new ObjectParameter("DrugSubCategoryID", drugSubCategoryID) :
                new ObjectParameter("DrugSubCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var iConParameter = iCon != null ?
                new ObjectParameter("ICon", iCon) :
                new ObjectParameter("ICon", typeof(byte[]));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DrugClasses_Update", drugCategoryIDParameter, drugSubCategoryIDParameter, iDParameter, nameParameter, dscParameter, iConParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Drugs_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Drugs_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Drugs_Insert(Nullable<short> drugCategoryID, Nullable<int> drugSubCategoryID, Nullable<int> drugClassID, Nullable<short> drugTypeID, Nullable<int> iD, Nullable<int> code, Nullable<int> innCode, string name, string innName, string drugForm, string drugDsc, Nullable<short> countingUnitID, Nullable<bool> active, Nullable<int> imageID1, string dsc, Nullable<int> userid)
        {
            var drugCategoryIDParameter = drugCategoryID.HasValue ?
                new ObjectParameter("DrugCategoryID", drugCategoryID) :
                new ObjectParameter("DrugCategoryID", typeof(short));
    
            var drugSubCategoryIDParameter = drugSubCategoryID.HasValue ?
                new ObjectParameter("DrugSubCategoryID", drugSubCategoryID) :
                new ObjectParameter("DrugSubCategoryID", typeof(int));
    
            var drugClassIDParameter = drugClassID.HasValue ?
                new ObjectParameter("DrugClassID", drugClassID) :
                new ObjectParameter("DrugClassID", typeof(int));
    
            var drugTypeIDParameter = drugTypeID.HasValue ?
                new ObjectParameter("DrugTypeID", drugTypeID) :
                new ObjectParameter("DrugTypeID", typeof(short));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var codeParameter = code.HasValue ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(int));
    
            var innCodeParameter = innCode.HasValue ?
                new ObjectParameter("InnCode", innCode) :
                new ObjectParameter("InnCode", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var innNameParameter = innName != null ?
                new ObjectParameter("InnName", innName) :
                new ObjectParameter("InnName", typeof(string));
    
            var drugFormParameter = drugForm != null ?
                new ObjectParameter("DrugForm", drugForm) :
                new ObjectParameter("DrugForm", typeof(string));
    
            var drugDscParameter = drugDsc != null ?
                new ObjectParameter("DrugDsc", drugDsc) :
                new ObjectParameter("DrugDsc", typeof(string));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(short));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var imageID1Parameter = imageID1.HasValue ?
                new ObjectParameter("ImageID1", imageID1) :
                new ObjectParameter("ImageID1", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Drugs_Insert", drugCategoryIDParameter, drugSubCategoryIDParameter, drugClassIDParameter, drugTypeIDParameter, iDParameter, codeParameter, innCodeParameter, nameParameter, innNameParameter, drugFormParameter, drugDscParameter, countingUnitIDParameter, activeParameter, imageID1Parameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Drugs_Select_Result> sp_Drugs_Select(Nullable<short> drugCategoryID, Nullable<int> drugsubCategoryID, Nullable<int> drugClassID, Nullable<short> drugTypeID, string name, Nullable<int> active)
        {
            var drugCategoryIDParameter = drugCategoryID.HasValue ?
                new ObjectParameter("DrugCategoryID", drugCategoryID) :
                new ObjectParameter("DrugCategoryID", typeof(short));
    
            var drugsubCategoryIDParameter = drugsubCategoryID.HasValue ?
                new ObjectParameter("DrugsubCategoryID", drugsubCategoryID) :
                new ObjectParameter("DrugsubCategoryID", typeof(int));
    
            var drugClassIDParameter = drugClassID.HasValue ?
                new ObjectParameter("DrugClassID", drugClassID) :
                new ObjectParameter("DrugClassID", typeof(int));
    
            var drugTypeIDParameter = drugTypeID.HasValue ?
                new ObjectParameter("DrugTypeID", drugTypeID) :
                new ObjectParameter("DrugTypeID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Drugs_Select_Result>("sp_Drugs_Select", drugCategoryIDParameter, drugsubCategoryIDParameter, drugClassIDParameter, drugTypeIDParameter, nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_Drugs_SelectRow_Result> sp_Drugs_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Drugs_SelectRow_Result>("sp_Drugs_SelectRow", iDParameter);
        }
    
        public virtual int sp_Drugs_Update(Nullable<short> drugCategoryID, Nullable<int> drugSubCategoryID, Nullable<int> drugClassID, Nullable<short> drugTypeID, Nullable<int> iD, Nullable<int> code, Nullable<int> innCode, string name, string innName, string drugForm, string drugDsc, Nullable<short> countingUnitID, Nullable<bool> active, Nullable<int> imageID1, string dsc, Nullable<int> userid)
        {
            var drugCategoryIDParameter = drugCategoryID.HasValue ?
                new ObjectParameter("DrugCategoryID", drugCategoryID) :
                new ObjectParameter("DrugCategoryID", typeof(short));
    
            var drugSubCategoryIDParameter = drugSubCategoryID.HasValue ?
                new ObjectParameter("DrugSubCategoryID", drugSubCategoryID) :
                new ObjectParameter("DrugSubCategoryID", typeof(int));
    
            var drugClassIDParameter = drugClassID.HasValue ?
                new ObjectParameter("DrugClassID", drugClassID) :
                new ObjectParameter("DrugClassID", typeof(int));
    
            var drugTypeIDParameter = drugTypeID.HasValue ?
                new ObjectParameter("DrugTypeID", drugTypeID) :
                new ObjectParameter("DrugTypeID", typeof(short));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var codeParameter = code.HasValue ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(int));
    
            var innCodeParameter = innCode.HasValue ?
                new ObjectParameter("InnCode", innCode) :
                new ObjectParameter("InnCode", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var innNameParameter = innName != null ?
                new ObjectParameter("InnName", innName) :
                new ObjectParameter("InnName", typeof(string));
    
            var drugFormParameter = drugForm != null ?
                new ObjectParameter("DrugForm", drugForm) :
                new ObjectParameter("DrugForm", typeof(string));
    
            var drugDscParameter = drugDsc != null ?
                new ObjectParameter("DrugDsc", drugDsc) :
                new ObjectParameter("DrugDsc", typeof(string));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(short));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var imageID1Parameter = imageID1.HasValue ?
                new ObjectParameter("ImageID1", imageID1) :
                new ObjectParameter("ImageID1", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Drugs_Update", drugCategoryIDParameter, drugSubCategoryIDParameter, drugClassIDParameter, drugTypeIDParameter, iDParameter, codeParameter, innCodeParameter, nameParameter, innNameParameter, drugFormParameter, drugDscParameter, countingUnitIDParameter, activeParameter, imageID1Parameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_DrugSubCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DrugSubCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_DrugSubCategories_Insert(Nullable<short> drugCategoryID, string name, string dsc, Nullable<int> userid)
        {
            var drugCategoryIDParameter = drugCategoryID.HasValue ?
                new ObjectParameter("DrugCategoryID", drugCategoryID) :
                new ObjectParameter("DrugCategoryID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DrugSubCategories_Insert", drugCategoryIDParameter, nameParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_DrugSubCategories_Select_Result> sp_DrugSubCategories_Select(Nullable<short> drugCategoryID, string name)
        {
            var drugCategoryIDParameter = drugCategoryID.HasValue ?
                new ObjectParameter("DrugCategoryID", drugCategoryID) :
                new ObjectParameter("DrugCategoryID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DrugSubCategories_Select_Result>("sp_DrugSubCategories_Select", drugCategoryIDParameter, nameParameter);
        }
    
        public virtual int sp_DrugSubCategories_Update(Nullable<int> iD, Nullable<short> drugCategoryID, string name, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var drugCategoryIDParameter = drugCategoryID.HasValue ?
                new ObjectParameter("DrugCategoryID", drugCategoryID) :
                new ObjectParameter("DrugCategoryID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DrugSubCategories_Update", iDParameter, drugCategoryIDParameter, nameParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_DrugTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DrugTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_DrugTypes_Insert(string name, string dsc, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DrugTypes_Insert", nameParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_DrugTypes_Select_Result> sp_DrugTypes_Select(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DrugTypes_Select_Result>("sp_DrugTypes_Select", nameParameter);
        }
    
        public virtual int sp_DrugTypes_Update(Nullable<int> iD, string name, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DrugTypes_Update", iDParameter, nameParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_DscCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DscCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_DscCategories_Insert(Nullable<int> iD, Nullable<short> kind, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DscCategories_Insert", iDParameter, kindParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_DscCategories_Select_Result> sp_DscCategories_Select(Nullable<short> kind, string name, Nullable<int> active)
        {
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DscCategories_Select_Result>("sp_DscCategories_Select", kindParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_DscCategories_Update(Nullable<int> iD, Nullable<short> kind, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DscCategories_Update", iDParameter, kindParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_DscSubCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DscSubCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_DscSubCategories_Insert(Nullable<short> kind, Nullable<int> dscCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var dscCategoryIDParameter = dscCategoryID.HasValue ?
                new ObjectParameter("DscCategoryID", dscCategoryID) :
                new ObjectParameter("DscCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DscSubCategories_Insert", kindParameter, dscCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_DscSubCategories_Select_Result> sp_DscSubCategories_Select(Nullable<short> kind, Nullable<int> dscCategoryID, string name, Nullable<int> active)
        {
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var dscCategoryIDParameter = dscCategoryID.HasValue ?
                new ObjectParameter("DscCategoryID", dscCategoryID) :
                new ObjectParameter("DscCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DscSubCategories_Select_Result>("sp_DscSubCategories_Select", kindParameter, dscCategoryIDParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_DscSubCategories_Update(Nullable<short> kind, Nullable<int> dscCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var dscCategoryIDParameter = dscCategoryID.HasValue ?
                new ObjectParameter("DscCategoryID", dscCategoryID) :
                new ObjectParameter("DscCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DscSubCategories_Update", kindParameter, dscCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_EducationTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EducationTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_EducationTypes_Insert(string name, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EducationTypes_Insert", nameParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_EducationTypes_Select_Result> sp_EducationTypes_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EducationTypes_Select_Result>("sp_EducationTypes_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_EducationTypes_Update(Nullable<int> iD, string name, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EducationTypes_Update", iDParameter, nameParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Emails_Select_Result> sp_Emails_Select(Nullable<int> iD, Nullable<int> customerID, Nullable<byte> emailTypeID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var emailTypeIDParameter = emailTypeID.HasValue ?
                new ObjectParameter("EmailTypeID", emailTypeID) :
                new ObjectParameter("EmailTypeID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Emails_Select_Result>("sp_Emails_Select", iDParameter, customerIDParameter, emailTypeIDParameter);
        }
    
        public virtual ObjectResult<sp_Emails_SelectRow_Result> sp_Emails_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Emails_SelectRow_Result>("sp_Emails_SelectRow", iDParameter);
        }
    
        public virtual int sp_FundCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FundCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_FundCategories_Insert(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FundCategories_Insert", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_FundCategories_Select_Result> sp_FundCategories_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FundCategories_Select_Result>("sp_FundCategories_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_FundCategories_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FundCategories_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Funds_Bedehkaran_Result> sp_Funds_Bedehkaran()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Funds_Bedehkaran_Result>("sp_Funds_Bedehkaran");
        }
    
        public virtual ObjectResult<sp_Funds_Bestankaran_Result> sp_Funds_Bestankaran()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Funds_Bestankaran_Result>("sp_Funds_Bestankaran");
        }
    
        public virtual int sp_Funds_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Funds_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Funds_Insert(Nullable<int> fundCategoryID, Nullable<int> fundSubCategoryID, Nullable<int> fundTypeID, string customerName, Nullable<short> paymentTypeID, Nullable<int> receptionID, Nullable<int> receptionServiceID, Nullable<byte> rowID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<byte> srcType, Nullable<double> bed, Nullable<double> bes, string dsc, Nullable<System.DateTime> registerDate, Nullable<int> noteID, Nullable<int> userid)
        {
            var fundCategoryIDParameter = fundCategoryID.HasValue ?
                new ObjectParameter("FundCategoryID", fundCategoryID) :
                new ObjectParameter("FundCategoryID", typeof(int));
    
            var fundSubCategoryIDParameter = fundSubCategoryID.HasValue ?
                new ObjectParameter("FundSubCategoryID", fundSubCategoryID) :
                new ObjectParameter("FundSubCategoryID", typeof(int));
    
            var fundTypeIDParameter = fundTypeID.HasValue ?
                new ObjectParameter("FundTypeID", fundTypeID) :
                new ObjectParameter("FundTypeID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var receptionServiceIDParameter = receptionServiceID.HasValue ?
                new ObjectParameter("ReceptionServiceID", receptionServiceID) :
                new ObjectParameter("ReceptionServiceID", typeof(int));
    
            var rowIDParameter = rowID.HasValue ?
                new ObjectParameter("RowID", rowID) :
                new ObjectParameter("RowID", typeof(byte));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var besParameter = bes.HasValue ?
                new ObjectParameter("Bes", bes) :
                new ObjectParameter("Bes", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Funds_Insert", fundCategoryIDParameter, fundSubCategoryIDParameter, fundTypeIDParameter, customerNameParameter, paymentTypeIDParameter, receptionIDParameter, receptionServiceIDParameter, rowIDParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, srcTypeParameter, bedParameter, besParameter, dscParameter, registerDateParameter, noteIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Funds_PaymentTypes_Result> sp_Funds_PaymentTypes(string registerDate_Start, string registerDate_End)
        {
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Funds_PaymentTypes_Result>("sp_Funds_PaymentTypes", registerDate_StartParameter, registerDate_EndParameter);
        }
    
        public virtual int sp_Funds_Select(Nullable<int> iD_Start, Nullable<int> iD_End, Nullable<byte> sexTypeID, string customerName, Nullable<short> paymentTypeID, Nullable<int> receptionID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<int> fundCategoryID, Nullable<int> fundSubCategoryID, Nullable<int> fundTypeID, Nullable<double> bed_Start, Nullable<double> bed_End, Nullable<double> bes_Start, Nullable<double> bes_End, string dsc, string registerDate_Start, string registerDate_End, string registerDate_Time_Start, string registerDate_Time_End, Nullable<byte> srcType, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var fundCategoryIDParameter = fundCategoryID.HasValue ?
                new ObjectParameter("FundCategoryID", fundCategoryID) :
                new ObjectParameter("FundCategoryID", typeof(int));
    
            var fundSubCategoryIDParameter = fundSubCategoryID.HasValue ?
                new ObjectParameter("FundSubCategoryID", fundSubCategoryID) :
                new ObjectParameter("FundSubCategoryID", typeof(int));
    
            var fundTypeIDParameter = fundTypeID.HasValue ?
                new ObjectParameter("FundTypeID", fundTypeID) :
                new ObjectParameter("FundTypeID", typeof(int));
    
            var bed_StartParameter = bed_Start.HasValue ?
                new ObjectParameter("Bed_Start", bed_Start) :
                new ObjectParameter("Bed_Start", typeof(double));
    
            var bed_EndParameter = bed_End.HasValue ?
                new ObjectParameter("Bed_End", bed_End) :
                new ObjectParameter("Bed_End", typeof(double));
    
            var bes_StartParameter = bes_Start.HasValue ?
                new ObjectParameter("Bes_Start", bes_Start) :
                new ObjectParameter("Bes_Start", typeof(double));
    
            var bes_EndParameter = bes_End.HasValue ?
                new ObjectParameter("Bes_End", bes_End) :
                new ObjectParameter("Bes_End", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var registerDate_Time_StartParameter = registerDate_Time_Start != null ?
                new ObjectParameter("RegisterDate_Time_Start", registerDate_Time_Start) :
                new ObjectParameter("RegisterDate_Time_Start", typeof(string));
    
            var registerDate_Time_EndParameter = registerDate_Time_End != null ?
                new ObjectParameter("RegisterDate_Time_End", registerDate_Time_End) :
                new ObjectParameter("RegisterDate_Time_End", typeof(string));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Funds_Select", iD_StartParameter, iD_EndParameter, sexTypeIDParameter, customerNameParameter, paymentTypeIDParameter, receptionIDParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, fundCategoryIDParameter, fundSubCategoryIDParameter, fundTypeIDParameter, bed_StartParameter, bed_EndParameter, bes_StartParameter, bes_EndParameter, dscParameter, registerDate_StartParameter, registerDate_EndParameter, registerDate_Time_StartParameter, registerDate_Time_EndParameter, srcTypeParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Funds_SelectRow_Result> sp_Funds_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Funds_SelectRow_Result>("sp_Funds_SelectRow", iDParameter);
        }
    
        public virtual ObjectResult<sp_Funds_Sum_Bedehkaran_Result> sp_Funds_Sum_Bedehkaran()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Funds_Sum_Bedehkaran_Result>("sp_Funds_Sum_Bedehkaran");
        }
    
        public virtual ObjectResult<sp_Funds_Sum_Bestankaran_Result> sp_Funds_Sum_Bestankaran()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Funds_Sum_Bestankaran_Result>("sp_Funds_Sum_Bestankaran");
        }
    
        public virtual int sp_Funds_Update(Nullable<int> iD, Nullable<int> fundCategoryID, Nullable<int> fundSubCategoryID, Nullable<int> fundTypeID, string customerName, Nullable<short> paymentTypeID, Nullable<int> receptionID, Nullable<int> receptionServiceID, Nullable<byte> rowID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<byte> srcType, Nullable<double> bed, Nullable<double> bes, string dsc, Nullable<System.DateTime> registerDate, Nullable<int> noteID, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var fundCategoryIDParameter = fundCategoryID.HasValue ?
                new ObjectParameter("FundCategoryID", fundCategoryID) :
                new ObjectParameter("FundCategoryID", typeof(int));
    
            var fundSubCategoryIDParameter = fundSubCategoryID.HasValue ?
                new ObjectParameter("FundSubCategoryID", fundSubCategoryID) :
                new ObjectParameter("FundSubCategoryID", typeof(int));
    
            var fundTypeIDParameter = fundTypeID.HasValue ?
                new ObjectParameter("FundTypeID", fundTypeID) :
                new ObjectParameter("FundTypeID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var receptionServiceIDParameter = receptionServiceID.HasValue ?
                new ObjectParameter("ReceptionServiceID", receptionServiceID) :
                new ObjectParameter("ReceptionServiceID", typeof(int));
    
            var rowIDParameter = rowID.HasValue ?
                new ObjectParameter("RowID", rowID) :
                new ObjectParameter("RowID", typeof(byte));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var besParameter = bes.HasValue ?
                new ObjectParameter("Bes", bes) :
                new ObjectParameter("Bes", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Funds_Update", iDParameter, fundCategoryIDParameter, fundSubCategoryIDParameter, fundTypeIDParameter, customerNameParameter, paymentTypeIDParameter, receptionIDParameter, receptionServiceIDParameter, rowIDParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, srcTypeParameter, bedParameter, besParameter, dscParameter, registerDateParameter, noteIDParameter, useridParameter);
        }
    
        public virtual int sp_FundSubCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FundSubCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_FundSubCategories_Insert(Nullable<int> fundCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var fundCategoryIDParameter = fundCategoryID.HasValue ?
                new ObjectParameter("FundCategoryID", fundCategoryID) :
                new ObjectParameter("FundCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FundSubCategories_Insert", fundCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_FundSubCategories_Select_Result> sp_FundSubCategories_Select(Nullable<int> fundCategoryID, string name, Nullable<int> active)
        {
            var fundCategoryIDParameter = fundCategoryID.HasValue ?
                new ObjectParameter("FundCategoryID", fundCategoryID) :
                new ObjectParameter("FundCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FundSubCategories_Select_Result>("sp_FundSubCategories_Select", fundCategoryIDParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_FundSubCategories_Update(Nullable<int> iD, Nullable<int> fundCategoryID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var fundCategoryIDParameter = fundCategoryID.HasValue ?
                new ObjectParameter("FundCategoryID", fundCategoryID) :
                new ObjectParameter("FundCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FundSubCategories_Update", iDParameter, fundCategoryIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_FundTypeCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FundTypeCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_FundTypeCategories_Insert(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FundTypeCategories_Insert", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_FundTypeCategories_Select_Result> sp_FundTypeCategories_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FundTypeCategories_Select_Result>("sp_FundTypeCategories_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_FundTypeCategories_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FundTypeCategories_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_FundTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FundTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_FundTypes_Insert(Nullable<int> fundCategoryID, Nullable<int> fundSubCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var fundCategoryIDParameter = fundCategoryID.HasValue ?
                new ObjectParameter("FundCategoryID", fundCategoryID) :
                new ObjectParameter("FundCategoryID", typeof(int));
    
            var fundSubCategoryIDParameter = fundSubCategoryID.HasValue ?
                new ObjectParameter("FundSubCategoryID", fundSubCategoryID) :
                new ObjectParameter("FundSubCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FundTypes_Insert", fundCategoryIDParameter, fundSubCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_FundTypes_Select_Result> sp_FundTypes_Select(Nullable<int> fundCategoryID, Nullable<int> fundSubCategoryID, Nullable<int> iD, Nullable<int> patientID, Nullable<int> doctorID, Nullable<int> assistantID, string name, Nullable<int> active)
        {
            var fundCategoryIDParameter = fundCategoryID.HasValue ?
                new ObjectParameter("FundCategoryID", fundCategoryID) :
                new ObjectParameter("FundCategoryID", typeof(int));
    
            var fundSubCategoryIDParameter = fundSubCategoryID.HasValue ?
                new ObjectParameter("FundSubCategoryID", fundSubCategoryID) :
                new ObjectParameter("FundSubCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FundTypes_Select_Result>("sp_FundTypes_Select", fundCategoryIDParameter, fundSubCategoryIDParameter, iDParameter, patientIDParameter, doctorIDParameter, assistantIDParameter, nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_FundTypes_SelectRow_Result> sp_FundTypes_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FundTypes_SelectRow_Result>("sp_FundTypes_SelectRow", iDParameter);
        }
    
        public virtual int sp_FundTypes_Update(Nullable<int> fundCategoryID, Nullable<int> fundSubCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var fundCategoryIDParameter = fundCategoryID.HasValue ?
                new ObjectParameter("FundCategoryID", fundCategoryID) :
                new ObjectParameter("FundCategoryID", typeof(int));
    
            var fundSubCategoryIDParameter = fundSubCategoryID.HasValue ?
                new ObjectParameter("FundSubCategoryID", fundSubCategoryID) :
                new ObjectParameter("FundSubCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FundTypes_Update", fundCategoryIDParameter, fundSubCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_GetShiftID_SelectRow_Result> sp_GetShiftID_SelectRow(string enterTime)
        {
            var enterTimeParameter = enterTime != null ?
                new ObjectParameter("EnterTime", enterTime) :
                new ObjectParameter("EnterTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetShiftID_SelectRow_Result>("sp_GetShiftID_SelectRow", enterTimeParameter);
        }
    
        public virtual int sp_GlassesTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GlassesTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_GlassesTypes_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GlassesTypes_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_GlassesTypes_Select_Result> sp_GlassesTypes_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GlassesTypes_Select_Result>("sp_GlassesTypes_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_GlassesTypes_SelectRow_Result> sp_GlassesTypes_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GlassesTypes_SelectRow_Result>("sp_GlassesTypes_SelectRow", iDParameter);
        }
    
        public virtual int sp_GlassesTypes_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GlassesTypes_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Identifications_Select_Result> sp_Identifications_Select(Nullable<int> iD, Nullable<int> customerID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Identifications_Select_Result>("sp_Identifications_Select", iDParameter, customerIDParameter);
        }
    
        public virtual int sp_ImagePostTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ImagePostTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_ImagePostTypes_Insert(Nullable<short> kind, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ImagePostTypes_Insert", kindParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_ImagePostTypes_Select_Result> sp_ImagePostTypes_Select(Nullable<short> kind, string name, Nullable<int> active)
        {
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ImagePostTypes_Select_Result>("sp_ImagePostTypes_Select", kindParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_ImagePostTypes_Update(Nullable<short> kind, Nullable<short> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ImagePostTypes_Update", kindParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_images_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_images_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_images_Insert(string imageTitle, byte[] imageFile, string imageFileExt, string dsc, ObjectParameter imageID, Nullable<int> userid)
        {
            var imageTitleParameter = imageTitle != null ?
                new ObjectParameter("ImageTitle", imageTitle) :
                new ObjectParameter("ImageTitle", typeof(string));
    
            var imageFileParameter = imageFile != null ?
                new ObjectParameter("ImageFile", imageFile) :
                new ObjectParameter("ImageFile", typeof(byte[]));
    
            var imageFileExtParameter = imageFileExt != null ?
                new ObjectParameter("ImageFileExt", imageFileExt) :
                new ObjectParameter("ImageFileExt", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_images_Insert", imageTitleParameter, imageFileParameter, imageFileExtParameter, dscParameter, imageID, useridParameter);
        }
    
        public virtual ObjectResult<sp_images_SelectRow_Result> sp_images_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_images_SelectRow_Result>("sp_images_SelectRow", iDParameter);
        }
    
        public virtual int sp_images_Update(Nullable<int> iD, string imageTitle, string imageFileExt, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var imageTitleParameter = imageTitle != null ?
                new ObjectParameter("ImageTitle", imageTitle) :
                new ObjectParameter("ImageTitle", typeof(string));
    
            var imageFileExtParameter = imageFileExt != null ?
                new ObjectParameter("ImageFileExt", imageFileExt) :
                new ObjectParameter("ImageFileExt", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_images_Update", iDParameter, imageTitleParameter, imageFileExtParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_InOutTypes_SelectRow_Result> sp_InOutTypes_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InOutTypes_SelectRow_Result>("sp_InOutTypes_SelectRow", iDParameter);
        }
    
        public virtual int sp_Insurances_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insurances_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Insurances_Insert(Nullable<short> iD, string name, Nullable<bool> familyMax, Nullable<bool> personalMax, Nullable<double> familyMaxPrice, Nullable<double> personalMaxPrice, string serial, string cDName, Nullable<double> insurancePercent, Nullable<double> patientPercent, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var familyMaxParameter = familyMax.HasValue ?
                new ObjectParameter("FamilyMax", familyMax) :
                new ObjectParameter("FamilyMax", typeof(bool));
    
            var personalMaxParameter = personalMax.HasValue ?
                new ObjectParameter("PersonalMax", personalMax) :
                new ObjectParameter("PersonalMax", typeof(bool));
    
            var familyMaxPriceParameter = familyMaxPrice.HasValue ?
                new ObjectParameter("FamilyMaxPrice", familyMaxPrice) :
                new ObjectParameter("FamilyMaxPrice", typeof(double));
    
            var personalMaxPriceParameter = personalMaxPrice.HasValue ?
                new ObjectParameter("PersonalMaxPrice", personalMaxPrice) :
                new ObjectParameter("PersonalMaxPrice", typeof(double));
    
            var serialParameter = serial != null ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(string));
    
            var cDNameParameter = cDName != null ?
                new ObjectParameter("CDName", cDName) :
                new ObjectParameter("CDName", typeof(string));
    
            var insurancePercentParameter = insurancePercent.HasValue ?
                new ObjectParameter("InsurancePercent", insurancePercent) :
                new ObjectParameter("InsurancePercent", typeof(double));
    
            var patientPercentParameter = patientPercent.HasValue ?
                new ObjectParameter("PatientPercent", patientPercent) :
                new ObjectParameter("PatientPercent", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insurances_Insert", iDParameter, nameParameter, familyMaxParameter, personalMaxParameter, familyMaxPriceParameter, personalMaxPriceParameter, serialParameter, cDNameParameter, insurancePercentParameter, patientPercentParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Insurances_Select_Result> sp_Insurances_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Insurances_Select_Result>("sp_Insurances_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_Insurances_SelectRow_Result> sp_Insurances_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Insurances_SelectRow_Result>("sp_Insurances_SelectRow", iDParameter);
        }
    
        public virtual int sp_Insurances_Update(Nullable<short> iD, string name, Nullable<bool> familyMax, Nullable<bool> personalMax, Nullable<double> familyMaxPrice, Nullable<double> personalMaxPrice, string serial, string cDName, Nullable<double> insurancePercent, Nullable<double> patientPercent, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var familyMaxParameter = familyMax.HasValue ?
                new ObjectParameter("FamilyMax", familyMax) :
                new ObjectParameter("FamilyMax", typeof(bool));
    
            var personalMaxParameter = personalMax.HasValue ?
                new ObjectParameter("PersonalMax", personalMax) :
                new ObjectParameter("PersonalMax", typeof(bool));
    
            var familyMaxPriceParameter = familyMaxPrice.HasValue ?
                new ObjectParameter("FamilyMaxPrice", familyMaxPrice) :
                new ObjectParameter("FamilyMaxPrice", typeof(double));
    
            var personalMaxPriceParameter = personalMaxPrice.HasValue ?
                new ObjectParameter("PersonalMaxPrice", personalMaxPrice) :
                new ObjectParameter("PersonalMaxPrice", typeof(double));
    
            var serialParameter = serial != null ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(string));
    
            var cDNameParameter = cDName != null ?
                new ObjectParameter("CDName", cDName) :
                new ObjectParameter("CDName", typeof(string));
    
            var insurancePercentParameter = insurancePercent.HasValue ?
                new ObjectParameter("InsurancePercent", insurancePercent) :
                new ObjectParameter("InsurancePercent", typeof(double));
    
            var patientPercentParameter = patientPercent.HasValue ?
                new ObjectParameter("PatientPercent", patientPercent) :
                new ObjectParameter("PatientPercent", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insurances_Update", iDParameter, nameParameter, familyMaxParameter, personalMaxParameter, familyMaxPriceParameter, personalMaxPriceParameter, serialParameter, cDNameParameter, insurancePercentParameter, patientPercentParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Inv_Select(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid, Nullable<int> topRange)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Inv_Select", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter, topRangeParameter);
        }
    
        public virtual int sp_inv_updateshifts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_inv_updateshifts");
        }
    
        public virtual int sp_Inventories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Inventories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Inventories_Insert(Nullable<short> iD, Nullable<short> inventoryTypeID, Nullable<short> storekeeperID, string name, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Inventories_Insert", iDParameter, inventoryTypeIDParameter, storekeeperIDParameter, nameParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Inventories_Select_Result> sp_Inventories_Select(Nullable<short> inventoryTypeID, string name)
        {
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Inventories_Select_Result>("sp_Inventories_Select", inventoryTypeIDParameter, nameParameter);
        }
    
        public virtual ObjectResult<sp_Inventories_SelectRow_Result> sp_Inventories_SelectRow(Nullable<short> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Inventories_SelectRow_Result>("sp_Inventories_SelectRow", iDParameter);
        }
    
        public virtual int sp_Inventories_Update(Nullable<short> iD, Nullable<short> inventoryTypeID, Nullable<short> storekeeperID, string name, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Inventories_Update", iDParameter, inventoryTypeIDParameter, storekeeperIDParameter, nameParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_InventoryDetails_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InventoryDetails_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_InventoryDetails_Insert(Nullable<int> headerID, Nullable<int> serial, Nullable<short> dayID, Nullable<short> driverID, Nullable<short> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryID, Nullable<short> inventoryTypeID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<int> receptionID, Nullable<int> patientID, string barnameh, Nullable<System.DateTime> registerDate, Nullable<byte> rowID, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<byte> countingUnitID, Nullable<bool> kardex, Nullable<double> numberIn, Nullable<double> numberOut, Nullable<double> price, Nullable<double> total, Nullable<double> takh, Nullable<double> tax, Nullable<double> dutiy, Nullable<double> servicePrice, Nullable<System.DateTime> expDate, string dsc, Nullable<int> shiftID, Nullable<int> userid)
        {
            var headerIDParameter = headerID.HasValue ?
                new ObjectParameter("HeaderID", headerID) :
                new ObjectParameter("HeaderID", typeof(int));
    
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var dayIDParameter = dayID.HasValue ?
                new ObjectParameter("DayID", dayID) :
                new ObjectParameter("DayID", typeof(short));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(short));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(short));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var rowIDParameter = rowID.HasValue ?
                new ObjectParameter("RowID", rowID) :
                new ObjectParameter("RowID", typeof(byte));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var kardexParameter = kardex.HasValue ?
                new ObjectParameter("Kardex", kardex) :
                new ObjectParameter("Kardex", typeof(bool));
    
            var numberInParameter = numberIn.HasValue ?
                new ObjectParameter("NumberIn", numberIn) :
                new ObjectParameter("NumberIn", typeof(double));
    
            var numberOutParameter = numberOut.HasValue ?
                new ObjectParameter("NumberOut", numberOut) :
                new ObjectParameter("NumberOut", typeof(double));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(double));
    
            var dutiyParameter = dutiy.HasValue ?
                new ObjectParameter("Dutiy", dutiy) :
                new ObjectParameter("Dutiy", typeof(double));
    
            var servicePriceParameter = servicePrice.HasValue ?
                new ObjectParameter("ServicePrice", servicePrice) :
                new ObjectParameter("ServicePrice", typeof(double));
    
            var expDateParameter = expDate.HasValue ?
                new ObjectParameter("ExpDate", expDate) :
                new ObjectParameter("ExpDate", typeof(System.DateTime));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InventoryDetails_Insert", headerIDParameter, serialParameter, dayIDParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryIDParameter, inventoryTypeIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, receptionIDParameter, patientIDParameter, barnamehParameter, registerDateParameter, rowIDParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, countingUnitIDParameter, kardexParameter, numberInParameter, numberOutParameter, priceParameter, totalParameter, takhParameter, taxParameter, dutiyParameter, servicePriceParameter, expDateParameter, dscParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual int sp_InventoryDetails_RemoveNullHeaders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InventoryDetails_RemoveNullHeaders");
        }
    
        public virtual ObjectResult<sp_InventoryDetails_SelectRow_Result> sp_InventoryDetails_SelectRow(Nullable<int> headerID)
        {
            var headerIDParameter = headerID.HasValue ?
                new ObjectParameter("HeaderID", headerID) :
                new ObjectParameter("HeaderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InventoryDetails_SelectRow_Result>("sp_InventoryDetails_SelectRow", headerIDParameter);
        }
    
        public virtual int sp_InventoryDetails_Update(Nullable<int> headerID, Nullable<int> serial, Nullable<short> dayID, Nullable<short> driverID, Nullable<short> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryID, Nullable<short> inventoryTypeID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<int> receptionID, Nullable<int> patientID, string barnameh, Nullable<System.DateTime> registerDate, Nullable<byte> rowID, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<byte> countingUnitID, Nullable<bool> kardex, Nullable<double> numberIn, Nullable<double> numberOut, Nullable<double> price, Nullable<double> total, Nullable<double> takh, Nullable<double> tax, Nullable<double> dutiy, Nullable<double> servicePrice, Nullable<System.DateTime> expDate, string dsc, Nullable<int> shiftID, Nullable<int> userid)
        {
            var headerIDParameter = headerID.HasValue ?
                new ObjectParameter("HeaderID", headerID) :
                new ObjectParameter("HeaderID", typeof(int));
    
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var dayIDParameter = dayID.HasValue ?
                new ObjectParameter("DayID", dayID) :
                new ObjectParameter("DayID", typeof(short));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(short));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(short));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var rowIDParameter = rowID.HasValue ?
                new ObjectParameter("RowID", rowID) :
                new ObjectParameter("RowID", typeof(byte));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var kardexParameter = kardex.HasValue ?
                new ObjectParameter("Kardex", kardex) :
                new ObjectParameter("Kardex", typeof(bool));
    
            var numberInParameter = numberIn.HasValue ?
                new ObjectParameter("NumberIn", numberIn) :
                new ObjectParameter("NumberIn", typeof(double));
    
            var numberOutParameter = numberOut.HasValue ?
                new ObjectParameter("NumberOut", numberOut) :
                new ObjectParameter("NumberOut", typeof(double));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(double));
    
            var dutiyParameter = dutiy.HasValue ?
                new ObjectParameter("Dutiy", dutiy) :
                new ObjectParameter("Dutiy", typeof(double));
    
            var servicePriceParameter = servicePrice.HasValue ?
                new ObjectParameter("ServicePrice", servicePrice) :
                new ObjectParameter("ServicePrice", typeof(double));
    
            var expDateParameter = expDate.HasValue ?
                new ObjectParameter("ExpDate", expDate) :
                new ObjectParameter("ExpDate", typeof(System.DateTime));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InventoryDetails_Update", headerIDParameter, serialParameter, dayIDParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryIDParameter, inventoryTypeIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, receptionIDParameter, patientIDParameter, barnamehParameter, registerDateParameter, rowIDParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, countingUnitIDParameter, kardexParameter, numberInParameter, numberOutParameter, priceParameter, totalParameter, takhParameter, taxParameter, dutiyParameter, servicePriceParameter, expDateParameter, dscParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual int sp_InventoryHeaders_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InventoryHeaders_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_InventoryHeaders_DeleteAll(Nullable<short> driverID, Nullable<short> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<short> deskID, Nullable<int> serial_Start, Nullable<int> serial_End, string barnameh, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<int> senderID, Nullable<int> customerID, string customerName, Nullable<short> storekeeperID, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<double> sumPrices_Start, Nullable<double> sumPrices_End, Nullable<double> mandeh_Start, Nullable<double> mandeh_End, string dsc, Nullable<int> shiftID, Nullable<int> userid, Nullable<int> topRange, Nullable<int> delUserid)
        {
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(short));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(short));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var serial_StartParameter = serial_Start.HasValue ?
                new ObjectParameter("Serial_Start", serial_Start) :
                new ObjectParameter("Serial_Start", typeof(int));
    
            var serial_EndParameter = serial_End.HasValue ?
                new ObjectParameter("Serial_End", serial_End) :
                new ObjectParameter("Serial_End", typeof(int));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var sumPrices_StartParameter = sumPrices_Start.HasValue ?
                new ObjectParameter("SumPrices_Start", sumPrices_Start) :
                new ObjectParameter("SumPrices_Start", typeof(double));
    
            var sumPrices_EndParameter = sumPrices_End.HasValue ?
                new ObjectParameter("SumPrices_End", sumPrices_End) :
                new ObjectParameter("SumPrices_End", typeof(double));
    
            var mandeh_StartParameter = mandeh_Start.HasValue ?
                new ObjectParameter("Mandeh_Start", mandeh_Start) :
                new ObjectParameter("Mandeh_Start", typeof(double));
    
            var mandeh_EndParameter = mandeh_End.HasValue ?
                new ObjectParameter("Mandeh_End", mandeh_End) :
                new ObjectParameter("Mandeh_End", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            var delUseridParameter = delUserid.HasValue ?
                new ObjectParameter("DelUserid", delUserid) :
                new ObjectParameter("DelUserid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InventoryHeaders_DeleteAll", driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, deskIDParameter, serial_StartParameter, serial_EndParameter, barnamehParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, storekeeperIDParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, sumPrices_StartParameter, sumPrices_EndParameter, mandeh_StartParameter, mandeh_EndParameter, dscParameter, shiftIDParameter, useridParameter, topRangeParameter, delUseridParameter);
        }
    
        public virtual int sp_InventoryHeaders_Insert(Nullable<int> iD, Nullable<short> dayID, Nullable<short> driverID, Nullable<short> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<short> deskID, Nullable<int> serial, string barnameh, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<int> receptionID, Nullable<int> patientID, Nullable<short> storekeeperID, Nullable<System.DateTime> registerDate, Nullable<double> sumNumberIn, Nullable<double> sumNumberOut, Nullable<double> sumPrices, Nullable<double> takh, Nullable<double> tax, Nullable<double> dutiy, Nullable<double> servicePrice, Nullable<double> bed, Nullable<double> bes, Nullable<double> mandeh, string dsc, Nullable<int> shiftID, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dayIDParameter = dayID.HasValue ?
                new ObjectParameter("DayID", dayID) :
                new ObjectParameter("DayID", typeof(short));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(short));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(short));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var sumNumberInParameter = sumNumberIn.HasValue ?
                new ObjectParameter("SumNumberIn", sumNumberIn) :
                new ObjectParameter("SumNumberIn", typeof(double));
    
            var sumNumberOutParameter = sumNumberOut.HasValue ?
                new ObjectParameter("SumNumberOut", sumNumberOut) :
                new ObjectParameter("SumNumberOut", typeof(double));
    
            var sumPricesParameter = sumPrices.HasValue ?
                new ObjectParameter("SumPrices", sumPrices) :
                new ObjectParameter("SumPrices", typeof(double));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(double));
    
            var dutiyParameter = dutiy.HasValue ?
                new ObjectParameter("Dutiy", dutiy) :
                new ObjectParameter("Dutiy", typeof(double));
    
            var servicePriceParameter = servicePrice.HasValue ?
                new ObjectParameter("ServicePrice", servicePrice) :
                new ObjectParameter("ServicePrice", typeof(double));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var besParameter = bes.HasValue ?
                new ObjectParameter("Bes", bes) :
                new ObjectParameter("Bes", typeof(double));
    
            var mandehParameter = mandeh.HasValue ?
                new ObjectParameter("Mandeh", mandeh) :
                new ObjectParameter("Mandeh", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InventoryHeaders_Insert", iDParameter, dayIDParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, deskIDParameter, serialParameter, barnamehParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, receptionIDParameter, patientIDParameter, storekeeperIDParameter, registerDateParameter, sumNumberInParameter, sumNumberOutParameter, sumPricesParameter, takhParameter, taxParameter, dutiyParameter, servicePriceParameter, bedParameter, besParameter, mandehParameter, dscParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_InventoryHeaders_Select_Result> sp_InventoryHeaders_Select(Nullable<short> driverID, Nullable<short> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<short> deskID, Nullable<int> serial_Start, Nullable<int> serial_End, string barnameh, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<int> senderID, Nullable<int> customerID, string customerName, Nullable<short> storekeeperID, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<double> sumPrices_Start, Nullable<double> sumPrices_End, Nullable<double> mandeh_Start, Nullable<double> mandeh_End, string dsc, Nullable<int> shiftID, Nullable<int> userid, Nullable<int> topRange)
        {
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(short));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(short));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var serial_StartParameter = serial_Start.HasValue ?
                new ObjectParameter("Serial_Start", serial_Start) :
                new ObjectParameter("Serial_Start", typeof(int));
    
            var serial_EndParameter = serial_End.HasValue ?
                new ObjectParameter("Serial_End", serial_End) :
                new ObjectParameter("Serial_End", typeof(int));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var sumPrices_StartParameter = sumPrices_Start.HasValue ?
                new ObjectParameter("SumPrices_Start", sumPrices_Start) :
                new ObjectParameter("SumPrices_Start", typeof(double));
    
            var sumPrices_EndParameter = sumPrices_End.HasValue ?
                new ObjectParameter("SumPrices_End", sumPrices_End) :
                new ObjectParameter("SumPrices_End", typeof(double));
    
            var mandeh_StartParameter = mandeh_Start.HasValue ?
                new ObjectParameter("Mandeh_Start", mandeh_Start) :
                new ObjectParameter("Mandeh_Start", typeof(double));
    
            var mandeh_EndParameter = mandeh_End.HasValue ?
                new ObjectParameter("Mandeh_End", mandeh_End) :
                new ObjectParameter("Mandeh_End", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InventoryHeaders_Select_Result>("sp_InventoryHeaders_Select", driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, deskIDParameter, serial_StartParameter, serial_EndParameter, barnamehParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, storekeeperIDParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, sumPrices_StartParameter, sumPrices_EndParameter, mandeh_StartParameter, mandeh_EndParameter, dscParameter, shiftIDParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_InventoryHeaders_SelectRow_Result> sp_InventoryHeaders_SelectRow(Nullable<int> iD, Nullable<int> serial, Nullable<short> dayID, Nullable<byte> inOutTypeID, Nullable<int> receptionID, Nullable<int> patientID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var dayIDParameter = dayID.HasValue ?
                new ObjectParameter("DayID", dayID) :
                new ObjectParameter("DayID", typeof(short));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InventoryHeaders_SelectRow_Result>("sp_InventoryHeaders_SelectRow", iDParameter, serialParameter, dayIDParameter, inOutTypeIDParameter, receptionIDParameter, patientIDParameter);
        }
    
        public virtual int sp_InventoryHeaders_Update(Nullable<int> iD, Nullable<short> dayID, Nullable<short> driverID, Nullable<short> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<short> deskID, Nullable<int> serial, string barnameh, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<int> receptionID, Nullable<int> patientID, Nullable<short> storekeeperID, Nullable<System.DateTime> registerDate, Nullable<double> sumNumberIn, Nullable<double> sumNumberOut, Nullable<double> sumPrices, Nullable<double> takh, Nullable<double> tax, Nullable<double> dutiy, Nullable<double> servicePrice, Nullable<double> bed, Nullable<double> bes, Nullable<double> mandeh, string dsc, Nullable<int> shiftID, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dayIDParameter = dayID.HasValue ?
                new ObjectParameter("DayID", dayID) :
                new ObjectParameter("DayID", typeof(short));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(short));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(short));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var sumNumberInParameter = sumNumberIn.HasValue ?
                new ObjectParameter("SumNumberIn", sumNumberIn) :
                new ObjectParameter("SumNumberIn", typeof(double));
    
            var sumNumberOutParameter = sumNumberOut.HasValue ?
                new ObjectParameter("SumNumberOut", sumNumberOut) :
                new ObjectParameter("SumNumberOut", typeof(double));
    
            var sumPricesParameter = sumPrices.HasValue ?
                new ObjectParameter("SumPrices", sumPrices) :
                new ObjectParameter("SumPrices", typeof(double));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(double));
    
            var dutiyParameter = dutiy.HasValue ?
                new ObjectParameter("Dutiy", dutiy) :
                new ObjectParameter("Dutiy", typeof(double));
    
            var servicePriceParameter = servicePrice.HasValue ?
                new ObjectParameter("ServicePrice", servicePrice) :
                new ObjectParameter("ServicePrice", typeof(double));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var besParameter = bes.HasValue ?
                new ObjectParameter("Bes", bes) :
                new ObjectParameter("Bes", typeof(double));
    
            var mandehParameter = mandeh.HasValue ?
                new ObjectParameter("Mandeh", mandeh) :
                new ObjectParameter("Mandeh", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InventoryHeaders_Update", iDParameter, dayIDParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, deskIDParameter, serialParameter, barnamehParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, receptionIDParameter, patientIDParameter, storekeeperIDParameter, registerDateParameter, sumNumberInParameter, sumNumberOutParameter, sumPricesParameter, takhParameter, taxParameter, dutiyParameter, servicePriceParameter, bedParameter, besParameter, mandehParameter, dscParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual int sp_InventoryTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InventoryTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_InventoryTypes_Insert(string name, string dsc, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InventoryTypes_Insert", nameParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_InventoryTypes_Select_Result> sp_InventoryTypes_Select(Nullable<short> inventoryTypeID, string name)
        {
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InventoryTypes_Select_Result>("sp_InventoryTypes_Select", inventoryTypeIDParameter, nameParameter);
        }
    
        public virtual int sp_InventoryTypes_Update(Nullable<short> iD, string name, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InventoryTypes_Update", iDParameter, nameParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_ItemCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ItemCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_ItemCategories_Insert(string name, string dsc, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ItemCategories_Insert", nameParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_ItemCategories_Select_Result> sp_ItemCategories_Select(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ItemCategories_Select_Result>("sp_ItemCategories_Select", nameParameter);
        }
    
        public virtual int sp_ItemCategories_Update(Nullable<int> iD, string name, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ItemCategories_Update", iDParameter, nameParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_ItemClasses_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ItemClasses_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_ItemClasses_Insert(Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> iD, string name, string dsc, byte[] iCon, string iConTitle1, string iConTitle2, string iConTitle3, string iConFontName, Nullable<long> iConFontColor, Nullable<int> iConFontSize, Nullable<bool> iConFontStyle, Nullable<bool> active, Nullable<int> userid)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var iConParameter = iCon != null ?
                new ObjectParameter("ICon", iCon) :
                new ObjectParameter("ICon", typeof(byte[]));
    
            var iConTitle1Parameter = iConTitle1 != null ?
                new ObjectParameter("IConTitle1", iConTitle1) :
                new ObjectParameter("IConTitle1", typeof(string));
    
            var iConTitle2Parameter = iConTitle2 != null ?
                new ObjectParameter("IConTitle2", iConTitle2) :
                new ObjectParameter("IConTitle2", typeof(string));
    
            var iConTitle3Parameter = iConTitle3 != null ?
                new ObjectParameter("IConTitle3", iConTitle3) :
                new ObjectParameter("IConTitle3", typeof(string));
    
            var iConFontNameParameter = iConFontName != null ?
                new ObjectParameter("IConFontName", iConFontName) :
                new ObjectParameter("IConFontName", typeof(string));
    
            var iConFontColorParameter = iConFontColor.HasValue ?
                new ObjectParameter("IConFontColor", iConFontColor) :
                new ObjectParameter("IConFontColor", typeof(long));
    
            var iConFontSizeParameter = iConFontSize.HasValue ?
                new ObjectParameter("IConFontSize", iConFontSize) :
                new ObjectParameter("IConFontSize", typeof(int));
    
            var iConFontStyleParameter = iConFontStyle.HasValue ?
                new ObjectParameter("IConFontStyle", iConFontStyle) :
                new ObjectParameter("IConFontStyle", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ItemClasses_Insert", itemCategoryIDParameter, itemSubCategoryIDParameter, iDParameter, nameParameter, dscParameter, iConParameter, iConTitle1Parameter, iConTitle2Parameter, iConTitle3Parameter, iConFontNameParameter, iConFontColorParameter, iConFontSizeParameter, iConFontStyleParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_ItemClasses_Select_Result> sp_ItemClasses_Select(Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, string name, Nullable<int> active)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ItemClasses_Select_Result>("sp_ItemClasses_Select", itemCategoryIDParameter, itemSubCategoryIDParameter, nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_ItemClasses_SelectRow_Result> sp_ItemClasses_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ItemClasses_SelectRow_Result>("sp_ItemClasses_SelectRow", iDParameter);
        }
    
        public virtual int sp_ItemClasses_Update(Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> iD, string name, string dsc, byte[] iCon, string iConTitle1, string iConTitle2, string iConTitle3, string iConFontName, Nullable<long> iConFontColor, Nullable<int> iConFontSize, Nullable<bool> iConFontStyle, Nullable<bool> active, Nullable<int> userid)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var iConParameter = iCon != null ?
                new ObjectParameter("ICon", iCon) :
                new ObjectParameter("ICon", typeof(byte[]));
    
            var iConTitle1Parameter = iConTitle1 != null ?
                new ObjectParameter("IConTitle1", iConTitle1) :
                new ObjectParameter("IConTitle1", typeof(string));
    
            var iConTitle2Parameter = iConTitle2 != null ?
                new ObjectParameter("IConTitle2", iConTitle2) :
                new ObjectParameter("IConTitle2", typeof(string));
    
            var iConTitle3Parameter = iConTitle3 != null ?
                new ObjectParameter("IConTitle3", iConTitle3) :
                new ObjectParameter("IConTitle3", typeof(string));
    
            var iConFontNameParameter = iConFontName != null ?
                new ObjectParameter("IConFontName", iConFontName) :
                new ObjectParameter("IConFontName", typeof(string));
    
            var iConFontColorParameter = iConFontColor.HasValue ?
                new ObjectParameter("IConFontColor", iConFontColor) :
                new ObjectParameter("IConFontColor", typeof(long));
    
            var iConFontSizeParameter = iConFontSize.HasValue ?
                new ObjectParameter("IConFontSize", iConFontSize) :
                new ObjectParameter("IConFontSize", typeof(int));
    
            var iConFontStyleParameter = iConFontStyle.HasValue ?
                new ObjectParameter("IConFontStyle", iConFontStyle) :
                new ObjectParameter("IConFontStyle", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ItemClasses_Update", itemCategoryIDParameter, itemSubCategoryIDParameter, iDParameter, nameParameter, dscParameter, iConParameter, iConTitle1Parameter, iConTitle2Parameter, iConTitle3Parameter, iConFontNameParameter, iConFontColorParameter, iConFontSizeParameter, iConFontStyleParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Items_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Items_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Items_Insert(Nullable<int> iD, string name, string itemDsc, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<short> countingUnitID, Nullable<short> secondaryCountingUnitID, Nullable<short> countingUnitEq, Nullable<double> buyPrice, Nullable<double> price, Nullable<double> tax, Nullable<double> dutiy, Nullable<double> takh, Nullable<double> firstPrice, Nullable<double> lastPrice, Nullable<double> avgPrice, Nullable<double> minPrice, Nullable<double> maxPrice, string barCode, Nullable<System.DateTime> proDate, Nullable<System.DateTime> expDate, Nullable<short> minTemperature, Nullable<short> maxTemperature, Nullable<double> minInv, Nullable<double> maxInv, Nullable<double> inv, Nullable<byte> viewStateID, Nullable<bool> active, Nullable<bool> notTax, Nullable<bool> notDutiy, Nullable<int> imageID1, Nullable<int> imageID2, Nullable<int> imageID3, Nullable<int> imageID4, Nullable<int> imageID5, Nullable<int> imageID6, Nullable<int> imageID7, byte[] iCon, string iConTitle1, string iConTitle2, string iConTitle3, string iConFontName, Nullable<long> iConFontColor, Nullable<int> iConFontSize, Nullable<bool> iConFontStyle, string shortcut, string dsc, Nullable<int> rolID, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var itemDscParameter = itemDsc != null ?
                new ObjectParameter("ItemDsc", itemDsc) :
                new ObjectParameter("ItemDsc", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(short));
    
            var secondaryCountingUnitIDParameter = secondaryCountingUnitID.HasValue ?
                new ObjectParameter("SecondaryCountingUnitID", secondaryCountingUnitID) :
                new ObjectParameter("SecondaryCountingUnitID", typeof(short));
    
            var countingUnitEqParameter = countingUnitEq.HasValue ?
                new ObjectParameter("CountingUnitEq", countingUnitEq) :
                new ObjectParameter("CountingUnitEq", typeof(short));
    
            var buyPriceParameter = buyPrice.HasValue ?
                new ObjectParameter("BuyPrice", buyPrice) :
                new ObjectParameter("BuyPrice", typeof(double));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(double));
    
            var dutiyParameter = dutiy.HasValue ?
                new ObjectParameter("Dutiy", dutiy) :
                new ObjectParameter("Dutiy", typeof(double));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var firstPriceParameter = firstPrice.HasValue ?
                new ObjectParameter("FirstPrice", firstPrice) :
                new ObjectParameter("FirstPrice", typeof(double));
    
            var lastPriceParameter = lastPrice.HasValue ?
                new ObjectParameter("LastPrice", lastPrice) :
                new ObjectParameter("LastPrice", typeof(double));
    
            var avgPriceParameter = avgPrice.HasValue ?
                new ObjectParameter("AvgPrice", avgPrice) :
                new ObjectParameter("AvgPrice", typeof(double));
    
            var minPriceParameter = minPrice.HasValue ?
                new ObjectParameter("MinPrice", minPrice) :
                new ObjectParameter("MinPrice", typeof(double));
    
            var maxPriceParameter = maxPrice.HasValue ?
                new ObjectParameter("MaxPrice", maxPrice) :
                new ObjectParameter("MaxPrice", typeof(double));
    
            var barCodeParameter = barCode != null ?
                new ObjectParameter("BarCode", barCode) :
                new ObjectParameter("BarCode", typeof(string));
    
            var proDateParameter = proDate.HasValue ?
                new ObjectParameter("ProDate", proDate) :
                new ObjectParameter("ProDate", typeof(System.DateTime));
    
            var expDateParameter = expDate.HasValue ?
                new ObjectParameter("ExpDate", expDate) :
                new ObjectParameter("ExpDate", typeof(System.DateTime));
    
            var minTemperatureParameter = minTemperature.HasValue ?
                new ObjectParameter("MinTemperature", minTemperature) :
                new ObjectParameter("MinTemperature", typeof(short));
    
            var maxTemperatureParameter = maxTemperature.HasValue ?
                new ObjectParameter("MaxTemperature", maxTemperature) :
                new ObjectParameter("MaxTemperature", typeof(short));
    
            var minInvParameter = minInv.HasValue ?
                new ObjectParameter("MinInv", minInv) :
                new ObjectParameter("MinInv", typeof(double));
    
            var maxInvParameter = maxInv.HasValue ?
                new ObjectParameter("MaxInv", maxInv) :
                new ObjectParameter("MaxInv", typeof(double));
    
            var invParameter = inv.HasValue ?
                new ObjectParameter("Inv", inv) :
                new ObjectParameter("Inv", typeof(double));
    
            var viewStateIDParameter = viewStateID.HasValue ?
                new ObjectParameter("ViewStateID", viewStateID) :
                new ObjectParameter("ViewStateID", typeof(byte));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var notTaxParameter = notTax.HasValue ?
                new ObjectParameter("NotTax", notTax) :
                new ObjectParameter("NotTax", typeof(bool));
    
            var notDutiyParameter = notDutiy.HasValue ?
                new ObjectParameter("NotDutiy", notDutiy) :
                new ObjectParameter("NotDutiy", typeof(bool));
    
            var imageID1Parameter = imageID1.HasValue ?
                new ObjectParameter("ImageID1", imageID1) :
                new ObjectParameter("ImageID1", typeof(int));
    
            var imageID2Parameter = imageID2.HasValue ?
                new ObjectParameter("ImageID2", imageID2) :
                new ObjectParameter("ImageID2", typeof(int));
    
            var imageID3Parameter = imageID3.HasValue ?
                new ObjectParameter("ImageID3", imageID3) :
                new ObjectParameter("ImageID3", typeof(int));
    
            var imageID4Parameter = imageID4.HasValue ?
                new ObjectParameter("ImageID4", imageID4) :
                new ObjectParameter("ImageID4", typeof(int));
    
            var imageID5Parameter = imageID5.HasValue ?
                new ObjectParameter("ImageID5", imageID5) :
                new ObjectParameter("ImageID5", typeof(int));
    
            var imageID6Parameter = imageID6.HasValue ?
                new ObjectParameter("ImageID6", imageID6) :
                new ObjectParameter("ImageID6", typeof(int));
    
            var imageID7Parameter = imageID7.HasValue ?
                new ObjectParameter("ImageID7", imageID7) :
                new ObjectParameter("ImageID7", typeof(int));
    
            var iConParameter = iCon != null ?
                new ObjectParameter("ICon", iCon) :
                new ObjectParameter("ICon", typeof(byte[]));
    
            var iConTitle1Parameter = iConTitle1 != null ?
                new ObjectParameter("IConTitle1", iConTitle1) :
                new ObjectParameter("IConTitle1", typeof(string));
    
            var iConTitle2Parameter = iConTitle2 != null ?
                new ObjectParameter("IConTitle2", iConTitle2) :
                new ObjectParameter("IConTitle2", typeof(string));
    
            var iConTitle3Parameter = iConTitle3 != null ?
                new ObjectParameter("IConTitle3", iConTitle3) :
                new ObjectParameter("IConTitle3", typeof(string));
    
            var iConFontNameParameter = iConFontName != null ?
                new ObjectParameter("IConFontName", iConFontName) :
                new ObjectParameter("IConFontName", typeof(string));
    
            var iConFontColorParameter = iConFontColor.HasValue ?
                new ObjectParameter("IConFontColor", iConFontColor) :
                new ObjectParameter("IConFontColor", typeof(long));
    
            var iConFontSizeParameter = iConFontSize.HasValue ?
                new ObjectParameter("IConFontSize", iConFontSize) :
                new ObjectParameter("IConFontSize", typeof(int));
    
            var iConFontStyleParameter = iConFontStyle.HasValue ?
                new ObjectParameter("IConFontStyle", iConFontStyle) :
                new ObjectParameter("IConFontStyle", typeof(bool));
    
            var shortcutParameter = shortcut != null ?
                new ObjectParameter("Shortcut", shortcut) :
                new ObjectParameter("Shortcut", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var rolIDParameter = rolID.HasValue ?
                new ObjectParameter("RolID", rolID) :
                new ObjectParameter("RolID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Items_Insert", iDParameter, nameParameter, itemDscParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, countingUnitIDParameter, secondaryCountingUnitIDParameter, countingUnitEqParameter, buyPriceParameter, priceParameter, taxParameter, dutiyParameter, takhParameter, firstPriceParameter, lastPriceParameter, avgPriceParameter, minPriceParameter, maxPriceParameter, barCodeParameter, proDateParameter, expDateParameter, minTemperatureParameter, maxTemperatureParameter, minInvParameter, maxInvParameter, invParameter, viewStateIDParameter, activeParameter, notTaxParameter, notDutiyParameter, imageID1Parameter, imageID2Parameter, imageID3Parameter, imageID4Parameter, imageID5Parameter, imageID6Parameter, imageID7Parameter, iConParameter, iConTitle1Parameter, iConTitle2Parameter, iConTitle3Parameter, iConFontNameParameter, iConFontColorParameter, iConFontSizeParameter, iConFontStyleParameter, shortcutParameter, dscParameter, rolIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Items_Select_Result> sp_Items_Select(Nullable<int> iD_start, Nullable<int> iD_end, string name, string itemDsc, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<double> price_Start, Nullable<double> price_End, string proDate_start, string proDate_end, string expDate_start, string expDate_end, Nullable<short> minTemperature_start, Nullable<short> minTemperature_end, Nullable<short> maxTemperature_start, Nullable<short> maxTemperature_end, Nullable<double> minInv_start, Nullable<double> maxInv_end, Nullable<double> inv_start, Nullable<double> inv_end, Nullable<byte> viewStateID, Nullable<int> active, Nullable<bool> minimumInv, string dsc, Nullable<int> rolID, Nullable<int> userid)
        {
            var iD_startParameter = iD_start.HasValue ?
                new ObjectParameter("ID_start", iD_start) :
                new ObjectParameter("ID_start", typeof(int));
    
            var iD_endParameter = iD_end.HasValue ?
                new ObjectParameter("ID_end", iD_end) :
                new ObjectParameter("ID_end", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var itemDscParameter = itemDsc != null ?
                new ObjectParameter("ItemDsc", itemDsc) :
                new ObjectParameter("ItemDsc", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var price_StartParameter = price_Start.HasValue ?
                new ObjectParameter("Price_Start", price_Start) :
                new ObjectParameter("Price_Start", typeof(double));
    
            var price_EndParameter = price_End.HasValue ?
                new ObjectParameter("Price_End", price_End) :
                new ObjectParameter("Price_End", typeof(double));
    
            var proDate_startParameter = proDate_start != null ?
                new ObjectParameter("ProDate_start", proDate_start) :
                new ObjectParameter("ProDate_start", typeof(string));
    
            var proDate_endParameter = proDate_end != null ?
                new ObjectParameter("ProDate_end", proDate_end) :
                new ObjectParameter("ProDate_end", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var minTemperature_startParameter = minTemperature_start.HasValue ?
                new ObjectParameter("MinTemperature_start", minTemperature_start) :
                new ObjectParameter("MinTemperature_start", typeof(short));
    
            var minTemperature_endParameter = minTemperature_end.HasValue ?
                new ObjectParameter("MinTemperature_end", minTemperature_end) :
                new ObjectParameter("MinTemperature_end", typeof(short));
    
            var maxTemperature_startParameter = maxTemperature_start.HasValue ?
                new ObjectParameter("MaxTemperature_start", maxTemperature_start) :
                new ObjectParameter("MaxTemperature_start", typeof(short));
    
            var maxTemperature_endParameter = maxTemperature_end.HasValue ?
                new ObjectParameter("MaxTemperature_end", maxTemperature_end) :
                new ObjectParameter("MaxTemperature_end", typeof(short));
    
            var minInv_startParameter = minInv_start.HasValue ?
                new ObjectParameter("MinInv_start", minInv_start) :
                new ObjectParameter("MinInv_start", typeof(double));
    
            var maxInv_endParameter = maxInv_end.HasValue ?
                new ObjectParameter("MaxInv_end", maxInv_end) :
                new ObjectParameter("MaxInv_end", typeof(double));
    
            var inv_startParameter = inv_start.HasValue ?
                new ObjectParameter("Inv_start", inv_start) :
                new ObjectParameter("Inv_start", typeof(double));
    
            var inv_endParameter = inv_end.HasValue ?
                new ObjectParameter("Inv_end", inv_end) :
                new ObjectParameter("Inv_end", typeof(double));
    
            var viewStateIDParameter = viewStateID.HasValue ?
                new ObjectParameter("ViewStateID", viewStateID) :
                new ObjectParameter("ViewStateID", typeof(byte));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            var minimumInvParameter = minimumInv.HasValue ?
                new ObjectParameter("MinimumInv", minimumInv) :
                new ObjectParameter("MinimumInv", typeof(bool));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var rolIDParameter = rolID.HasValue ?
                new ObjectParameter("RolID", rolID) :
                new ObjectParameter("RolID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Items_Select_Result>("sp_Items_Select", iD_startParameter, iD_endParameter, nameParameter, itemDscParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, price_StartParameter, price_EndParameter, proDate_startParameter, proDate_endParameter, expDate_startParameter, expDate_endParameter, minTemperature_startParameter, minTemperature_endParameter, maxTemperature_startParameter, maxTemperature_endParameter, minInv_startParameter, maxInv_endParameter, inv_startParameter, inv_endParameter, viewStateIDParameter, activeParameter, minimumInvParameter, dscParameter, rolIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Items_SelectCustom_Result> sp_Items_SelectCustom(string name, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> rolID, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var rolIDParameter = rolID.HasValue ?
                new ObjectParameter("RolID", rolID) :
                new ObjectParameter("RolID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Items_SelectCustom_Result>("sp_Items_SelectCustom", nameParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, rolIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Items_SelectRow_Result> sp_Items_SelectRow(Nullable<int> iD, string shortCut, string barCode, string name)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var shortCutParameter = shortCut != null ?
                new ObjectParameter("ShortCut", shortCut) :
                new ObjectParameter("ShortCut", typeof(string));
    
            var barCodeParameter = barCode != null ?
                new ObjectParameter("BarCode", barCode) :
                new ObjectParameter("BarCode", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Items_SelectRow_Result>("sp_Items_SelectRow", iDParameter, shortCutParameter, barCodeParameter, nameParameter);
        }
    
        public virtual int sp_Items_Update(Nullable<int> iD, string name, string itemDsc, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<short> countingUnitID, Nullable<short> secondaryCountingUnitID, Nullable<short> countingUnitEq, Nullable<double> buyPrice, Nullable<double> price, Nullable<double> tax, Nullable<double> dutiy, Nullable<double> takh, Nullable<double> firstPrice, Nullable<double> lastPrice, Nullable<double> avgPrice, Nullable<double> minPrice, Nullable<double> maxPrice, string barCode, Nullable<System.DateTime> proDate, Nullable<System.DateTime> expDate, Nullable<short> minTemperature, Nullable<short> maxTemperature, Nullable<double> minInv, Nullable<double> maxInv, Nullable<double> inv, Nullable<byte> viewStateID, Nullable<bool> active, Nullable<bool> notTax, Nullable<bool> notDutiy, Nullable<int> imageID1, Nullable<int> imageID2, Nullable<int> imageID3, Nullable<int> imageID4, Nullable<int> imageID5, Nullable<int> imageID6, Nullable<int> imageID7, byte[] iCon, string iConTitle1, string iConTitle2, string iConTitle3, string iConFontName, Nullable<long> iConFontColor, Nullable<int> iConFontSize, Nullable<bool> iConFontStyle, string shortcut, string dsc, Nullable<int> rolID, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var itemDscParameter = itemDsc != null ?
                new ObjectParameter("ItemDsc", itemDsc) :
                new ObjectParameter("ItemDsc", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(short));
    
            var secondaryCountingUnitIDParameter = secondaryCountingUnitID.HasValue ?
                new ObjectParameter("SecondaryCountingUnitID", secondaryCountingUnitID) :
                new ObjectParameter("SecondaryCountingUnitID", typeof(short));
    
            var countingUnitEqParameter = countingUnitEq.HasValue ?
                new ObjectParameter("CountingUnitEq", countingUnitEq) :
                new ObjectParameter("CountingUnitEq", typeof(short));
    
            var buyPriceParameter = buyPrice.HasValue ?
                new ObjectParameter("BuyPrice", buyPrice) :
                new ObjectParameter("BuyPrice", typeof(double));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(double));
    
            var dutiyParameter = dutiy.HasValue ?
                new ObjectParameter("Dutiy", dutiy) :
                new ObjectParameter("Dutiy", typeof(double));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var firstPriceParameter = firstPrice.HasValue ?
                new ObjectParameter("FirstPrice", firstPrice) :
                new ObjectParameter("FirstPrice", typeof(double));
    
            var lastPriceParameter = lastPrice.HasValue ?
                new ObjectParameter("LastPrice", lastPrice) :
                new ObjectParameter("LastPrice", typeof(double));
    
            var avgPriceParameter = avgPrice.HasValue ?
                new ObjectParameter("AvgPrice", avgPrice) :
                new ObjectParameter("AvgPrice", typeof(double));
    
            var minPriceParameter = minPrice.HasValue ?
                new ObjectParameter("MinPrice", minPrice) :
                new ObjectParameter("MinPrice", typeof(double));
    
            var maxPriceParameter = maxPrice.HasValue ?
                new ObjectParameter("MaxPrice", maxPrice) :
                new ObjectParameter("MaxPrice", typeof(double));
    
            var barCodeParameter = barCode != null ?
                new ObjectParameter("BarCode", barCode) :
                new ObjectParameter("BarCode", typeof(string));
    
            var proDateParameter = proDate.HasValue ?
                new ObjectParameter("ProDate", proDate) :
                new ObjectParameter("ProDate", typeof(System.DateTime));
    
            var expDateParameter = expDate.HasValue ?
                new ObjectParameter("ExpDate", expDate) :
                new ObjectParameter("ExpDate", typeof(System.DateTime));
    
            var minTemperatureParameter = minTemperature.HasValue ?
                new ObjectParameter("MinTemperature", minTemperature) :
                new ObjectParameter("MinTemperature", typeof(short));
    
            var maxTemperatureParameter = maxTemperature.HasValue ?
                new ObjectParameter("MaxTemperature", maxTemperature) :
                new ObjectParameter("MaxTemperature", typeof(short));
    
            var minInvParameter = minInv.HasValue ?
                new ObjectParameter("MinInv", minInv) :
                new ObjectParameter("MinInv", typeof(double));
    
            var maxInvParameter = maxInv.HasValue ?
                new ObjectParameter("MaxInv", maxInv) :
                new ObjectParameter("MaxInv", typeof(double));
    
            var invParameter = inv.HasValue ?
                new ObjectParameter("Inv", inv) :
                new ObjectParameter("Inv", typeof(double));
    
            var viewStateIDParameter = viewStateID.HasValue ?
                new ObjectParameter("ViewStateID", viewStateID) :
                new ObjectParameter("ViewStateID", typeof(byte));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var notTaxParameter = notTax.HasValue ?
                new ObjectParameter("NotTax", notTax) :
                new ObjectParameter("NotTax", typeof(bool));
    
            var notDutiyParameter = notDutiy.HasValue ?
                new ObjectParameter("NotDutiy", notDutiy) :
                new ObjectParameter("NotDutiy", typeof(bool));
    
            var imageID1Parameter = imageID1.HasValue ?
                new ObjectParameter("ImageID1", imageID1) :
                new ObjectParameter("ImageID1", typeof(int));
    
            var imageID2Parameter = imageID2.HasValue ?
                new ObjectParameter("ImageID2", imageID2) :
                new ObjectParameter("ImageID2", typeof(int));
    
            var imageID3Parameter = imageID3.HasValue ?
                new ObjectParameter("ImageID3", imageID3) :
                new ObjectParameter("ImageID3", typeof(int));
    
            var imageID4Parameter = imageID4.HasValue ?
                new ObjectParameter("ImageID4", imageID4) :
                new ObjectParameter("ImageID4", typeof(int));
    
            var imageID5Parameter = imageID5.HasValue ?
                new ObjectParameter("ImageID5", imageID5) :
                new ObjectParameter("ImageID5", typeof(int));
    
            var imageID6Parameter = imageID6.HasValue ?
                new ObjectParameter("ImageID6", imageID6) :
                new ObjectParameter("ImageID6", typeof(int));
    
            var imageID7Parameter = imageID7.HasValue ?
                new ObjectParameter("ImageID7", imageID7) :
                new ObjectParameter("ImageID7", typeof(int));
    
            var iConParameter = iCon != null ?
                new ObjectParameter("ICon", iCon) :
                new ObjectParameter("ICon", typeof(byte[]));
    
            var iConTitle1Parameter = iConTitle1 != null ?
                new ObjectParameter("IConTitle1", iConTitle1) :
                new ObjectParameter("IConTitle1", typeof(string));
    
            var iConTitle2Parameter = iConTitle2 != null ?
                new ObjectParameter("IConTitle2", iConTitle2) :
                new ObjectParameter("IConTitle2", typeof(string));
    
            var iConTitle3Parameter = iConTitle3 != null ?
                new ObjectParameter("IConTitle3", iConTitle3) :
                new ObjectParameter("IConTitle3", typeof(string));
    
            var iConFontNameParameter = iConFontName != null ?
                new ObjectParameter("IConFontName", iConFontName) :
                new ObjectParameter("IConFontName", typeof(string));
    
            var iConFontColorParameter = iConFontColor.HasValue ?
                new ObjectParameter("IConFontColor", iConFontColor) :
                new ObjectParameter("IConFontColor", typeof(long));
    
            var iConFontSizeParameter = iConFontSize.HasValue ?
                new ObjectParameter("IConFontSize", iConFontSize) :
                new ObjectParameter("IConFontSize", typeof(int));
    
            var iConFontStyleParameter = iConFontStyle.HasValue ?
                new ObjectParameter("IConFontStyle", iConFontStyle) :
                new ObjectParameter("IConFontStyle", typeof(bool));
    
            var shortcutParameter = shortcut != null ?
                new ObjectParameter("Shortcut", shortcut) :
                new ObjectParameter("Shortcut", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var rolIDParameter = rolID.HasValue ?
                new ObjectParameter("RolID", rolID) :
                new ObjectParameter("RolID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Items_Update", iDParameter, nameParameter, itemDscParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, countingUnitIDParameter, secondaryCountingUnitIDParameter, countingUnitEqParameter, buyPriceParameter, priceParameter, taxParameter, dutiyParameter, takhParameter, firstPriceParameter, lastPriceParameter, avgPriceParameter, minPriceParameter, maxPriceParameter, barCodeParameter, proDateParameter, expDateParameter, minTemperatureParameter, maxTemperatureParameter, minInvParameter, maxInvParameter, invParameter, viewStateIDParameter, activeParameter, notTaxParameter, notDutiyParameter, imageID1Parameter, imageID2Parameter, imageID3Parameter, imageID4Parameter, imageID5Parameter, imageID6Parameter, imageID7Parameter, iConParameter, iConTitle1Parameter, iConTitle2Parameter, iConTitle3Parameter, iConFontNameParameter, iConFontColorParameter, iConFontSizeParameter, iConFontStyleParameter, shortcutParameter, dscParameter, rolIDParameter, useridParameter);
        }
    
        public virtual int sp_ItemsRefreshInv()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ItemsRefreshInv");
        }
    
        public virtual int sp_ItemSubCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ItemSubCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_ItemSubCategories_Insert(Nullable<short> itemCategoryID, string name, string dsc, Nullable<int> userid)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ItemSubCategories_Insert", itemCategoryIDParameter, nameParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_ItemSubCategories_Select_Result> sp_ItemSubCategories_Select(Nullable<short> itemCategoryID, string name)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ItemSubCategories_Select_Result>("sp_ItemSubCategories_Select", itemCategoryIDParameter, nameParameter);
        }
    
        public virtual int sp_ItemSubCategories_Update(Nullable<int> iD, Nullable<short> itemCategoryID, string name, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ItemSubCategories_Update", iDParameter, itemCategoryIDParameter, nameParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_Jobs_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Jobs_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Jobs_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Jobs_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Jobs_Select_Result> sp_Jobs_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Jobs_Select_Result>("sp_Jobs_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_Jobs_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Jobs_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Lab_Archive(Nullable<int> iD, Nullable<byte> archiveStateID, string archiveDsc, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var archiveStateIDParameter = archiveStateID.HasValue ?
                new ObjectParameter("ArchiveStateID", archiveStateID) :
                new ObjectParameter("ArchiveStateID", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Lab_Archive", iDParameter, archiveStateIDParameter, archiveDscParameter, userIDParameter);
        }
    
        public virtual int sp_Lab_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Lab_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Lab_DeleteAll(string registerDate_start, string registerDate_end, Nullable<int> labTypeID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<int> customerID, Nullable<short> labGroupID, Nullable<int> labSubGroupID, Nullable<int> labTestID, Nullable<int> labResultID, Nullable<int> labUnitID, Nullable<int> labRefrenceRangeID, string dsc, string create_date_start, string create_date_end, Nullable<byte> archive, string archiveDsc, Nullable<int> userid, Nullable<int> topRange, Nullable<int> delUserid)
        {
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var labTypeIDParameter = labTypeID.HasValue ?
                new ObjectParameter("LabTypeID", labTypeID) :
                new ObjectParameter("LabTypeID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var labGroupIDParameter = labGroupID.HasValue ?
                new ObjectParameter("LabGroupID", labGroupID) :
                new ObjectParameter("LabGroupID", typeof(short));
    
            var labSubGroupIDParameter = labSubGroupID.HasValue ?
                new ObjectParameter("LabSubGroupID", labSubGroupID) :
                new ObjectParameter("LabSubGroupID", typeof(int));
    
            var labTestIDParameter = labTestID.HasValue ?
                new ObjectParameter("LabTestID", labTestID) :
                new ObjectParameter("LabTestID", typeof(int));
    
            var labResultIDParameter = labResultID.HasValue ?
                new ObjectParameter("LabResultID", labResultID) :
                new ObjectParameter("LabResultID", typeof(int));
    
            var labUnitIDParameter = labUnitID.HasValue ?
                new ObjectParameter("LabUnitID", labUnitID) :
                new ObjectParameter("LabUnitID", typeof(int));
    
            var labRefrenceRangeIDParameter = labRefrenceRangeID.HasValue ?
                new ObjectParameter("LabRefrenceRangeID", labRefrenceRangeID) :
                new ObjectParameter("LabRefrenceRangeID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            var delUseridParameter = delUserid.HasValue ?
                new ObjectParameter("DelUserid", delUserid) :
                new ObjectParameter("DelUserid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Lab_DeleteAll", registerDate_startParameter, registerDate_endParameter, labTypeIDParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, customerIDParameter, labGroupIDParameter, labSubGroupIDParameter, labTestIDParameter, labResultIDParameter, labUnitIDParameter, labRefrenceRangeIDParameter, dscParameter, create_date_startParameter, create_date_endParameter, archiveParameter, archiveDscParameter, useridParameter, topRangeParameter, delUseridParameter);
        }
    
        public virtual int sp_Lab_Insert(Nullable<int> labTypeID, Nullable<System.DateTime> registerDate, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<System.DateTime> patientBirthDaye, Nullable<short> patientAge, Nullable<int> customerID, Nullable<short> labGroupID, Nullable<int> labSubGroupID, string dsc, string labDsc, byte[] labDscOle, Nullable<int> userid, ObjectParameter labID)
        {
            var labTypeIDParameter = labTypeID.HasValue ?
                new ObjectParameter("LabTypeID", labTypeID) :
                new ObjectParameter("LabTypeID", typeof(int));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientBirthDayeParameter = patientBirthDaye.HasValue ?
                new ObjectParameter("PatientBirthDaye", patientBirthDaye) :
                new ObjectParameter("PatientBirthDaye", typeof(System.DateTime));
    
            var patientAgeParameter = patientAge.HasValue ?
                new ObjectParameter("PatientAge", patientAge) :
                new ObjectParameter("PatientAge", typeof(short));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var labGroupIDParameter = labGroupID.HasValue ?
                new ObjectParameter("LabGroupID", labGroupID) :
                new ObjectParameter("LabGroupID", typeof(short));
    
            var labSubGroupIDParameter = labSubGroupID.HasValue ?
                new ObjectParameter("LabSubGroupID", labSubGroupID) :
                new ObjectParameter("LabSubGroupID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var labDscParameter = labDsc != null ?
                new ObjectParameter("LabDsc", labDsc) :
                new ObjectParameter("LabDsc", typeof(string));
    
            var labDscOleParameter = labDscOle != null ?
                new ObjectParameter("LabDscOle", labDscOle) :
                new ObjectParameter("LabDscOle", typeof(byte[]));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Lab_Insert", labTypeIDParameter, registerDateParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, patientBirthDayeParameter, patientAgeParameter, customerIDParameter, labGroupIDParameter, labSubGroupIDParameter, dscParameter, labDscParameter, labDscOleParameter, useridParameter, labID);
        }
    
        public virtual int sp_Lab_Recovery(Nullable<int> iD, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Lab_Recovery", iDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_Lab_Select_Result> sp_Lab_Select(string registerDate_start, string registerDate_end, Nullable<int> labTypeID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<int> customerID, Nullable<short> labGroupID, Nullable<int> labSubGroupID, Nullable<int> labTestID, Nullable<int> labResultID, Nullable<int> labUnitID, Nullable<int> labRefrenceRangeID, string dsc, string create_date_start, string create_date_end, Nullable<byte> archive, string archiveDsc, Nullable<int> userid, Nullable<int> topRange)
        {
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var labTypeIDParameter = labTypeID.HasValue ?
                new ObjectParameter("LabTypeID", labTypeID) :
                new ObjectParameter("LabTypeID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var labGroupIDParameter = labGroupID.HasValue ?
                new ObjectParameter("LabGroupID", labGroupID) :
                new ObjectParameter("LabGroupID", typeof(short));
    
            var labSubGroupIDParameter = labSubGroupID.HasValue ?
                new ObjectParameter("LabSubGroupID", labSubGroupID) :
                new ObjectParameter("LabSubGroupID", typeof(int));
    
            var labTestIDParameter = labTestID.HasValue ?
                new ObjectParameter("LabTestID", labTestID) :
                new ObjectParameter("LabTestID", typeof(int));
    
            var labResultIDParameter = labResultID.HasValue ?
                new ObjectParameter("LabResultID", labResultID) :
                new ObjectParameter("LabResultID", typeof(int));
    
            var labUnitIDParameter = labUnitID.HasValue ?
                new ObjectParameter("LabUnitID", labUnitID) :
                new ObjectParameter("LabUnitID", typeof(int));
    
            var labRefrenceRangeIDParameter = labRefrenceRangeID.HasValue ?
                new ObjectParameter("LabRefrenceRangeID", labRefrenceRangeID) :
                new ObjectParameter("LabRefrenceRangeID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Lab_Select_Result>("sp_Lab_Select", registerDate_startParameter, registerDate_endParameter, labTypeIDParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, customerIDParameter, labGroupIDParameter, labSubGroupIDParameter, labTestIDParameter, labResultIDParameter, labUnitIDParameter, labRefrenceRangeIDParameter, dscParameter, create_date_startParameter, create_date_endParameter, archiveParameter, archiveDscParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Lab_SelectRow_Result> sp_Lab_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Lab_SelectRow_Result>("sp_Lab_SelectRow", iDParameter);
        }
    
        public virtual int sp_Lab_Update(Nullable<int> iD, Nullable<int> labTypeID, Nullable<System.DateTime> registerDate, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<System.DateTime> patientBirthDaye, Nullable<short> patientAge, Nullable<int> customerID, Nullable<short> labGroupID, Nullable<int> labSubGroupID, string dsc, string labDsc, byte[] labDscOle, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var labTypeIDParameter = labTypeID.HasValue ?
                new ObjectParameter("LabTypeID", labTypeID) :
                new ObjectParameter("LabTypeID", typeof(int));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientBirthDayeParameter = patientBirthDaye.HasValue ?
                new ObjectParameter("PatientBirthDaye", patientBirthDaye) :
                new ObjectParameter("PatientBirthDaye", typeof(System.DateTime));
    
            var patientAgeParameter = patientAge.HasValue ?
                new ObjectParameter("PatientAge", patientAge) :
                new ObjectParameter("PatientAge", typeof(short));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var labGroupIDParameter = labGroupID.HasValue ?
                new ObjectParameter("LabGroupID", labGroupID) :
                new ObjectParameter("LabGroupID", typeof(short));
    
            var labSubGroupIDParameter = labSubGroupID.HasValue ?
                new ObjectParameter("LabSubGroupID", labSubGroupID) :
                new ObjectParameter("LabSubGroupID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var labDscParameter = labDsc != null ?
                new ObjectParameter("LabDsc", labDsc) :
                new ObjectParameter("LabDsc", typeof(string));
    
            var labDscOleParameter = labDscOle != null ?
                new ObjectParameter("LabDscOle", labDscOle) :
                new ObjectParameter("LabDscOle", typeof(byte[]));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Lab_Update", iDParameter, labTypeIDParameter, registerDateParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, patientBirthDayeParameter, patientAgeParameter, customerIDParameter, labGroupIDParameter, labSubGroupIDParameter, dscParameter, labDscParameter, labDscOleParameter, useridParameter);
        }
    
        public virtual int sp_LabCenters_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabCenters_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_LabCenters_Insert(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabCenters_Insert", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_LabCenters_Select_Result> sp_LabCenters_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabCenters_Select_Result>("sp_LabCenters_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_LabCenters_SelectRow_Result> sp_LabCenters_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabCenters_SelectRow_Result>("sp_LabCenters_SelectRow", iDParameter);
        }
    
        public virtual int sp_LabCenters_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabCenters_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_LabColors_Delete(Nullable<short> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabColors_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_LabColors_Insert(Nullable<short> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabColors_Insert", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_LabColors_Select_Result> sp_LabColors_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabColors_Select_Result>("sp_LabColors_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_LabColors_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabColors_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_LabDetails_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabDetails_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_LabDetails_Insert(Nullable<int> labID, Nullable<int> labTypeID, Nullable<System.DateTime> registerDate, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<System.DateTime> patientBirthDaye, Nullable<short> patientAge, Nullable<int> customerID, Nullable<short> labGroupID, Nullable<int> labSubGroupID, Nullable<int> labTestID, Nullable<int> labResultID, Nullable<int> labUnitID, Nullable<int> labRefrenceRangeID, string dsc, Nullable<int> userid)
        {
            var labIDParameter = labID.HasValue ?
                new ObjectParameter("LabID", labID) :
                new ObjectParameter("LabID", typeof(int));
    
            var labTypeIDParameter = labTypeID.HasValue ?
                new ObjectParameter("LabTypeID", labTypeID) :
                new ObjectParameter("LabTypeID", typeof(int));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientBirthDayeParameter = patientBirthDaye.HasValue ?
                new ObjectParameter("PatientBirthDaye", patientBirthDaye) :
                new ObjectParameter("PatientBirthDaye", typeof(System.DateTime));
    
            var patientAgeParameter = patientAge.HasValue ?
                new ObjectParameter("PatientAge", patientAge) :
                new ObjectParameter("PatientAge", typeof(short));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var labGroupIDParameter = labGroupID.HasValue ?
                new ObjectParameter("LabGroupID", labGroupID) :
                new ObjectParameter("LabGroupID", typeof(short));
    
            var labSubGroupIDParameter = labSubGroupID.HasValue ?
                new ObjectParameter("LabSubGroupID", labSubGroupID) :
                new ObjectParameter("LabSubGroupID", typeof(int));
    
            var labTestIDParameter = labTestID.HasValue ?
                new ObjectParameter("LabTestID", labTestID) :
                new ObjectParameter("LabTestID", typeof(int));
    
            var labResultIDParameter = labResultID.HasValue ?
                new ObjectParameter("LabResultID", labResultID) :
                new ObjectParameter("LabResultID", typeof(int));
    
            var labUnitIDParameter = labUnitID.HasValue ?
                new ObjectParameter("LabUnitID", labUnitID) :
                new ObjectParameter("LabUnitID", typeof(int));
    
            var labRefrenceRangeIDParameter = labRefrenceRangeID.HasValue ?
                new ObjectParameter("LabRefrenceRangeID", labRefrenceRangeID) :
                new ObjectParameter("LabRefrenceRangeID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabDetails_Insert", labIDParameter, labTypeIDParameter, registerDateParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, patientBirthDayeParameter, patientAgeParameter, customerIDParameter, labGroupIDParameter, labSubGroupIDParameter, labTestIDParameter, labResultIDParameter, labUnitIDParameter, labRefrenceRangeIDParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_LabDetails_Select_Result> sp_LabDetails_Select(Nullable<int> labID)
        {
            var labIDParameter = labID.HasValue ?
                new ObjectParameter("LabID", labID) :
                new ObjectParameter("LabID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabDetails_Select_Result>("sp_LabDetails_Select", labIDParameter);
        }
    
        public virtual ObjectResult<sp_LabDetails_SelectRow_Result> sp_LabDetails_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabDetails_SelectRow_Result>("sp_LabDetails_SelectRow", iDParameter);
        }
    
        public virtual int sp_LabDetails_Update(Nullable<int> iD, Nullable<int> labID, Nullable<int> labTypeID, Nullable<System.DateTime> registerDate, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<System.DateTime> patientBirthDaye, Nullable<short> patientAge, Nullable<int> customerID, Nullable<short> labGroupID, Nullable<int> labSubGroupID, Nullable<int> labTestID, Nullable<int> labResultID, Nullable<int> labUnitID, Nullable<int> labRefrenceRangeID, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var labIDParameter = labID.HasValue ?
                new ObjectParameter("LabID", labID) :
                new ObjectParameter("LabID", typeof(int));
    
            var labTypeIDParameter = labTypeID.HasValue ?
                new ObjectParameter("LabTypeID", labTypeID) :
                new ObjectParameter("LabTypeID", typeof(int));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientBirthDayeParameter = patientBirthDaye.HasValue ?
                new ObjectParameter("PatientBirthDaye", patientBirthDaye) :
                new ObjectParameter("PatientBirthDaye", typeof(System.DateTime));
    
            var patientAgeParameter = patientAge.HasValue ?
                new ObjectParameter("PatientAge", patientAge) :
                new ObjectParameter("PatientAge", typeof(short));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var labGroupIDParameter = labGroupID.HasValue ?
                new ObjectParameter("LabGroupID", labGroupID) :
                new ObjectParameter("LabGroupID", typeof(short));
    
            var labSubGroupIDParameter = labSubGroupID.HasValue ?
                new ObjectParameter("LabSubGroupID", labSubGroupID) :
                new ObjectParameter("LabSubGroupID", typeof(int));
    
            var labTestIDParameter = labTestID.HasValue ?
                new ObjectParameter("LabTestID", labTestID) :
                new ObjectParameter("LabTestID", typeof(int));
    
            var labResultIDParameter = labResultID.HasValue ?
                new ObjectParameter("LabResultID", labResultID) :
                new ObjectParameter("LabResultID", typeof(int));
    
            var labUnitIDParameter = labUnitID.HasValue ?
                new ObjectParameter("LabUnitID", labUnitID) :
                new ObjectParameter("LabUnitID", typeof(int));
    
            var labRefrenceRangeIDParameter = labRefrenceRangeID.HasValue ?
                new ObjectParameter("LabRefrenceRangeID", labRefrenceRangeID) :
                new ObjectParameter("LabRefrenceRangeID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabDetails_Update", iDParameter, labIDParameter, labTypeIDParameter, registerDateParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, patientBirthDayeParameter, patientAgeParameter, customerIDParameter, labGroupIDParameter, labSubGroupIDParameter, labTestIDParameter, labResultIDParameter, labUnitIDParameter, labRefrenceRangeIDParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_LabGroups_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabGroups_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_LabGroups_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabGroups_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_LabGroups_Select_Result> sp_LabGroups_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabGroups_Select_Result>("sp_LabGroups_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_LabGroups_SelectRow_Result> sp_LabGroups_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabGroups_SelectRow_Result>("sp_LabGroups_SelectRow", iDParameter);
        }
    
        public virtual int sp_LabGroups_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabGroups_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_LabJobs_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabJobs_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_LabJobs_Insert(Nullable<int> labCenterID, Nullable<int> iD, string name, Nullable<double> price, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var labCenterIDParameter = labCenterID.HasValue ?
                new ObjectParameter("LabCenterID", labCenterID) :
                new ObjectParameter("LabCenterID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabJobs_Insert", labCenterIDParameter, iDParameter, nameParameter, priceParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_LabJobs_Select_Result> sp_LabJobs_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabJobs_Select_Result>("sp_LabJobs_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_LabJobs_SelectRow_Result> sp_LabJobs_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabJobs_SelectRow_Result>("sp_LabJobs_SelectRow", iDParameter);
        }
    
        public virtual int sp_LabJobs_Update(Nullable<int> labCenterID, Nullable<int> iD, string name, Nullable<double> price, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var labCenterIDParameter = labCenterID.HasValue ?
                new ObjectParameter("LabCenterID", labCenterID) :
                new ObjectParameter("LabCenterID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabJobs_Update", labCenterIDParameter, iDParameter, nameParameter, priceParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Laboratories_Archive(Nullable<int> iD, Nullable<byte> archiveStateID, string archiveDsc, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var archiveStateIDParameter = archiveStateID.HasValue ?
                new ObjectParameter("ArchiveStateID", archiveStateID) :
                new ObjectParameter("ArchiveStateID", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Laboratories_Archive", iDParameter, archiveStateIDParameter, archiveDscParameter, userIDParameter);
        }
    
        public virtual int sp_Laboratories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Laboratories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Laboratories_DeleteAll(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<int> laboratoryID, Nullable<int> patientID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> departmentID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> medicalServiceID, Nullable<short> labStateID, Nullable<int> labCenterID, string deliveryDate_Start, string deliveryDate_End, string completeDate_Start, string completeDate_End, Nullable<int> factorSerial, string senderName, string receiverName, Nullable<int> labColorD, Nullable<int> labJobID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> userid, Nullable<int> topRange, Nullable<int> delUserid)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var laboratoryIDParameter = laboratoryID.HasValue ?
                new ObjectParameter("LaboratoryID", laboratoryID) :
                new ObjectParameter("LaboratoryID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var labStateIDParameter = labStateID.HasValue ?
                new ObjectParameter("LabStateID", labStateID) :
                new ObjectParameter("LabStateID", typeof(short));
    
            var labCenterIDParameter = labCenterID.HasValue ?
                new ObjectParameter("LabCenterID", labCenterID) :
                new ObjectParameter("LabCenterID", typeof(int));
    
            var deliveryDate_StartParameter = deliveryDate_Start != null ?
                new ObjectParameter("DeliveryDate_Start", deliveryDate_Start) :
                new ObjectParameter("DeliveryDate_Start", typeof(string));
    
            var deliveryDate_EndParameter = deliveryDate_End != null ?
                new ObjectParameter("DeliveryDate_End", deliveryDate_End) :
                new ObjectParameter("DeliveryDate_End", typeof(string));
    
            var completeDate_StartParameter = completeDate_Start != null ?
                new ObjectParameter("CompleteDate_Start", completeDate_Start) :
                new ObjectParameter("CompleteDate_Start", typeof(string));
    
            var completeDate_EndParameter = completeDate_End != null ?
                new ObjectParameter("CompleteDate_End", completeDate_End) :
                new ObjectParameter("CompleteDate_End", typeof(string));
    
            var factorSerialParameter = factorSerial.HasValue ?
                new ObjectParameter("FactorSerial", factorSerial) :
                new ObjectParameter("FactorSerial", typeof(int));
    
            var senderNameParameter = senderName != null ?
                new ObjectParameter("SenderName", senderName) :
                new ObjectParameter("SenderName", typeof(string));
    
            var receiverNameParameter = receiverName != null ?
                new ObjectParameter("ReceiverName", receiverName) :
                new ObjectParameter("ReceiverName", typeof(string));
    
            var labColorDParameter = labColorD.HasValue ?
                new ObjectParameter("LabColorD", labColorD) :
                new ObjectParameter("LabColorD", typeof(int));
    
            var labJobIDParameter = labJobID.HasValue ?
                new ObjectParameter("LabJobID", labJobID) :
                new ObjectParameter("LabJobID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            var delUseridParameter = delUserid.HasValue ?
                new ObjectParameter("DelUserid", delUserid) :
                new ObjectParameter("DelUserid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Laboratories_DeleteAll", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, laboratoryIDParameter, patientIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, departmentIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, medicalServiceIDParameter, labStateIDParameter, labCenterIDParameter, deliveryDate_StartParameter, deliveryDate_EndParameter, completeDate_StartParameter, completeDate_EndParameter, factorSerialParameter, senderNameParameter, receiverNameParameter, labColorDParameter, labJobIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, useridParameter, topRangeParameter, delUseridParameter);
        }
    
        public virtual int sp_Laboratories_Insert(Nullable<int> iD, Nullable<System.DateTime> registerDate, Nullable<short> labStateID, Nullable<int> labCenterID, Nullable<System.DateTime> deliveryDate, Nullable<System.DateTime> completeDate, Nullable<int> factorSerial, string senderName, string receiverName, Nullable<double> servicePrice, Nullable<double> takh, Nullable<double> bed, Nullable<double> bes, Nullable<double> mandeh, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<int> reasonID, Nullable<int> departmentID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<short> therapyID, Nullable<int> medicalServiceID, Nullable<double> numb, Nullable<byte> serviceNumb, Nullable<int> labColorD, Nullable<short> labServiceNumb, Nullable<int> labJobID, Nullable<byte> upLeft1, Nullable<byte> upLeft2, Nullable<byte> upLeft3, Nullable<byte> upLeft4, Nullable<byte> upLeft5, Nullable<byte> upLeft6, Nullable<byte> upLeft7, Nullable<byte> upLeft8, Nullable<byte> upRight1, Nullable<byte> upRight2, Nullable<byte> upRight3, Nullable<byte> upRight4, Nullable<byte> upRight5, Nullable<byte> upRight6, Nullable<byte> upRight7, Nullable<byte> upRight8, Nullable<byte> downLeft1, Nullable<byte> downLeft2, Nullable<byte> downLeft3, Nullable<byte> downLeft4, Nullable<byte> downLeft5, Nullable<byte> downLeft6, Nullable<byte> downLeft7, Nullable<byte> downLeft8, Nullable<byte> downRight1, Nullable<byte> downRight2, Nullable<byte> downRight3, Nullable<byte> downRight4, Nullable<byte> downRight5, Nullable<byte> downRight6, Nullable<byte> downRight7, Nullable<byte> downRight8, Nullable<byte> upLeftA, Nullable<byte> upLeftB, Nullable<byte> upLeftC, Nullable<byte> upLeftD, Nullable<byte> upLeftE, Nullable<byte> upRightA, Nullable<byte> upRightB, Nullable<byte> upRightC, Nullable<byte> upRightD, Nullable<byte> upRightE, Nullable<byte> downLeftA, Nullable<byte> downLeftB, Nullable<byte> downLeftC, Nullable<byte> downLeftD, Nullable<byte> downLeftE, Nullable<byte> downRightA, Nullable<byte> downRightB, Nullable<byte> downRightC, Nullable<byte> downRightD, Nullable<byte> downRightE, string upLeft1Dsc, string upLeft2Dsc, string upLeft3Dsc, string upLeft4Dsc, string upLeft5Dsc, string upLeft6Dsc, string upLeft7Dsc, string upLeft8Dsc, string upRight1Dsc, string upRight2Dsc, string upRight3Dsc, string upRight4Dsc, string upRight5Dsc, string upRight6Dsc, string upRight7Dsc, string upRight8Dsc, string downLeft1Dsc, string downLeft2Dsc, string downLeft3Dsc, string downLeft4Dsc, string downLeft5Dsc, string downLeft6Dsc, string downLeft7Dsc, string downLeft8Dsc, string downRight1Dsc, string downRight2Dsc, string downRight3Dsc, string downRight4Dsc, string downRight5Dsc, string downRight6Dsc, string downRight7Dsc, string downRight8Dsc, string upLeftADsc, string upLeftBDsc, string upLeftCDsc, string upLeftDDsc, string upLeftEDsc, string upRightADsc, string upRightBDsc, string upRightCDsc, string upRightDDsc, string upRightEDsc, string downLeftADsc, string downLeftBDsc, string downLeftCDsc, string downLeftDDsc, string downLeftEDsc, string downRightADsc, string downRightBDsc, string downRightCDsc, string downRightDDsc, string downRightEDsc, byte[] diagram, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var labStateIDParameter = labStateID.HasValue ?
                new ObjectParameter("LabStateID", labStateID) :
                new ObjectParameter("LabStateID", typeof(short));
    
            var labCenterIDParameter = labCenterID.HasValue ?
                new ObjectParameter("LabCenterID", labCenterID) :
                new ObjectParameter("LabCenterID", typeof(int));
    
            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(System.DateTime));
    
            var completeDateParameter = completeDate.HasValue ?
                new ObjectParameter("CompleteDate", completeDate) :
                new ObjectParameter("CompleteDate", typeof(System.DateTime));
    
            var factorSerialParameter = factorSerial.HasValue ?
                new ObjectParameter("FactorSerial", factorSerial) :
                new ObjectParameter("FactorSerial", typeof(int));
    
            var senderNameParameter = senderName != null ?
                new ObjectParameter("SenderName", senderName) :
                new ObjectParameter("SenderName", typeof(string));
    
            var receiverNameParameter = receiverName != null ?
                new ObjectParameter("ReceiverName", receiverName) :
                new ObjectParameter("ReceiverName", typeof(string));
    
            var servicePriceParameter = servicePrice.HasValue ?
                new ObjectParameter("ServicePrice", servicePrice) :
                new ObjectParameter("ServicePrice", typeof(double));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var besParameter = bes.HasValue ?
                new ObjectParameter("Bes", bes) :
                new ObjectParameter("Bes", typeof(double));
    
            var mandehParameter = mandeh.HasValue ?
                new ObjectParameter("Mandeh", mandeh) :
                new ObjectParameter("Mandeh", typeof(double));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(short));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var numbParameter = numb.HasValue ?
                new ObjectParameter("Numb", numb) :
                new ObjectParameter("Numb", typeof(double));
    
            var serviceNumbParameter = serviceNumb.HasValue ?
                new ObjectParameter("ServiceNumb", serviceNumb) :
                new ObjectParameter("ServiceNumb", typeof(byte));
    
            var labColorDParameter = labColorD.HasValue ?
                new ObjectParameter("LabColorD", labColorD) :
                new ObjectParameter("LabColorD", typeof(int));
    
            var labServiceNumbParameter = labServiceNumb.HasValue ?
                new ObjectParameter("LabServiceNumb", labServiceNumb) :
                new ObjectParameter("LabServiceNumb", typeof(short));
    
            var labJobIDParameter = labJobID.HasValue ?
                new ObjectParameter("LabJobID", labJobID) :
                new ObjectParameter("LabJobID", typeof(int));
    
            var upLeft1Parameter = upLeft1.HasValue ?
                new ObjectParameter("UpLeft1", upLeft1) :
                new ObjectParameter("UpLeft1", typeof(byte));
    
            var upLeft2Parameter = upLeft2.HasValue ?
                new ObjectParameter("UpLeft2", upLeft2) :
                new ObjectParameter("UpLeft2", typeof(byte));
    
            var upLeft3Parameter = upLeft3.HasValue ?
                new ObjectParameter("UpLeft3", upLeft3) :
                new ObjectParameter("UpLeft3", typeof(byte));
    
            var upLeft4Parameter = upLeft4.HasValue ?
                new ObjectParameter("UpLeft4", upLeft4) :
                new ObjectParameter("UpLeft4", typeof(byte));
    
            var upLeft5Parameter = upLeft5.HasValue ?
                new ObjectParameter("UpLeft5", upLeft5) :
                new ObjectParameter("UpLeft5", typeof(byte));
    
            var upLeft6Parameter = upLeft6.HasValue ?
                new ObjectParameter("UpLeft6", upLeft6) :
                new ObjectParameter("UpLeft6", typeof(byte));
    
            var upLeft7Parameter = upLeft7.HasValue ?
                new ObjectParameter("UpLeft7", upLeft7) :
                new ObjectParameter("UpLeft7", typeof(byte));
    
            var upLeft8Parameter = upLeft8.HasValue ?
                new ObjectParameter("UpLeft8", upLeft8) :
                new ObjectParameter("UpLeft8", typeof(byte));
    
            var upRight1Parameter = upRight1.HasValue ?
                new ObjectParameter("UpRight1", upRight1) :
                new ObjectParameter("UpRight1", typeof(byte));
    
            var upRight2Parameter = upRight2.HasValue ?
                new ObjectParameter("UpRight2", upRight2) :
                new ObjectParameter("UpRight2", typeof(byte));
    
            var upRight3Parameter = upRight3.HasValue ?
                new ObjectParameter("UpRight3", upRight3) :
                new ObjectParameter("UpRight3", typeof(byte));
    
            var upRight4Parameter = upRight4.HasValue ?
                new ObjectParameter("UpRight4", upRight4) :
                new ObjectParameter("UpRight4", typeof(byte));
    
            var upRight5Parameter = upRight5.HasValue ?
                new ObjectParameter("UpRight5", upRight5) :
                new ObjectParameter("UpRight5", typeof(byte));
    
            var upRight6Parameter = upRight6.HasValue ?
                new ObjectParameter("UpRight6", upRight6) :
                new ObjectParameter("UpRight6", typeof(byte));
    
            var upRight7Parameter = upRight7.HasValue ?
                new ObjectParameter("UpRight7", upRight7) :
                new ObjectParameter("UpRight7", typeof(byte));
    
            var upRight8Parameter = upRight8.HasValue ?
                new ObjectParameter("UpRight8", upRight8) :
                new ObjectParameter("UpRight8", typeof(byte));
    
            var downLeft1Parameter = downLeft1.HasValue ?
                new ObjectParameter("DownLeft1", downLeft1) :
                new ObjectParameter("DownLeft1", typeof(byte));
    
            var downLeft2Parameter = downLeft2.HasValue ?
                new ObjectParameter("DownLeft2", downLeft2) :
                new ObjectParameter("DownLeft2", typeof(byte));
    
            var downLeft3Parameter = downLeft3.HasValue ?
                new ObjectParameter("DownLeft3", downLeft3) :
                new ObjectParameter("DownLeft3", typeof(byte));
    
            var downLeft4Parameter = downLeft4.HasValue ?
                new ObjectParameter("DownLeft4", downLeft4) :
                new ObjectParameter("DownLeft4", typeof(byte));
    
            var downLeft5Parameter = downLeft5.HasValue ?
                new ObjectParameter("DownLeft5", downLeft5) :
                new ObjectParameter("DownLeft5", typeof(byte));
    
            var downLeft6Parameter = downLeft6.HasValue ?
                new ObjectParameter("DownLeft6", downLeft6) :
                new ObjectParameter("DownLeft6", typeof(byte));
    
            var downLeft7Parameter = downLeft7.HasValue ?
                new ObjectParameter("DownLeft7", downLeft7) :
                new ObjectParameter("DownLeft7", typeof(byte));
    
            var downLeft8Parameter = downLeft8.HasValue ?
                new ObjectParameter("DownLeft8", downLeft8) :
                new ObjectParameter("DownLeft8", typeof(byte));
    
            var downRight1Parameter = downRight1.HasValue ?
                new ObjectParameter("DownRight1", downRight1) :
                new ObjectParameter("DownRight1", typeof(byte));
    
            var downRight2Parameter = downRight2.HasValue ?
                new ObjectParameter("DownRight2", downRight2) :
                new ObjectParameter("DownRight2", typeof(byte));
    
            var downRight3Parameter = downRight3.HasValue ?
                new ObjectParameter("DownRight3", downRight3) :
                new ObjectParameter("DownRight3", typeof(byte));
    
            var downRight4Parameter = downRight4.HasValue ?
                new ObjectParameter("DownRight4", downRight4) :
                new ObjectParameter("DownRight4", typeof(byte));
    
            var downRight5Parameter = downRight5.HasValue ?
                new ObjectParameter("DownRight5", downRight5) :
                new ObjectParameter("DownRight5", typeof(byte));
    
            var downRight6Parameter = downRight6.HasValue ?
                new ObjectParameter("DownRight6", downRight6) :
                new ObjectParameter("DownRight6", typeof(byte));
    
            var downRight7Parameter = downRight7.HasValue ?
                new ObjectParameter("DownRight7", downRight7) :
                new ObjectParameter("DownRight7", typeof(byte));
    
            var downRight8Parameter = downRight8.HasValue ?
                new ObjectParameter("DownRight8", downRight8) :
                new ObjectParameter("DownRight8", typeof(byte));
    
            var upLeftAParameter = upLeftA.HasValue ?
                new ObjectParameter("UpLeftA", upLeftA) :
                new ObjectParameter("UpLeftA", typeof(byte));
    
            var upLeftBParameter = upLeftB.HasValue ?
                new ObjectParameter("UpLeftB", upLeftB) :
                new ObjectParameter("UpLeftB", typeof(byte));
    
            var upLeftCParameter = upLeftC.HasValue ?
                new ObjectParameter("UpLeftC", upLeftC) :
                new ObjectParameter("UpLeftC", typeof(byte));
    
            var upLeftDParameter = upLeftD.HasValue ?
                new ObjectParameter("UpLeftD", upLeftD) :
                new ObjectParameter("UpLeftD", typeof(byte));
    
            var upLeftEParameter = upLeftE.HasValue ?
                new ObjectParameter("UpLeftE", upLeftE) :
                new ObjectParameter("UpLeftE", typeof(byte));
    
            var upRightAParameter = upRightA.HasValue ?
                new ObjectParameter("UpRightA", upRightA) :
                new ObjectParameter("UpRightA", typeof(byte));
    
            var upRightBParameter = upRightB.HasValue ?
                new ObjectParameter("UpRightB", upRightB) :
                new ObjectParameter("UpRightB", typeof(byte));
    
            var upRightCParameter = upRightC.HasValue ?
                new ObjectParameter("UpRightC", upRightC) :
                new ObjectParameter("UpRightC", typeof(byte));
    
            var upRightDParameter = upRightD.HasValue ?
                new ObjectParameter("UpRightD", upRightD) :
                new ObjectParameter("UpRightD", typeof(byte));
    
            var upRightEParameter = upRightE.HasValue ?
                new ObjectParameter("UpRightE", upRightE) :
                new ObjectParameter("UpRightE", typeof(byte));
    
            var downLeftAParameter = downLeftA.HasValue ?
                new ObjectParameter("DownLeftA", downLeftA) :
                new ObjectParameter("DownLeftA", typeof(byte));
    
            var downLeftBParameter = downLeftB.HasValue ?
                new ObjectParameter("DownLeftB", downLeftB) :
                new ObjectParameter("DownLeftB", typeof(byte));
    
            var downLeftCParameter = downLeftC.HasValue ?
                new ObjectParameter("DownLeftC", downLeftC) :
                new ObjectParameter("DownLeftC", typeof(byte));
    
            var downLeftDParameter = downLeftD.HasValue ?
                new ObjectParameter("DownLeftD", downLeftD) :
                new ObjectParameter("DownLeftD", typeof(byte));
    
            var downLeftEParameter = downLeftE.HasValue ?
                new ObjectParameter("DownLeftE", downLeftE) :
                new ObjectParameter("DownLeftE", typeof(byte));
    
            var downRightAParameter = downRightA.HasValue ?
                new ObjectParameter("DownRightA", downRightA) :
                new ObjectParameter("DownRightA", typeof(byte));
    
            var downRightBParameter = downRightB.HasValue ?
                new ObjectParameter("DownRightB", downRightB) :
                new ObjectParameter("DownRightB", typeof(byte));
    
            var downRightCParameter = downRightC.HasValue ?
                new ObjectParameter("DownRightC", downRightC) :
                new ObjectParameter("DownRightC", typeof(byte));
    
            var downRightDParameter = downRightD.HasValue ?
                new ObjectParameter("DownRightD", downRightD) :
                new ObjectParameter("DownRightD", typeof(byte));
    
            var downRightEParameter = downRightE.HasValue ?
                new ObjectParameter("DownRightE", downRightE) :
                new ObjectParameter("DownRightE", typeof(byte));
    
            var upLeft1DscParameter = upLeft1Dsc != null ?
                new ObjectParameter("UpLeft1Dsc", upLeft1Dsc) :
                new ObjectParameter("UpLeft1Dsc", typeof(string));
    
            var upLeft2DscParameter = upLeft2Dsc != null ?
                new ObjectParameter("UpLeft2Dsc", upLeft2Dsc) :
                new ObjectParameter("UpLeft2Dsc", typeof(string));
    
            var upLeft3DscParameter = upLeft3Dsc != null ?
                new ObjectParameter("UpLeft3Dsc", upLeft3Dsc) :
                new ObjectParameter("UpLeft3Dsc", typeof(string));
    
            var upLeft4DscParameter = upLeft4Dsc != null ?
                new ObjectParameter("UpLeft4Dsc", upLeft4Dsc) :
                new ObjectParameter("UpLeft4Dsc", typeof(string));
    
            var upLeft5DscParameter = upLeft5Dsc != null ?
                new ObjectParameter("UpLeft5Dsc", upLeft5Dsc) :
                new ObjectParameter("UpLeft5Dsc", typeof(string));
    
            var upLeft6DscParameter = upLeft6Dsc != null ?
                new ObjectParameter("UpLeft6Dsc", upLeft6Dsc) :
                new ObjectParameter("UpLeft6Dsc", typeof(string));
    
            var upLeft7DscParameter = upLeft7Dsc != null ?
                new ObjectParameter("UpLeft7Dsc", upLeft7Dsc) :
                new ObjectParameter("UpLeft7Dsc", typeof(string));
    
            var upLeft8DscParameter = upLeft8Dsc != null ?
                new ObjectParameter("UpLeft8Dsc", upLeft8Dsc) :
                new ObjectParameter("UpLeft8Dsc", typeof(string));
    
            var upRight1DscParameter = upRight1Dsc != null ?
                new ObjectParameter("UpRight1Dsc", upRight1Dsc) :
                new ObjectParameter("UpRight1Dsc", typeof(string));
    
            var upRight2DscParameter = upRight2Dsc != null ?
                new ObjectParameter("UpRight2Dsc", upRight2Dsc) :
                new ObjectParameter("UpRight2Dsc", typeof(string));
    
            var upRight3DscParameter = upRight3Dsc != null ?
                new ObjectParameter("UpRight3Dsc", upRight3Dsc) :
                new ObjectParameter("UpRight3Dsc", typeof(string));
    
            var upRight4DscParameter = upRight4Dsc != null ?
                new ObjectParameter("UpRight4Dsc", upRight4Dsc) :
                new ObjectParameter("UpRight4Dsc", typeof(string));
    
            var upRight5DscParameter = upRight5Dsc != null ?
                new ObjectParameter("UpRight5Dsc", upRight5Dsc) :
                new ObjectParameter("UpRight5Dsc", typeof(string));
    
            var upRight6DscParameter = upRight6Dsc != null ?
                new ObjectParameter("UpRight6Dsc", upRight6Dsc) :
                new ObjectParameter("UpRight6Dsc", typeof(string));
    
            var upRight7DscParameter = upRight7Dsc != null ?
                new ObjectParameter("UpRight7Dsc", upRight7Dsc) :
                new ObjectParameter("UpRight7Dsc", typeof(string));
    
            var upRight8DscParameter = upRight8Dsc != null ?
                new ObjectParameter("UpRight8Dsc", upRight8Dsc) :
                new ObjectParameter("UpRight8Dsc", typeof(string));
    
            var downLeft1DscParameter = downLeft1Dsc != null ?
                new ObjectParameter("DownLeft1Dsc", downLeft1Dsc) :
                new ObjectParameter("DownLeft1Dsc", typeof(string));
    
            var downLeft2DscParameter = downLeft2Dsc != null ?
                new ObjectParameter("DownLeft2Dsc", downLeft2Dsc) :
                new ObjectParameter("DownLeft2Dsc", typeof(string));
    
            var downLeft3DscParameter = downLeft3Dsc != null ?
                new ObjectParameter("DownLeft3Dsc", downLeft3Dsc) :
                new ObjectParameter("DownLeft3Dsc", typeof(string));
    
            var downLeft4DscParameter = downLeft4Dsc != null ?
                new ObjectParameter("DownLeft4Dsc", downLeft4Dsc) :
                new ObjectParameter("DownLeft4Dsc", typeof(string));
    
            var downLeft5DscParameter = downLeft5Dsc != null ?
                new ObjectParameter("DownLeft5Dsc", downLeft5Dsc) :
                new ObjectParameter("DownLeft5Dsc", typeof(string));
    
            var downLeft6DscParameter = downLeft6Dsc != null ?
                new ObjectParameter("DownLeft6Dsc", downLeft6Dsc) :
                new ObjectParameter("DownLeft6Dsc", typeof(string));
    
            var downLeft7DscParameter = downLeft7Dsc != null ?
                new ObjectParameter("DownLeft7Dsc", downLeft7Dsc) :
                new ObjectParameter("DownLeft7Dsc", typeof(string));
    
            var downLeft8DscParameter = downLeft8Dsc != null ?
                new ObjectParameter("DownLeft8Dsc", downLeft8Dsc) :
                new ObjectParameter("DownLeft8Dsc", typeof(string));
    
            var downRight1DscParameter = downRight1Dsc != null ?
                new ObjectParameter("DownRight1Dsc", downRight1Dsc) :
                new ObjectParameter("DownRight1Dsc", typeof(string));
    
            var downRight2DscParameter = downRight2Dsc != null ?
                new ObjectParameter("DownRight2Dsc", downRight2Dsc) :
                new ObjectParameter("DownRight2Dsc", typeof(string));
    
            var downRight3DscParameter = downRight3Dsc != null ?
                new ObjectParameter("DownRight3Dsc", downRight3Dsc) :
                new ObjectParameter("DownRight3Dsc", typeof(string));
    
            var downRight4DscParameter = downRight4Dsc != null ?
                new ObjectParameter("DownRight4Dsc", downRight4Dsc) :
                new ObjectParameter("DownRight4Dsc", typeof(string));
    
            var downRight5DscParameter = downRight5Dsc != null ?
                new ObjectParameter("DownRight5Dsc", downRight5Dsc) :
                new ObjectParameter("DownRight5Dsc", typeof(string));
    
            var downRight6DscParameter = downRight6Dsc != null ?
                new ObjectParameter("DownRight6Dsc", downRight6Dsc) :
                new ObjectParameter("DownRight6Dsc", typeof(string));
    
            var downRight7DscParameter = downRight7Dsc != null ?
                new ObjectParameter("DownRight7Dsc", downRight7Dsc) :
                new ObjectParameter("DownRight7Dsc", typeof(string));
    
            var downRight8DscParameter = downRight8Dsc != null ?
                new ObjectParameter("DownRight8Dsc", downRight8Dsc) :
                new ObjectParameter("DownRight8Dsc", typeof(string));
    
            var upLeftADscParameter = upLeftADsc != null ?
                new ObjectParameter("UpLeftADsc", upLeftADsc) :
                new ObjectParameter("UpLeftADsc", typeof(string));
    
            var upLeftBDscParameter = upLeftBDsc != null ?
                new ObjectParameter("UpLeftBDsc", upLeftBDsc) :
                new ObjectParameter("UpLeftBDsc", typeof(string));
    
            var upLeftCDscParameter = upLeftCDsc != null ?
                new ObjectParameter("UpLeftCDsc", upLeftCDsc) :
                new ObjectParameter("UpLeftCDsc", typeof(string));
    
            var upLeftDDscParameter = upLeftDDsc != null ?
                new ObjectParameter("UpLeftDDsc", upLeftDDsc) :
                new ObjectParameter("UpLeftDDsc", typeof(string));
    
            var upLeftEDscParameter = upLeftEDsc != null ?
                new ObjectParameter("UpLeftEDsc", upLeftEDsc) :
                new ObjectParameter("UpLeftEDsc", typeof(string));
    
            var upRightADscParameter = upRightADsc != null ?
                new ObjectParameter("UpRightADsc", upRightADsc) :
                new ObjectParameter("UpRightADsc", typeof(string));
    
            var upRightBDscParameter = upRightBDsc != null ?
                new ObjectParameter("UpRightBDsc", upRightBDsc) :
                new ObjectParameter("UpRightBDsc", typeof(string));
    
            var upRightCDscParameter = upRightCDsc != null ?
                new ObjectParameter("UpRightCDsc", upRightCDsc) :
                new ObjectParameter("UpRightCDsc", typeof(string));
    
            var upRightDDscParameter = upRightDDsc != null ?
                new ObjectParameter("UpRightDDsc", upRightDDsc) :
                new ObjectParameter("UpRightDDsc", typeof(string));
    
            var upRightEDscParameter = upRightEDsc != null ?
                new ObjectParameter("UpRightEDsc", upRightEDsc) :
                new ObjectParameter("UpRightEDsc", typeof(string));
    
            var downLeftADscParameter = downLeftADsc != null ?
                new ObjectParameter("DownLeftADsc", downLeftADsc) :
                new ObjectParameter("DownLeftADsc", typeof(string));
    
            var downLeftBDscParameter = downLeftBDsc != null ?
                new ObjectParameter("DownLeftBDsc", downLeftBDsc) :
                new ObjectParameter("DownLeftBDsc", typeof(string));
    
            var downLeftCDscParameter = downLeftCDsc != null ?
                new ObjectParameter("DownLeftCDsc", downLeftCDsc) :
                new ObjectParameter("DownLeftCDsc", typeof(string));
    
            var downLeftDDscParameter = downLeftDDsc != null ?
                new ObjectParameter("DownLeftDDsc", downLeftDDsc) :
                new ObjectParameter("DownLeftDDsc", typeof(string));
    
            var downLeftEDscParameter = downLeftEDsc != null ?
                new ObjectParameter("DownLeftEDsc", downLeftEDsc) :
                new ObjectParameter("DownLeftEDsc", typeof(string));
    
            var downRightADscParameter = downRightADsc != null ?
                new ObjectParameter("DownRightADsc", downRightADsc) :
                new ObjectParameter("DownRightADsc", typeof(string));
    
            var downRightBDscParameter = downRightBDsc != null ?
                new ObjectParameter("DownRightBDsc", downRightBDsc) :
                new ObjectParameter("DownRightBDsc", typeof(string));
    
            var downRightCDscParameter = downRightCDsc != null ?
                new ObjectParameter("DownRightCDsc", downRightCDsc) :
                new ObjectParameter("DownRightCDsc", typeof(string));
    
            var downRightDDscParameter = downRightDDsc != null ?
                new ObjectParameter("DownRightDDsc", downRightDDsc) :
                new ObjectParameter("DownRightDDsc", typeof(string));
    
            var downRightEDscParameter = downRightEDsc != null ?
                new ObjectParameter("DownRightEDsc", downRightEDsc) :
                new ObjectParameter("DownRightEDsc", typeof(string));
    
            var diagramParameter = diagram != null ?
                new ObjectParameter("Diagram", diagram) :
                new ObjectParameter("Diagram", typeof(byte[]));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Laboratories_Insert", iDParameter, registerDateParameter, labStateIDParameter, labCenterIDParameter, deliveryDateParameter, completeDateParameter, factorSerialParameter, senderNameParameter, receiverNameParameter, servicePriceParameter, takhParameter, bedParameter, besParameter, mandehParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, reasonIDParameter, departmentIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, medicalServiceIDParameter, numbParameter, serviceNumbParameter, labColorDParameter, labServiceNumbParameter, labJobIDParameter, upLeft1Parameter, upLeft2Parameter, upLeft3Parameter, upLeft4Parameter, upLeft5Parameter, upLeft6Parameter, upLeft7Parameter, upLeft8Parameter, upRight1Parameter, upRight2Parameter, upRight3Parameter, upRight4Parameter, upRight5Parameter, upRight6Parameter, upRight7Parameter, upRight8Parameter, downLeft1Parameter, downLeft2Parameter, downLeft3Parameter, downLeft4Parameter, downLeft5Parameter, downLeft6Parameter, downLeft7Parameter, downLeft8Parameter, downRight1Parameter, downRight2Parameter, downRight3Parameter, downRight4Parameter, downRight5Parameter, downRight6Parameter, downRight7Parameter, downRight8Parameter, upLeftAParameter, upLeftBParameter, upLeftCParameter, upLeftDParameter, upLeftEParameter, upRightAParameter, upRightBParameter, upRightCParameter, upRightDParameter, upRightEParameter, downLeftAParameter, downLeftBParameter, downLeftCParameter, downLeftDParameter, downLeftEParameter, downRightAParameter, downRightBParameter, downRightCParameter, downRightDParameter, downRightEParameter, upLeft1DscParameter, upLeft2DscParameter, upLeft3DscParameter, upLeft4DscParameter, upLeft5DscParameter, upLeft6DscParameter, upLeft7DscParameter, upLeft8DscParameter, upRight1DscParameter, upRight2DscParameter, upRight3DscParameter, upRight4DscParameter, upRight5DscParameter, upRight6DscParameter, upRight7DscParameter, upRight8DscParameter, downLeft1DscParameter, downLeft2DscParameter, downLeft3DscParameter, downLeft4DscParameter, downLeft5DscParameter, downLeft6DscParameter, downLeft7DscParameter, downLeft8DscParameter, downRight1DscParameter, downRight2DscParameter, downRight3DscParameter, downRight4DscParameter, downRight5DscParameter, downRight6DscParameter, downRight7DscParameter, downRight8DscParameter, upLeftADscParameter, upLeftBDscParameter, upLeftCDscParameter, upLeftDDscParameter, upLeftEDscParameter, upRightADscParameter, upRightBDscParameter, upRightCDscParameter, upRightDDscParameter, upRightEDscParameter, downLeftADscParameter, downLeftBDscParameter, downLeftCDscParameter, downLeftDDscParameter, downLeftEDscParameter, downRightADscParameter, downRightBDscParameter, downRightCDscParameter, downRightDDscParameter, downRightEDscParameter, diagramParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_Laboratories_Recovery(Nullable<int> iD, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Laboratories_Recovery", iDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_Laboratories_Select_Result> sp_Laboratories_Select(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<int> laboratoryID, Nullable<int> patientID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> departmentID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> medicalServiceID, Nullable<short> labStateID, Nullable<int> labCenterID, string deliveryDate_Start, string deliveryDate_End, string completeDate_Start, string completeDate_End, Nullable<int> factorSerial, string senderName, string receiverName, Nullable<int> labColorD, Nullable<int> labJobID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var laboratoryIDParameter = laboratoryID.HasValue ?
                new ObjectParameter("LaboratoryID", laboratoryID) :
                new ObjectParameter("LaboratoryID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var labStateIDParameter = labStateID.HasValue ?
                new ObjectParameter("LabStateID", labStateID) :
                new ObjectParameter("LabStateID", typeof(short));
    
            var labCenterIDParameter = labCenterID.HasValue ?
                new ObjectParameter("LabCenterID", labCenterID) :
                new ObjectParameter("LabCenterID", typeof(int));
    
            var deliveryDate_StartParameter = deliveryDate_Start != null ?
                new ObjectParameter("DeliveryDate_Start", deliveryDate_Start) :
                new ObjectParameter("DeliveryDate_Start", typeof(string));
    
            var deliveryDate_EndParameter = deliveryDate_End != null ?
                new ObjectParameter("DeliveryDate_End", deliveryDate_End) :
                new ObjectParameter("DeliveryDate_End", typeof(string));
    
            var completeDate_StartParameter = completeDate_Start != null ?
                new ObjectParameter("CompleteDate_Start", completeDate_Start) :
                new ObjectParameter("CompleteDate_Start", typeof(string));
    
            var completeDate_EndParameter = completeDate_End != null ?
                new ObjectParameter("CompleteDate_End", completeDate_End) :
                new ObjectParameter("CompleteDate_End", typeof(string));
    
            var factorSerialParameter = factorSerial.HasValue ?
                new ObjectParameter("FactorSerial", factorSerial) :
                new ObjectParameter("FactorSerial", typeof(int));
    
            var senderNameParameter = senderName != null ?
                new ObjectParameter("SenderName", senderName) :
                new ObjectParameter("SenderName", typeof(string));
    
            var receiverNameParameter = receiverName != null ?
                new ObjectParameter("ReceiverName", receiverName) :
                new ObjectParameter("ReceiverName", typeof(string));
    
            var labColorDParameter = labColorD.HasValue ?
                new ObjectParameter("LabColorD", labColorD) :
                new ObjectParameter("LabColorD", typeof(int));
    
            var labJobIDParameter = labJobID.HasValue ?
                new ObjectParameter("LabJobID", labJobID) :
                new ObjectParameter("LabJobID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Laboratories_Select_Result>("sp_Laboratories_Select", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, laboratoryIDParameter, patientIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, departmentIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, medicalServiceIDParameter, labStateIDParameter, labCenterIDParameter, deliveryDate_StartParameter, deliveryDate_EndParameter, completeDate_StartParameter, completeDate_EndParameter, factorSerialParameter, senderNameParameter, receiverNameParameter, labColorDParameter, labJobIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Laboratories_SelectRow_Result> sp_Laboratories_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Laboratories_SelectRow_Result>("sp_Laboratories_SelectRow", iDParameter);
        }
    
        public virtual int sp_Laboratories_Update(Nullable<int> iD, Nullable<System.DateTime> registerDate, Nullable<short> labStateID, Nullable<int> labCenterID, Nullable<System.DateTime> deliveryDate, Nullable<System.DateTime> completeDate, Nullable<int> factorSerial, string senderName, string receiverName, Nullable<double> servicePrice, Nullable<double> takh, Nullable<double> bed, Nullable<double> bes, Nullable<double> mandeh, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<int> reasonID, Nullable<int> departmentID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<short> therapyID, Nullable<int> medicalServiceID, Nullable<double> numb, Nullable<byte> serviceNumb, Nullable<int> labColorD, Nullable<short> labServiceNumb, Nullable<int> labJobID, Nullable<byte> upLeft1, Nullable<byte> upLeft2, Nullable<byte> upLeft3, Nullable<byte> upLeft4, Nullable<byte> upLeft5, Nullable<byte> upLeft6, Nullable<byte> upLeft7, Nullable<byte> upLeft8, Nullable<byte> upRight1, Nullable<byte> upRight2, Nullable<byte> upRight3, Nullable<byte> upRight4, Nullable<byte> upRight5, Nullable<byte> upRight6, Nullable<byte> upRight7, Nullable<byte> upRight8, Nullable<byte> downLeft1, Nullable<byte> downLeft2, Nullable<byte> downLeft3, Nullable<byte> downLeft4, Nullable<byte> downLeft5, Nullable<byte> downLeft6, Nullable<byte> downLeft7, Nullable<byte> downLeft8, Nullable<byte> downRight1, Nullable<byte> downRight2, Nullable<byte> downRight3, Nullable<byte> downRight4, Nullable<byte> downRight5, Nullable<byte> downRight6, Nullable<byte> downRight7, Nullable<byte> downRight8, Nullable<byte> upLeftA, Nullable<byte> upLeftB, Nullable<byte> upLeftC, Nullable<byte> upLeftD, Nullable<byte> upLeftE, Nullable<byte> upRightA, Nullable<byte> upRightB, Nullable<byte> upRightC, Nullable<byte> upRightD, Nullable<byte> upRightE, Nullable<byte> downLeftA, Nullable<byte> downLeftB, Nullable<byte> downLeftC, Nullable<byte> downLeftD, Nullable<byte> downLeftE, Nullable<byte> downRightA, Nullable<byte> downRightB, Nullable<byte> downRightC, Nullable<byte> downRightD, Nullable<byte> downRightE, string upLeft1Dsc, string upLeft2Dsc, string upLeft3Dsc, string upLeft4Dsc, string upLeft5Dsc, string upLeft6Dsc, string upLeft7Dsc, string upLeft8Dsc, string upRight1Dsc, string upRight2Dsc, string upRight3Dsc, string upRight4Dsc, string upRight5Dsc, string upRight6Dsc, string upRight7Dsc, string upRight8Dsc, string downLeft1Dsc, string downLeft2Dsc, string downLeft3Dsc, string downLeft4Dsc, string downLeft5Dsc, string downLeft6Dsc, string downLeft7Dsc, string downLeft8Dsc, string downRight1Dsc, string downRight2Dsc, string downRight3Dsc, string downRight4Dsc, string downRight5Dsc, string downRight6Dsc, string downRight7Dsc, string downRight8Dsc, string upLeftADsc, string upLeftBDsc, string upLeftCDsc, string upLeftDDsc, string upLeftEDsc, string upRightADsc, string upRightBDsc, string upRightCDsc, string upRightDDsc, string upRightEDsc, string downLeftADsc, string downLeftBDsc, string downLeftCDsc, string downLeftDDsc, string downLeftEDsc, string downRightADsc, string downRightBDsc, string downRightCDsc, string downRightDDsc, string downRightEDsc, byte[] diagram, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var labStateIDParameter = labStateID.HasValue ?
                new ObjectParameter("LabStateID", labStateID) :
                new ObjectParameter("LabStateID", typeof(short));
    
            var labCenterIDParameter = labCenterID.HasValue ?
                new ObjectParameter("LabCenterID", labCenterID) :
                new ObjectParameter("LabCenterID", typeof(int));
    
            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(System.DateTime));
    
            var completeDateParameter = completeDate.HasValue ?
                new ObjectParameter("CompleteDate", completeDate) :
                new ObjectParameter("CompleteDate", typeof(System.DateTime));
    
            var factorSerialParameter = factorSerial.HasValue ?
                new ObjectParameter("FactorSerial", factorSerial) :
                new ObjectParameter("FactorSerial", typeof(int));
    
            var senderNameParameter = senderName != null ?
                new ObjectParameter("SenderName", senderName) :
                new ObjectParameter("SenderName", typeof(string));
    
            var receiverNameParameter = receiverName != null ?
                new ObjectParameter("ReceiverName", receiverName) :
                new ObjectParameter("ReceiverName", typeof(string));
    
            var servicePriceParameter = servicePrice.HasValue ?
                new ObjectParameter("ServicePrice", servicePrice) :
                new ObjectParameter("ServicePrice", typeof(double));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var besParameter = bes.HasValue ?
                new ObjectParameter("Bes", bes) :
                new ObjectParameter("Bes", typeof(double));
    
            var mandehParameter = mandeh.HasValue ?
                new ObjectParameter("Mandeh", mandeh) :
                new ObjectParameter("Mandeh", typeof(double));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(short));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var numbParameter = numb.HasValue ?
                new ObjectParameter("Numb", numb) :
                new ObjectParameter("Numb", typeof(double));
    
            var serviceNumbParameter = serviceNumb.HasValue ?
                new ObjectParameter("ServiceNumb", serviceNumb) :
                new ObjectParameter("ServiceNumb", typeof(byte));
    
            var labColorDParameter = labColorD.HasValue ?
                new ObjectParameter("LabColorD", labColorD) :
                new ObjectParameter("LabColorD", typeof(int));
    
            var labServiceNumbParameter = labServiceNumb.HasValue ?
                new ObjectParameter("LabServiceNumb", labServiceNumb) :
                new ObjectParameter("LabServiceNumb", typeof(short));
    
            var labJobIDParameter = labJobID.HasValue ?
                new ObjectParameter("LabJobID", labJobID) :
                new ObjectParameter("LabJobID", typeof(int));
    
            var upLeft1Parameter = upLeft1.HasValue ?
                new ObjectParameter("UpLeft1", upLeft1) :
                new ObjectParameter("UpLeft1", typeof(byte));
    
            var upLeft2Parameter = upLeft2.HasValue ?
                new ObjectParameter("UpLeft2", upLeft2) :
                new ObjectParameter("UpLeft2", typeof(byte));
    
            var upLeft3Parameter = upLeft3.HasValue ?
                new ObjectParameter("UpLeft3", upLeft3) :
                new ObjectParameter("UpLeft3", typeof(byte));
    
            var upLeft4Parameter = upLeft4.HasValue ?
                new ObjectParameter("UpLeft4", upLeft4) :
                new ObjectParameter("UpLeft4", typeof(byte));
    
            var upLeft5Parameter = upLeft5.HasValue ?
                new ObjectParameter("UpLeft5", upLeft5) :
                new ObjectParameter("UpLeft5", typeof(byte));
    
            var upLeft6Parameter = upLeft6.HasValue ?
                new ObjectParameter("UpLeft6", upLeft6) :
                new ObjectParameter("UpLeft6", typeof(byte));
    
            var upLeft7Parameter = upLeft7.HasValue ?
                new ObjectParameter("UpLeft7", upLeft7) :
                new ObjectParameter("UpLeft7", typeof(byte));
    
            var upLeft8Parameter = upLeft8.HasValue ?
                new ObjectParameter("UpLeft8", upLeft8) :
                new ObjectParameter("UpLeft8", typeof(byte));
    
            var upRight1Parameter = upRight1.HasValue ?
                new ObjectParameter("UpRight1", upRight1) :
                new ObjectParameter("UpRight1", typeof(byte));
    
            var upRight2Parameter = upRight2.HasValue ?
                new ObjectParameter("UpRight2", upRight2) :
                new ObjectParameter("UpRight2", typeof(byte));
    
            var upRight3Parameter = upRight3.HasValue ?
                new ObjectParameter("UpRight3", upRight3) :
                new ObjectParameter("UpRight3", typeof(byte));
    
            var upRight4Parameter = upRight4.HasValue ?
                new ObjectParameter("UpRight4", upRight4) :
                new ObjectParameter("UpRight4", typeof(byte));
    
            var upRight5Parameter = upRight5.HasValue ?
                new ObjectParameter("UpRight5", upRight5) :
                new ObjectParameter("UpRight5", typeof(byte));
    
            var upRight6Parameter = upRight6.HasValue ?
                new ObjectParameter("UpRight6", upRight6) :
                new ObjectParameter("UpRight6", typeof(byte));
    
            var upRight7Parameter = upRight7.HasValue ?
                new ObjectParameter("UpRight7", upRight7) :
                new ObjectParameter("UpRight7", typeof(byte));
    
            var upRight8Parameter = upRight8.HasValue ?
                new ObjectParameter("UpRight8", upRight8) :
                new ObjectParameter("UpRight8", typeof(byte));
    
            var downLeft1Parameter = downLeft1.HasValue ?
                new ObjectParameter("DownLeft1", downLeft1) :
                new ObjectParameter("DownLeft1", typeof(byte));
    
            var downLeft2Parameter = downLeft2.HasValue ?
                new ObjectParameter("DownLeft2", downLeft2) :
                new ObjectParameter("DownLeft2", typeof(byte));
    
            var downLeft3Parameter = downLeft3.HasValue ?
                new ObjectParameter("DownLeft3", downLeft3) :
                new ObjectParameter("DownLeft3", typeof(byte));
    
            var downLeft4Parameter = downLeft4.HasValue ?
                new ObjectParameter("DownLeft4", downLeft4) :
                new ObjectParameter("DownLeft4", typeof(byte));
    
            var downLeft5Parameter = downLeft5.HasValue ?
                new ObjectParameter("DownLeft5", downLeft5) :
                new ObjectParameter("DownLeft5", typeof(byte));
    
            var downLeft6Parameter = downLeft6.HasValue ?
                new ObjectParameter("DownLeft6", downLeft6) :
                new ObjectParameter("DownLeft6", typeof(byte));
    
            var downLeft7Parameter = downLeft7.HasValue ?
                new ObjectParameter("DownLeft7", downLeft7) :
                new ObjectParameter("DownLeft7", typeof(byte));
    
            var downLeft8Parameter = downLeft8.HasValue ?
                new ObjectParameter("DownLeft8", downLeft8) :
                new ObjectParameter("DownLeft8", typeof(byte));
    
            var downRight1Parameter = downRight1.HasValue ?
                new ObjectParameter("DownRight1", downRight1) :
                new ObjectParameter("DownRight1", typeof(byte));
    
            var downRight2Parameter = downRight2.HasValue ?
                new ObjectParameter("DownRight2", downRight2) :
                new ObjectParameter("DownRight2", typeof(byte));
    
            var downRight3Parameter = downRight3.HasValue ?
                new ObjectParameter("DownRight3", downRight3) :
                new ObjectParameter("DownRight3", typeof(byte));
    
            var downRight4Parameter = downRight4.HasValue ?
                new ObjectParameter("DownRight4", downRight4) :
                new ObjectParameter("DownRight4", typeof(byte));
    
            var downRight5Parameter = downRight5.HasValue ?
                new ObjectParameter("DownRight5", downRight5) :
                new ObjectParameter("DownRight5", typeof(byte));
    
            var downRight6Parameter = downRight6.HasValue ?
                new ObjectParameter("DownRight6", downRight6) :
                new ObjectParameter("DownRight6", typeof(byte));
    
            var downRight7Parameter = downRight7.HasValue ?
                new ObjectParameter("DownRight7", downRight7) :
                new ObjectParameter("DownRight7", typeof(byte));
    
            var downRight8Parameter = downRight8.HasValue ?
                new ObjectParameter("DownRight8", downRight8) :
                new ObjectParameter("DownRight8", typeof(byte));
    
            var upLeftAParameter = upLeftA.HasValue ?
                new ObjectParameter("UpLeftA", upLeftA) :
                new ObjectParameter("UpLeftA", typeof(byte));
    
            var upLeftBParameter = upLeftB.HasValue ?
                new ObjectParameter("UpLeftB", upLeftB) :
                new ObjectParameter("UpLeftB", typeof(byte));
    
            var upLeftCParameter = upLeftC.HasValue ?
                new ObjectParameter("UpLeftC", upLeftC) :
                new ObjectParameter("UpLeftC", typeof(byte));
    
            var upLeftDParameter = upLeftD.HasValue ?
                new ObjectParameter("UpLeftD", upLeftD) :
                new ObjectParameter("UpLeftD", typeof(byte));
    
            var upLeftEParameter = upLeftE.HasValue ?
                new ObjectParameter("UpLeftE", upLeftE) :
                new ObjectParameter("UpLeftE", typeof(byte));
    
            var upRightAParameter = upRightA.HasValue ?
                new ObjectParameter("UpRightA", upRightA) :
                new ObjectParameter("UpRightA", typeof(byte));
    
            var upRightBParameter = upRightB.HasValue ?
                new ObjectParameter("UpRightB", upRightB) :
                new ObjectParameter("UpRightB", typeof(byte));
    
            var upRightCParameter = upRightC.HasValue ?
                new ObjectParameter("UpRightC", upRightC) :
                new ObjectParameter("UpRightC", typeof(byte));
    
            var upRightDParameter = upRightD.HasValue ?
                new ObjectParameter("UpRightD", upRightD) :
                new ObjectParameter("UpRightD", typeof(byte));
    
            var upRightEParameter = upRightE.HasValue ?
                new ObjectParameter("UpRightE", upRightE) :
                new ObjectParameter("UpRightE", typeof(byte));
    
            var downLeftAParameter = downLeftA.HasValue ?
                new ObjectParameter("DownLeftA", downLeftA) :
                new ObjectParameter("DownLeftA", typeof(byte));
    
            var downLeftBParameter = downLeftB.HasValue ?
                new ObjectParameter("DownLeftB", downLeftB) :
                new ObjectParameter("DownLeftB", typeof(byte));
    
            var downLeftCParameter = downLeftC.HasValue ?
                new ObjectParameter("DownLeftC", downLeftC) :
                new ObjectParameter("DownLeftC", typeof(byte));
    
            var downLeftDParameter = downLeftD.HasValue ?
                new ObjectParameter("DownLeftD", downLeftD) :
                new ObjectParameter("DownLeftD", typeof(byte));
    
            var downLeftEParameter = downLeftE.HasValue ?
                new ObjectParameter("DownLeftE", downLeftE) :
                new ObjectParameter("DownLeftE", typeof(byte));
    
            var downRightAParameter = downRightA.HasValue ?
                new ObjectParameter("DownRightA", downRightA) :
                new ObjectParameter("DownRightA", typeof(byte));
    
            var downRightBParameter = downRightB.HasValue ?
                new ObjectParameter("DownRightB", downRightB) :
                new ObjectParameter("DownRightB", typeof(byte));
    
            var downRightCParameter = downRightC.HasValue ?
                new ObjectParameter("DownRightC", downRightC) :
                new ObjectParameter("DownRightC", typeof(byte));
    
            var downRightDParameter = downRightD.HasValue ?
                new ObjectParameter("DownRightD", downRightD) :
                new ObjectParameter("DownRightD", typeof(byte));
    
            var downRightEParameter = downRightE.HasValue ?
                new ObjectParameter("DownRightE", downRightE) :
                new ObjectParameter("DownRightE", typeof(byte));
    
            var upLeft1DscParameter = upLeft1Dsc != null ?
                new ObjectParameter("UpLeft1Dsc", upLeft1Dsc) :
                new ObjectParameter("UpLeft1Dsc", typeof(string));
    
            var upLeft2DscParameter = upLeft2Dsc != null ?
                new ObjectParameter("UpLeft2Dsc", upLeft2Dsc) :
                new ObjectParameter("UpLeft2Dsc", typeof(string));
    
            var upLeft3DscParameter = upLeft3Dsc != null ?
                new ObjectParameter("UpLeft3Dsc", upLeft3Dsc) :
                new ObjectParameter("UpLeft3Dsc", typeof(string));
    
            var upLeft4DscParameter = upLeft4Dsc != null ?
                new ObjectParameter("UpLeft4Dsc", upLeft4Dsc) :
                new ObjectParameter("UpLeft4Dsc", typeof(string));
    
            var upLeft5DscParameter = upLeft5Dsc != null ?
                new ObjectParameter("UpLeft5Dsc", upLeft5Dsc) :
                new ObjectParameter("UpLeft5Dsc", typeof(string));
    
            var upLeft6DscParameter = upLeft6Dsc != null ?
                new ObjectParameter("UpLeft6Dsc", upLeft6Dsc) :
                new ObjectParameter("UpLeft6Dsc", typeof(string));
    
            var upLeft7DscParameter = upLeft7Dsc != null ?
                new ObjectParameter("UpLeft7Dsc", upLeft7Dsc) :
                new ObjectParameter("UpLeft7Dsc", typeof(string));
    
            var upLeft8DscParameter = upLeft8Dsc != null ?
                new ObjectParameter("UpLeft8Dsc", upLeft8Dsc) :
                new ObjectParameter("UpLeft8Dsc", typeof(string));
    
            var upRight1DscParameter = upRight1Dsc != null ?
                new ObjectParameter("UpRight1Dsc", upRight1Dsc) :
                new ObjectParameter("UpRight1Dsc", typeof(string));
    
            var upRight2DscParameter = upRight2Dsc != null ?
                new ObjectParameter("UpRight2Dsc", upRight2Dsc) :
                new ObjectParameter("UpRight2Dsc", typeof(string));
    
            var upRight3DscParameter = upRight3Dsc != null ?
                new ObjectParameter("UpRight3Dsc", upRight3Dsc) :
                new ObjectParameter("UpRight3Dsc", typeof(string));
    
            var upRight4DscParameter = upRight4Dsc != null ?
                new ObjectParameter("UpRight4Dsc", upRight4Dsc) :
                new ObjectParameter("UpRight4Dsc", typeof(string));
    
            var upRight5DscParameter = upRight5Dsc != null ?
                new ObjectParameter("UpRight5Dsc", upRight5Dsc) :
                new ObjectParameter("UpRight5Dsc", typeof(string));
    
            var upRight6DscParameter = upRight6Dsc != null ?
                new ObjectParameter("UpRight6Dsc", upRight6Dsc) :
                new ObjectParameter("UpRight6Dsc", typeof(string));
    
            var upRight7DscParameter = upRight7Dsc != null ?
                new ObjectParameter("UpRight7Dsc", upRight7Dsc) :
                new ObjectParameter("UpRight7Dsc", typeof(string));
    
            var upRight8DscParameter = upRight8Dsc != null ?
                new ObjectParameter("UpRight8Dsc", upRight8Dsc) :
                new ObjectParameter("UpRight8Dsc", typeof(string));
    
            var downLeft1DscParameter = downLeft1Dsc != null ?
                new ObjectParameter("DownLeft1Dsc", downLeft1Dsc) :
                new ObjectParameter("DownLeft1Dsc", typeof(string));
    
            var downLeft2DscParameter = downLeft2Dsc != null ?
                new ObjectParameter("DownLeft2Dsc", downLeft2Dsc) :
                new ObjectParameter("DownLeft2Dsc", typeof(string));
    
            var downLeft3DscParameter = downLeft3Dsc != null ?
                new ObjectParameter("DownLeft3Dsc", downLeft3Dsc) :
                new ObjectParameter("DownLeft3Dsc", typeof(string));
    
            var downLeft4DscParameter = downLeft4Dsc != null ?
                new ObjectParameter("DownLeft4Dsc", downLeft4Dsc) :
                new ObjectParameter("DownLeft4Dsc", typeof(string));
    
            var downLeft5DscParameter = downLeft5Dsc != null ?
                new ObjectParameter("DownLeft5Dsc", downLeft5Dsc) :
                new ObjectParameter("DownLeft5Dsc", typeof(string));
    
            var downLeft6DscParameter = downLeft6Dsc != null ?
                new ObjectParameter("DownLeft6Dsc", downLeft6Dsc) :
                new ObjectParameter("DownLeft6Dsc", typeof(string));
    
            var downLeft7DscParameter = downLeft7Dsc != null ?
                new ObjectParameter("DownLeft7Dsc", downLeft7Dsc) :
                new ObjectParameter("DownLeft7Dsc", typeof(string));
    
            var downLeft8DscParameter = downLeft8Dsc != null ?
                new ObjectParameter("DownLeft8Dsc", downLeft8Dsc) :
                new ObjectParameter("DownLeft8Dsc", typeof(string));
    
            var downRight1DscParameter = downRight1Dsc != null ?
                new ObjectParameter("DownRight1Dsc", downRight1Dsc) :
                new ObjectParameter("DownRight1Dsc", typeof(string));
    
            var downRight2DscParameter = downRight2Dsc != null ?
                new ObjectParameter("DownRight2Dsc", downRight2Dsc) :
                new ObjectParameter("DownRight2Dsc", typeof(string));
    
            var downRight3DscParameter = downRight3Dsc != null ?
                new ObjectParameter("DownRight3Dsc", downRight3Dsc) :
                new ObjectParameter("DownRight3Dsc", typeof(string));
    
            var downRight4DscParameter = downRight4Dsc != null ?
                new ObjectParameter("DownRight4Dsc", downRight4Dsc) :
                new ObjectParameter("DownRight4Dsc", typeof(string));
    
            var downRight5DscParameter = downRight5Dsc != null ?
                new ObjectParameter("DownRight5Dsc", downRight5Dsc) :
                new ObjectParameter("DownRight5Dsc", typeof(string));
    
            var downRight6DscParameter = downRight6Dsc != null ?
                new ObjectParameter("DownRight6Dsc", downRight6Dsc) :
                new ObjectParameter("DownRight6Dsc", typeof(string));
    
            var downRight7DscParameter = downRight7Dsc != null ?
                new ObjectParameter("DownRight7Dsc", downRight7Dsc) :
                new ObjectParameter("DownRight7Dsc", typeof(string));
    
            var downRight8DscParameter = downRight8Dsc != null ?
                new ObjectParameter("DownRight8Dsc", downRight8Dsc) :
                new ObjectParameter("DownRight8Dsc", typeof(string));
    
            var upLeftADscParameter = upLeftADsc != null ?
                new ObjectParameter("UpLeftADsc", upLeftADsc) :
                new ObjectParameter("UpLeftADsc", typeof(string));
    
            var upLeftBDscParameter = upLeftBDsc != null ?
                new ObjectParameter("UpLeftBDsc", upLeftBDsc) :
                new ObjectParameter("UpLeftBDsc", typeof(string));
    
            var upLeftCDscParameter = upLeftCDsc != null ?
                new ObjectParameter("UpLeftCDsc", upLeftCDsc) :
                new ObjectParameter("UpLeftCDsc", typeof(string));
    
            var upLeftDDscParameter = upLeftDDsc != null ?
                new ObjectParameter("UpLeftDDsc", upLeftDDsc) :
                new ObjectParameter("UpLeftDDsc", typeof(string));
    
            var upLeftEDscParameter = upLeftEDsc != null ?
                new ObjectParameter("UpLeftEDsc", upLeftEDsc) :
                new ObjectParameter("UpLeftEDsc", typeof(string));
    
            var upRightADscParameter = upRightADsc != null ?
                new ObjectParameter("UpRightADsc", upRightADsc) :
                new ObjectParameter("UpRightADsc", typeof(string));
    
            var upRightBDscParameter = upRightBDsc != null ?
                new ObjectParameter("UpRightBDsc", upRightBDsc) :
                new ObjectParameter("UpRightBDsc", typeof(string));
    
            var upRightCDscParameter = upRightCDsc != null ?
                new ObjectParameter("UpRightCDsc", upRightCDsc) :
                new ObjectParameter("UpRightCDsc", typeof(string));
    
            var upRightDDscParameter = upRightDDsc != null ?
                new ObjectParameter("UpRightDDsc", upRightDDsc) :
                new ObjectParameter("UpRightDDsc", typeof(string));
    
            var upRightEDscParameter = upRightEDsc != null ?
                new ObjectParameter("UpRightEDsc", upRightEDsc) :
                new ObjectParameter("UpRightEDsc", typeof(string));
    
            var downLeftADscParameter = downLeftADsc != null ?
                new ObjectParameter("DownLeftADsc", downLeftADsc) :
                new ObjectParameter("DownLeftADsc", typeof(string));
    
            var downLeftBDscParameter = downLeftBDsc != null ?
                new ObjectParameter("DownLeftBDsc", downLeftBDsc) :
                new ObjectParameter("DownLeftBDsc", typeof(string));
    
            var downLeftCDscParameter = downLeftCDsc != null ?
                new ObjectParameter("DownLeftCDsc", downLeftCDsc) :
                new ObjectParameter("DownLeftCDsc", typeof(string));
    
            var downLeftDDscParameter = downLeftDDsc != null ?
                new ObjectParameter("DownLeftDDsc", downLeftDDsc) :
                new ObjectParameter("DownLeftDDsc", typeof(string));
    
            var downLeftEDscParameter = downLeftEDsc != null ?
                new ObjectParameter("DownLeftEDsc", downLeftEDsc) :
                new ObjectParameter("DownLeftEDsc", typeof(string));
    
            var downRightADscParameter = downRightADsc != null ?
                new ObjectParameter("DownRightADsc", downRightADsc) :
                new ObjectParameter("DownRightADsc", typeof(string));
    
            var downRightBDscParameter = downRightBDsc != null ?
                new ObjectParameter("DownRightBDsc", downRightBDsc) :
                new ObjectParameter("DownRightBDsc", typeof(string));
    
            var downRightCDscParameter = downRightCDsc != null ?
                new ObjectParameter("DownRightCDsc", downRightCDsc) :
                new ObjectParameter("DownRightCDsc", typeof(string));
    
            var downRightDDscParameter = downRightDDsc != null ?
                new ObjectParameter("DownRightDDsc", downRightDDsc) :
                new ObjectParameter("DownRightDDsc", typeof(string));
    
            var downRightEDscParameter = downRightEDsc != null ?
                new ObjectParameter("DownRightEDsc", downRightEDsc) :
                new ObjectParameter("DownRightEDsc", typeof(string));
    
            var diagramParameter = diagram != null ?
                new ObjectParameter("Diagram", diagram) :
                new ObjectParameter("Diagram", typeof(byte[]));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Laboratories_Update", iDParameter, registerDateParameter, labStateIDParameter, labCenterIDParameter, deliveryDateParameter, completeDateParameter, factorSerialParameter, senderNameParameter, receiverNameParameter, servicePriceParameter, takhParameter, bedParameter, besParameter, mandehParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, reasonIDParameter, departmentIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, medicalServiceIDParameter, numbParameter, serviceNumbParameter, labColorDParameter, labServiceNumbParameter, labJobIDParameter, upLeft1Parameter, upLeft2Parameter, upLeft3Parameter, upLeft4Parameter, upLeft5Parameter, upLeft6Parameter, upLeft7Parameter, upLeft8Parameter, upRight1Parameter, upRight2Parameter, upRight3Parameter, upRight4Parameter, upRight5Parameter, upRight6Parameter, upRight7Parameter, upRight8Parameter, downLeft1Parameter, downLeft2Parameter, downLeft3Parameter, downLeft4Parameter, downLeft5Parameter, downLeft6Parameter, downLeft7Parameter, downLeft8Parameter, downRight1Parameter, downRight2Parameter, downRight3Parameter, downRight4Parameter, downRight5Parameter, downRight6Parameter, downRight7Parameter, downRight8Parameter, upLeftAParameter, upLeftBParameter, upLeftCParameter, upLeftDParameter, upLeftEParameter, upRightAParameter, upRightBParameter, upRightCParameter, upRightDParameter, upRightEParameter, downLeftAParameter, downLeftBParameter, downLeftCParameter, downLeftDParameter, downLeftEParameter, downRightAParameter, downRightBParameter, downRightCParameter, downRightDParameter, downRightEParameter, upLeft1DscParameter, upLeft2DscParameter, upLeft3DscParameter, upLeft4DscParameter, upLeft5DscParameter, upLeft6DscParameter, upLeft7DscParameter, upLeft8DscParameter, upRight1DscParameter, upRight2DscParameter, upRight3DscParameter, upRight4DscParameter, upRight5DscParameter, upRight6DscParameter, upRight7DscParameter, upRight8DscParameter, downLeft1DscParameter, downLeft2DscParameter, downLeft3DscParameter, downLeft4DscParameter, downLeft5DscParameter, downLeft6DscParameter, downLeft7DscParameter, downLeft8DscParameter, downRight1DscParameter, downRight2DscParameter, downRight3DscParameter, downRight4DscParameter, downRight5DscParameter, downRight6DscParameter, downRight7DscParameter, downRight8DscParameter, upLeftADscParameter, upLeftBDscParameter, upLeftCDscParameter, upLeftDDscParameter, upLeftEDscParameter, upRightADscParameter, upRightBDscParameter, upRightCDscParameter, upRightDDscParameter, upRightEDscParameter, downLeftADscParameter, downLeftBDscParameter, downLeftCDscParameter, downLeftDDscParameter, downLeftEDscParameter, downRightADscParameter, downRightBDscParameter, downRightCDscParameter, downRightDDscParameter, downRightEDscParameter, diagramParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_LabRefrenceRanges_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabRefrenceRanges_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_LabRefrenceRanges_Insert(Nullable<short> labTestID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var labTestIDParameter = labTestID.HasValue ?
                new ObjectParameter("LabTestID", labTestID) :
                new ObjectParameter("LabTestID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabRefrenceRanges_Insert", labTestIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_LabRefrenceRanges_Select_Result> sp_LabRefrenceRanges_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabRefrenceRanges_Select_Result>("sp_LabRefrenceRanges_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_LabRefrenceRanges_SelectRow_Result> sp_LabRefrenceRanges_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabRefrenceRanges_SelectRow_Result>("sp_LabRefrenceRanges_SelectRow", iDParameter);
        }
    
        public virtual int sp_LabRefrenceRanges_Update(Nullable<int> iD, Nullable<short> labTestID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var labTestIDParameter = labTestID.HasValue ?
                new ObjectParameter("LabTestID", labTestID) :
                new ObjectParameter("LabTestID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabRefrenceRanges_Update", iDParameter, labTestIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_LabResults_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabResults_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_LabResults_Insert(Nullable<short> labTestID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var labTestIDParameter = labTestID.HasValue ?
                new ObjectParameter("LabTestID", labTestID) :
                new ObjectParameter("LabTestID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabResults_Insert", labTestIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_LabResults_Select_Result> sp_LabResults_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabResults_Select_Result>("sp_LabResults_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_LabResults_SelectRow_Result> sp_LabResults_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabResults_SelectRow_Result>("sp_LabResults_SelectRow", iDParameter);
        }
    
        public virtual int sp_LabResults_Update(Nullable<int> iD, Nullable<short> labTestID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var labTestIDParameter = labTestID.HasValue ?
                new ObjectParameter("LabTestID", labTestID) :
                new ObjectParameter("LabTestID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabResults_Update", iDParameter, labTestIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_LabServiceCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabServiceCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_LabServiceCategories_Insert(Nullable<short> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabServiceCategories_Insert", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_LabServiceCategories_Select_Result> sp_LabServiceCategories_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabServiceCategories_Select_Result>("sp_LabServiceCategories_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_LabServiceCategories_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabServiceCategories_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_LabServices_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabServices_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_LabServices_Insert(Nullable<int> labServiceCategoryID, Nullable<int> labServiceSubCategoryID, Nullable<int> labJobID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var labServiceCategoryIDParameter = labServiceCategoryID.HasValue ?
                new ObjectParameter("LabServiceCategoryID", labServiceCategoryID) :
                new ObjectParameter("LabServiceCategoryID", typeof(int));
    
            var labServiceSubCategoryIDParameter = labServiceSubCategoryID.HasValue ?
                new ObjectParameter("LabServiceSubCategoryID", labServiceSubCategoryID) :
                new ObjectParameter("LabServiceSubCategoryID", typeof(int));
    
            var labJobIDParameter = labJobID.HasValue ?
                new ObjectParameter("LabJobID", labJobID) :
                new ObjectParameter("LabJobID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabServices_Insert", labServiceCategoryIDParameter, labServiceSubCategoryIDParameter, labJobIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_LabServices_Select(Nullable<int> labServiceCategoryID, Nullable<int> labServiceSubCategoryID, string name, Nullable<int> active)
        {
            var labServiceCategoryIDParameter = labServiceCategoryID.HasValue ?
                new ObjectParameter("LabServiceCategoryID", labServiceCategoryID) :
                new ObjectParameter("LabServiceCategoryID", typeof(int));
    
            var labServiceSubCategoryIDParameter = labServiceSubCategoryID.HasValue ?
                new ObjectParameter("LabServiceSubCategoryID", labServiceSubCategoryID) :
                new ObjectParameter("LabServiceSubCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabServices_Select", labServiceCategoryIDParameter, labServiceSubCategoryIDParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_LabServices_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabServices_SelectRow", iDParameter);
        }
    
        public virtual int sp_LabServices_Update(Nullable<int> labServiceCategoryID, Nullable<int> labServiceSubCategoryID, Nullable<int> labJobID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var labServiceCategoryIDParameter = labServiceCategoryID.HasValue ?
                new ObjectParameter("LabServiceCategoryID", labServiceCategoryID) :
                new ObjectParameter("LabServiceCategoryID", typeof(int));
    
            var labServiceSubCategoryIDParameter = labServiceSubCategoryID.HasValue ?
                new ObjectParameter("LabServiceSubCategoryID", labServiceSubCategoryID) :
                new ObjectParameter("LabServiceSubCategoryID", typeof(int));
    
            var labJobIDParameter = labJobID.HasValue ?
                new ObjectParameter("LabJobID", labJobID) :
                new ObjectParameter("LabJobID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabServices_Update", labServiceCategoryIDParameter, labServiceSubCategoryIDParameter, labJobIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_LabServiceSubCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabServiceSubCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_LabServiceSubCategories_Insert(Nullable<int> labServiceCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var labServiceCategoryIDParameter = labServiceCategoryID.HasValue ?
                new ObjectParameter("LabServiceCategoryID", labServiceCategoryID) :
                new ObjectParameter("LabServiceCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabServiceSubCategories_Insert", labServiceCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_LabServiceSubCategories_Select_Result> sp_LabServiceSubCategories_Select(Nullable<int> labServiceCategoryID, string name, Nullable<int> active)
        {
            var labServiceCategoryIDParameter = labServiceCategoryID.HasValue ?
                new ObjectParameter("LabServiceCategoryID", labServiceCategoryID) :
                new ObjectParameter("LabServiceCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabServiceSubCategories_Select_Result>("sp_LabServiceSubCategories_Select", labServiceCategoryIDParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_LabServiceSubCategories_Update(Nullable<int> labServiceCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var labServiceCategoryIDParameter = labServiceCategoryID.HasValue ?
                new ObjectParameter("LabServiceCategoryID", labServiceCategoryID) :
                new ObjectParameter("LabServiceCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabServiceSubCategories_Update", labServiceCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_LabStates_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabStates_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_LabStates_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabStates_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_LabStates_Select_Result> sp_LabStates_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabStates_Select_Result>("sp_LabStates_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_LabStates_SelectRow_Result> sp_LabStates_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabStates_SelectRow_Result>("sp_LabStates_SelectRow", iDParameter);
        }
    
        public virtual int sp_LabStates_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabStates_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_LabSubGroups_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabSubGroups_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_LabSubGroups_Insert(Nullable<short> labGroupID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var labGroupIDParameter = labGroupID.HasValue ?
                new ObjectParameter("LabGroupID", labGroupID) :
                new ObjectParameter("LabGroupID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabSubGroups_Insert", labGroupIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_LabSubGroups_Select_Result> sp_LabSubGroups_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabSubGroups_Select_Result>("sp_LabSubGroups_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_LabSubGroups_SelectRow_Result> sp_LabSubGroups_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabSubGroups_SelectRow_Result>("sp_LabSubGroups_SelectRow", iDParameter);
        }
    
        public virtual int sp_LabSubGroups_Update(Nullable<int> iD, Nullable<short> labGroupID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var labGroupIDParameter = labGroupID.HasValue ?
                new ObjectParameter("LabGroupID", labGroupID) :
                new ObjectParameter("LabGroupID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabSubGroups_Update", iDParameter, labGroupIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_LabTests_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabTests_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_LabTests_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabTests_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_LabTests_Select_Result> sp_LabTests_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabTests_Select_Result>("sp_LabTests_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_LabTests_SelectRow_Result> sp_LabTests_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabTests_SelectRow_Result>("sp_LabTests_SelectRow", iDParameter);
        }
    
        public virtual int sp_LabTests_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabTests_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_LabTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_LabTypes_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabTypes_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_LabTypes_Select_Result> sp_LabTypes_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabTypes_Select_Result>("sp_LabTypes_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_LabTypes_SelectRow_Result> sp_LabTypes_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabTypes_SelectRow_Result>("sp_LabTypes_SelectRow", iDParameter);
        }
    
        public virtual int sp_LabTypes_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabTypes_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_LabUnits_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabUnits_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_LabUnits_Insert(Nullable<short> labTestID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var labTestIDParameter = labTestID.HasValue ?
                new ObjectParameter("LabTestID", labTestID) :
                new ObjectParameter("LabTestID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabUnits_Insert", labTestIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_LabUnits_Select_Result> sp_LabUnits_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabUnits_Select_Result>("sp_LabUnits_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_LabUnits_SelectRow_Result> sp_LabUnits_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LabUnits_SelectRow_Result>("sp_LabUnits_SelectRow", iDParameter);
        }
    
        public virtual int sp_LabUnits_Update(Nullable<int> iD, Nullable<short> labTestID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var labTestIDParameter = labTestID.HasValue ?
                new ObjectParameter("LabTestID", labTestID) :
                new ObjectParameter("LabTestID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LabUnits_Update", iDParameter, labTestIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_LastReception_Result> sp_LastReception(Nullable<int> patientID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> therapyID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LastReception_Result>("sp_LastReception", patientIDParameter, doctorIDParameter, assistantIDParameter, therapyIDParameter);
        }
    
        public virtual int sp_Locations_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Locations_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Locations_Insert(Nullable<byte> kind, Nullable<byte> mode, Nullable<byte> code, Nullable<short> countryID, Nullable<int> stateID, Nullable<int> cityID, Nullable<int> regionID, Nullable<int> streetID, Nullable<int> alleyID, string locationName, Nullable<int> userid)
        {
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(byte));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(byte));
    
            var codeParameter = code.HasValue ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(byte));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(short));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var regionIDParameter = regionID.HasValue ?
                new ObjectParameter("RegionID", regionID) :
                new ObjectParameter("RegionID", typeof(int));
    
            var streetIDParameter = streetID.HasValue ?
                new ObjectParameter("StreetID", streetID) :
                new ObjectParameter("StreetID", typeof(int));
    
            var alleyIDParameter = alleyID.HasValue ?
                new ObjectParameter("AlleyID", alleyID) :
                new ObjectParameter("AlleyID", typeof(int));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Locations_Insert", kindParameter, modeParameter, codeParameter, countryIDParameter, stateIDParameter, cityIDParameter, regionIDParameter, streetIDParameter, alleyIDParameter, locationNameParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Locations_Select_Result> sp_Locations_Select(Nullable<byte> kind, Nullable<short> countryID, Nullable<int> stateID, Nullable<int> cityID, Nullable<int> regionID, Nullable<int> streetID, Nullable<int> alleyID, string locationName)
        {
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(byte));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(short));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var regionIDParameter = regionID.HasValue ?
                new ObjectParameter("RegionID", regionID) :
                new ObjectParameter("RegionID", typeof(int));
    
            var streetIDParameter = streetID.HasValue ?
                new ObjectParameter("StreetID", streetID) :
                new ObjectParameter("StreetID", typeof(int));
    
            var alleyIDParameter = alleyID.HasValue ?
                new ObjectParameter("AlleyID", alleyID) :
                new ObjectParameter("AlleyID", typeof(int));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Locations_Select_Result>("sp_Locations_Select", kindParameter, countryIDParameter, stateIDParameter, cityIDParameter, regionIDParameter, streetIDParameter, alleyIDParameter, locationNameParameter);
        }
    
        public virtual ObjectResult<sp_Locations_SelectRow_Result> sp_Locations_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Locations_SelectRow_Result>("sp_Locations_SelectRow", iDParameter);
        }
    
        public virtual int sp_Locations_Update(Nullable<int> iD, string locationName, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Locations_Update", iDParameter, locationNameParameter, useridParameter);
        }
    
        public virtual int sp_Logins_Delete(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Logins_Delete", useridParameter);
        }
    
        public virtual int sp_Logins_Insert(Nullable<int> userID, string computerName, string iP)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Logins_Insert", userIDParameter, computerNameParameter, iPParameter);
        }
    
        public virtual ObjectResult<sp_Logins_Select_Result> sp_Logins_Select(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Logins_Select_Result>("sp_Logins_Select", userIDParameter);
        }
    
        public virtual int sp_MailSetting_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MailSetting_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_MailSetting_Insert(Nullable<int> userID, string mailAccountName, string emailAddress, string account, string password, string sMTPServer, Nullable<short> sMTPPort, string iMAPServer, Nullable<short> iMAPPort, string signatureMsg, Nullable<byte> autoSelectMsg, string msg1, string msg2, string msg3, string msg4, string msg5, string msg6, string msg7, string msg8, string msg9, string msg10)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var mailAccountNameParameter = mailAccountName != null ?
                new ObjectParameter("MailAccountName", mailAccountName) :
                new ObjectParameter("MailAccountName", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var accountParameter = account != null ?
                new ObjectParameter("Account", account) :
                new ObjectParameter("Account", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var sMTPServerParameter = sMTPServer != null ?
                new ObjectParameter("SMTPServer", sMTPServer) :
                new ObjectParameter("SMTPServer", typeof(string));
    
            var sMTPPortParameter = sMTPPort.HasValue ?
                new ObjectParameter("SMTPPort", sMTPPort) :
                new ObjectParameter("SMTPPort", typeof(short));
    
            var iMAPServerParameter = iMAPServer != null ?
                new ObjectParameter("IMAPServer", iMAPServer) :
                new ObjectParameter("IMAPServer", typeof(string));
    
            var iMAPPortParameter = iMAPPort.HasValue ?
                new ObjectParameter("IMAPPort", iMAPPort) :
                new ObjectParameter("IMAPPort", typeof(short));
    
            var signatureMsgParameter = signatureMsg != null ?
                new ObjectParameter("SignatureMsg", signatureMsg) :
                new ObjectParameter("SignatureMsg", typeof(string));
    
            var autoSelectMsgParameter = autoSelectMsg.HasValue ?
                new ObjectParameter("AutoSelectMsg", autoSelectMsg) :
                new ObjectParameter("AutoSelectMsg", typeof(byte));
    
            var msg1Parameter = msg1 != null ?
                new ObjectParameter("Msg1", msg1) :
                new ObjectParameter("Msg1", typeof(string));
    
            var msg2Parameter = msg2 != null ?
                new ObjectParameter("Msg2", msg2) :
                new ObjectParameter("Msg2", typeof(string));
    
            var msg3Parameter = msg3 != null ?
                new ObjectParameter("Msg3", msg3) :
                new ObjectParameter("Msg3", typeof(string));
    
            var msg4Parameter = msg4 != null ?
                new ObjectParameter("Msg4", msg4) :
                new ObjectParameter("Msg4", typeof(string));
    
            var msg5Parameter = msg5 != null ?
                new ObjectParameter("Msg5", msg5) :
                new ObjectParameter("Msg5", typeof(string));
    
            var msg6Parameter = msg6 != null ?
                new ObjectParameter("Msg6", msg6) :
                new ObjectParameter("Msg6", typeof(string));
    
            var msg7Parameter = msg7 != null ?
                new ObjectParameter("Msg7", msg7) :
                new ObjectParameter("Msg7", typeof(string));
    
            var msg8Parameter = msg8 != null ?
                new ObjectParameter("Msg8", msg8) :
                new ObjectParameter("Msg8", typeof(string));
    
            var msg9Parameter = msg9 != null ?
                new ObjectParameter("Msg9", msg9) :
                new ObjectParameter("Msg9", typeof(string));
    
            var msg10Parameter = msg10 != null ?
                new ObjectParameter("Msg10", msg10) :
                new ObjectParameter("Msg10", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MailSetting_Insert", userIDParameter, mailAccountNameParameter, emailAddressParameter, accountParameter, passwordParameter, sMTPServerParameter, sMTPPortParameter, iMAPServerParameter, iMAPPortParameter, signatureMsgParameter, autoSelectMsgParameter, msg1Parameter, msg2Parameter, msg3Parameter, msg4Parameter, msg5Parameter, msg6Parameter, msg7Parameter, msg8Parameter, msg9Parameter, msg10Parameter);
        }
    
        public virtual ObjectResult<sp_MailSetting_Select_Result> sp_MailSetting_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MailSetting_Select_Result>("sp_MailSetting_Select");
        }
    
        public virtual ObjectResult<sp_MailSetting_SelectRow_Result> sp_MailSetting_SelectRow(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MailSetting_SelectRow_Result>("sp_MailSetting_SelectRow", userIDParameter);
        }
    
        public virtual int sp_MailSetting_Update(Nullable<int> userID, string mailAccountName, string emailAddress, string account, string password, string sMTPServer, Nullable<short> sMTPPort, string iMAPServer, Nullable<short> iMAPPort, string signatureMsg, Nullable<byte> autoSelectMsg, string msg1, string msg2, string msg3, string msg4, string msg5, string msg6, string msg7, string msg8, string msg9, string msg10)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var mailAccountNameParameter = mailAccountName != null ?
                new ObjectParameter("MailAccountName", mailAccountName) :
                new ObjectParameter("MailAccountName", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var accountParameter = account != null ?
                new ObjectParameter("Account", account) :
                new ObjectParameter("Account", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var sMTPServerParameter = sMTPServer != null ?
                new ObjectParameter("SMTPServer", sMTPServer) :
                new ObjectParameter("SMTPServer", typeof(string));
    
            var sMTPPortParameter = sMTPPort.HasValue ?
                new ObjectParameter("SMTPPort", sMTPPort) :
                new ObjectParameter("SMTPPort", typeof(short));
    
            var iMAPServerParameter = iMAPServer != null ?
                new ObjectParameter("IMAPServer", iMAPServer) :
                new ObjectParameter("IMAPServer", typeof(string));
    
            var iMAPPortParameter = iMAPPort.HasValue ?
                new ObjectParameter("IMAPPort", iMAPPort) :
                new ObjectParameter("IMAPPort", typeof(short));
    
            var signatureMsgParameter = signatureMsg != null ?
                new ObjectParameter("SignatureMsg", signatureMsg) :
                new ObjectParameter("SignatureMsg", typeof(string));
    
            var autoSelectMsgParameter = autoSelectMsg.HasValue ?
                new ObjectParameter("AutoSelectMsg", autoSelectMsg) :
                new ObjectParameter("AutoSelectMsg", typeof(byte));
    
            var msg1Parameter = msg1 != null ?
                new ObjectParameter("Msg1", msg1) :
                new ObjectParameter("Msg1", typeof(string));
    
            var msg2Parameter = msg2 != null ?
                new ObjectParameter("Msg2", msg2) :
                new ObjectParameter("Msg2", typeof(string));
    
            var msg3Parameter = msg3 != null ?
                new ObjectParameter("Msg3", msg3) :
                new ObjectParameter("Msg3", typeof(string));
    
            var msg4Parameter = msg4 != null ?
                new ObjectParameter("Msg4", msg4) :
                new ObjectParameter("Msg4", typeof(string));
    
            var msg5Parameter = msg5 != null ?
                new ObjectParameter("Msg5", msg5) :
                new ObjectParameter("Msg5", typeof(string));
    
            var msg6Parameter = msg6 != null ?
                new ObjectParameter("Msg6", msg6) :
                new ObjectParameter("Msg6", typeof(string));
    
            var msg7Parameter = msg7 != null ?
                new ObjectParameter("Msg7", msg7) :
                new ObjectParameter("Msg7", typeof(string));
    
            var msg8Parameter = msg8 != null ?
                new ObjectParameter("Msg8", msg8) :
                new ObjectParameter("Msg8", typeof(string));
    
            var msg9Parameter = msg9 != null ?
                new ObjectParameter("Msg9", msg9) :
                new ObjectParameter("Msg9", typeof(string));
    
            var msg10Parameter = msg10 != null ?
                new ObjectParameter("Msg10", msg10) :
                new ObjectParameter("Msg10", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MailSetting_Update", userIDParameter, mailAccountNameParameter, emailAddressParameter, accountParameter, passwordParameter, sMTPServerParameter, sMTPPortParameter, iMAPServerParameter, iMAPPortParameter, signatureMsgParameter, autoSelectMsgParameter, msg1Parameter, msg2Parameter, msg3Parameter, msg4Parameter, msg5Parameter, msg6Parameter, msg7Parameter, msg8Parameter, msg9Parameter, msg10Parameter);
        }
    
        public virtual int sp_MarriageTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MarriageTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_MarriageTypes_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MarriageTypes_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_MarriageTypes_Select_Result> sp_MarriageTypes_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MarriageTypes_Select_Result>("sp_MarriageTypes_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_MarriageTypes_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MarriageTypes_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int Sp_MaxValue(string tableName, string fieldName, string whereScript)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var whereScriptParameter = whereScript != null ?
                new ObjectParameter("WhereScript", whereScript) :
                new ObjectParameter("WhereScript", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_MaxValue", tableNameParameter, fieldNameParameter, whereScriptParameter);
        }
    
        public virtual int sp_MedicalServices_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MedicalServices_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_MedicalServices_Insert(Nullable<int> departmentID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> bedID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> iD, string name, Nullable<int> bodyID, Nullable<int> insuranceID, Nullable<short> serviceTime, Nullable<double> servicePrice, Nullable<double> patientDarsad, Nullable<double> patientPrice, Nullable<double> doctorDarsad, Nullable<double> doctorPrice, Nullable<double> assistantDarsad, Nullable<double> assistantPrice, Nullable<double> insuranceDarsad, Nullable<double> insurancePrice, Nullable<double> marginPrice, Nullable<double> yaranehPrice, Nullable<double> mokamelPrice, Nullable<double> takh, Nullable<double> bed, Nullable<double> zaribJ, Nullable<double> zaribD, Nullable<double> zaribB, Nullable<double> zaribK, string code, Nullable<byte> serviceTypeID, string dsc, Nullable<bool> active, Nullable<bool> autoSelect, Nullable<bool> del, Nullable<bool> @lock, Nullable<int> userid)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var serviceTimeParameter = serviceTime.HasValue ?
                new ObjectParameter("ServiceTime", serviceTime) :
                new ObjectParameter("ServiceTime", typeof(short));
    
            var servicePriceParameter = servicePrice.HasValue ?
                new ObjectParameter("ServicePrice", servicePrice) :
                new ObjectParameter("ServicePrice", typeof(double));
    
            var patientDarsadParameter = patientDarsad.HasValue ?
                new ObjectParameter("PatientDarsad", patientDarsad) :
                new ObjectParameter("PatientDarsad", typeof(double));
    
            var patientPriceParameter = patientPrice.HasValue ?
                new ObjectParameter("PatientPrice", patientPrice) :
                new ObjectParameter("PatientPrice", typeof(double));
    
            var doctorDarsadParameter = doctorDarsad.HasValue ?
                new ObjectParameter("DoctorDarsad", doctorDarsad) :
                new ObjectParameter("DoctorDarsad", typeof(double));
    
            var doctorPriceParameter = doctorPrice.HasValue ?
                new ObjectParameter("DoctorPrice", doctorPrice) :
                new ObjectParameter("DoctorPrice", typeof(double));
    
            var assistantDarsadParameter = assistantDarsad.HasValue ?
                new ObjectParameter("AssistantDarsad", assistantDarsad) :
                new ObjectParameter("AssistantDarsad", typeof(double));
    
            var assistantPriceParameter = assistantPrice.HasValue ?
                new ObjectParameter("AssistantPrice", assistantPrice) :
                new ObjectParameter("AssistantPrice", typeof(double));
    
            var insuranceDarsadParameter = insuranceDarsad.HasValue ?
                new ObjectParameter("InsuranceDarsad", insuranceDarsad) :
                new ObjectParameter("InsuranceDarsad", typeof(double));
    
            var insurancePriceParameter = insurancePrice.HasValue ?
                new ObjectParameter("InsurancePrice", insurancePrice) :
                new ObjectParameter("InsurancePrice", typeof(double));
    
            var marginPriceParameter = marginPrice.HasValue ?
                new ObjectParameter("MarginPrice", marginPrice) :
                new ObjectParameter("MarginPrice", typeof(double));
    
            var yaranehPriceParameter = yaranehPrice.HasValue ?
                new ObjectParameter("YaranehPrice", yaranehPrice) :
                new ObjectParameter("YaranehPrice", typeof(double));
    
            var mokamelPriceParameter = mokamelPrice.HasValue ?
                new ObjectParameter("MokamelPrice", mokamelPrice) :
                new ObjectParameter("MokamelPrice", typeof(double));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var zaribJParameter = zaribJ.HasValue ?
                new ObjectParameter("ZaribJ", zaribJ) :
                new ObjectParameter("ZaribJ", typeof(double));
    
            var zaribDParameter = zaribD.HasValue ?
                new ObjectParameter("ZaribD", zaribD) :
                new ObjectParameter("ZaribD", typeof(double));
    
            var zaribBParameter = zaribB.HasValue ?
                new ObjectParameter("ZaribB", zaribB) :
                new ObjectParameter("ZaribB", typeof(double));
    
            var zaribKParameter = zaribK.HasValue ?
                new ObjectParameter("ZaribK", zaribK) :
                new ObjectParameter("ZaribK", typeof(double));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(byte));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var autoSelectParameter = autoSelect.HasValue ?
                new ObjectParameter("AutoSelect", autoSelect) :
                new ObjectParameter("AutoSelect", typeof(bool));
    
            var delParameter = del.HasValue ?
                new ObjectParameter("Del", del) :
                new ObjectParameter("Del", typeof(bool));
    
            var lockParameter = @lock.HasValue ?
                new ObjectParameter("Lock", @lock) :
                new ObjectParameter("Lock", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MedicalServices_Insert", departmentIDParameter, doctorIDParameter, assistantIDParameter, bedIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, iDParameter, nameParameter, bodyIDParameter, insuranceIDParameter, serviceTimeParameter, servicePriceParameter, patientDarsadParameter, patientPriceParameter, doctorDarsadParameter, doctorPriceParameter, assistantDarsadParameter, assistantPriceParameter, insuranceDarsadParameter, insurancePriceParameter, marginPriceParameter, yaranehPriceParameter, mokamelPriceParameter, takhParameter, bedParameter, zaribJParameter, zaribDParameter, zaribBParameter, zaribKParameter, codeParameter, serviceTypeIDParameter, dscParameter, activeParameter, autoSelectParameter, delParameter, lockParameter, useridParameter);
        }
    
        public virtual int sp_MedicalServices_MiniUpdate(Nullable<int> therapyID, Nullable<int> iD, Nullable<bool> autoSelect)
        {
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var autoSelectParameter = autoSelect.HasValue ?
                new ObjectParameter("AutoSelect", autoSelect) :
                new ObjectParameter("AutoSelect", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MedicalServices_MiniUpdate", therapyIDParameter, iDParameter, autoSelectParameter);
        }
    
        public virtual ObjectResult<sp_MedicalServices_Select_Result> sp_MedicalServices_Select(Nullable<int> departmentID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> bedID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> bodyID, Nullable<int> insuranceID, string name, string dsc, Nullable<int> active)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MedicalServices_Select_Result>("sp_MedicalServices_Select", departmentIDParameter, doctorIDParameter, assistantIDParameter, bedIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, bodyIDParameter, insuranceIDParameter, nameParameter, dscParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_MedicalServices_SelectRow_Result> sp_MedicalServices_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MedicalServices_SelectRow_Result>("sp_MedicalServices_SelectRow", iDParameter);
        }
    
        public virtual int sp_MedicalServices_Update(Nullable<int> departmentID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> bedID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> iD, string name, Nullable<int> bodyID, Nullable<int> insuranceID, Nullable<short> serviceTime, Nullable<double> servicePrice, Nullable<double> patientDarsad, Nullable<double> patientPrice, Nullable<double> doctorDarsad, Nullable<double> doctorPrice, Nullable<double> assistantDarsad, Nullable<double> assistantPrice, Nullable<double> insuranceDarsad, Nullable<double> insurancePrice, Nullable<double> marginPrice, Nullable<double> yaranehPrice, Nullable<double> mokamelPrice, Nullable<double> takh, Nullable<double> bed, Nullable<double> zaribJ, Nullable<double> zaribD, Nullable<double> zaribB, Nullable<double> zaribK, string code, Nullable<byte> serviceTypeID, string dsc, Nullable<bool> active, Nullable<bool> autoSelect, Nullable<bool> del, Nullable<bool> @lock, Nullable<int> userid)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var serviceTimeParameter = serviceTime.HasValue ?
                new ObjectParameter("ServiceTime", serviceTime) :
                new ObjectParameter("ServiceTime", typeof(short));
    
            var servicePriceParameter = servicePrice.HasValue ?
                new ObjectParameter("ServicePrice", servicePrice) :
                new ObjectParameter("ServicePrice", typeof(double));
    
            var patientDarsadParameter = patientDarsad.HasValue ?
                new ObjectParameter("PatientDarsad", patientDarsad) :
                new ObjectParameter("PatientDarsad", typeof(double));
    
            var patientPriceParameter = patientPrice.HasValue ?
                new ObjectParameter("PatientPrice", patientPrice) :
                new ObjectParameter("PatientPrice", typeof(double));
    
            var doctorDarsadParameter = doctorDarsad.HasValue ?
                new ObjectParameter("DoctorDarsad", doctorDarsad) :
                new ObjectParameter("DoctorDarsad", typeof(double));
    
            var doctorPriceParameter = doctorPrice.HasValue ?
                new ObjectParameter("DoctorPrice", doctorPrice) :
                new ObjectParameter("DoctorPrice", typeof(double));
    
            var assistantDarsadParameter = assistantDarsad.HasValue ?
                new ObjectParameter("AssistantDarsad", assistantDarsad) :
                new ObjectParameter("AssistantDarsad", typeof(double));
    
            var assistantPriceParameter = assistantPrice.HasValue ?
                new ObjectParameter("AssistantPrice", assistantPrice) :
                new ObjectParameter("AssistantPrice", typeof(double));
    
            var insuranceDarsadParameter = insuranceDarsad.HasValue ?
                new ObjectParameter("InsuranceDarsad", insuranceDarsad) :
                new ObjectParameter("InsuranceDarsad", typeof(double));
    
            var insurancePriceParameter = insurancePrice.HasValue ?
                new ObjectParameter("InsurancePrice", insurancePrice) :
                new ObjectParameter("InsurancePrice", typeof(double));
    
            var marginPriceParameter = marginPrice.HasValue ?
                new ObjectParameter("MarginPrice", marginPrice) :
                new ObjectParameter("MarginPrice", typeof(double));
    
            var yaranehPriceParameter = yaranehPrice.HasValue ?
                new ObjectParameter("YaranehPrice", yaranehPrice) :
                new ObjectParameter("YaranehPrice", typeof(double));
    
            var mokamelPriceParameter = mokamelPrice.HasValue ?
                new ObjectParameter("MokamelPrice", mokamelPrice) :
                new ObjectParameter("MokamelPrice", typeof(double));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var zaribJParameter = zaribJ.HasValue ?
                new ObjectParameter("ZaribJ", zaribJ) :
                new ObjectParameter("ZaribJ", typeof(double));
    
            var zaribDParameter = zaribD.HasValue ?
                new ObjectParameter("ZaribD", zaribD) :
                new ObjectParameter("ZaribD", typeof(double));
    
            var zaribBParameter = zaribB.HasValue ?
                new ObjectParameter("ZaribB", zaribB) :
                new ObjectParameter("ZaribB", typeof(double));
    
            var zaribKParameter = zaribK.HasValue ?
                new ObjectParameter("ZaribK", zaribK) :
                new ObjectParameter("ZaribK", typeof(double));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(byte));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var autoSelectParameter = autoSelect.HasValue ?
                new ObjectParameter("AutoSelect", autoSelect) :
                new ObjectParameter("AutoSelect", typeof(bool));
    
            var delParameter = del.HasValue ?
                new ObjectParameter("Del", del) :
                new ObjectParameter("Del", typeof(bool));
    
            var lockParameter = @lock.HasValue ?
                new ObjectParameter("Lock", @lock) :
                new ObjectParameter("Lock", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MedicalServices_Update", departmentIDParameter, doctorIDParameter, assistantIDParameter, bedIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, iDParameter, nameParameter, bodyIDParameter, insuranceIDParameter, serviceTimeParameter, servicePriceParameter, patientDarsadParameter, patientPriceParameter, doctorDarsadParameter, doctorPriceParameter, assistantDarsadParameter, assistantPriceParameter, insuranceDarsadParameter, insurancePriceParameter, marginPriceParameter, yaranehPriceParameter, mokamelPriceParameter, takhParameter, bedParameter, zaribJParameter, zaribDParameter, zaribBParameter, zaribKParameter, codeParameter, serviceTypeIDParameter, dscParameter, activeParameter, autoSelectParameter, delParameter, lockParameter, useridParameter);
        }
    
        public virtual int sp_MessageTypeCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MessageTypeCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_MessageTypeCategories_Insert(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MessageTypeCategories_Insert", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_MessageTypeCategories_Select_Result> sp_MessageTypeCategories_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MessageTypeCategories_Select_Result>("sp_MessageTypeCategories_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_MessageTypeCategories_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MessageTypeCategories_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_MessageTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MessageTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_MessageTypes_Insert(Nullable<int> messageTypeCategoryID, Nullable<int> messageTypeSubCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var messageTypeCategoryIDParameter = messageTypeCategoryID.HasValue ?
                new ObjectParameter("MessageTypeCategoryID", messageTypeCategoryID) :
                new ObjectParameter("MessageTypeCategoryID", typeof(int));
    
            var messageTypeSubCategoryIDParameter = messageTypeSubCategoryID.HasValue ?
                new ObjectParameter("MessageTypeSubCategoryID", messageTypeSubCategoryID) :
                new ObjectParameter("MessageTypeSubCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MessageTypes_Insert", messageTypeCategoryIDParameter, messageTypeSubCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_MessageTypes_Select_Result> sp_MessageTypes_Select(Nullable<int> messageTypeCategoryID, Nullable<int> messageTypeSubCategoryID, string name, string dsc, Nullable<int> active)
        {
            var messageTypeCategoryIDParameter = messageTypeCategoryID.HasValue ?
                new ObjectParameter("MessageTypeCategoryID", messageTypeCategoryID) :
                new ObjectParameter("MessageTypeCategoryID", typeof(int));
    
            var messageTypeSubCategoryIDParameter = messageTypeSubCategoryID.HasValue ?
                new ObjectParameter("MessageTypeSubCategoryID", messageTypeSubCategoryID) :
                new ObjectParameter("MessageTypeSubCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MessageTypes_Select_Result>("sp_MessageTypes_Select", messageTypeCategoryIDParameter, messageTypeSubCategoryIDParameter, nameParameter, dscParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_MessageTypes_SelectRow_Result> sp_MessageTypes_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MessageTypes_SelectRow_Result>("sp_MessageTypes_SelectRow", iDParameter);
        }
    
        public virtual int sp_MessageTypes_Update(Nullable<int> messageTypeCategoryID, Nullable<int> messageTypeSubCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var messageTypeCategoryIDParameter = messageTypeCategoryID.HasValue ?
                new ObjectParameter("MessageTypeCategoryID", messageTypeCategoryID) :
                new ObjectParameter("MessageTypeCategoryID", typeof(int));
    
            var messageTypeSubCategoryIDParameter = messageTypeSubCategoryID.HasValue ?
                new ObjectParameter("MessageTypeSubCategoryID", messageTypeSubCategoryID) :
                new ObjectParameter("MessageTypeSubCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MessageTypes_Update", messageTypeCategoryIDParameter, messageTypeSubCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_MessageTypeSubCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MessageTypeSubCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_MessageTypeSubCategories_Insert(Nullable<int> messageTypeCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var messageTypeCategoryIDParameter = messageTypeCategoryID.HasValue ?
                new ObjectParameter("MessageTypeCategoryID", messageTypeCategoryID) :
                new ObjectParameter("MessageTypeCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MessageTypeSubCategories_Insert", messageTypeCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_MessageTypeSubCategories_Select_Result> sp_MessageTypeSubCategories_Select(Nullable<int> messageTypeCategoryID, string name, Nullable<int> active)
        {
            var messageTypeCategoryIDParameter = messageTypeCategoryID.HasValue ?
                new ObjectParameter("MessageTypeCategoryID", messageTypeCategoryID) :
                new ObjectParameter("MessageTypeCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MessageTypeSubCategories_Select_Result>("sp_MessageTypeSubCategories_Select", messageTypeCategoryIDParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_MessageTypeSubCategories_Update(Nullable<int> iD, Nullable<int> messageTypeCategoryID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var messageTypeCategoryIDParameter = messageTypeCategoryID.HasValue ?
                new ObjectParameter("MessageTypeCategoryID", messageTypeCategoryID) :
                new ObjectParameter("MessageTypeCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MessageTypeSubCategories_Update", iDParameter, messageTypeCategoryIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int SP_MinValue(string tableName, string fieldName, string whereScript)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var whereScriptParameter = whereScript != null ?
                new ObjectParameter("WhereScript", whereScript) :
                new ObjectParameter("WhereScript", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MinValue", tableNameParameter, fieldNameParameter, whereScriptParameter);
        }
    
        public virtual ObjectResult<sp_Moein_Bedehkaran_Result> sp_Moein_Bedehkaran(Nullable<int> customerGroupID, Nullable<int> customerSubGroupID, Nullable<int> customerID, Nullable<int> moeinCategoryID, Nullable<int> moeinSubCategoryID, Nullable<int> moeinTypeID, Nullable<double> bed_Start, Nullable<double> bed_End, Nullable<double> bes_Start, Nullable<double> bes_End, string dsc, string moein_date_Start, string moein_date_End, string moein_Time_Start, string moein_Time_End, Nullable<byte> srcType, Nullable<int> srcID, Nullable<byte> tasviye, Nullable<int> rolid, Nullable<int> userid)
        {
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(int));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var moeinCategoryIDParameter = moeinCategoryID.HasValue ?
                new ObjectParameter("MoeinCategoryID", moeinCategoryID) :
                new ObjectParameter("MoeinCategoryID", typeof(int));
    
            var moeinSubCategoryIDParameter = moeinSubCategoryID.HasValue ?
                new ObjectParameter("MoeinSubCategoryID", moeinSubCategoryID) :
                new ObjectParameter("MoeinSubCategoryID", typeof(int));
    
            var moeinTypeIDParameter = moeinTypeID.HasValue ?
                new ObjectParameter("MoeinTypeID", moeinTypeID) :
                new ObjectParameter("MoeinTypeID", typeof(int));
    
            var bed_StartParameter = bed_Start.HasValue ?
                new ObjectParameter("Bed_Start", bed_Start) :
                new ObjectParameter("Bed_Start", typeof(double));
    
            var bed_EndParameter = bed_End.HasValue ?
                new ObjectParameter("Bed_End", bed_End) :
                new ObjectParameter("Bed_End", typeof(double));
    
            var bes_StartParameter = bes_Start.HasValue ?
                new ObjectParameter("Bes_Start", bes_Start) :
                new ObjectParameter("Bes_Start", typeof(double));
    
            var bes_EndParameter = bes_End.HasValue ?
                new ObjectParameter("Bes_End", bes_End) :
                new ObjectParameter("Bes_End", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var moein_date_StartParameter = moein_date_Start != null ?
                new ObjectParameter("Moein_date_Start", moein_date_Start) :
                new ObjectParameter("Moein_date_Start", typeof(string));
    
            var moein_date_EndParameter = moein_date_End != null ?
                new ObjectParameter("Moein_date_End", moein_date_End) :
                new ObjectParameter("Moein_date_End", typeof(string));
    
            var moein_Time_StartParameter = moein_Time_Start != null ?
                new ObjectParameter("Moein_Time_Start", moein_Time_Start) :
                new ObjectParameter("Moein_Time_Start", typeof(string));
    
            var moein_Time_EndParameter = moein_Time_End != null ?
                new ObjectParameter("Moein_Time_End", moein_Time_End) :
                new ObjectParameter("Moein_Time_End", typeof(string));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var srcIDParameter = srcID.HasValue ?
                new ObjectParameter("SrcID", srcID) :
                new ObjectParameter("SrcID", typeof(int));
    
            var tasviyeParameter = tasviye.HasValue ?
                new ObjectParameter("Tasviye", tasviye) :
                new ObjectParameter("Tasviye", typeof(byte));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Moein_Bedehkaran_Result>("sp_Moein_Bedehkaran", customerGroupIDParameter, customerSubGroupIDParameter, customerIDParameter, moeinCategoryIDParameter, moeinSubCategoryIDParameter, moeinTypeIDParameter, bed_StartParameter, bed_EndParameter, bes_StartParameter, bes_EndParameter, dscParameter, moein_date_StartParameter, moein_date_EndParameter, moein_Time_StartParameter, moein_Time_EndParameter, srcTypeParameter, srcIDParameter, tasviyeParameter, rolidParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Moein_Bestankaran_Result> sp_Moein_Bestankaran(Nullable<int> customerGroupID, Nullable<int> customerSubGroupID, Nullable<int> customerID, Nullable<int> moeinCategoryID, Nullable<int> moeinSubCategoryID, Nullable<int> moeinTypeID, Nullable<double> bed_Start, Nullable<double> bed_End, Nullable<double> bes_Start, Nullable<double> bes_End, string dsc, string moein_date_Start, string moein_date_End, string moein_Time_Start, string moein_Time_End, Nullable<byte> srcType, Nullable<int> srcID, Nullable<byte> tasviye, Nullable<int> rolid, Nullable<int> userid)
        {
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(int));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var moeinCategoryIDParameter = moeinCategoryID.HasValue ?
                new ObjectParameter("MoeinCategoryID", moeinCategoryID) :
                new ObjectParameter("MoeinCategoryID", typeof(int));
    
            var moeinSubCategoryIDParameter = moeinSubCategoryID.HasValue ?
                new ObjectParameter("MoeinSubCategoryID", moeinSubCategoryID) :
                new ObjectParameter("MoeinSubCategoryID", typeof(int));
    
            var moeinTypeIDParameter = moeinTypeID.HasValue ?
                new ObjectParameter("MoeinTypeID", moeinTypeID) :
                new ObjectParameter("MoeinTypeID", typeof(int));
    
            var bed_StartParameter = bed_Start.HasValue ?
                new ObjectParameter("Bed_Start", bed_Start) :
                new ObjectParameter("Bed_Start", typeof(double));
    
            var bed_EndParameter = bed_End.HasValue ?
                new ObjectParameter("Bed_End", bed_End) :
                new ObjectParameter("Bed_End", typeof(double));
    
            var bes_StartParameter = bes_Start.HasValue ?
                new ObjectParameter("Bes_Start", bes_Start) :
                new ObjectParameter("Bes_Start", typeof(double));
    
            var bes_EndParameter = bes_End.HasValue ?
                new ObjectParameter("Bes_End", bes_End) :
                new ObjectParameter("Bes_End", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var moein_date_StartParameter = moein_date_Start != null ?
                new ObjectParameter("Moein_date_Start", moein_date_Start) :
                new ObjectParameter("Moein_date_Start", typeof(string));
    
            var moein_date_EndParameter = moein_date_End != null ?
                new ObjectParameter("Moein_date_End", moein_date_End) :
                new ObjectParameter("Moein_date_End", typeof(string));
    
            var moein_Time_StartParameter = moein_Time_Start != null ?
                new ObjectParameter("Moein_Time_Start", moein_Time_Start) :
                new ObjectParameter("Moein_Time_Start", typeof(string));
    
            var moein_Time_EndParameter = moein_Time_End != null ?
                new ObjectParameter("Moein_Time_End", moein_Time_End) :
                new ObjectParameter("Moein_Time_End", typeof(string));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var srcIDParameter = srcID.HasValue ?
                new ObjectParameter("SrcID", srcID) :
                new ObjectParameter("SrcID", typeof(int));
    
            var tasviyeParameter = tasviye.HasValue ?
                new ObjectParameter("Tasviye", tasviye) :
                new ObjectParameter("Tasviye", typeof(byte));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Moein_Bestankaran_Result>("sp_Moein_Bestankaran", customerGroupIDParameter, customerSubGroupIDParameter, customerIDParameter, moeinCategoryIDParameter, moeinSubCategoryIDParameter, moeinTypeIDParameter, bed_StartParameter, bed_EndParameter, bes_StartParameter, bes_EndParameter, dscParameter, moein_date_StartParameter, moein_date_EndParameter, moein_Time_StartParameter, moein_Time_EndParameter, srcTypeParameter, srcIDParameter, tasviyeParameter, rolidParameter, useridParameter);
        }
    
        public virtual int sp_Moein_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Moein_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Moein_DeleteAll(Nullable<int> iD_Start, Nullable<int> iD_End, Nullable<int> customerGroupID, Nullable<int> customerSubGroupID, Nullable<int> customerID, Nullable<short> cashID, Nullable<int> moeinCategoryID, Nullable<int> moeinSubCategoryID, Nullable<int> moeinTypeID, Nullable<double> bed_Start, Nullable<double> bed_End, Nullable<double> bes_Start, Nullable<double> bes_End, string dsc, string moein_date_Start, string moein_date_End, string moein_Time_Start, string moein_Time_End, Nullable<byte> srcType, Nullable<int> srcID, Nullable<byte> tasviye, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange, Nullable<int> delUserid)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(int));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var cashIDParameter = cashID.HasValue ?
                new ObjectParameter("CashID", cashID) :
                new ObjectParameter("CashID", typeof(short));
    
            var moeinCategoryIDParameter = moeinCategoryID.HasValue ?
                new ObjectParameter("MoeinCategoryID", moeinCategoryID) :
                new ObjectParameter("MoeinCategoryID", typeof(int));
    
            var moeinSubCategoryIDParameter = moeinSubCategoryID.HasValue ?
                new ObjectParameter("MoeinSubCategoryID", moeinSubCategoryID) :
                new ObjectParameter("MoeinSubCategoryID", typeof(int));
    
            var moeinTypeIDParameter = moeinTypeID.HasValue ?
                new ObjectParameter("MoeinTypeID", moeinTypeID) :
                new ObjectParameter("MoeinTypeID", typeof(int));
    
            var bed_StartParameter = bed_Start.HasValue ?
                new ObjectParameter("Bed_Start", bed_Start) :
                new ObjectParameter("Bed_Start", typeof(double));
    
            var bed_EndParameter = bed_End.HasValue ?
                new ObjectParameter("Bed_End", bed_End) :
                new ObjectParameter("Bed_End", typeof(double));
    
            var bes_StartParameter = bes_Start.HasValue ?
                new ObjectParameter("Bes_Start", bes_Start) :
                new ObjectParameter("Bes_Start", typeof(double));
    
            var bes_EndParameter = bes_End.HasValue ?
                new ObjectParameter("Bes_End", bes_End) :
                new ObjectParameter("Bes_End", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var moein_date_StartParameter = moein_date_Start != null ?
                new ObjectParameter("Moein_date_Start", moein_date_Start) :
                new ObjectParameter("Moein_date_Start", typeof(string));
    
            var moein_date_EndParameter = moein_date_End != null ?
                new ObjectParameter("Moein_date_End", moein_date_End) :
                new ObjectParameter("Moein_date_End", typeof(string));
    
            var moein_Time_StartParameter = moein_Time_Start != null ?
                new ObjectParameter("Moein_Time_Start", moein_Time_Start) :
                new ObjectParameter("Moein_Time_Start", typeof(string));
    
            var moein_Time_EndParameter = moein_Time_End != null ?
                new ObjectParameter("Moein_Time_End", moein_Time_End) :
                new ObjectParameter("Moein_Time_End", typeof(string));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var srcIDParameter = srcID.HasValue ?
                new ObjectParameter("SrcID", srcID) :
                new ObjectParameter("SrcID", typeof(int));
    
            var tasviyeParameter = tasviye.HasValue ?
                new ObjectParameter("Tasviye", tasviye) :
                new ObjectParameter("Tasviye", typeof(byte));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            var delUseridParameter = delUserid.HasValue ?
                new ObjectParameter("DelUserid", delUserid) :
                new ObjectParameter("DelUserid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Moein_DeleteAll", iD_StartParameter, iD_EndParameter, customerGroupIDParameter, customerSubGroupIDParameter, customerIDParameter, cashIDParameter, moeinCategoryIDParameter, moeinSubCategoryIDParameter, moeinTypeIDParameter, bed_StartParameter, bed_EndParameter, bes_StartParameter, bes_EndParameter, dscParameter, moein_date_StartParameter, moein_date_EndParameter, moein_Time_StartParameter, moein_Time_EndParameter, srcTypeParameter, srcIDParameter, tasviyeParameter, rolidParameter, useridParameter, topRangeParameter, delUseridParameter);
        }
    
        public virtual int sp_Moein_Insert(Nullable<int> customerGroupID, Nullable<int> customerSubGroupID, Nullable<int> customerID, Nullable<short> cashID, Nullable<int> moeinCategoryID, Nullable<int> moeinSubCategoryID, Nullable<int> moeinTypeID, Nullable<byte> srcType, Nullable<int> srcID, Nullable<bool> tasviye, Nullable<double> bed, Nullable<double> bes, string dsc, Nullable<System.DateTime> moein_date, Nullable<int> noteID, Nullable<int> rolid, Nullable<int> userid)
        {
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(int));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var cashIDParameter = cashID.HasValue ?
                new ObjectParameter("CashID", cashID) :
                new ObjectParameter("CashID", typeof(short));
    
            var moeinCategoryIDParameter = moeinCategoryID.HasValue ?
                new ObjectParameter("MoeinCategoryID", moeinCategoryID) :
                new ObjectParameter("MoeinCategoryID", typeof(int));
    
            var moeinSubCategoryIDParameter = moeinSubCategoryID.HasValue ?
                new ObjectParameter("MoeinSubCategoryID", moeinSubCategoryID) :
                new ObjectParameter("MoeinSubCategoryID", typeof(int));
    
            var moeinTypeIDParameter = moeinTypeID.HasValue ?
                new ObjectParameter("MoeinTypeID", moeinTypeID) :
                new ObjectParameter("MoeinTypeID", typeof(int));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var srcIDParameter = srcID.HasValue ?
                new ObjectParameter("SrcID", srcID) :
                new ObjectParameter("SrcID", typeof(int));
    
            var tasviyeParameter = tasviye.HasValue ?
                new ObjectParameter("Tasviye", tasviye) :
                new ObjectParameter("Tasviye", typeof(bool));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var besParameter = bes.HasValue ?
                new ObjectParameter("Bes", bes) :
                new ObjectParameter("Bes", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var moein_dateParameter = moein_date.HasValue ?
                new ObjectParameter("Moein_date", moein_date) :
                new ObjectParameter("Moein_date", typeof(System.DateTime));
    
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Moein_Insert", customerGroupIDParameter, customerSubGroupIDParameter, customerIDParameter, cashIDParameter, moeinCategoryIDParameter, moeinSubCategoryIDParameter, moeinTypeIDParameter, srcTypeParameter, srcIDParameter, tasviyeParameter, bedParameter, besParameter, dscParameter, moein_dateParameter, noteIDParameter, rolidParameter, useridParameter);
        }
    
        public virtual int sp_Moein_Select(Nullable<int> iD_Start, Nullable<int> iD_End, Nullable<int> customerGroupID, Nullable<int> customerSubGroupID, Nullable<int> customerID, Nullable<short> cashID, Nullable<int> moeinCategoryID, Nullable<int> moeinSubCategoryID, Nullable<int> moeinTypeID, Nullable<double> bed_Start, Nullable<double> bed_End, Nullable<double> bes_Start, Nullable<double> bes_End, string dsc, string moein_date_Start, string moein_date_End, string moein_Time_Start, string moein_Time_End, Nullable<byte> srcType, Nullable<int> srcID, Nullable<byte> tasviye, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(int));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var cashIDParameter = cashID.HasValue ?
                new ObjectParameter("CashID", cashID) :
                new ObjectParameter("CashID", typeof(short));
    
            var moeinCategoryIDParameter = moeinCategoryID.HasValue ?
                new ObjectParameter("MoeinCategoryID", moeinCategoryID) :
                new ObjectParameter("MoeinCategoryID", typeof(int));
    
            var moeinSubCategoryIDParameter = moeinSubCategoryID.HasValue ?
                new ObjectParameter("MoeinSubCategoryID", moeinSubCategoryID) :
                new ObjectParameter("MoeinSubCategoryID", typeof(int));
    
            var moeinTypeIDParameter = moeinTypeID.HasValue ?
                new ObjectParameter("MoeinTypeID", moeinTypeID) :
                new ObjectParameter("MoeinTypeID", typeof(int));
    
            var bed_StartParameter = bed_Start.HasValue ?
                new ObjectParameter("Bed_Start", bed_Start) :
                new ObjectParameter("Bed_Start", typeof(double));
    
            var bed_EndParameter = bed_End.HasValue ?
                new ObjectParameter("Bed_End", bed_End) :
                new ObjectParameter("Bed_End", typeof(double));
    
            var bes_StartParameter = bes_Start.HasValue ?
                new ObjectParameter("Bes_Start", bes_Start) :
                new ObjectParameter("Bes_Start", typeof(double));
    
            var bes_EndParameter = bes_End.HasValue ?
                new ObjectParameter("Bes_End", bes_End) :
                new ObjectParameter("Bes_End", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var moein_date_StartParameter = moein_date_Start != null ?
                new ObjectParameter("Moein_date_Start", moein_date_Start) :
                new ObjectParameter("Moein_date_Start", typeof(string));
    
            var moein_date_EndParameter = moein_date_End != null ?
                new ObjectParameter("Moein_date_End", moein_date_End) :
                new ObjectParameter("Moein_date_End", typeof(string));
    
            var moein_Time_StartParameter = moein_Time_Start != null ?
                new ObjectParameter("Moein_Time_Start", moein_Time_Start) :
                new ObjectParameter("Moein_Time_Start", typeof(string));
    
            var moein_Time_EndParameter = moein_Time_End != null ?
                new ObjectParameter("Moein_Time_End", moein_Time_End) :
                new ObjectParameter("Moein_Time_End", typeof(string));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var srcIDParameter = srcID.HasValue ?
                new ObjectParameter("SrcID", srcID) :
                new ObjectParameter("SrcID", typeof(int));
    
            var tasviyeParameter = tasviye.HasValue ?
                new ObjectParameter("Tasviye", tasviye) :
                new ObjectParameter("Tasviye", typeof(byte));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Moein_Select", iD_StartParameter, iD_EndParameter, customerGroupIDParameter, customerSubGroupIDParameter, customerIDParameter, cashIDParameter, moeinCategoryIDParameter, moeinSubCategoryIDParameter, moeinTypeIDParameter, bed_StartParameter, bed_EndParameter, bes_StartParameter, bes_EndParameter, dscParameter, moein_date_StartParameter, moein_date_EndParameter, moein_Time_StartParameter, moein_Time_EndParameter, srcTypeParameter, srcIDParameter, tasviyeParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Moein_SelectRow_Result> sp_Moein_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Moein_SelectRow_Result>("sp_Moein_SelectRow", iDParameter);
        }
    
        public virtual ObjectResult<sp_Moein_Sum_Bedehkaran_Result> sp_Moein_Sum_Bedehkaran(Nullable<int> customerGroupID, Nullable<int> customerSubGroupID, Nullable<int> customerID, Nullable<int> moeinCategoryID, Nullable<int> moeinSubCategoryID, Nullable<int> moeinTypeID, Nullable<double> bed_Start, Nullable<double> bed_End, Nullable<double> bes_Start, Nullable<double> bes_End, string dsc, string moein_date_Start, string moein_date_End, string moein_Time_Start, string moein_Time_End, Nullable<byte> srcType, Nullable<int> srcID, Nullable<byte> tasviye, Nullable<int> rolid, Nullable<int> userid)
        {
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(int));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var moeinCategoryIDParameter = moeinCategoryID.HasValue ?
                new ObjectParameter("MoeinCategoryID", moeinCategoryID) :
                new ObjectParameter("MoeinCategoryID", typeof(int));
    
            var moeinSubCategoryIDParameter = moeinSubCategoryID.HasValue ?
                new ObjectParameter("MoeinSubCategoryID", moeinSubCategoryID) :
                new ObjectParameter("MoeinSubCategoryID", typeof(int));
    
            var moeinTypeIDParameter = moeinTypeID.HasValue ?
                new ObjectParameter("MoeinTypeID", moeinTypeID) :
                new ObjectParameter("MoeinTypeID", typeof(int));
    
            var bed_StartParameter = bed_Start.HasValue ?
                new ObjectParameter("Bed_Start", bed_Start) :
                new ObjectParameter("Bed_Start", typeof(double));
    
            var bed_EndParameter = bed_End.HasValue ?
                new ObjectParameter("Bed_End", bed_End) :
                new ObjectParameter("Bed_End", typeof(double));
    
            var bes_StartParameter = bes_Start.HasValue ?
                new ObjectParameter("Bes_Start", bes_Start) :
                new ObjectParameter("Bes_Start", typeof(double));
    
            var bes_EndParameter = bes_End.HasValue ?
                new ObjectParameter("Bes_End", bes_End) :
                new ObjectParameter("Bes_End", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var moein_date_StartParameter = moein_date_Start != null ?
                new ObjectParameter("Moein_date_Start", moein_date_Start) :
                new ObjectParameter("Moein_date_Start", typeof(string));
    
            var moein_date_EndParameter = moein_date_End != null ?
                new ObjectParameter("Moein_date_End", moein_date_End) :
                new ObjectParameter("Moein_date_End", typeof(string));
    
            var moein_Time_StartParameter = moein_Time_Start != null ?
                new ObjectParameter("Moein_Time_Start", moein_Time_Start) :
                new ObjectParameter("Moein_Time_Start", typeof(string));
    
            var moein_Time_EndParameter = moein_Time_End != null ?
                new ObjectParameter("Moein_Time_End", moein_Time_End) :
                new ObjectParameter("Moein_Time_End", typeof(string));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var srcIDParameter = srcID.HasValue ?
                new ObjectParameter("SrcID", srcID) :
                new ObjectParameter("SrcID", typeof(int));
    
            var tasviyeParameter = tasviye.HasValue ?
                new ObjectParameter("Tasviye", tasviye) :
                new ObjectParameter("Tasviye", typeof(byte));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Moein_Sum_Bedehkaran_Result>("sp_Moein_Sum_Bedehkaran", customerGroupIDParameter, customerSubGroupIDParameter, customerIDParameter, moeinCategoryIDParameter, moeinSubCategoryIDParameter, moeinTypeIDParameter, bed_StartParameter, bed_EndParameter, bes_StartParameter, bes_EndParameter, dscParameter, moein_date_StartParameter, moein_date_EndParameter, moein_Time_StartParameter, moein_Time_EndParameter, srcTypeParameter, srcIDParameter, tasviyeParameter, rolidParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Moein_Sum_Bestankaran_Result> sp_Moein_Sum_Bestankaran(Nullable<int> customerGroupID, Nullable<int> customerSubGroupID, Nullable<int> customerID, Nullable<int> moeinCategoryID, Nullable<int> moeinSubCategoryID, Nullable<int> moeinTypeID, Nullable<double> bed_Start, Nullable<double> bed_End, Nullable<double> bes_Start, Nullable<double> bes_End, string dsc, string moein_date_Start, string moein_date_End, string moein_Time_Start, string moein_Time_End, Nullable<byte> srcType, Nullable<int> srcID, Nullable<byte> tasviye, Nullable<int> rolid, Nullable<int> userid)
        {
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(int));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var moeinCategoryIDParameter = moeinCategoryID.HasValue ?
                new ObjectParameter("MoeinCategoryID", moeinCategoryID) :
                new ObjectParameter("MoeinCategoryID", typeof(int));
    
            var moeinSubCategoryIDParameter = moeinSubCategoryID.HasValue ?
                new ObjectParameter("MoeinSubCategoryID", moeinSubCategoryID) :
                new ObjectParameter("MoeinSubCategoryID", typeof(int));
    
            var moeinTypeIDParameter = moeinTypeID.HasValue ?
                new ObjectParameter("MoeinTypeID", moeinTypeID) :
                new ObjectParameter("MoeinTypeID", typeof(int));
    
            var bed_StartParameter = bed_Start.HasValue ?
                new ObjectParameter("Bed_Start", bed_Start) :
                new ObjectParameter("Bed_Start", typeof(double));
    
            var bed_EndParameter = bed_End.HasValue ?
                new ObjectParameter("Bed_End", bed_End) :
                new ObjectParameter("Bed_End", typeof(double));
    
            var bes_StartParameter = bes_Start.HasValue ?
                new ObjectParameter("Bes_Start", bes_Start) :
                new ObjectParameter("Bes_Start", typeof(double));
    
            var bes_EndParameter = bes_End.HasValue ?
                new ObjectParameter("Bes_End", bes_End) :
                new ObjectParameter("Bes_End", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var moein_date_StartParameter = moein_date_Start != null ?
                new ObjectParameter("Moein_date_Start", moein_date_Start) :
                new ObjectParameter("Moein_date_Start", typeof(string));
    
            var moein_date_EndParameter = moein_date_End != null ?
                new ObjectParameter("Moein_date_End", moein_date_End) :
                new ObjectParameter("Moein_date_End", typeof(string));
    
            var moein_Time_StartParameter = moein_Time_Start != null ?
                new ObjectParameter("Moein_Time_Start", moein_Time_Start) :
                new ObjectParameter("Moein_Time_Start", typeof(string));
    
            var moein_Time_EndParameter = moein_Time_End != null ?
                new ObjectParameter("Moein_Time_End", moein_Time_End) :
                new ObjectParameter("Moein_Time_End", typeof(string));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var srcIDParameter = srcID.HasValue ?
                new ObjectParameter("SrcID", srcID) :
                new ObjectParameter("SrcID", typeof(int));
    
            var tasviyeParameter = tasviye.HasValue ?
                new ObjectParameter("Tasviye", tasviye) :
                new ObjectParameter("Tasviye", typeof(byte));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Moein_Sum_Bestankaran_Result>("sp_Moein_Sum_Bestankaran", customerGroupIDParameter, customerSubGroupIDParameter, customerIDParameter, moeinCategoryIDParameter, moeinSubCategoryIDParameter, moeinTypeIDParameter, bed_StartParameter, bed_EndParameter, bes_StartParameter, bes_EndParameter, dscParameter, moein_date_StartParameter, moein_date_EndParameter, moein_Time_StartParameter, moein_Time_EndParameter, srcTypeParameter, srcIDParameter, tasviyeParameter, rolidParameter, useridParameter);
        }
    
        public virtual int sp_Moein_Update(Nullable<int> iD, Nullable<int> customerGroupID, Nullable<int> customerSubGroupID, Nullable<int> moeinTypeID, Nullable<int> customerID, Nullable<short> cashID, Nullable<int> moeinCategoryID, Nullable<int> moeinSubCategoryID, Nullable<bool> tasviye, Nullable<double> bed, Nullable<double> bes, string dsc, Nullable<System.DateTime> moein_date, Nullable<int> noteID, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(int));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var moeinTypeIDParameter = moeinTypeID.HasValue ?
                new ObjectParameter("MoeinTypeID", moeinTypeID) :
                new ObjectParameter("MoeinTypeID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var cashIDParameter = cashID.HasValue ?
                new ObjectParameter("CashID", cashID) :
                new ObjectParameter("CashID", typeof(short));
    
            var moeinCategoryIDParameter = moeinCategoryID.HasValue ?
                new ObjectParameter("MoeinCategoryID", moeinCategoryID) :
                new ObjectParameter("MoeinCategoryID", typeof(int));
    
            var moeinSubCategoryIDParameter = moeinSubCategoryID.HasValue ?
                new ObjectParameter("MoeinSubCategoryID", moeinSubCategoryID) :
                new ObjectParameter("MoeinSubCategoryID", typeof(int));
    
            var tasviyeParameter = tasviye.HasValue ?
                new ObjectParameter("Tasviye", tasviye) :
                new ObjectParameter("Tasviye", typeof(bool));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var besParameter = bes.HasValue ?
                new ObjectParameter("Bes", bes) :
                new ObjectParameter("Bes", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var moein_dateParameter = moein_date.HasValue ?
                new ObjectParameter("Moein_date", moein_date) :
                new ObjectParameter("Moein_date", typeof(System.DateTime));
    
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Moein_Update", iDParameter, customerGroupIDParameter, customerSubGroupIDParameter, moeinTypeIDParameter, customerIDParameter, cashIDParameter, moeinCategoryIDParameter, moeinSubCategoryIDParameter, tasviyeParameter, bedParameter, besParameter, dscParameter, moein_dateParameter, noteIDParameter, useridParameter);
        }
    
        public virtual int sp_MoeinCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MoeinCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_MoeinCategories_Insert(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MoeinCategories_Insert", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_MoeinCategories_Select_Result> sp_MoeinCategories_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MoeinCategories_Select_Result>("sp_MoeinCategories_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_MoeinCategories_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MoeinCategories_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_MoeinSubCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MoeinSubCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_MoeinSubCategories_Insert(Nullable<int> moeinCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var moeinCategoryIDParameter = moeinCategoryID.HasValue ?
                new ObjectParameter("MoeinCategoryID", moeinCategoryID) :
                new ObjectParameter("MoeinCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MoeinSubCategories_Insert", moeinCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_MoeinSubCategories_Select_Result> sp_MoeinSubCategories_Select(Nullable<int> moeinCategoryID, string name, Nullable<int> active)
        {
            var moeinCategoryIDParameter = moeinCategoryID.HasValue ?
                new ObjectParameter("MoeinCategoryID", moeinCategoryID) :
                new ObjectParameter("MoeinCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MoeinSubCategories_Select_Result>("sp_MoeinSubCategories_Select", moeinCategoryIDParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_MoeinSubCategories_Update(Nullable<int> iD, Nullable<int> moeinCategoryID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var moeinCategoryIDParameter = moeinCategoryID.HasValue ?
                new ObjectParameter("MoeinCategoryID", moeinCategoryID) :
                new ObjectParameter("MoeinCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MoeinSubCategories_Update", iDParameter, moeinCategoryIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_MoeinTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MoeinTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_MoeinTypes_Insert(Nullable<int> moeinCategoryID, Nullable<int> moeinSubCategoryID, Nullable<int> iD, string name, Nullable<double> price, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var moeinCategoryIDParameter = moeinCategoryID.HasValue ?
                new ObjectParameter("MoeinCategoryID", moeinCategoryID) :
                new ObjectParameter("MoeinCategoryID", typeof(int));
    
            var moeinSubCategoryIDParameter = moeinSubCategoryID.HasValue ?
                new ObjectParameter("MoeinSubCategoryID", moeinSubCategoryID) :
                new ObjectParameter("MoeinSubCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MoeinTypes_Insert", moeinCategoryIDParameter, moeinSubCategoryIDParameter, iDParameter, nameParameter, priceParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_MoeinTypes_Select_Result> sp_MoeinTypes_Select(Nullable<int> moeinCategoryID, Nullable<int> moeinSubCategoryID, string name, Nullable<int> active)
        {
            var moeinCategoryIDParameter = moeinCategoryID.HasValue ?
                new ObjectParameter("MoeinCategoryID", moeinCategoryID) :
                new ObjectParameter("MoeinCategoryID", typeof(int));
    
            var moeinSubCategoryIDParameter = moeinSubCategoryID.HasValue ?
                new ObjectParameter("MoeinSubCategoryID", moeinSubCategoryID) :
                new ObjectParameter("MoeinSubCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MoeinTypes_Select_Result>("sp_MoeinTypes_Select", moeinCategoryIDParameter, moeinSubCategoryIDParameter, nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_MoeinTypes_SelectRow_Result> sp_MoeinTypes_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MoeinTypes_SelectRow_Result>("sp_MoeinTypes_SelectRow", iDParameter);
        }
    
        public virtual int sp_MoeinTypes_Update(Nullable<int> moeinCategoryID, Nullable<int> moeinSubCategoryID, Nullable<int> iD, string name, Nullable<double> price, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var moeinCategoryIDParameter = moeinCategoryID.HasValue ?
                new ObjectParameter("MoeinCategoryID", moeinCategoryID) :
                new ObjectParameter("MoeinCategoryID", typeof(int));
    
            var moeinSubCategoryIDParameter = moeinSubCategoryID.HasValue ?
                new ObjectParameter("MoeinSubCategoryID", moeinSubCategoryID) :
                new ObjectParameter("MoeinSubCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MoeinTypes_Update", moeinCategoryIDParameter, moeinSubCategoryIDParameter, iDParameter, nameParameter, priceParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Mokamel_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Mokamel_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Mokamel_Insert(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Mokamel_Insert", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Mokamel_Select_Result> sp_Mokamel_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Mokamel_Select_Result>("sp_Mokamel_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_Mokamel_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Mokamel_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_NoteHidden_Insert(Nullable<int> noteID, Nullable<int> userID)
        {
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NoteHidden_Insert", noteIDParameter, userIDParameter);
        }
    
        public virtual int sp_NotePad_Archive(Nullable<int> iD, Nullable<byte> archiveStateID, string archiveDsc, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var archiveStateIDParameter = archiveStateID.HasValue ?
                new ObjectParameter("ArchiveStateID", archiveStateID) :
                new ObjectParameter("ArchiveStateID", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NotePad_Archive", iDParameter, archiveStateIDParameter, archiveDscParameter, userIDParameter);
        }
    
        public virtual int sp_NotePad_ChangePriorityID(Nullable<int> iD, Nullable<short> notePriorityID, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var notePriorityIDParameter = notePriorityID.HasValue ?
                new ObjectParameter("NotePriorityID", notePriorityID) :
                new ObjectParameter("NotePriorityID", typeof(short));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NotePad_ChangePriorityID", iDParameter, notePriorityIDParameter, useridParameter);
        }
    
        public virtual int sp_NotePad_ChangeStateID(Nullable<int> iD, Nullable<short> noteStateID, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var noteStateIDParameter = noteStateID.HasValue ?
                new ObjectParameter("NoteStateID", noteStateID) :
                new ObjectParameter("NoteStateID", typeof(short));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NotePad_ChangeStateID", iDParameter, noteStateIDParameter, useridParameter);
        }
    
        public virtual int sp_NotePad_ChangeTitleColor(Nullable<int> iD, Nullable<int> titleColor, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var titleColorParameter = titleColor.HasValue ?
                new ObjectParameter("TitleColor", titleColor) :
                new ObjectParameter("TitleColor", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NotePad_ChangeTitleColor", iDParameter, titleColorParameter, useridParameter);
        }
    
        public virtual int sp_NotePad_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NotePad_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_NotePad_DeleteAll(Nullable<int> noteTypeID, Nullable<short> notePriorityID, Nullable<short> noteStateID, Nullable<byte> srcType, string title, string dsc, string toDayDate, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<byte> archive, string archiveDsc, Nullable<int> userid, Nullable<int> topRange, Nullable<int> delUserid)
        {
            var noteTypeIDParameter = noteTypeID.HasValue ?
                new ObjectParameter("NoteTypeID", noteTypeID) :
                new ObjectParameter("NoteTypeID", typeof(int));
    
            var notePriorityIDParameter = notePriorityID.HasValue ?
                new ObjectParameter("NotePriorityID", notePriorityID) :
                new ObjectParameter("NotePriorityID", typeof(short));
    
            var noteStateIDParameter = noteStateID.HasValue ?
                new ObjectParameter("NoteStateID", noteStateID) :
                new ObjectParameter("NoteStateID", typeof(short));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var toDayDateParameter = toDayDate != null ?
                new ObjectParameter("ToDayDate", toDayDate) :
                new ObjectParameter("ToDayDate", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            var delUseridParameter = delUserid.HasValue ?
                new ObjectParameter("DelUserid", delUserid) :
                new ObjectParameter("DelUserid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NotePad_DeleteAll", noteTypeIDParameter, notePriorityIDParameter, noteStateIDParameter, srcTypeParameter, titleParameter, dscParameter, toDayDateParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, archiveParameter, archiveDscParameter, useridParameter, topRangeParameter, delUseridParameter);
        }
    
        public virtual int sp_NotePad_Insert(Nullable<int> noteTypeID, string title, string dsc, Nullable<byte> srcType, Nullable<int> srcID, Nullable<bool> reminderBroadcast, Nullable<byte> noteBroadcast, Nullable<bool> alarm, Nullable<short> alarmTask, Nullable<System.DateTime> alarmDate, string alarmFile, Nullable<byte> alarmMode, Nullable<bool> sendSMS, string sMSNumber, string sMSMessage, Nullable<int> titleColor, Nullable<short> notePriorityID, Nullable<short> noteStateID, Nullable<bool> usersDel, Nullable<bool> usersEdit, Nullable<bool> usersPrint, Nullable<bool> usersArchive, Nullable<bool> usersRecovery, Nullable<bool> usersChangeStateID, Nullable<bool> usersChangePriorityID, Nullable<bool> usersChangeTitleColor, Nullable<bool> sendSMSWithTime, Nullable<System.DateTime> sendSMSWithTimeDate, string sMSWithTimeNumber, string sMSWithTimeMessage, Nullable<int> userid)
        {
            var noteTypeIDParameter = noteTypeID.HasValue ?
                new ObjectParameter("NoteTypeID", noteTypeID) :
                new ObjectParameter("NoteTypeID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var srcIDParameter = srcID.HasValue ?
                new ObjectParameter("SrcID", srcID) :
                new ObjectParameter("SrcID", typeof(int));
    
            var reminderBroadcastParameter = reminderBroadcast.HasValue ?
                new ObjectParameter("ReminderBroadcast", reminderBroadcast) :
                new ObjectParameter("ReminderBroadcast", typeof(bool));
    
            var noteBroadcastParameter = noteBroadcast.HasValue ?
                new ObjectParameter("NoteBroadcast", noteBroadcast) :
                new ObjectParameter("NoteBroadcast", typeof(byte));
    
            var alarmParameter = alarm.HasValue ?
                new ObjectParameter("Alarm", alarm) :
                new ObjectParameter("Alarm", typeof(bool));
    
            var alarmTaskParameter = alarmTask.HasValue ?
                new ObjectParameter("AlarmTask", alarmTask) :
                new ObjectParameter("AlarmTask", typeof(short));
    
            var alarmDateParameter = alarmDate.HasValue ?
                new ObjectParameter("AlarmDate", alarmDate) :
                new ObjectParameter("AlarmDate", typeof(System.DateTime));
    
            var alarmFileParameter = alarmFile != null ?
                new ObjectParameter("AlarmFile", alarmFile) :
                new ObjectParameter("AlarmFile", typeof(string));
    
            var alarmModeParameter = alarmMode.HasValue ?
                new ObjectParameter("AlarmMode", alarmMode) :
                new ObjectParameter("AlarmMode", typeof(byte));
    
            var sendSMSParameter = sendSMS.HasValue ?
                new ObjectParameter("SendSMS", sendSMS) :
                new ObjectParameter("SendSMS", typeof(bool));
    
            var sMSNumberParameter = sMSNumber != null ?
                new ObjectParameter("SMSNumber", sMSNumber) :
                new ObjectParameter("SMSNumber", typeof(string));
    
            var sMSMessageParameter = sMSMessage != null ?
                new ObjectParameter("SMSMessage", sMSMessage) :
                new ObjectParameter("SMSMessage", typeof(string));
    
            var titleColorParameter = titleColor.HasValue ?
                new ObjectParameter("TitleColor", titleColor) :
                new ObjectParameter("TitleColor", typeof(int));
    
            var notePriorityIDParameter = notePriorityID.HasValue ?
                new ObjectParameter("NotePriorityID", notePriorityID) :
                new ObjectParameter("NotePriorityID", typeof(short));
    
            var noteStateIDParameter = noteStateID.HasValue ?
                new ObjectParameter("NoteStateID", noteStateID) :
                new ObjectParameter("NoteStateID", typeof(short));
    
            var usersDelParameter = usersDel.HasValue ?
                new ObjectParameter("UsersDel", usersDel) :
                new ObjectParameter("UsersDel", typeof(bool));
    
            var usersEditParameter = usersEdit.HasValue ?
                new ObjectParameter("UsersEdit", usersEdit) :
                new ObjectParameter("UsersEdit", typeof(bool));
    
            var usersPrintParameter = usersPrint.HasValue ?
                new ObjectParameter("UsersPrint", usersPrint) :
                new ObjectParameter("UsersPrint", typeof(bool));
    
            var usersArchiveParameter = usersArchive.HasValue ?
                new ObjectParameter("UsersArchive", usersArchive) :
                new ObjectParameter("UsersArchive", typeof(bool));
    
            var usersRecoveryParameter = usersRecovery.HasValue ?
                new ObjectParameter("UsersRecovery", usersRecovery) :
                new ObjectParameter("UsersRecovery", typeof(bool));
    
            var usersChangeStateIDParameter = usersChangeStateID.HasValue ?
                new ObjectParameter("UsersChangeStateID", usersChangeStateID) :
                new ObjectParameter("UsersChangeStateID", typeof(bool));
    
            var usersChangePriorityIDParameter = usersChangePriorityID.HasValue ?
                new ObjectParameter("UsersChangePriorityID", usersChangePriorityID) :
                new ObjectParameter("UsersChangePriorityID", typeof(bool));
    
            var usersChangeTitleColorParameter = usersChangeTitleColor.HasValue ?
                new ObjectParameter("UsersChangeTitleColor", usersChangeTitleColor) :
                new ObjectParameter("UsersChangeTitleColor", typeof(bool));
    
            var sendSMSWithTimeParameter = sendSMSWithTime.HasValue ?
                new ObjectParameter("SendSMSWithTime", sendSMSWithTime) :
                new ObjectParameter("SendSMSWithTime", typeof(bool));
    
            var sendSMSWithTimeDateParameter = sendSMSWithTimeDate.HasValue ?
                new ObjectParameter("SendSMSWithTimeDate", sendSMSWithTimeDate) :
                new ObjectParameter("SendSMSWithTimeDate", typeof(System.DateTime));
    
            var sMSWithTimeNumberParameter = sMSWithTimeNumber != null ?
                new ObjectParameter("SMSWithTimeNumber", sMSWithTimeNumber) :
                new ObjectParameter("SMSWithTimeNumber", typeof(string));
    
            var sMSWithTimeMessageParameter = sMSWithTimeMessage != null ?
                new ObjectParameter("SMSWithTimeMessage", sMSWithTimeMessage) :
                new ObjectParameter("SMSWithTimeMessage", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NotePad_Insert", noteTypeIDParameter, titleParameter, dscParameter, srcTypeParameter, srcIDParameter, reminderBroadcastParameter, noteBroadcastParameter, alarmParameter, alarmTaskParameter, alarmDateParameter, alarmFileParameter, alarmModeParameter, sendSMSParameter, sMSNumberParameter, sMSMessageParameter, titleColorParameter, notePriorityIDParameter, noteStateIDParameter, usersDelParameter, usersEditParameter, usersPrintParameter, usersArchiveParameter, usersRecoveryParameter, usersChangeStateIDParameter, usersChangePriorityIDParameter, usersChangeTitleColorParameter, sendSMSWithTimeParameter, sendSMSWithTimeDateParameter, sMSWithTimeNumberParameter, sMSWithTimeMessageParameter, useridParameter);
        }
    
        public virtual int sp_NotePad_Recovery(Nullable<int> iD, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NotePad_Recovery", iDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_NotePad_Select_Result> sp_NotePad_Select(Nullable<int> noteTypeID, Nullable<short> notePriorityID, Nullable<short> noteStateID, Nullable<byte> srcType, string title, string dsc, string toDayDate, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<byte> archive, string archiveDsc, Nullable<int> userid, Nullable<int> topRange)
        {
            var noteTypeIDParameter = noteTypeID.HasValue ?
                new ObjectParameter("NoteTypeID", noteTypeID) :
                new ObjectParameter("NoteTypeID", typeof(int));
    
            var notePriorityIDParameter = notePriorityID.HasValue ?
                new ObjectParameter("NotePriorityID", notePriorityID) :
                new ObjectParameter("NotePriorityID", typeof(short));
    
            var noteStateIDParameter = noteStateID.HasValue ?
                new ObjectParameter("NoteStateID", noteStateID) :
                new ObjectParameter("NoteStateID", typeof(short));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var toDayDateParameter = toDayDate != null ?
                new ObjectParameter("ToDayDate", toDayDate) :
                new ObjectParameter("ToDayDate", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NotePad_Select_Result>("sp_NotePad_Select", noteTypeIDParameter, notePriorityIDParameter, noteStateIDParameter, srcTypeParameter, titleParameter, dscParameter, toDayDateParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, archiveParameter, archiveDscParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_NotePad_SelectRow_Result> sp_NotePad_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NotePad_SelectRow_Result>("sp_NotePad_SelectRow", iDParameter);
        }
    
        public virtual int sp_NotePad_Update(Nullable<int> iD, Nullable<int> noteTypeID, string title, string dsc, Nullable<byte> srcType, Nullable<int> srcID, Nullable<bool> reminderBroadcast, Nullable<byte> noteBroadcast, Nullable<bool> alarm, Nullable<short> alarmTask, Nullable<System.DateTime> alarmDate, string alarmFile, Nullable<byte> alarmMode, Nullable<bool> sendSMS, string sMSNumber, string sMSMessage, Nullable<int> titleColor, Nullable<short> notePriorityID, Nullable<short> noteStateID, Nullable<bool> usersDel, Nullable<bool> usersEdit, Nullable<bool> usersPrint, Nullable<bool> usersArchive, Nullable<bool> usersRecovery, Nullable<bool> usersChangeStateID, Nullable<bool> usersChangePriorityID, Nullable<bool> usersChangeTitleColor, Nullable<bool> sendSMSWithTime, Nullable<System.DateTime> sendSMSWithTimeDate, string sMSWithTimeNumber, string sMSWithTimeMessage, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var noteTypeIDParameter = noteTypeID.HasValue ?
                new ObjectParameter("NoteTypeID", noteTypeID) :
                new ObjectParameter("NoteTypeID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var srcIDParameter = srcID.HasValue ?
                new ObjectParameter("SrcID", srcID) :
                new ObjectParameter("SrcID", typeof(int));
    
            var reminderBroadcastParameter = reminderBroadcast.HasValue ?
                new ObjectParameter("ReminderBroadcast", reminderBroadcast) :
                new ObjectParameter("ReminderBroadcast", typeof(bool));
    
            var noteBroadcastParameter = noteBroadcast.HasValue ?
                new ObjectParameter("NoteBroadcast", noteBroadcast) :
                new ObjectParameter("NoteBroadcast", typeof(byte));
    
            var alarmParameter = alarm.HasValue ?
                new ObjectParameter("Alarm", alarm) :
                new ObjectParameter("Alarm", typeof(bool));
    
            var alarmTaskParameter = alarmTask.HasValue ?
                new ObjectParameter("AlarmTask", alarmTask) :
                new ObjectParameter("AlarmTask", typeof(short));
    
            var alarmDateParameter = alarmDate.HasValue ?
                new ObjectParameter("AlarmDate", alarmDate) :
                new ObjectParameter("AlarmDate", typeof(System.DateTime));
    
            var alarmFileParameter = alarmFile != null ?
                new ObjectParameter("AlarmFile", alarmFile) :
                new ObjectParameter("AlarmFile", typeof(string));
    
            var alarmModeParameter = alarmMode.HasValue ?
                new ObjectParameter("AlarmMode", alarmMode) :
                new ObjectParameter("AlarmMode", typeof(byte));
    
            var sendSMSParameter = sendSMS.HasValue ?
                new ObjectParameter("SendSMS", sendSMS) :
                new ObjectParameter("SendSMS", typeof(bool));
    
            var sMSNumberParameter = sMSNumber != null ?
                new ObjectParameter("SMSNumber", sMSNumber) :
                new ObjectParameter("SMSNumber", typeof(string));
    
            var sMSMessageParameter = sMSMessage != null ?
                new ObjectParameter("SMSMessage", sMSMessage) :
                new ObjectParameter("SMSMessage", typeof(string));
    
            var titleColorParameter = titleColor.HasValue ?
                new ObjectParameter("TitleColor", titleColor) :
                new ObjectParameter("TitleColor", typeof(int));
    
            var notePriorityIDParameter = notePriorityID.HasValue ?
                new ObjectParameter("NotePriorityID", notePriorityID) :
                new ObjectParameter("NotePriorityID", typeof(short));
    
            var noteStateIDParameter = noteStateID.HasValue ?
                new ObjectParameter("NoteStateID", noteStateID) :
                new ObjectParameter("NoteStateID", typeof(short));
    
            var usersDelParameter = usersDel.HasValue ?
                new ObjectParameter("UsersDel", usersDel) :
                new ObjectParameter("UsersDel", typeof(bool));
    
            var usersEditParameter = usersEdit.HasValue ?
                new ObjectParameter("UsersEdit", usersEdit) :
                new ObjectParameter("UsersEdit", typeof(bool));
    
            var usersPrintParameter = usersPrint.HasValue ?
                new ObjectParameter("UsersPrint", usersPrint) :
                new ObjectParameter("UsersPrint", typeof(bool));
    
            var usersArchiveParameter = usersArchive.HasValue ?
                new ObjectParameter("UsersArchive", usersArchive) :
                new ObjectParameter("UsersArchive", typeof(bool));
    
            var usersRecoveryParameter = usersRecovery.HasValue ?
                new ObjectParameter("UsersRecovery", usersRecovery) :
                new ObjectParameter("UsersRecovery", typeof(bool));
    
            var usersChangeStateIDParameter = usersChangeStateID.HasValue ?
                new ObjectParameter("UsersChangeStateID", usersChangeStateID) :
                new ObjectParameter("UsersChangeStateID", typeof(bool));
    
            var usersChangePriorityIDParameter = usersChangePriorityID.HasValue ?
                new ObjectParameter("UsersChangePriorityID", usersChangePriorityID) :
                new ObjectParameter("UsersChangePriorityID", typeof(bool));
    
            var usersChangeTitleColorParameter = usersChangeTitleColor.HasValue ?
                new ObjectParameter("UsersChangeTitleColor", usersChangeTitleColor) :
                new ObjectParameter("UsersChangeTitleColor", typeof(bool));
    
            var sendSMSWithTimeParameter = sendSMSWithTime.HasValue ?
                new ObjectParameter("SendSMSWithTime", sendSMSWithTime) :
                new ObjectParameter("SendSMSWithTime", typeof(bool));
    
            var sendSMSWithTimeDateParameter = sendSMSWithTimeDate.HasValue ?
                new ObjectParameter("SendSMSWithTimeDate", sendSMSWithTimeDate) :
                new ObjectParameter("SendSMSWithTimeDate", typeof(System.DateTime));
    
            var sMSWithTimeNumberParameter = sMSWithTimeNumber != null ?
                new ObjectParameter("SMSWithTimeNumber", sMSWithTimeNumber) :
                new ObjectParameter("SMSWithTimeNumber", typeof(string));
    
            var sMSWithTimeMessageParameter = sMSWithTimeMessage != null ?
                new ObjectParameter("SMSWithTimeMessage", sMSWithTimeMessage) :
                new ObjectParameter("SMSWithTimeMessage", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NotePad_Update", iDParameter, noteTypeIDParameter, titleParameter, dscParameter, srcTypeParameter, srcIDParameter, reminderBroadcastParameter, noteBroadcastParameter, alarmParameter, alarmTaskParameter, alarmDateParameter, alarmFileParameter, alarmModeParameter, sendSMSParameter, sMSNumberParameter, sMSMessageParameter, titleColorParameter, notePriorityIDParameter, noteStateIDParameter, usersDelParameter, usersEditParameter, usersPrintParameter, usersArchiveParameter, usersRecoveryParameter, usersChangeStateIDParameter, usersChangePriorityIDParameter, usersChangeTitleColorParameter, sendSMSWithTimeParameter, sendSMSWithTimeDateParameter, sMSWithTimeNumberParameter, sMSWithTimeMessageParameter, useridParameter);
        }
    
        public virtual int sp_NotePriorities_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NotePriorities_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_NotePriorities_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NotePriorities_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_NotePriorities_Select_Result> sp_NotePriorities_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NotePriorities_Select_Result>("sp_NotePriorities_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_NotePriorities_SelectRow_Result> sp_NotePriorities_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NotePriorities_SelectRow_Result>("sp_NotePriorities_SelectRow", iDParameter);
        }
    
        public virtual int sp_NotePriorities_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NotePriorities_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_NoteStates_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NoteStates_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_NoteStates_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NoteStates_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_NoteStates_Select_Result> sp_NoteStates_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NoteStates_Select_Result>("sp_NoteStates_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_NoteStates_SelectRow_Result> sp_NoteStates_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NoteStates_SelectRow_Result>("sp_NoteStates_SelectRow", iDParameter);
        }
    
        public virtual int sp_NoteStates_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NoteStates_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_NoteTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NoteTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_NoteTypes_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NoteTypes_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_NoteTypes_Select_Result> sp_NoteTypes_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NoteTypes_Select_Result>("sp_NoteTypes_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_NoteTypes_SelectRow_Result> sp_NoteTypes_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NoteTypes_SelectRow_Result>("sp_NoteTypes_SelectRow", iDParameter);
        }
    
        public virtual int sp_NoteTypes_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NoteTypes_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_NoteView_Delete(Nullable<int> noteID, Nullable<int> userID)
        {
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NoteView_Delete", noteIDParameter, userIDParameter);
        }
    
        public virtual int sp_NoteView_Insert(Nullable<int> noteID, Nullable<int> userID)
        {
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NoteView_Insert", noteIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_NoteView_Select_Result> sp_NoteView_Select(Nullable<int> noteID, Nullable<int> userID)
        {
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NoteView_Select_Result>("sp_NoteView_Select", noteIDParameter, userIDParameter);
        }
    
        public virtual int sp_OrderDetail_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_OrderDetail_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_OrderDetail_Insert(Nullable<int> orderID, Nullable<byte> rowID, Nullable<int> inventoryID, Nullable<int> itemCategorieID, Nullable<int> itemID, Nullable<int> number, Nullable<byte> countingUnitID, Nullable<double> price)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var rowIDParameter = rowID.HasValue ?
                new ObjectParameter("RowID", rowID) :
                new ObjectParameter("RowID", typeof(byte));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(int));
    
            var itemCategorieIDParameter = itemCategorieID.HasValue ?
                new ObjectParameter("ItemCategorieID", itemCategorieID) :
                new ObjectParameter("ItemCategorieID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_OrderDetail_Insert", orderIDParameter, rowIDParameter, inventoryIDParameter, itemCategorieIDParameter, itemIDParameter, numberParameter, countingUnitIDParameter, priceParameter);
        }
    
        public virtual ObjectResult<sp_OrderDetail_Select_Result> sp_OrderDetail_Select(Nullable<int> orderID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_OrderDetail_Select_Result>("sp_OrderDetail_Select", orderIDParameter);
        }
    
        public virtual int sp_OrderDetail_Update(Nullable<int> iD, Nullable<int> orderID, Nullable<byte> rowID, Nullable<int> inventoryID, Nullable<int> itemCategorieID, Nullable<int> itemID, Nullable<int> number, Nullable<byte> countingUnitID, Nullable<double> price)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var rowIDParameter = rowID.HasValue ?
                new ObjectParameter("RowID", rowID) :
                new ObjectParameter("RowID", typeof(byte));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(int));
    
            var itemCategorieIDParameter = itemCategorieID.HasValue ?
                new ObjectParameter("ItemCategorieID", itemCategorieID) :
                new ObjectParameter("ItemCategorieID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_OrderDetail_Update", iDParameter, orderIDParameter, rowIDParameter, inventoryIDParameter, itemCategorieIDParameter, itemIDParameter, numberParameter, countingUnitIDParameter, priceParameter);
        }
    
        public virtual int sp_Orders_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Orders_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Orders_Insert(Nullable<int> iD, Nullable<short> dayID, string recever, Nullable<int> customerID, string customer_ContactName, string customer_General, string customer_HomeAddress, Nullable<int> driverID, Nullable<int> carID, Nullable<int> deskID, Nullable<System.DateTime> orderDate, Nullable<double> takh, Nullable<double> bed, Nullable<double> bes, Nullable<byte> paymentStateID, string dsc, Nullable<int> rolid, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dayIDParameter = dayID.HasValue ?
                new ObjectParameter("DayID", dayID) :
                new ObjectParameter("DayID", typeof(short));
    
            var receverParameter = recever != null ?
                new ObjectParameter("Recever", recever) :
                new ObjectParameter("Recever", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customer_ContactNameParameter = customer_ContactName != null ?
                new ObjectParameter("Customer_ContactName", customer_ContactName) :
                new ObjectParameter("Customer_ContactName", typeof(string));
    
            var customer_GeneralParameter = customer_General != null ?
                new ObjectParameter("Customer_General", customer_General) :
                new ObjectParameter("Customer_General", typeof(string));
    
            var customer_HomeAddressParameter = customer_HomeAddress != null ?
                new ObjectParameter("Customer_HomeAddress", customer_HomeAddress) :
                new ObjectParameter("Customer_HomeAddress", typeof(string));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(int));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var besParameter = bes.HasValue ?
                new ObjectParameter("Bes", bes) :
                new ObjectParameter("Bes", typeof(double));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(byte));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Orders_Insert", iDParameter, dayIDParameter, receverParameter, customerIDParameter, customer_ContactNameParameter, customer_GeneralParameter, customer_HomeAddressParameter, driverIDParameter, carIDParameter, deskIDParameter, orderDateParameter, takhParameter, bedParameter, besParameter, paymentStateIDParameter, dscParameter, rolidParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_Orders_Select_Result> sp_Orders_Select(string recever, Nullable<int> customerID, string customer_ContactName, string customer_General, string customer_HomeAddress, Nullable<int> driverID, Nullable<int> carID, Nullable<int> deskID, Nullable<int> itemID, Nullable<byte> paymentStateID, string dsc, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var receverParameter = recever != null ?
                new ObjectParameter("Recever", recever) :
                new ObjectParameter("Recever", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customer_ContactNameParameter = customer_ContactName != null ?
                new ObjectParameter("Customer_ContactName", customer_ContactName) :
                new ObjectParameter("Customer_ContactName", typeof(string));
    
            var customer_GeneralParameter = customer_General != null ?
                new ObjectParameter("Customer_General", customer_General) :
                new ObjectParameter("Customer_General", typeof(string));
    
            var customer_HomeAddressParameter = customer_HomeAddress != null ?
                new ObjectParameter("Customer_HomeAddress", customer_HomeAddress) :
                new ObjectParameter("Customer_HomeAddress", typeof(string));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(byte));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Orders_Select_Result>("sp_Orders_Select", receverParameter, customerIDParameter, customer_ContactNameParameter, customer_GeneralParameter, customer_HomeAddressParameter, driverIDParameter, carIDParameter, deskIDParameter, itemIDParameter, paymentStateIDParameter, dscParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Orders_SelectRow_Result> sp_Orders_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Orders_SelectRow_Result>("sp_Orders_SelectRow", iDParameter);
        }
    
        public virtual int sp_Orders_Update(Nullable<int> iD, string recever, Nullable<int> customerID, string customer_ContactName, string customer_General, string customer_HomeAddress, Nullable<int> driverID, Nullable<int> carID, Nullable<int> deskID, Nullable<System.DateTime> orderDate, Nullable<double> takh, Nullable<double> bed, Nullable<double> bes, Nullable<byte> paymentStateID, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var receverParameter = recever != null ?
                new ObjectParameter("Recever", recever) :
                new ObjectParameter("Recever", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customer_ContactNameParameter = customer_ContactName != null ?
                new ObjectParameter("Customer_ContactName", customer_ContactName) :
                new ObjectParameter("Customer_ContactName", typeof(string));
    
            var customer_GeneralParameter = customer_General != null ?
                new ObjectParameter("Customer_General", customer_General) :
                new ObjectParameter("Customer_General", typeof(string));
    
            var customer_HomeAddressParameter = customer_HomeAddress != null ?
                new ObjectParameter("Customer_HomeAddress", customer_HomeAddress) :
                new ObjectParameter("Customer_HomeAddress", typeof(string));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(int));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var besParameter = bes.HasValue ?
                new ObjectParameter("Bes", bes) :
                new ObjectParameter("Bes", typeof(double));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(byte));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Orders_Update", iDParameter, receverParameter, customerIDParameter, customer_ContactNameParameter, customer_GeneralParameter, customer_HomeAddressParameter, driverIDParameter, carIDParameter, deskIDParameter, orderDateParameter, takhParameter, bedParameter, besParameter, paymentStateIDParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_PaintHeaders_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PaintHeaders_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_PaintHeaders_Insert(Nullable<short> documentTypeID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var documentTypeIDParameter = documentTypeID.HasValue ?
                new ObjectParameter("DocumentTypeID", documentTypeID) :
                new ObjectParameter("DocumentTypeID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PaintHeaders_Insert", documentTypeIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_PaintHeaders_Select_Result> sp_PaintHeaders_Select(Nullable<short> documentTypeID, string name, Nullable<int> active)
        {
            var documentTypeIDParameter = documentTypeID.HasValue ?
                new ObjectParameter("DocumentTypeID", documentTypeID) :
                new ObjectParameter("DocumentTypeID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PaintHeaders_Select_Result>("sp_PaintHeaders_Select", documentTypeIDParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_PaintHeaders_Update(Nullable<int> iD, Nullable<short> documentTypeID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var documentTypeIDParameter = documentTypeID.HasValue ?
                new ObjectParameter("DocumentTypeID", documentTypeID) :
                new ObjectParameter("DocumentTypeID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PaintHeaders_Update", iDParameter, documentTypeIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Parameters_Delete(string tableName, string iD, string userid)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Parameters_Delete", tableNameParameter, iDParameter, useridParameter);
        }
    
        public virtual int sp_Parameters_Insert(string tableName, string name, string userid)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Parameters_Insert", tableNameParameter, nameParameter, useridParameter);
        }
    
        public virtual int sp_Parameters_Select(string tableName, string stringField, string objectField, string whereScript, Nullable<bool> active)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var stringFieldParameter = stringField != null ?
                new ObjectParameter("StringField", stringField) :
                new ObjectParameter("StringField", typeof(string));
    
            var objectFieldParameter = objectField != null ?
                new ObjectParameter("ObjectField", objectField) :
                new ObjectParameter("ObjectField", typeof(string));
    
            var whereScriptParameter = whereScript != null ?
                new ObjectParameter("WhereScript", whereScript) :
                new ObjectParameter("WhereScript", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Parameters_Select", tableNameParameter, stringFieldParameter, objectFieldParameter, whereScriptParameter, activeParameter);
        }
    
        public virtual int sp_Parameters_Update(string iD, string tableName, string name, string userid)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Parameters_Update", iDParameter, tableNameParameter, nameParameter, useridParameter);
        }
    
        public virtual int sp_PatientDiseaseHistories_Delete(Nullable<int> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PatientDiseaseHistories_Delete", patientIDParameter);
        }
    
        public virtual ObjectResult<sp_PatientDiseaseHistories_Select_Result> sp_PatientDiseaseHistories_Select(Nullable<int> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PatientDiseaseHistories_Select_Result>("sp_PatientDiseaseHistories_Select", patientIDParameter);
        }
    
        public virtual int sp_Patients_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Patients_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Patients_DeleteAll(string alphabet, Nullable<byte> alphabetFa, string firstName, string lastName, string fullName, string phoneNumber, string address, string meli, string shSh, Nullable<int> iD, Nullable<int> iD_Start, Nullable<int> iD_End, Nullable<byte> sexTypeID, Nullable<int> doctorID, Nullable<short> age_Start, Nullable<short> age_End, Nullable<short> insuranceID, string insuranceNumber, Nullable<short> customerGroupID, Nullable<int> customerSubGroupID, Nullable<int> customGroupID, Nullable<short> jobID, Nullable<int> educationTypeID, string registerDate_Start, string registerDate_End, Nullable<int> customerID, Nullable<short> marriageTypeID, Nullable<short> height_Start, Nullable<short> height_End, Nullable<short> weight_Start, Nullable<short> weight_End, Nullable<bool> birthDayNow, string dsc1, string dsc, Nullable<bool> isBed, Nullable<double> bed_start, Nullable<double> bed_end, Nullable<bool> isBes, Nullable<double> bes_start, Nullable<double> bes_end, Nullable<int> active, Nullable<int> topRange, Nullable<int> delUserid)
        {
            var alphabetParameter = alphabet != null ?
                new ObjectParameter("Alphabet", alphabet) :
                new ObjectParameter("Alphabet", typeof(string));
    
            var alphabetFaParameter = alphabetFa.HasValue ?
                new ObjectParameter("AlphabetFa", alphabetFa) :
                new ObjectParameter("AlphabetFa", typeof(byte));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var meliParameter = meli != null ?
                new ObjectParameter("Meli", meli) :
                new ObjectParameter("Meli", typeof(string));
    
            var shShParameter = shSh != null ?
                new ObjectParameter("ShSh", shSh) :
                new ObjectParameter("ShSh", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var age_StartParameter = age_Start.HasValue ?
                new ObjectParameter("Age_Start", age_Start) :
                new ObjectParameter("Age_Start", typeof(short));
    
            var age_EndParameter = age_End.HasValue ?
                new ObjectParameter("Age_End", age_End) :
                new ObjectParameter("Age_End", typeof(short));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(short));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(short));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customGroupIDParameter = customGroupID.HasValue ?
                new ObjectParameter("CustomGroupID", customGroupID) :
                new ObjectParameter("CustomGroupID", typeof(int));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(short));
    
            var educationTypeIDParameter = educationTypeID.HasValue ?
                new ObjectParameter("EducationTypeID", educationTypeID) :
                new ObjectParameter("EducationTypeID", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var marriageTypeIDParameter = marriageTypeID.HasValue ?
                new ObjectParameter("MarriageTypeID", marriageTypeID) :
                new ObjectParameter("MarriageTypeID", typeof(short));
    
            var height_StartParameter = height_Start.HasValue ?
                new ObjectParameter("Height_Start", height_Start) :
                new ObjectParameter("Height_Start", typeof(short));
    
            var height_EndParameter = height_End.HasValue ?
                new ObjectParameter("Height_End", height_End) :
                new ObjectParameter("Height_End", typeof(short));
    
            var weight_StartParameter = weight_Start.HasValue ?
                new ObjectParameter("Weight_Start", weight_Start) :
                new ObjectParameter("Weight_Start", typeof(short));
    
            var weight_EndParameter = weight_End.HasValue ?
                new ObjectParameter("Weight_End", weight_End) :
                new ObjectParameter("Weight_End", typeof(short));
    
            var birthDayNowParameter = birthDayNow.HasValue ?
                new ObjectParameter("BirthDayNow", birthDayNow) :
                new ObjectParameter("BirthDayNow", typeof(bool));
    
            var dsc1Parameter = dsc1 != null ?
                new ObjectParameter("Dsc1", dsc1) :
                new ObjectParameter("Dsc1", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var isBedParameter = isBed.HasValue ?
                new ObjectParameter("IsBed", isBed) :
                new ObjectParameter("IsBed", typeof(bool));
    
            var bed_startParameter = bed_start.HasValue ?
                new ObjectParameter("Bed_start", bed_start) :
                new ObjectParameter("Bed_start", typeof(double));
    
            var bed_endParameter = bed_end.HasValue ?
                new ObjectParameter("Bed_end", bed_end) :
                new ObjectParameter("Bed_end", typeof(double));
    
            var isBesParameter = isBes.HasValue ?
                new ObjectParameter("IsBes", isBes) :
                new ObjectParameter("IsBes", typeof(bool));
    
            var bes_startParameter = bes_start.HasValue ?
                new ObjectParameter("Bes_start", bes_start) :
                new ObjectParameter("Bes_start", typeof(double));
    
            var bes_endParameter = bes_end.HasValue ?
                new ObjectParameter("Bes_end", bes_end) :
                new ObjectParameter("Bes_end", typeof(double));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            var delUseridParameter = delUserid.HasValue ?
                new ObjectParameter("DelUserid", delUserid) :
                new ObjectParameter("DelUserid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Patients_DeleteAll", alphabetParameter, alphabetFaParameter, firstNameParameter, lastNameParameter, fullNameParameter, phoneNumberParameter, addressParameter, meliParameter, shShParameter, iDParameter, iD_StartParameter, iD_EndParameter, sexTypeIDParameter, doctorIDParameter, age_StartParameter, age_EndParameter, insuranceIDParameter, insuranceNumberParameter, customerGroupIDParameter, customerSubGroupIDParameter, customGroupIDParameter, jobIDParameter, educationTypeIDParameter, registerDate_StartParameter, registerDate_EndParameter, customerIDParameter, marriageTypeIDParameter, height_StartParameter, height_EndParameter, weight_StartParameter, weight_EndParameter, birthDayNowParameter, dsc1Parameter, dscParameter, isBedParameter, bed_startParameter, bed_endParameter, isBesParameter, bes_startParameter, bes_endParameter, activeParameter, topRangeParameter, delUseridParameter);
        }
    
        public virtual int sp_Patients_Insert(Nullable<int> iD, Nullable<int> doctorID, string firstName, string lastName, string fullName, string fatherName, Nullable<System.DateTime> birthDay, Nullable<short> age, string birthPlace, Nullable<byte> sexTypeID, string shKarGozini, Nullable<short> insuranceID, string insuranceNumber, Nullable<short> yaranehID, Nullable<short> mokamelID, string shSh, string meli, Nullable<short> customerGroupID, Nullable<int> customerSubGroupID, Nullable<int> customGroupID, Nullable<short> jobID, Nullable<int> educationTypeID, string general, string home, string office, string mobile, string sMS, string email, string moaref, Nullable<double> bed, string homeAddress, string officeAddress, Nullable<System.DateTime> registerDate, Nullable<bool> diseaseHistory, Nullable<int> customerID, Nullable<short> marriageTypeID, Nullable<byte> childNumb, Nullable<short> height, Nullable<short> weight, string dsc1, string dsc2, Nullable<int> imageID, Nullable<bool> khun, string khunDsc, Nullable<bool> hejamat, Nullable<System.DateTime> hejamatDate, Nullable<bool> leechtherapy, Nullable<bool> fasd, Nullable<bool> cupPing, Nullable<bool> adat, Nullable<bool> smoker, Nullable<bool> addict, Nullable<bool> alchohol, Nullable<bool> hasas, string hasasDsc, Nullable<bool> jarahi, string jarahiDsc, Nullable<bool> mense, Nullable<bool> mense1, Nullable<bool> mense2, Nullable<bool> mense3, Nullable<bool> mense4, Nullable<bool> mense5, Nullable<bool> mense6, Nullable<bool> mense7, string paraClinicDsc, Nullable<bool> active, Nullable<bool> del, Nullable<bool> @lock, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("BirthDay", birthDay) :
                new ObjectParameter("BirthDay", typeof(System.DateTime));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(short));
    
            var birthPlaceParameter = birthPlace != null ?
                new ObjectParameter("BirthPlace", birthPlace) :
                new ObjectParameter("BirthPlace", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var shKarGoziniParameter = shKarGozini != null ?
                new ObjectParameter("ShKarGozini", shKarGozini) :
                new ObjectParameter("ShKarGozini", typeof(string));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(short));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var shShParameter = shSh != null ?
                new ObjectParameter("ShSh", shSh) :
                new ObjectParameter("ShSh", typeof(string));
    
            var meliParameter = meli != null ?
                new ObjectParameter("Meli", meli) :
                new ObjectParameter("Meli", typeof(string));
    
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(short));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customGroupIDParameter = customGroupID.HasValue ?
                new ObjectParameter("CustomGroupID", customGroupID) :
                new ObjectParameter("CustomGroupID", typeof(int));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(short));
    
            var educationTypeIDParameter = educationTypeID.HasValue ?
                new ObjectParameter("EducationTypeID", educationTypeID) :
                new ObjectParameter("EducationTypeID", typeof(int));
    
            var generalParameter = general != null ?
                new ObjectParameter("General", general) :
                new ObjectParameter("General", typeof(string));
    
            var homeParameter = home != null ?
                new ObjectParameter("Home", home) :
                new ObjectParameter("Home", typeof(string));
    
            var officeParameter = office != null ?
                new ObjectParameter("Office", office) :
                new ObjectParameter("Office", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var sMSParameter = sMS != null ?
                new ObjectParameter("SMS", sMS) :
                new ObjectParameter("SMS", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var moarefParameter = moaref != null ?
                new ObjectParameter("Moaref", moaref) :
                new ObjectParameter("Moaref", typeof(string));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var homeAddressParameter = homeAddress != null ?
                new ObjectParameter("HomeAddress", homeAddress) :
                new ObjectParameter("HomeAddress", typeof(string));
    
            var officeAddressParameter = officeAddress != null ?
                new ObjectParameter("OfficeAddress", officeAddress) :
                new ObjectParameter("OfficeAddress", typeof(string));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var diseaseHistoryParameter = diseaseHistory.HasValue ?
                new ObjectParameter("DiseaseHistory", diseaseHistory) :
                new ObjectParameter("DiseaseHistory", typeof(bool));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var marriageTypeIDParameter = marriageTypeID.HasValue ?
                new ObjectParameter("MarriageTypeID", marriageTypeID) :
                new ObjectParameter("MarriageTypeID", typeof(short));
    
            var childNumbParameter = childNumb.HasValue ?
                new ObjectParameter("ChildNumb", childNumb) :
                new ObjectParameter("ChildNumb", typeof(byte));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(short));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(short));
    
            var dsc1Parameter = dsc1 != null ?
                new ObjectParameter("Dsc1", dsc1) :
                new ObjectParameter("Dsc1", typeof(string));
    
            var dsc2Parameter = dsc2 != null ?
                new ObjectParameter("Dsc2", dsc2) :
                new ObjectParameter("Dsc2", typeof(string));
    
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(int));
    
            var khunParameter = khun.HasValue ?
                new ObjectParameter("Khun", khun) :
                new ObjectParameter("Khun", typeof(bool));
    
            var khunDscParameter = khunDsc != null ?
                new ObjectParameter("KhunDsc", khunDsc) :
                new ObjectParameter("KhunDsc", typeof(string));
    
            var hejamatParameter = hejamat.HasValue ?
                new ObjectParameter("Hejamat", hejamat) :
                new ObjectParameter("Hejamat", typeof(bool));
    
            var hejamatDateParameter = hejamatDate.HasValue ?
                new ObjectParameter("HejamatDate", hejamatDate) :
                new ObjectParameter("HejamatDate", typeof(System.DateTime));
    
            var leechtherapyParameter = leechtherapy.HasValue ?
                new ObjectParameter("Leechtherapy", leechtherapy) :
                new ObjectParameter("Leechtherapy", typeof(bool));
    
            var fasdParameter = fasd.HasValue ?
                new ObjectParameter("Fasd", fasd) :
                new ObjectParameter("Fasd", typeof(bool));
    
            var cupPingParameter = cupPing.HasValue ?
                new ObjectParameter("CupPing", cupPing) :
                new ObjectParameter("CupPing", typeof(bool));
    
            var adatParameter = adat.HasValue ?
                new ObjectParameter("Adat", adat) :
                new ObjectParameter("Adat", typeof(bool));
    
            var smokerParameter = smoker.HasValue ?
                new ObjectParameter("Smoker", smoker) :
                new ObjectParameter("Smoker", typeof(bool));
    
            var addictParameter = addict.HasValue ?
                new ObjectParameter("Addict", addict) :
                new ObjectParameter("Addict", typeof(bool));
    
            var alchoholParameter = alchohol.HasValue ?
                new ObjectParameter("Alchohol", alchohol) :
                new ObjectParameter("Alchohol", typeof(bool));
    
            var hasasParameter = hasas.HasValue ?
                new ObjectParameter("Hasas", hasas) :
                new ObjectParameter("Hasas", typeof(bool));
    
            var hasasDscParameter = hasasDsc != null ?
                new ObjectParameter("HasasDsc", hasasDsc) :
                new ObjectParameter("HasasDsc", typeof(string));
    
            var jarahiParameter = jarahi.HasValue ?
                new ObjectParameter("Jarahi", jarahi) :
                new ObjectParameter("Jarahi", typeof(bool));
    
            var jarahiDscParameter = jarahiDsc != null ?
                new ObjectParameter("JarahiDsc", jarahiDsc) :
                new ObjectParameter("JarahiDsc", typeof(string));
    
            var menseParameter = mense.HasValue ?
                new ObjectParameter("Mense", mense) :
                new ObjectParameter("Mense", typeof(bool));
    
            var mense1Parameter = mense1.HasValue ?
                new ObjectParameter("Mense1", mense1) :
                new ObjectParameter("Mense1", typeof(bool));
    
            var mense2Parameter = mense2.HasValue ?
                new ObjectParameter("Mense2", mense2) :
                new ObjectParameter("Mense2", typeof(bool));
    
            var mense3Parameter = mense3.HasValue ?
                new ObjectParameter("Mense3", mense3) :
                new ObjectParameter("Mense3", typeof(bool));
    
            var mense4Parameter = mense4.HasValue ?
                new ObjectParameter("Mense4", mense4) :
                new ObjectParameter("Mense4", typeof(bool));
    
            var mense5Parameter = mense5.HasValue ?
                new ObjectParameter("Mense5", mense5) :
                new ObjectParameter("Mense5", typeof(bool));
    
            var mense6Parameter = mense6.HasValue ?
                new ObjectParameter("Mense6", mense6) :
                new ObjectParameter("Mense6", typeof(bool));
    
            var mense7Parameter = mense7.HasValue ?
                new ObjectParameter("Mense7", mense7) :
                new ObjectParameter("Mense7", typeof(bool));
    
            var paraClinicDscParameter = paraClinicDsc != null ?
                new ObjectParameter("ParaClinicDsc", paraClinicDsc) :
                new ObjectParameter("ParaClinicDsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var delParameter = del.HasValue ?
                new ObjectParameter("Del", del) :
                new ObjectParameter("Del", typeof(bool));
    
            var lockParameter = @lock.HasValue ?
                new ObjectParameter("Lock", @lock) :
                new ObjectParameter("Lock", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Patients_Insert", iDParameter, doctorIDParameter, firstNameParameter, lastNameParameter, fullNameParameter, fatherNameParameter, birthDayParameter, ageParameter, birthPlaceParameter, sexTypeIDParameter, shKarGoziniParameter, insuranceIDParameter, insuranceNumberParameter, yaranehIDParameter, mokamelIDParameter, shShParameter, meliParameter, customerGroupIDParameter, customerSubGroupIDParameter, customGroupIDParameter, jobIDParameter, educationTypeIDParameter, generalParameter, homeParameter, officeParameter, mobileParameter, sMSParameter, emailParameter, moarefParameter, bedParameter, homeAddressParameter, officeAddressParameter, registerDateParameter, diseaseHistoryParameter, customerIDParameter, marriageTypeIDParameter, childNumbParameter, heightParameter, weightParameter, dsc1Parameter, dsc2Parameter, imageIDParameter, khunParameter, khunDscParameter, hejamatParameter, hejamatDateParameter, leechtherapyParameter, fasdParameter, cupPingParameter, adatParameter, smokerParameter, addictParameter, alchoholParameter, hasasParameter, hasasDscParameter, jarahiParameter, jarahiDscParameter, menseParameter, mense1Parameter, mense2Parameter, mense3Parameter, mense4Parameter, mense5Parameter, mense6Parameter, mense7Parameter, paraClinicDscParameter, activeParameter, delParameter, lockParameter, useridParameter);
        }
    
        public virtual int sp_Patients_MakeCard(Nullable<int> iD, string rFID, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var rFIDParameter = rFID != null ?
                new ObjectParameter("RFID", rFID) :
                new ObjectParameter("RFID", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Patients_MakeCard", iDParameter, rFIDParameter, useridParameter);
        }
    
        public virtual int sp_Patients_RemoveCard(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Patients_RemoveCard", iDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Patients_Select_Result> sp_Patients_Select(string alphabet, Nullable<byte> alphabetFa, string firstName, string lastName, string fullName, string phoneNumber, string address, string meli, string shSh, Nullable<int> iD, Nullable<int> iD_Start, Nullable<int> iD_End, Nullable<byte> sexTypeID, Nullable<int> doctorID, Nullable<short> age_Start, Nullable<short> age_End, Nullable<short> insuranceID, string insuranceNumber, Nullable<short> customerGroupID, Nullable<int> customerSubGroupID, Nullable<int> customGroupID, Nullable<short> jobID, Nullable<int> educationTypeID, string registerDate_Start, string registerDate_End, Nullable<int> customerID, Nullable<short> marriageTypeID, Nullable<short> height_Start, Nullable<short> height_End, Nullable<short> weight_Start, Nullable<short> weight_End, Nullable<bool> birthDayNow, string dsc1, string dsc, Nullable<bool> isBed, Nullable<double> bed_start, Nullable<double> bed_end, Nullable<bool> isBes, Nullable<double> bes_start, Nullable<double> bes_end, Nullable<int> active, Nullable<int> topRange)
        {
            var alphabetParameter = alphabet != null ?
                new ObjectParameter("Alphabet", alphabet) :
                new ObjectParameter("Alphabet", typeof(string));
    
            var alphabetFaParameter = alphabetFa.HasValue ?
                new ObjectParameter("AlphabetFa", alphabetFa) :
                new ObjectParameter("AlphabetFa", typeof(byte));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var meliParameter = meli != null ?
                new ObjectParameter("Meli", meli) :
                new ObjectParameter("Meli", typeof(string));
    
            var shShParameter = shSh != null ?
                new ObjectParameter("ShSh", shSh) :
                new ObjectParameter("ShSh", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var age_StartParameter = age_Start.HasValue ?
                new ObjectParameter("Age_Start", age_Start) :
                new ObjectParameter("Age_Start", typeof(short));
    
            var age_EndParameter = age_End.HasValue ?
                new ObjectParameter("Age_End", age_End) :
                new ObjectParameter("Age_End", typeof(short));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(short));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(short));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customGroupIDParameter = customGroupID.HasValue ?
                new ObjectParameter("CustomGroupID", customGroupID) :
                new ObjectParameter("CustomGroupID", typeof(int));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(short));
    
            var educationTypeIDParameter = educationTypeID.HasValue ?
                new ObjectParameter("EducationTypeID", educationTypeID) :
                new ObjectParameter("EducationTypeID", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var marriageTypeIDParameter = marriageTypeID.HasValue ?
                new ObjectParameter("MarriageTypeID", marriageTypeID) :
                new ObjectParameter("MarriageTypeID", typeof(short));
    
            var height_StartParameter = height_Start.HasValue ?
                new ObjectParameter("Height_Start", height_Start) :
                new ObjectParameter("Height_Start", typeof(short));
    
            var height_EndParameter = height_End.HasValue ?
                new ObjectParameter("Height_End", height_End) :
                new ObjectParameter("Height_End", typeof(short));
    
            var weight_StartParameter = weight_Start.HasValue ?
                new ObjectParameter("Weight_Start", weight_Start) :
                new ObjectParameter("Weight_Start", typeof(short));
    
            var weight_EndParameter = weight_End.HasValue ?
                new ObjectParameter("Weight_End", weight_End) :
                new ObjectParameter("Weight_End", typeof(short));
    
            var birthDayNowParameter = birthDayNow.HasValue ?
                new ObjectParameter("BirthDayNow", birthDayNow) :
                new ObjectParameter("BirthDayNow", typeof(bool));
    
            var dsc1Parameter = dsc1 != null ?
                new ObjectParameter("Dsc1", dsc1) :
                new ObjectParameter("Dsc1", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var isBedParameter = isBed.HasValue ?
                new ObjectParameter("IsBed", isBed) :
                new ObjectParameter("IsBed", typeof(bool));
    
            var bed_startParameter = bed_start.HasValue ?
                new ObjectParameter("Bed_start", bed_start) :
                new ObjectParameter("Bed_start", typeof(double));
    
            var bed_endParameter = bed_end.HasValue ?
                new ObjectParameter("Bed_end", bed_end) :
                new ObjectParameter("Bed_end", typeof(double));
    
            var isBesParameter = isBes.HasValue ?
                new ObjectParameter("IsBes", isBes) :
                new ObjectParameter("IsBes", typeof(bool));
    
            var bes_startParameter = bes_start.HasValue ?
                new ObjectParameter("Bes_start", bes_start) :
                new ObjectParameter("Bes_start", typeof(double));
    
            var bes_endParameter = bes_end.HasValue ?
                new ObjectParameter("Bes_end", bes_end) :
                new ObjectParameter("Bes_end", typeof(double));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Patients_Select_Result>("sp_Patients_Select", alphabetParameter, alphabetFaParameter, firstNameParameter, lastNameParameter, fullNameParameter, phoneNumberParameter, addressParameter, meliParameter, shShParameter, iDParameter, iD_StartParameter, iD_EndParameter, sexTypeIDParameter, doctorIDParameter, age_StartParameter, age_EndParameter, insuranceIDParameter, insuranceNumberParameter, customerGroupIDParameter, customerSubGroupIDParameter, customGroupIDParameter, jobIDParameter, educationTypeIDParameter, registerDate_StartParameter, registerDate_EndParameter, customerIDParameter, marriageTypeIDParameter, height_StartParameter, height_EndParameter, weight_StartParameter, weight_EndParameter, birthDayNowParameter, dsc1Parameter, dscParameter, isBedParameter, bed_startParameter, bed_endParameter, isBesParameter, bes_startParameter, bes_endParameter, activeParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Patients_SelectRow_Result> sp_Patients_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Patients_SelectRow_Result>("sp_Patients_SelectRow", iDParameter);
        }
    
        public virtual ObjectResult<sp_Patients_SelectRowByRFID_Result> sp_Patients_SelectRowByRFID(string rFID)
        {
            var rFIDParameter = rFID != null ?
                new ObjectParameter("RFID", rFID) :
                new ObjectParameter("RFID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Patients_SelectRowByRFID_Result>("sp_Patients_SelectRowByRFID", rFIDParameter);
        }
    
        public virtual int sp_Patients_Update(Nullable<int> iD, Nullable<int> doctorID, string firstName, string lastName, string fullName, string fatherName, Nullable<System.DateTime> birthDay, Nullable<short> age, string birthPlace, Nullable<byte> sexTypeID, string shKarGozini, Nullable<short> insuranceID, string insuranceNumber, Nullable<short> yaranehID, Nullable<short> mokamelID, string shSh, string meli, Nullable<short> customerGroupID, Nullable<int> customerSubGroupID, Nullable<int> customGroupID, Nullable<short> jobID, Nullable<int> educationTypeID, string general, string home, string office, string mobile, string sMS, string email, string moaref, Nullable<double> bed, string homeAddress, string officeAddress, Nullable<System.DateTime> registerDate, Nullable<bool> diseaseHistory, Nullable<int> customerID, Nullable<short> marriageTypeID, Nullable<byte> childNumb, Nullable<short> height, Nullable<short> weight, string dsc1, string dsc2, Nullable<int> imageID, Nullable<bool> khun, string khunDsc, Nullable<bool> hejamat, Nullable<System.DateTime> hejamatDate, Nullable<bool> leechtherapy, Nullable<bool> fasd, Nullable<bool> cupPing, Nullable<bool> adat, Nullable<bool> smoker, Nullable<bool> addict, Nullable<bool> alchohol, Nullable<bool> hasas, string hasasDsc, Nullable<bool> jarahi, string jarahiDsc, Nullable<bool> mense, Nullable<bool> mense1, Nullable<bool> mense2, Nullable<bool> mense3, Nullable<bool> mense4, Nullable<bool> mense5, Nullable<bool> mense6, Nullable<bool> mense7, string paraClinicDsc, Nullable<bool> active, Nullable<bool> del, Nullable<bool> @lock, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("BirthDay", birthDay) :
                new ObjectParameter("BirthDay", typeof(System.DateTime));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(short));
    
            var birthPlaceParameter = birthPlace != null ?
                new ObjectParameter("BirthPlace", birthPlace) :
                new ObjectParameter("BirthPlace", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var shKarGoziniParameter = shKarGozini != null ?
                new ObjectParameter("ShKarGozini", shKarGozini) :
                new ObjectParameter("ShKarGozini", typeof(string));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(short));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var shShParameter = shSh != null ?
                new ObjectParameter("ShSh", shSh) :
                new ObjectParameter("ShSh", typeof(string));
    
            var meliParameter = meli != null ?
                new ObjectParameter("Meli", meli) :
                new ObjectParameter("Meli", typeof(string));
    
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(short));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customGroupIDParameter = customGroupID.HasValue ?
                new ObjectParameter("CustomGroupID", customGroupID) :
                new ObjectParameter("CustomGroupID", typeof(int));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(short));
    
            var educationTypeIDParameter = educationTypeID.HasValue ?
                new ObjectParameter("EducationTypeID", educationTypeID) :
                new ObjectParameter("EducationTypeID", typeof(int));
    
            var generalParameter = general != null ?
                new ObjectParameter("General", general) :
                new ObjectParameter("General", typeof(string));
    
            var homeParameter = home != null ?
                new ObjectParameter("Home", home) :
                new ObjectParameter("Home", typeof(string));
    
            var officeParameter = office != null ?
                new ObjectParameter("Office", office) :
                new ObjectParameter("Office", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var sMSParameter = sMS != null ?
                new ObjectParameter("SMS", sMS) :
                new ObjectParameter("SMS", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var moarefParameter = moaref != null ?
                new ObjectParameter("Moaref", moaref) :
                new ObjectParameter("Moaref", typeof(string));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var homeAddressParameter = homeAddress != null ?
                new ObjectParameter("HomeAddress", homeAddress) :
                new ObjectParameter("HomeAddress", typeof(string));
    
            var officeAddressParameter = officeAddress != null ?
                new ObjectParameter("OfficeAddress", officeAddress) :
                new ObjectParameter("OfficeAddress", typeof(string));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var diseaseHistoryParameter = diseaseHistory.HasValue ?
                new ObjectParameter("DiseaseHistory", diseaseHistory) :
                new ObjectParameter("DiseaseHistory", typeof(bool));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var marriageTypeIDParameter = marriageTypeID.HasValue ?
                new ObjectParameter("MarriageTypeID", marriageTypeID) :
                new ObjectParameter("MarriageTypeID", typeof(short));
    
            var childNumbParameter = childNumb.HasValue ?
                new ObjectParameter("ChildNumb", childNumb) :
                new ObjectParameter("ChildNumb", typeof(byte));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(short));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(short));
    
            var dsc1Parameter = dsc1 != null ?
                new ObjectParameter("Dsc1", dsc1) :
                new ObjectParameter("Dsc1", typeof(string));
    
            var dsc2Parameter = dsc2 != null ?
                new ObjectParameter("Dsc2", dsc2) :
                new ObjectParameter("Dsc2", typeof(string));
    
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(int));
    
            var khunParameter = khun.HasValue ?
                new ObjectParameter("Khun", khun) :
                new ObjectParameter("Khun", typeof(bool));
    
            var khunDscParameter = khunDsc != null ?
                new ObjectParameter("KhunDsc", khunDsc) :
                new ObjectParameter("KhunDsc", typeof(string));
    
            var hejamatParameter = hejamat.HasValue ?
                new ObjectParameter("Hejamat", hejamat) :
                new ObjectParameter("Hejamat", typeof(bool));
    
            var hejamatDateParameter = hejamatDate.HasValue ?
                new ObjectParameter("HejamatDate", hejamatDate) :
                new ObjectParameter("HejamatDate", typeof(System.DateTime));
    
            var leechtherapyParameter = leechtherapy.HasValue ?
                new ObjectParameter("Leechtherapy", leechtherapy) :
                new ObjectParameter("Leechtherapy", typeof(bool));
    
            var fasdParameter = fasd.HasValue ?
                new ObjectParameter("Fasd", fasd) :
                new ObjectParameter("Fasd", typeof(bool));
    
            var cupPingParameter = cupPing.HasValue ?
                new ObjectParameter("CupPing", cupPing) :
                new ObjectParameter("CupPing", typeof(bool));
    
            var adatParameter = adat.HasValue ?
                new ObjectParameter("Adat", adat) :
                new ObjectParameter("Adat", typeof(bool));
    
            var smokerParameter = smoker.HasValue ?
                new ObjectParameter("Smoker", smoker) :
                new ObjectParameter("Smoker", typeof(bool));
    
            var addictParameter = addict.HasValue ?
                new ObjectParameter("Addict", addict) :
                new ObjectParameter("Addict", typeof(bool));
    
            var alchoholParameter = alchohol.HasValue ?
                new ObjectParameter("Alchohol", alchohol) :
                new ObjectParameter("Alchohol", typeof(bool));
    
            var hasasParameter = hasas.HasValue ?
                new ObjectParameter("Hasas", hasas) :
                new ObjectParameter("Hasas", typeof(bool));
    
            var hasasDscParameter = hasasDsc != null ?
                new ObjectParameter("HasasDsc", hasasDsc) :
                new ObjectParameter("HasasDsc", typeof(string));
    
            var jarahiParameter = jarahi.HasValue ?
                new ObjectParameter("Jarahi", jarahi) :
                new ObjectParameter("Jarahi", typeof(bool));
    
            var jarahiDscParameter = jarahiDsc != null ?
                new ObjectParameter("JarahiDsc", jarahiDsc) :
                new ObjectParameter("JarahiDsc", typeof(string));
    
            var menseParameter = mense.HasValue ?
                new ObjectParameter("Mense", mense) :
                new ObjectParameter("Mense", typeof(bool));
    
            var mense1Parameter = mense1.HasValue ?
                new ObjectParameter("Mense1", mense1) :
                new ObjectParameter("Mense1", typeof(bool));
    
            var mense2Parameter = mense2.HasValue ?
                new ObjectParameter("Mense2", mense2) :
                new ObjectParameter("Mense2", typeof(bool));
    
            var mense3Parameter = mense3.HasValue ?
                new ObjectParameter("Mense3", mense3) :
                new ObjectParameter("Mense3", typeof(bool));
    
            var mense4Parameter = mense4.HasValue ?
                new ObjectParameter("Mense4", mense4) :
                new ObjectParameter("Mense4", typeof(bool));
    
            var mense5Parameter = mense5.HasValue ?
                new ObjectParameter("Mense5", mense5) :
                new ObjectParameter("Mense5", typeof(bool));
    
            var mense6Parameter = mense6.HasValue ?
                new ObjectParameter("Mense6", mense6) :
                new ObjectParameter("Mense6", typeof(bool));
    
            var mense7Parameter = mense7.HasValue ?
                new ObjectParameter("Mense7", mense7) :
                new ObjectParameter("Mense7", typeof(bool));
    
            var paraClinicDscParameter = paraClinicDsc != null ?
                new ObjectParameter("ParaClinicDsc", paraClinicDsc) :
                new ObjectParameter("ParaClinicDsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var delParameter = del.HasValue ?
                new ObjectParameter("Del", del) :
                new ObjectParameter("Del", typeof(bool));
    
            var lockParameter = @lock.HasValue ?
                new ObjectParameter("Lock", @lock) :
                new ObjectParameter("Lock", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Patients_Update", iDParameter, doctorIDParameter, firstNameParameter, lastNameParameter, fullNameParameter, fatherNameParameter, birthDayParameter, ageParameter, birthPlaceParameter, sexTypeIDParameter, shKarGoziniParameter, insuranceIDParameter, insuranceNumberParameter, yaranehIDParameter, mokamelIDParameter, shShParameter, meliParameter, customerGroupIDParameter, customerSubGroupIDParameter, customGroupIDParameter, jobIDParameter, educationTypeIDParameter, generalParameter, homeParameter, officeParameter, mobileParameter, sMSParameter, emailParameter, moarefParameter, bedParameter, homeAddressParameter, officeAddressParameter, registerDateParameter, diseaseHistoryParameter, customerIDParameter, marriageTypeIDParameter, childNumbParameter, heightParameter, weightParameter, dsc1Parameter, dsc2Parameter, imageIDParameter, khunParameter, khunDscParameter, hejamatParameter, hejamatDateParameter, leechtherapyParameter, fasdParameter, cupPingParameter, adatParameter, smokerParameter, addictParameter, alchoholParameter, hasasParameter, hasasDscParameter, jarahiParameter, jarahiDscParameter, menseParameter, mense1Parameter, mense2Parameter, mense3Parameter, mense4Parameter, mense5Parameter, mense6Parameter, mense7Parameter, paraClinicDscParameter, activeParameter, delParameter, lockParameter, useridParameter);
        }
    
        public virtual int sp_Payments_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Payments_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Payments_DeleteAll(Nullable<int> iD_Start, Nullable<int> iD_End, Nullable<int> customerID, Nullable<double> bed_Start, Nullable<double> bed_End, Nullable<double> bes_Start, Nullable<double> bes_End, Nullable<int> bankID, string bankName, string accountNumber, Nullable<byte> paymentInOutTypeID, Nullable<short> paymentTypeID, string serial, Nullable<byte> payerTypeID, string payerName, string payerBank, string paymentDate_Start, string paymentDate_End, string paymentTime_Start, string paymentTime_End, Nullable<byte> chequeStateID, string dsc, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange, Nullable<int> delUserid)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var bed_StartParameter = bed_Start.HasValue ?
                new ObjectParameter("Bed_Start", bed_Start) :
                new ObjectParameter("Bed_Start", typeof(double));
    
            var bed_EndParameter = bed_End.HasValue ?
                new ObjectParameter("Bed_End", bed_End) :
                new ObjectParameter("Bed_End", typeof(double));
    
            var bes_StartParameter = bes_Start.HasValue ?
                new ObjectParameter("Bes_Start", bes_Start) :
                new ObjectParameter("Bes_Start", typeof(double));
    
            var bes_EndParameter = bes_End.HasValue ?
                new ObjectParameter("Bes_End", bes_End) :
                new ObjectParameter("Bes_End", typeof(double));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var paymentInOutTypeIDParameter = paymentInOutTypeID.HasValue ?
                new ObjectParameter("PaymentInOutTypeID", paymentInOutTypeID) :
                new ObjectParameter("PaymentInOutTypeID", typeof(byte));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var serialParameter = serial != null ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(string));
    
            var payerTypeIDParameter = payerTypeID.HasValue ?
                new ObjectParameter("PayerTypeID", payerTypeID) :
                new ObjectParameter("PayerTypeID", typeof(byte));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var payerBankParameter = payerBank != null ?
                new ObjectParameter("PayerBank", payerBank) :
                new ObjectParameter("PayerBank", typeof(string));
    
            var paymentDate_StartParameter = paymentDate_Start != null ?
                new ObjectParameter("PaymentDate_Start", paymentDate_Start) :
                new ObjectParameter("PaymentDate_Start", typeof(string));
    
            var paymentDate_EndParameter = paymentDate_End != null ?
                new ObjectParameter("PaymentDate_End", paymentDate_End) :
                new ObjectParameter("PaymentDate_End", typeof(string));
    
            var paymentTime_StartParameter = paymentTime_Start != null ?
                new ObjectParameter("PaymentTime_Start", paymentTime_Start) :
                new ObjectParameter("PaymentTime_Start", typeof(string));
    
            var paymentTime_EndParameter = paymentTime_End != null ?
                new ObjectParameter("PaymentTime_End", paymentTime_End) :
                new ObjectParameter("PaymentTime_End", typeof(string));
    
            var chequeStateIDParameter = chequeStateID.HasValue ?
                new ObjectParameter("ChequeStateID", chequeStateID) :
                new ObjectParameter("ChequeStateID", typeof(byte));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            var delUseridParameter = delUserid.HasValue ?
                new ObjectParameter("DelUserid", delUserid) :
                new ObjectParameter("DelUserid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Payments_DeleteAll", iD_StartParameter, iD_EndParameter, customerIDParameter, bed_StartParameter, bed_EndParameter, bes_StartParameter, bes_EndParameter, bankIDParameter, bankNameParameter, accountNumberParameter, paymentInOutTypeIDParameter, paymentTypeIDParameter, serialParameter, payerTypeIDParameter, payerNameParameter, payerBankParameter, paymentDate_StartParameter, paymentDate_EndParameter, paymentTime_StartParameter, paymentTime_EndParameter, chequeStateIDParameter, dscParameter, rolidParameter, useridParameter, topRangeParameter, delUseridParameter);
        }
    
        public virtual int sp_Payments_Insert(Nullable<int> iD, Nullable<int> accountID, Nullable<int> customerID, Nullable<int> bankID, string bankName, Nullable<int> chequeReceivedID, Nullable<int> chequePaymentID, string accountNumber, Nullable<byte> paymentInOutTypeID, Nullable<short> paymentTypeID, string serial, Nullable<byte> payerTypeID, string payerName, string payerMeli, string payerAddress, string payerBank, Nullable<double> bed, Nullable<double> bes, Nullable<System.DateTime> paymentDate, Nullable<byte> chequeStateID, string dsc, Nullable<int> rolid, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var chequeReceivedIDParameter = chequeReceivedID.HasValue ?
                new ObjectParameter("ChequeReceivedID", chequeReceivedID) :
                new ObjectParameter("ChequeReceivedID", typeof(int));
    
            var chequePaymentIDParameter = chequePaymentID.HasValue ?
                new ObjectParameter("ChequePaymentID", chequePaymentID) :
                new ObjectParameter("ChequePaymentID", typeof(int));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var paymentInOutTypeIDParameter = paymentInOutTypeID.HasValue ?
                new ObjectParameter("PaymentInOutTypeID", paymentInOutTypeID) :
                new ObjectParameter("PaymentInOutTypeID", typeof(byte));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var serialParameter = serial != null ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(string));
    
            var payerTypeIDParameter = payerTypeID.HasValue ?
                new ObjectParameter("PayerTypeID", payerTypeID) :
                new ObjectParameter("PayerTypeID", typeof(byte));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var payerMeliParameter = payerMeli != null ?
                new ObjectParameter("PayerMeli", payerMeli) :
                new ObjectParameter("PayerMeli", typeof(string));
    
            var payerAddressParameter = payerAddress != null ?
                new ObjectParameter("PayerAddress", payerAddress) :
                new ObjectParameter("PayerAddress", typeof(string));
    
            var payerBankParameter = payerBank != null ?
                new ObjectParameter("PayerBank", payerBank) :
                new ObjectParameter("PayerBank", typeof(string));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var besParameter = bes.HasValue ?
                new ObjectParameter("Bes", bes) :
                new ObjectParameter("Bes", typeof(double));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var chequeStateIDParameter = chequeStateID.HasValue ?
                new ObjectParameter("ChequeStateID", chequeStateID) :
                new ObjectParameter("ChequeStateID", typeof(byte));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Payments_Insert", iDParameter, accountIDParameter, customerIDParameter, bankIDParameter, bankNameParameter, chequeReceivedIDParameter, chequePaymentIDParameter, accountNumberParameter, paymentInOutTypeIDParameter, paymentTypeIDParameter, serialParameter, payerTypeIDParameter, payerNameParameter, payerMeliParameter, payerAddressParameter, payerBankParameter, bedParameter, besParameter, paymentDateParameter, chequeStateIDParameter, dscParameter, rolidParameter, useridParameter);
        }
    
        public virtual int sp_Payments_Select(Nullable<int> iD_Start, Nullable<int> iD_End, Nullable<int> customerID, Nullable<double> bed_Start, Nullable<double> bed_End, Nullable<double> bes_Start, Nullable<double> bes_End, Nullable<int> bankID, string bankName, string accountNumber, Nullable<byte> paymentInOutTypeID, Nullable<short> paymentTypeID, string serial, Nullable<byte> payerTypeID, string payerName, string payerBank, string paymentDate_Start, string paymentDate_End, string paymentTime_Start, string paymentTime_End, Nullable<byte> chequeStateID, string dsc, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var bed_StartParameter = bed_Start.HasValue ?
                new ObjectParameter("Bed_Start", bed_Start) :
                new ObjectParameter("Bed_Start", typeof(double));
    
            var bed_EndParameter = bed_End.HasValue ?
                new ObjectParameter("Bed_End", bed_End) :
                new ObjectParameter("Bed_End", typeof(double));
    
            var bes_StartParameter = bes_Start.HasValue ?
                new ObjectParameter("Bes_Start", bes_Start) :
                new ObjectParameter("Bes_Start", typeof(double));
    
            var bes_EndParameter = bes_End.HasValue ?
                new ObjectParameter("Bes_End", bes_End) :
                new ObjectParameter("Bes_End", typeof(double));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var paymentInOutTypeIDParameter = paymentInOutTypeID.HasValue ?
                new ObjectParameter("PaymentInOutTypeID", paymentInOutTypeID) :
                new ObjectParameter("PaymentInOutTypeID", typeof(byte));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var serialParameter = serial != null ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(string));
    
            var payerTypeIDParameter = payerTypeID.HasValue ?
                new ObjectParameter("PayerTypeID", payerTypeID) :
                new ObjectParameter("PayerTypeID", typeof(byte));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var payerBankParameter = payerBank != null ?
                new ObjectParameter("PayerBank", payerBank) :
                new ObjectParameter("PayerBank", typeof(string));
    
            var paymentDate_StartParameter = paymentDate_Start != null ?
                new ObjectParameter("PaymentDate_Start", paymentDate_Start) :
                new ObjectParameter("PaymentDate_Start", typeof(string));
    
            var paymentDate_EndParameter = paymentDate_End != null ?
                new ObjectParameter("PaymentDate_End", paymentDate_End) :
                new ObjectParameter("PaymentDate_End", typeof(string));
    
            var paymentTime_StartParameter = paymentTime_Start != null ?
                new ObjectParameter("PaymentTime_Start", paymentTime_Start) :
                new ObjectParameter("PaymentTime_Start", typeof(string));
    
            var paymentTime_EndParameter = paymentTime_End != null ?
                new ObjectParameter("PaymentTime_End", paymentTime_End) :
                new ObjectParameter("PaymentTime_End", typeof(string));
    
            var chequeStateIDParameter = chequeStateID.HasValue ?
                new ObjectParameter("ChequeStateID", chequeStateID) :
                new ObjectParameter("ChequeStateID", typeof(byte));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Payments_Select", iD_StartParameter, iD_EndParameter, customerIDParameter, bed_StartParameter, bed_EndParameter, bes_StartParameter, bes_EndParameter, bankIDParameter, bankNameParameter, accountNumberParameter, paymentInOutTypeIDParameter, paymentTypeIDParameter, serialParameter, payerTypeIDParameter, payerNameParameter, payerBankParameter, paymentDate_StartParameter, paymentDate_EndParameter, paymentTime_StartParameter, paymentTime_EndParameter, chequeStateIDParameter, dscParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Payments_SelectRow_Result> sp_Payments_SelectRow(Nullable<int> iD, Nullable<int> chequePaymentID, Nullable<int> chequeReceivedID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var chequePaymentIDParameter = chequePaymentID.HasValue ?
                new ObjectParameter("ChequePaymentID", chequePaymentID) :
                new ObjectParameter("ChequePaymentID", typeof(int));
    
            var chequeReceivedIDParameter = chequeReceivedID.HasValue ?
                new ObjectParameter("ChequeReceivedID", chequeReceivedID) :
                new ObjectParameter("ChequeReceivedID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Payments_SelectRow_Result>("sp_Payments_SelectRow", iDParameter, chequePaymentIDParameter, chequeReceivedIDParameter);
        }
    
        public virtual int sp_Payments_Update(Nullable<int> iD, Nullable<int> accountID, Nullable<int> customerID, Nullable<int> bankID, string bankName, Nullable<int> chequeReceivedID, Nullable<int> chequePaymentID, string accountNumber, Nullable<byte> paymentInOutTypeID, Nullable<short> paymentTypeID, string serial, Nullable<byte> payerTypeID, string payerName, string payerMeli, string payerAddress, string payerBank, Nullable<double> bed, Nullable<double> bes, Nullable<System.DateTime> paymentDate, Nullable<byte> chequeStateID, string dsc, Nullable<int> rolid, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var chequeReceivedIDParameter = chequeReceivedID.HasValue ?
                new ObjectParameter("ChequeReceivedID", chequeReceivedID) :
                new ObjectParameter("ChequeReceivedID", typeof(int));
    
            var chequePaymentIDParameter = chequePaymentID.HasValue ?
                new ObjectParameter("ChequePaymentID", chequePaymentID) :
                new ObjectParameter("ChequePaymentID", typeof(int));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var paymentInOutTypeIDParameter = paymentInOutTypeID.HasValue ?
                new ObjectParameter("PaymentInOutTypeID", paymentInOutTypeID) :
                new ObjectParameter("PaymentInOutTypeID", typeof(byte));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var serialParameter = serial != null ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(string));
    
            var payerTypeIDParameter = payerTypeID.HasValue ?
                new ObjectParameter("PayerTypeID", payerTypeID) :
                new ObjectParameter("PayerTypeID", typeof(byte));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var payerMeliParameter = payerMeli != null ?
                new ObjectParameter("PayerMeli", payerMeli) :
                new ObjectParameter("PayerMeli", typeof(string));
    
            var payerAddressParameter = payerAddress != null ?
                new ObjectParameter("PayerAddress", payerAddress) :
                new ObjectParameter("PayerAddress", typeof(string));
    
            var payerBankParameter = payerBank != null ?
                new ObjectParameter("PayerBank", payerBank) :
                new ObjectParameter("PayerBank", typeof(string));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var besParameter = bes.HasValue ?
                new ObjectParameter("Bes", bes) :
                new ObjectParameter("Bes", typeof(double));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var chequeStateIDParameter = chequeStateID.HasValue ?
                new ObjectParameter("ChequeStateID", chequeStateID) :
                new ObjectParameter("ChequeStateID", typeof(byte));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Payments_Update", iDParameter, accountIDParameter, customerIDParameter, bankIDParameter, bankNameParameter, chequeReceivedIDParameter, chequePaymentIDParameter, accountNumberParameter, paymentInOutTypeIDParameter, paymentTypeIDParameter, serialParameter, payerTypeIDParameter, payerNameParameter, payerMeliParameter, payerAddressParameter, payerBankParameter, bedParameter, besParameter, paymentDateParameter, chequeStateIDParameter, dscParameter, rolidParameter, useridParameter);
        }
    
        public virtual int sp_PaymentStates_Delete(Nullable<short> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PaymentStates_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_PaymentStates_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PaymentStates_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_PaymentStates_Select_Result> sp_PaymentStates_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PaymentStates_Select_Result>("sp_PaymentStates_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_PaymentStates_SelectRow_Result> sp_PaymentStates_SelectRow(Nullable<short> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PaymentStates_SelectRow_Result>("sp_PaymentStates_SelectRow", iDParameter);
        }
    
        public virtual int sp_PaymentStates_Update(Nullable<short> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PaymentStates_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_PaymentTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PaymentTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_PaymentTypes_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PaymentTypes_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_PaymentTypes_Select_Result> sp_PaymentTypes_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PaymentTypes_Select_Result>("sp_PaymentTypes_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_PaymentTypes_SelectRow_Result> sp_PaymentTypes_SelectRow(Nullable<short> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PaymentTypes_SelectRow_Result>("sp_PaymentTypes_SelectRow", iDParameter);
        }
    
        public virtual ObjectResult<sp_Permissions_Select_Result> sp_Permissions_Select(Nullable<int> userID, string validName, string appValid)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var validNameParameter = validName != null ?
                new ObjectParameter("ValidName", validName) :
                new ObjectParameter("ValidName", typeof(string));
    
            var appValidParameter = appValid != null ?
                new ObjectParameter("AppValid", appValid) :
                new ObjectParameter("AppValid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Permissions_Select_Result>("sp_Permissions_Select", userIDParameter, validNameParameter, appValidParameter);
        }
    
        public virtual int sp_PetRaces_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PetRaces_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_PetRaces_Insert(Nullable<int> petTypeID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var petTypeIDParameter = petTypeID.HasValue ?
                new ObjectParameter("PetTypeID", petTypeID) :
                new ObjectParameter("PetTypeID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PetRaces_Insert", petTypeIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_PetRaces_Select_Result> sp_PetRaces_Select(Nullable<int> petTypeID, string name)
        {
            var petTypeIDParameter = petTypeID.HasValue ?
                new ObjectParameter("PetTypeID", petTypeID) :
                new ObjectParameter("PetTypeID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PetRaces_Select_Result>("sp_PetRaces_Select", petTypeIDParameter, nameParameter);
        }
    
        public virtual ObjectResult<sp_PetRaces_SelectRow_Result> sp_PetRaces_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PetRaces_SelectRow_Result>("sp_PetRaces_SelectRow", iDParameter);
        }
    
        public virtual int sp_PetRaces_Update(Nullable<int> iD, Nullable<int> petTypeID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var petTypeIDParameter = petTypeID.HasValue ?
                new ObjectParameter("PetTypeID", petTypeID) :
                new ObjectParameter("PetTypeID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PetRaces_Update", iDParameter, petTypeIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Pets_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Pets_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Pets_Insert(Nullable<short> petTypeID, Nullable<int> petRaceID, Nullable<short> petSexTypeID, Nullable<int> patientID, Nullable<int> iD, string petName, string petColor, Nullable<System.DateTime> birthDay, Nullable<short> age, Nullable<short> height, Nullable<short> weight, string bCS, Nullable<bool> aqim, string aqimDsc, Nullable<short> foodTypeID, string food, string foodDsc, Nullable<bool> vaccine, string vaccineDsc, Nullable<bool> diseaseHistory, string diseaseHistoryDsc, Nullable<bool> p_FoodSensitivity, string foodSensitivityDsc, Nullable<bool> p_FoodOffer, string foodOfferDsc, Nullable<bool> p_SkinSensitivity, string skinSensitivityDsc, Nullable<bool> behaviorProblem, string behaviorProblemDsc, string dsc, Nullable<int> imageID1, Nullable<int> imageID2, Nullable<int> imageID3, Nullable<bool> active, Nullable<int> userid)
        {
            var petTypeIDParameter = petTypeID.HasValue ?
                new ObjectParameter("PetTypeID", petTypeID) :
                new ObjectParameter("PetTypeID", typeof(short));
    
            var petRaceIDParameter = petRaceID.HasValue ?
                new ObjectParameter("PetRaceID", petRaceID) :
                new ObjectParameter("PetRaceID", typeof(int));
    
            var petSexTypeIDParameter = petSexTypeID.HasValue ?
                new ObjectParameter("PetSexTypeID", petSexTypeID) :
                new ObjectParameter("PetSexTypeID", typeof(short));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var petNameParameter = petName != null ?
                new ObjectParameter("PetName", petName) :
                new ObjectParameter("PetName", typeof(string));
    
            var petColorParameter = petColor != null ?
                new ObjectParameter("PetColor", petColor) :
                new ObjectParameter("PetColor", typeof(string));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("BirthDay", birthDay) :
                new ObjectParameter("BirthDay", typeof(System.DateTime));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(short));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(short));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(short));
    
            var bCSParameter = bCS != null ?
                new ObjectParameter("BCS", bCS) :
                new ObjectParameter("BCS", typeof(string));
    
            var aqimParameter = aqim.HasValue ?
                new ObjectParameter("Aqim", aqim) :
                new ObjectParameter("Aqim", typeof(bool));
    
            var aqimDscParameter = aqimDsc != null ?
                new ObjectParameter("AqimDsc", aqimDsc) :
                new ObjectParameter("AqimDsc", typeof(string));
    
            var foodTypeIDParameter = foodTypeID.HasValue ?
                new ObjectParameter("FoodTypeID", foodTypeID) :
                new ObjectParameter("FoodTypeID", typeof(short));
    
            var foodParameter = food != null ?
                new ObjectParameter("Food", food) :
                new ObjectParameter("Food", typeof(string));
    
            var foodDscParameter = foodDsc != null ?
                new ObjectParameter("FoodDsc", foodDsc) :
                new ObjectParameter("FoodDsc", typeof(string));
    
            var vaccineParameter = vaccine.HasValue ?
                new ObjectParameter("vaccine", vaccine) :
                new ObjectParameter("vaccine", typeof(bool));
    
            var vaccineDscParameter = vaccineDsc != null ?
                new ObjectParameter("VaccineDsc", vaccineDsc) :
                new ObjectParameter("VaccineDsc", typeof(string));
    
            var diseaseHistoryParameter = diseaseHistory.HasValue ?
                new ObjectParameter("DiseaseHistory", diseaseHistory) :
                new ObjectParameter("DiseaseHistory", typeof(bool));
    
            var diseaseHistoryDscParameter = diseaseHistoryDsc != null ?
                new ObjectParameter("DiseaseHistoryDsc", diseaseHistoryDsc) :
                new ObjectParameter("DiseaseHistoryDsc", typeof(string));
    
            var p_FoodSensitivityParameter = p_FoodSensitivity.HasValue ?
                new ObjectParameter("p_FoodSensitivity", p_FoodSensitivity) :
                new ObjectParameter("p_FoodSensitivity", typeof(bool));
    
            var foodSensitivityDscParameter = foodSensitivityDsc != null ?
                new ObjectParameter("FoodSensitivityDsc", foodSensitivityDsc) :
                new ObjectParameter("FoodSensitivityDsc", typeof(string));
    
            var p_FoodOfferParameter = p_FoodOffer.HasValue ?
                new ObjectParameter("p_FoodOffer", p_FoodOffer) :
                new ObjectParameter("p_FoodOffer", typeof(bool));
    
            var foodOfferDscParameter = foodOfferDsc != null ?
                new ObjectParameter("FoodOfferDsc", foodOfferDsc) :
                new ObjectParameter("FoodOfferDsc", typeof(string));
    
            var p_SkinSensitivityParameter = p_SkinSensitivity.HasValue ?
                new ObjectParameter("p_SkinSensitivity", p_SkinSensitivity) :
                new ObjectParameter("p_SkinSensitivity", typeof(bool));
    
            var skinSensitivityDscParameter = skinSensitivityDsc != null ?
                new ObjectParameter("SkinSensitivityDsc", skinSensitivityDsc) :
                new ObjectParameter("SkinSensitivityDsc", typeof(string));
    
            var behaviorProblemParameter = behaviorProblem.HasValue ?
                new ObjectParameter("BehaviorProblem", behaviorProblem) :
                new ObjectParameter("BehaviorProblem", typeof(bool));
    
            var behaviorProblemDscParameter = behaviorProblemDsc != null ?
                new ObjectParameter("BehaviorProblemDsc", behaviorProblemDsc) :
                new ObjectParameter("BehaviorProblemDsc", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var imageID1Parameter = imageID1.HasValue ?
                new ObjectParameter("ImageID1", imageID1) :
                new ObjectParameter("ImageID1", typeof(int));
    
            var imageID2Parameter = imageID2.HasValue ?
                new ObjectParameter("ImageID2", imageID2) :
                new ObjectParameter("ImageID2", typeof(int));
    
            var imageID3Parameter = imageID3.HasValue ?
                new ObjectParameter("ImageID3", imageID3) :
                new ObjectParameter("ImageID3", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Pets_Insert", petTypeIDParameter, petRaceIDParameter, petSexTypeIDParameter, patientIDParameter, iDParameter, petNameParameter, petColorParameter, birthDayParameter, ageParameter, heightParameter, weightParameter, bCSParameter, aqimParameter, aqimDscParameter, foodTypeIDParameter, foodParameter, foodDscParameter, vaccineParameter, vaccineDscParameter, diseaseHistoryParameter, diseaseHistoryDscParameter, p_FoodSensitivityParameter, foodSensitivityDscParameter, p_FoodOfferParameter, foodOfferDscParameter, p_SkinSensitivityParameter, skinSensitivityDscParameter, behaviorProblemParameter, behaviorProblemDscParameter, dscParameter, imageID1Parameter, imageID2Parameter, imageID3Parameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Pets_Select_Result> sp_Pets_Select(Nullable<int> petTypeID, Nullable<int> petRaceID, Nullable<int> patientID, string petName, Nullable<int> active)
        {
            var petTypeIDParameter = petTypeID.HasValue ?
                new ObjectParameter("PetTypeID", petTypeID) :
                new ObjectParameter("PetTypeID", typeof(int));
    
            var petRaceIDParameter = petRaceID.HasValue ?
                new ObjectParameter("PetRaceID", petRaceID) :
                new ObjectParameter("PetRaceID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var petNameParameter = petName != null ?
                new ObjectParameter("PetName", petName) :
                new ObjectParameter("PetName", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Pets_Select_Result>("sp_Pets_Select", petTypeIDParameter, petRaceIDParameter, patientIDParameter, petNameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_Pets_SelectRow_Result> sp_Pets_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Pets_SelectRow_Result>("sp_Pets_SelectRow", iDParameter);
        }
    
        public virtual int sp_Pets_Update(Nullable<short> petTypeID, Nullable<int> petRaceID, Nullable<short> petSexTypeID, Nullable<int> patientID, Nullable<int> iD, string petName, string petColor, Nullable<System.DateTime> birthDay, Nullable<short> age, Nullable<short> height, Nullable<short> weight, string bCS, Nullable<bool> aqim, string aqimDsc, Nullable<short> foodTypeID, string food, string foodDsc, Nullable<bool> vaccine, string vaccineDsc, Nullable<bool> diseaseHistory, string diseaseHistoryDsc, Nullable<bool> p_FoodSensitivity, string foodSensitivityDsc, Nullable<bool> p_FoodOffer, string foodOfferDsc, Nullable<bool> p_SkinSensitivity, string skinSensitivityDsc, Nullable<bool> behaviorProblem, string behaviorProblemDsc, string dsc, Nullable<int> imageID1, Nullable<int> imageID2, Nullable<int> imageID3, Nullable<bool> active, Nullable<int> userid)
        {
            var petTypeIDParameter = petTypeID.HasValue ?
                new ObjectParameter("PetTypeID", petTypeID) :
                new ObjectParameter("PetTypeID", typeof(short));
    
            var petRaceIDParameter = petRaceID.HasValue ?
                new ObjectParameter("PetRaceID", petRaceID) :
                new ObjectParameter("PetRaceID", typeof(int));
    
            var petSexTypeIDParameter = petSexTypeID.HasValue ?
                new ObjectParameter("PetSexTypeID", petSexTypeID) :
                new ObjectParameter("PetSexTypeID", typeof(short));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var petNameParameter = petName != null ?
                new ObjectParameter("PetName", petName) :
                new ObjectParameter("PetName", typeof(string));
    
            var petColorParameter = petColor != null ?
                new ObjectParameter("PetColor", petColor) :
                new ObjectParameter("PetColor", typeof(string));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("BirthDay", birthDay) :
                new ObjectParameter("BirthDay", typeof(System.DateTime));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(short));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(short));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(short));
    
            var bCSParameter = bCS != null ?
                new ObjectParameter("BCS", bCS) :
                new ObjectParameter("BCS", typeof(string));
    
            var aqimParameter = aqim.HasValue ?
                new ObjectParameter("Aqim", aqim) :
                new ObjectParameter("Aqim", typeof(bool));
    
            var aqimDscParameter = aqimDsc != null ?
                new ObjectParameter("AqimDsc", aqimDsc) :
                new ObjectParameter("AqimDsc", typeof(string));
    
            var foodTypeIDParameter = foodTypeID.HasValue ?
                new ObjectParameter("FoodTypeID", foodTypeID) :
                new ObjectParameter("FoodTypeID", typeof(short));
    
            var foodParameter = food != null ?
                new ObjectParameter("Food", food) :
                new ObjectParameter("Food", typeof(string));
    
            var foodDscParameter = foodDsc != null ?
                new ObjectParameter("FoodDsc", foodDsc) :
                new ObjectParameter("FoodDsc", typeof(string));
    
            var vaccineParameter = vaccine.HasValue ?
                new ObjectParameter("Vaccine", vaccine) :
                new ObjectParameter("Vaccine", typeof(bool));
    
            var vaccineDscParameter = vaccineDsc != null ?
                new ObjectParameter("VaccineDsc", vaccineDsc) :
                new ObjectParameter("VaccineDsc", typeof(string));
    
            var diseaseHistoryParameter = diseaseHistory.HasValue ?
                new ObjectParameter("DiseaseHistory", diseaseHistory) :
                new ObjectParameter("DiseaseHistory", typeof(bool));
    
            var diseaseHistoryDscParameter = diseaseHistoryDsc != null ?
                new ObjectParameter("DiseaseHistoryDsc", diseaseHistoryDsc) :
                new ObjectParameter("DiseaseHistoryDsc", typeof(string));
    
            var p_FoodSensitivityParameter = p_FoodSensitivity.HasValue ?
                new ObjectParameter("p_FoodSensitivity", p_FoodSensitivity) :
                new ObjectParameter("p_FoodSensitivity", typeof(bool));
    
            var foodSensitivityDscParameter = foodSensitivityDsc != null ?
                new ObjectParameter("FoodSensitivityDsc", foodSensitivityDsc) :
                new ObjectParameter("FoodSensitivityDsc", typeof(string));
    
            var p_FoodOfferParameter = p_FoodOffer.HasValue ?
                new ObjectParameter("p_FoodOffer", p_FoodOffer) :
                new ObjectParameter("p_FoodOffer", typeof(bool));
    
            var foodOfferDscParameter = foodOfferDsc != null ?
                new ObjectParameter("FoodOfferDsc", foodOfferDsc) :
                new ObjectParameter("FoodOfferDsc", typeof(string));
    
            var p_SkinSensitivityParameter = p_SkinSensitivity.HasValue ?
                new ObjectParameter("p_SkinSensitivity", p_SkinSensitivity) :
                new ObjectParameter("p_SkinSensitivity", typeof(bool));
    
            var skinSensitivityDscParameter = skinSensitivityDsc != null ?
                new ObjectParameter("SkinSensitivityDsc", skinSensitivityDsc) :
                new ObjectParameter("SkinSensitivityDsc", typeof(string));
    
            var behaviorProblemParameter = behaviorProblem.HasValue ?
                new ObjectParameter("BehaviorProblem", behaviorProblem) :
                new ObjectParameter("BehaviorProblem", typeof(bool));
    
            var behaviorProblemDscParameter = behaviorProblemDsc != null ?
                new ObjectParameter("BehaviorProblemDsc", behaviorProblemDsc) :
                new ObjectParameter("BehaviorProblemDsc", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var imageID1Parameter = imageID1.HasValue ?
                new ObjectParameter("ImageID1", imageID1) :
                new ObjectParameter("ImageID1", typeof(int));
    
            var imageID2Parameter = imageID2.HasValue ?
                new ObjectParameter("ImageID2", imageID2) :
                new ObjectParameter("ImageID2", typeof(int));
    
            var imageID3Parameter = imageID3.HasValue ?
                new ObjectParameter("ImageID3", imageID3) :
                new ObjectParameter("ImageID3", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Pets_Update", petTypeIDParameter, petRaceIDParameter, petSexTypeIDParameter, patientIDParameter, iDParameter, petNameParameter, petColorParameter, birthDayParameter, ageParameter, heightParameter, weightParameter, bCSParameter, aqimParameter, aqimDscParameter, foodTypeIDParameter, foodParameter, foodDscParameter, vaccineParameter, vaccineDscParameter, diseaseHistoryParameter, diseaseHistoryDscParameter, p_FoodSensitivityParameter, foodSensitivityDscParameter, p_FoodOfferParameter, foodOfferDscParameter, p_SkinSensitivityParameter, skinSensitivityDscParameter, behaviorProblemParameter, behaviorProblemDscParameter, dscParameter, imageID1Parameter, imageID2Parameter, imageID3Parameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_PetSexTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PetSexTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_PetSexTypes_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PetSexTypes_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_PetSexTypes_Select_Result> sp_PetSexTypes_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PetSexTypes_Select_Result>("sp_PetSexTypes_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_PetSexTypes_SelectRow_Result> sp_PetSexTypes_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PetSexTypes_SelectRow_Result>("sp_PetSexTypes_SelectRow", iDParameter);
        }
    
        public virtual int sp_PetSexTypes_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PetSexTypes_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_PetTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PetTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_PetTypes_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PetTypes_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_PetTypes_Select_Result> sp_PetTypes_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PetTypes_Select_Result>("sp_PetTypes_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_PetTypes_SelectRow_Result> sp_PetTypes_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PetTypes_SelectRow_Result>("sp_PetTypes_SelectRow", iDParameter);
        }
    
        public virtual int sp_PetTypes_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PetTypes_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_PhoneNumbers_Insert(Nullable<int> customerID, Nullable<byte> phoneTypeID, string phoneNumber)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var phoneTypeIDParameter = phoneTypeID.HasValue ?
                new ObjectParameter("PhoneTypeID", phoneTypeID) :
                new ObjectParameter("PhoneTypeID", typeof(byte));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PhoneNumbers_Insert", customerIDParameter, phoneTypeIDParameter, phoneNumberParameter);
        }
    
        public virtual ObjectResult<sp_PhoneNumbers_Select_Result> sp_PhoneNumbers_Select(Nullable<int> iD, Nullable<int> customerID, Nullable<byte> phoneTypeID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var phoneTypeIDParameter = phoneTypeID.HasValue ?
                new ObjectParameter("PhoneTypeID", phoneTypeID) :
                new ObjectParameter("PhoneTypeID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PhoneNumbers_Select_Result>("sp_PhoneNumbers_Select", iDParameter, customerIDParameter, phoneTypeIDParameter);
        }
    
        public virtual int sp_PhoneNumbers_Update(Nullable<int> iD, Nullable<int> customerID, Nullable<byte> phoneTypeID, string phoneNumber)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var phoneTypeIDParameter = phoneTypeID.HasValue ?
                new ObjectParameter("PhoneTypeID", phoneTypeID) :
                new ObjectParameter("PhoneTypeID", typeof(byte));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PhoneNumbers_Update", iDParameter, customerIDParameter, phoneTypeIDParameter, phoneNumberParameter);
        }
    
        public virtual ObjectResult<sp_PoetryRandom_Select_Result> sp_PoetryRandom_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PoetryRandom_Select_Result>("sp_PoetryRandom_Select");
        }
    
        public virtual int sp_PrescriptionCashTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PrescriptionCashTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_PrescriptionCashTypes_Insert(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PrescriptionCashTypes_Insert", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_PrescriptionCashTypes_Select_Result> sp_PrescriptionCashTypes_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PrescriptionCashTypes_Select_Result>("sp_PrescriptionCashTypes_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_PrescriptionCashTypes_SelectRow_Result> sp_PrescriptionCashTypes_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PrescriptionCashTypes_SelectRow_Result>("sp_PrescriptionCashTypes_SelectRow", iDParameter);
        }
    
        public virtual int sp_PrescriptionCashTypes_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PrescriptionCashTypes_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_PrescriptionDrugs_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PrescriptionDrugs_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_PrescriptionDrugs_Insert(Nullable<System.DateTime> registerDate, Nullable<int> prescriptionID, Nullable<byte> rowID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemID, Nullable<double> numberOut, Nullable<byte> countingUnitID, string dsc, Nullable<int> userid)
        {
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var rowIDParameter = rowID.HasValue ?
                new ObjectParameter("RowID", rowID) :
                new ObjectParameter("RowID", typeof(byte));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberOutParameter = numberOut.HasValue ?
                new ObjectParameter("NumberOut", numberOut) :
                new ObjectParameter("NumberOut", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PrescriptionDrugs_Insert", registerDateParameter, prescriptionIDParameter, rowIDParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemIDParameter, numberOutParameter, countingUnitIDParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_PrescriptionDrugs_Select_Result> sp_PrescriptionDrugs_Select(string registerDate_Start, string registerDate_End, Nullable<int> prescriptionID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<int> itemID, Nullable<int> userID)
        {
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PrescriptionDrugs_Select_Result>("sp_PrescriptionDrugs_Select", registerDate_StartParameter, registerDate_EndParameter, prescriptionIDParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, itemIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_PrescriptionDrugs_SelectRow_Result> sp_PrescriptionDrugs_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PrescriptionDrugs_SelectRow_Result>("sp_PrescriptionDrugs_SelectRow", iDParameter);
        }
    
        public virtual int sp_PrescriptionDrugs_Update(Nullable<int> iD, Nullable<System.DateTime> registerDate, Nullable<int> prescriptionID, Nullable<byte> rowID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemID, Nullable<double> numberOut, Nullable<byte> countingUnitID, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var rowIDParameter = rowID.HasValue ?
                new ObjectParameter("RowID", rowID) :
                new ObjectParameter("RowID", typeof(byte));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberOutParameter = numberOut.HasValue ?
                new ObjectParameter("NumberOut", numberOut) :
                new ObjectParameter("NumberOut", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PrescriptionDrugs_Update", iDParameter, registerDateParameter, prescriptionIDParameter, rowIDParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemIDParameter, numberOutParameter, countingUnitIDParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_PrescriptionGlasses_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PrescriptionGlasses_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_PrescriptionGlasses_Insert(Nullable<System.DateTime> registerDate, Nullable<int> prescriptionID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<short> glassesTypeID, string farRe1, string farRe2, string farReAxle, string farReInfo, string farLe1, string farLe2, string farLeAxle, string farLeInfo, string farPD, string farPDInfo, string nearRe1, string nearRe2, string nearReAxle, string nearReInfo, string nearLe1, string nearLe2, string nearLeAxle, string nearLeInfo, string nearPD, string nearPDInfo, string dsc, Nullable<int> userid)
        {
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var glassesTypeIDParameter = glassesTypeID.HasValue ?
                new ObjectParameter("GlassesTypeID", glassesTypeID) :
                new ObjectParameter("GlassesTypeID", typeof(short));
    
            var farRe1Parameter = farRe1 != null ?
                new ObjectParameter("FarRe1", farRe1) :
                new ObjectParameter("FarRe1", typeof(string));
    
            var farRe2Parameter = farRe2 != null ?
                new ObjectParameter("FarRe2", farRe2) :
                new ObjectParameter("FarRe2", typeof(string));
    
            var farReAxleParameter = farReAxle != null ?
                new ObjectParameter("FarReAxle", farReAxle) :
                new ObjectParameter("FarReAxle", typeof(string));
    
            var farReInfoParameter = farReInfo != null ?
                new ObjectParameter("FarReInfo", farReInfo) :
                new ObjectParameter("FarReInfo", typeof(string));
    
            var farLe1Parameter = farLe1 != null ?
                new ObjectParameter("FarLe1", farLe1) :
                new ObjectParameter("FarLe1", typeof(string));
    
            var farLe2Parameter = farLe2 != null ?
                new ObjectParameter("FarLe2", farLe2) :
                new ObjectParameter("FarLe2", typeof(string));
    
            var farLeAxleParameter = farLeAxle != null ?
                new ObjectParameter("FarLeAxle", farLeAxle) :
                new ObjectParameter("FarLeAxle", typeof(string));
    
            var farLeInfoParameter = farLeInfo != null ?
                new ObjectParameter("FarLeInfo", farLeInfo) :
                new ObjectParameter("FarLeInfo", typeof(string));
    
            var farPDParameter = farPD != null ?
                new ObjectParameter("FarPD", farPD) :
                new ObjectParameter("FarPD", typeof(string));
    
            var farPDInfoParameter = farPDInfo != null ?
                new ObjectParameter("FarPDInfo", farPDInfo) :
                new ObjectParameter("FarPDInfo", typeof(string));
    
            var nearRe1Parameter = nearRe1 != null ?
                new ObjectParameter("NearRe1", nearRe1) :
                new ObjectParameter("NearRe1", typeof(string));
    
            var nearRe2Parameter = nearRe2 != null ?
                new ObjectParameter("NearRe2", nearRe2) :
                new ObjectParameter("NearRe2", typeof(string));
    
            var nearReAxleParameter = nearReAxle != null ?
                new ObjectParameter("NearReAxle", nearReAxle) :
                new ObjectParameter("NearReAxle", typeof(string));
    
            var nearReInfoParameter = nearReInfo != null ?
                new ObjectParameter("NearReInfo", nearReInfo) :
                new ObjectParameter("NearReInfo", typeof(string));
    
            var nearLe1Parameter = nearLe1 != null ?
                new ObjectParameter("NearLe1", nearLe1) :
                new ObjectParameter("NearLe1", typeof(string));
    
            var nearLe2Parameter = nearLe2 != null ?
                new ObjectParameter("NearLe2", nearLe2) :
                new ObjectParameter("NearLe2", typeof(string));
    
            var nearLeAxleParameter = nearLeAxle != null ?
                new ObjectParameter("NearLeAxle", nearLeAxle) :
                new ObjectParameter("NearLeAxle", typeof(string));
    
            var nearLeInfoParameter = nearLeInfo != null ?
                new ObjectParameter("NearLeInfo", nearLeInfo) :
                new ObjectParameter("NearLeInfo", typeof(string));
    
            var nearPDParameter = nearPD != null ?
                new ObjectParameter("NearPD", nearPD) :
                new ObjectParameter("NearPD", typeof(string));
    
            var nearPDInfoParameter = nearPDInfo != null ?
                new ObjectParameter("NearPDInfo", nearPDInfo) :
                new ObjectParameter("NearPDInfo", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PrescriptionGlasses_Insert", registerDateParameter, prescriptionIDParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, glassesTypeIDParameter, farRe1Parameter, farRe2Parameter, farReAxleParameter, farReInfoParameter, farLe1Parameter, farLe2Parameter, farLeAxleParameter, farLeInfoParameter, farPDParameter, farPDInfoParameter, nearRe1Parameter, nearRe2Parameter, nearReAxleParameter, nearReInfoParameter, nearLe1Parameter, nearLe2Parameter, nearLeAxleParameter, nearLeInfoParameter, nearPDParameter, nearPDInfoParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_PrescriptionGlasses_Select_Result> sp_PrescriptionGlasses_Select(string registerDate_Start, string registerDate_End, Nullable<short> glassesTypeID, Nullable<int> prescriptionID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<int> userID, Nullable<int> topRange)
        {
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var glassesTypeIDParameter = glassesTypeID.HasValue ?
                new ObjectParameter("GlassesTypeID", glassesTypeID) :
                new ObjectParameter("GlassesTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PrescriptionGlasses_Select_Result>("sp_PrescriptionGlasses_Select", registerDate_StartParameter, registerDate_EndParameter, glassesTypeIDParameter, prescriptionIDParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, userIDParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_PrescriptionGlasses_SelectRow_Result> sp_PrescriptionGlasses_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PrescriptionGlasses_SelectRow_Result>("sp_PrescriptionGlasses_SelectRow", iDParameter);
        }
    
        public virtual int sp_PrescriptionGlasses_Update(Nullable<int> iD, Nullable<System.DateTime> registerDate, Nullable<int> prescriptionID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<short> glassesTypeID, string farRe1, string farRe2, string farReAxle, string farReInfo, string farLe1, string farLe2, string farLeAxle, string farLeInfo, string farPD, string farPDInfo, string nearRe1, string nearRe2, string nearReAxle, string nearReInfo, string nearLe1, string nearLe2, string nearLeAxle, string nearLeInfo, string nearPD, string nearPDInfo, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var glassesTypeIDParameter = glassesTypeID.HasValue ?
                new ObjectParameter("GlassesTypeID", glassesTypeID) :
                new ObjectParameter("GlassesTypeID", typeof(short));
    
            var farRe1Parameter = farRe1 != null ?
                new ObjectParameter("FarRe1", farRe1) :
                new ObjectParameter("FarRe1", typeof(string));
    
            var farRe2Parameter = farRe2 != null ?
                new ObjectParameter("FarRe2", farRe2) :
                new ObjectParameter("FarRe2", typeof(string));
    
            var farReAxleParameter = farReAxle != null ?
                new ObjectParameter("FarReAxle", farReAxle) :
                new ObjectParameter("FarReAxle", typeof(string));
    
            var farReInfoParameter = farReInfo != null ?
                new ObjectParameter("FarReInfo", farReInfo) :
                new ObjectParameter("FarReInfo", typeof(string));
    
            var farLe1Parameter = farLe1 != null ?
                new ObjectParameter("FarLe1", farLe1) :
                new ObjectParameter("FarLe1", typeof(string));
    
            var farLe2Parameter = farLe2 != null ?
                new ObjectParameter("FarLe2", farLe2) :
                new ObjectParameter("FarLe2", typeof(string));
    
            var farLeAxleParameter = farLeAxle != null ?
                new ObjectParameter("FarLeAxle", farLeAxle) :
                new ObjectParameter("FarLeAxle", typeof(string));
    
            var farLeInfoParameter = farLeInfo != null ?
                new ObjectParameter("FarLeInfo", farLeInfo) :
                new ObjectParameter("FarLeInfo", typeof(string));
    
            var farPDParameter = farPD != null ?
                new ObjectParameter("FarPD", farPD) :
                new ObjectParameter("FarPD", typeof(string));
    
            var farPDInfoParameter = farPDInfo != null ?
                new ObjectParameter("FarPDInfo", farPDInfo) :
                new ObjectParameter("FarPDInfo", typeof(string));
    
            var nearRe1Parameter = nearRe1 != null ?
                new ObjectParameter("NearRe1", nearRe1) :
                new ObjectParameter("NearRe1", typeof(string));
    
            var nearRe2Parameter = nearRe2 != null ?
                new ObjectParameter("NearRe2", nearRe2) :
                new ObjectParameter("NearRe2", typeof(string));
    
            var nearReAxleParameter = nearReAxle != null ?
                new ObjectParameter("NearReAxle", nearReAxle) :
                new ObjectParameter("NearReAxle", typeof(string));
    
            var nearReInfoParameter = nearReInfo != null ?
                new ObjectParameter("NearReInfo", nearReInfo) :
                new ObjectParameter("NearReInfo", typeof(string));
    
            var nearLe1Parameter = nearLe1 != null ?
                new ObjectParameter("NearLe1", nearLe1) :
                new ObjectParameter("NearLe1", typeof(string));
    
            var nearLe2Parameter = nearLe2 != null ?
                new ObjectParameter("NearLe2", nearLe2) :
                new ObjectParameter("NearLe2", typeof(string));
    
            var nearLeAxleParameter = nearLeAxle != null ?
                new ObjectParameter("NearLeAxle", nearLeAxle) :
                new ObjectParameter("NearLeAxle", typeof(string));
    
            var nearLeInfoParameter = nearLeInfo != null ?
                new ObjectParameter("NearLeInfo", nearLeInfo) :
                new ObjectParameter("NearLeInfo", typeof(string));
    
            var nearPDParameter = nearPD != null ?
                new ObjectParameter("NearPD", nearPD) :
                new ObjectParameter("NearPD", typeof(string));
    
            var nearPDInfoParameter = nearPDInfo != null ?
                new ObjectParameter("NearPDInfo", nearPDInfo) :
                new ObjectParameter("NearPDInfo", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PrescriptionGlasses_Update", iDParameter, registerDateParameter, prescriptionIDParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, glassesTypeIDParameter, farRe1Parameter, farRe2Parameter, farReAxleParameter, farReInfoParameter, farLe1Parameter, farLe2Parameter, farLeAxleParameter, farLeInfoParameter, farPDParameter, farPDInfoParameter, nearRe1Parameter, nearRe2Parameter, nearReAxleParameter, nearReInfoParameter, nearLe1Parameter, nearLe2Parameter, nearLeAxleParameter, nearLeInfoParameter, nearPDParameter, nearPDInfoParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_Prescriptions_Archive(Nullable<int> iD, Nullable<byte> archiveStateID, string archiveDsc, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var archiveStateIDParameter = archiveStateID.HasValue ?
                new ObjectParameter("ArchiveStateID", archiveStateID) :
                new ObjectParameter("ArchiveStateID", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Prescriptions_Archive", iDParameter, archiveStateIDParameter, archiveDscParameter, userIDParameter);
        }
    
        public virtual int sp_Prescriptions_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Prescriptions_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Prescriptions_DeleteAll(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, string expDate_Start, string expDate_End, string receptionDate_Start, string receptionDate_End, Nullable<int> receptionID, Nullable<int> doctorID, Nullable<int> nezamPezeshki, Nullable<int> specialtyID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<int> departmentID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<int> reasonID, Nullable<short> diseaseID, Nullable<short> diagnosisID, Nullable<int> bedID, Nullable<int> bodyID, Nullable<short> serviceTime_Start, Nullable<short> serviceTime_End, string dsc, Nullable<byte> archive, string archiveDsc, Nullable<short> prescriptionCashTypeID, Nullable<int> userid, Nullable<int> topRange, Nullable<int> delUserid)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var expDate_StartParameter = expDate_Start != null ?
                new ObjectParameter("ExpDate_Start", expDate_Start) :
                new ObjectParameter("ExpDate_Start", typeof(string));
    
            var expDate_EndParameter = expDate_End != null ?
                new ObjectParameter("ExpDate_End", expDate_End) :
                new ObjectParameter("ExpDate_End", typeof(string));
    
            var receptionDate_StartParameter = receptionDate_Start != null ?
                new ObjectParameter("ReceptionDate_Start", receptionDate_Start) :
                new ObjectParameter("ReceptionDate_Start", typeof(string));
    
            var receptionDate_EndParameter = receptionDate_End != null ?
                new ObjectParameter("ReceptionDate_End", receptionDate_End) :
                new ObjectParameter("ReceptionDate_End", typeof(string));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var nezamPezeshkiParameter = nezamPezeshki.HasValue ?
                new ObjectParameter("NezamPezeshki", nezamPezeshki) :
                new ObjectParameter("NezamPezeshki", typeof(int));
    
            var specialtyIDParameter = specialtyID.HasValue ?
                new ObjectParameter("SpecialtyID", specialtyID) :
                new ObjectParameter("SpecialtyID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(short));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(short));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var serviceTime_StartParameter = serviceTime_Start.HasValue ?
                new ObjectParameter("ServiceTime_Start", serviceTime_Start) :
                new ObjectParameter("ServiceTime_Start", typeof(short));
    
            var serviceTime_EndParameter = serviceTime_End.HasValue ?
                new ObjectParameter("ServiceTime_End", serviceTime_End) :
                new ObjectParameter("ServiceTime_End", typeof(short));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var prescriptionCashTypeIDParameter = prescriptionCashTypeID.HasValue ?
                new ObjectParameter("PrescriptionCashTypeID", prescriptionCashTypeID) :
                new ObjectParameter("PrescriptionCashTypeID", typeof(short));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            var delUseridParameter = delUserid.HasValue ?
                new ObjectParameter("DelUserid", delUserid) :
                new ObjectParameter("DelUserid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Prescriptions_DeleteAll", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, expDate_StartParameter, expDate_EndParameter, receptionDate_StartParameter, receptionDate_EndParameter, receptionIDParameter, doctorIDParameter, nezamPezeshkiParameter, specialtyIDParameter, assistantIDParameter, patientIDParameter, departmentIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, reasonIDParameter, diseaseIDParameter, diagnosisIDParameter, bedIDParameter, bodyIDParameter, serviceTime_StartParameter, serviceTime_EndParameter, dscParameter, archiveParameter, archiveDscParameter, prescriptionCashTypeIDParameter, useridParameter, topRangeParameter, delUseridParameter);
        }
    
        public virtual int sp_Prescriptions_DeleteByReceptionID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Prescriptions_DeleteByReceptionID", iDParameter);
        }
    
        public virtual int sp_Prescriptions_Insert(Nullable<int> iD, Nullable<short> prescriptionTypeID, Nullable<short> prescriptionCashTypeID, Nullable<System.DateTime> registerDate, Nullable<System.DateTime> expDate, Nullable<System.DateTime> nextVisit, Nullable<short> shiftID, Nullable<int> receptionID, Nullable<int> receptionServiceID, Nullable<byte> rowID, Nullable<int> doctorID, Nullable<int> specialtyID, Nullable<int> assistantID, Nullable<byte> sexTypeID, Nullable<int> patientID, Nullable<int> insuranceID, string insuranceNumber, Nullable<int> pageNumber, Nullable<int> reasonID, Nullable<int> diagnosisID, Nullable<short> diseaseID, Nullable<int> departmentID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> therapyCode, Nullable<int> bodyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, string serviceCode, Nullable<byte> serviceTypeID, Nullable<double> numb, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var prescriptionTypeIDParameter = prescriptionTypeID.HasValue ?
                new ObjectParameter("PrescriptionTypeID", prescriptionTypeID) :
                new ObjectParameter("PrescriptionTypeID", typeof(short));
    
            var prescriptionCashTypeIDParameter = prescriptionCashTypeID.HasValue ?
                new ObjectParameter("PrescriptionCashTypeID", prescriptionCashTypeID) :
                new ObjectParameter("PrescriptionCashTypeID", typeof(short));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var expDateParameter = expDate.HasValue ?
                new ObjectParameter("ExpDate", expDate) :
                new ObjectParameter("ExpDate", typeof(System.DateTime));
    
            var nextVisitParameter = nextVisit.HasValue ?
                new ObjectParameter("NextVisit", nextVisit) :
                new ObjectParameter("NextVisit", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var receptionServiceIDParameter = receptionServiceID.HasValue ?
                new ObjectParameter("ReceptionServiceID", receptionServiceID) :
                new ObjectParameter("ReceptionServiceID", typeof(int));
    
            var rowIDParameter = rowID.HasValue ?
                new ObjectParameter("RowID", rowID) :
                new ObjectParameter("RowID", typeof(byte));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var specialtyIDParameter = specialtyID.HasValue ?
                new ObjectParameter("SpecialtyID", specialtyID) :
                new ObjectParameter("SpecialtyID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(short));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var therapyCodeParameter = therapyCode.HasValue ?
                new ObjectParameter("TherapyCode", therapyCode) :
                new ObjectParameter("TherapyCode", typeof(int));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var serviceCodeParameter = serviceCode != null ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(string));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(byte));
    
            var numbParameter = numb.HasValue ?
                new ObjectParameter("Numb", numb) :
                new ObjectParameter("Numb", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Prescriptions_Insert", iDParameter, prescriptionTypeIDParameter, prescriptionCashTypeIDParameter, registerDateParameter, expDateParameter, nextVisitParameter, shiftIDParameter, receptionIDParameter, receptionServiceIDParameter, rowIDParameter, doctorIDParameter, specialtyIDParameter, assistantIDParameter, sexTypeIDParameter, patientIDParameter, insuranceIDParameter, insuranceNumberParameter, pageNumberParameter, reasonIDParameter, diagnosisIDParameter, diseaseIDParameter, departmentIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, therapyCodeParameter, bodyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, serviceCodeParameter, serviceTypeIDParameter, numbParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_Prescriptions_Recovery(Nullable<int> iD, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Prescriptions_Recovery", iDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_Prescriptions_Select_Result> sp_Prescriptions_Select(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, string expDate_Start, string expDate_End, string receptionDate_Start, string receptionDate_End, Nullable<int> receptionID, Nullable<int> doctorID, Nullable<int> nezamPezeshki, Nullable<int> specialtyID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<int> departmentID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<int> reasonID, Nullable<short> diseaseID, Nullable<short> diagnosisID, Nullable<int> bedID, Nullable<int> bodyID, Nullable<short> serviceTime_Start, Nullable<short> serviceTime_End, string dsc, Nullable<byte> archive, string archiveDsc, Nullable<short> prescriptionCashTypeID, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var expDate_StartParameter = expDate_Start != null ?
                new ObjectParameter("ExpDate_Start", expDate_Start) :
                new ObjectParameter("ExpDate_Start", typeof(string));
    
            var expDate_EndParameter = expDate_End != null ?
                new ObjectParameter("ExpDate_End", expDate_End) :
                new ObjectParameter("ExpDate_End", typeof(string));
    
            var receptionDate_StartParameter = receptionDate_Start != null ?
                new ObjectParameter("ReceptionDate_Start", receptionDate_Start) :
                new ObjectParameter("ReceptionDate_Start", typeof(string));
    
            var receptionDate_EndParameter = receptionDate_End != null ?
                new ObjectParameter("ReceptionDate_End", receptionDate_End) :
                new ObjectParameter("ReceptionDate_End", typeof(string));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var nezamPezeshkiParameter = nezamPezeshki.HasValue ?
                new ObjectParameter("NezamPezeshki", nezamPezeshki) :
                new ObjectParameter("NezamPezeshki", typeof(int));
    
            var specialtyIDParameter = specialtyID.HasValue ?
                new ObjectParameter("SpecialtyID", specialtyID) :
                new ObjectParameter("SpecialtyID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(short));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(short));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var serviceTime_StartParameter = serviceTime_Start.HasValue ?
                new ObjectParameter("ServiceTime_Start", serviceTime_Start) :
                new ObjectParameter("ServiceTime_Start", typeof(short));
    
            var serviceTime_EndParameter = serviceTime_End.HasValue ?
                new ObjectParameter("ServiceTime_End", serviceTime_End) :
                new ObjectParameter("ServiceTime_End", typeof(short));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var prescriptionCashTypeIDParameter = prescriptionCashTypeID.HasValue ?
                new ObjectParameter("PrescriptionCashTypeID", prescriptionCashTypeID) :
                new ObjectParameter("PrescriptionCashTypeID", typeof(short));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Prescriptions_Select_Result>("sp_Prescriptions_Select", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, expDate_StartParameter, expDate_EndParameter, receptionDate_StartParameter, receptionDate_EndParameter, receptionIDParameter, doctorIDParameter, nezamPezeshkiParameter, specialtyIDParameter, assistantIDParameter, patientIDParameter, departmentIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, reasonIDParameter, diseaseIDParameter, diagnosisIDParameter, bedIDParameter, bodyIDParameter, serviceTime_StartParameter, serviceTime_EndParameter, dscParameter, archiveParameter, archiveDscParameter, prescriptionCashTypeIDParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Prescriptions_SelectRow_Result> sp_Prescriptions_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Prescriptions_SelectRow_Result>("sp_Prescriptions_SelectRow", iDParameter);
        }
    
        public virtual ObjectResult<sp_Prescriptions_SelectRowByReceptionID_Result> sp_Prescriptions_SelectRowByReceptionID(Nullable<int> iD, Nullable<int> receptionServiceID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var receptionServiceIDParameter = receptionServiceID.HasValue ?
                new ObjectParameter("ReceptionServiceID", receptionServiceID) :
                new ObjectParameter("ReceptionServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Prescriptions_SelectRowByReceptionID_Result>("sp_Prescriptions_SelectRowByReceptionID", iDParameter, receptionServiceIDParameter);
        }
    
        public virtual int sp_Prescriptions_Update(Nullable<int> iD, Nullable<short> prescriptionTypeID, Nullable<short> prescriptionCashTypeID, Nullable<System.DateTime> registerDate, Nullable<System.DateTime> expDate, Nullable<System.DateTime> nextVisit, Nullable<short> shiftID, Nullable<int> receptionID, Nullable<int> receptionServiceID, Nullable<byte> rowID, Nullable<int> doctorID, Nullable<int> specialtyID, Nullable<int> assistantID, Nullable<byte> sexTypeID, Nullable<int> patientID, Nullable<int> insuranceID, string insuranceNumber, Nullable<int> pageNumber, Nullable<int> reasonID, Nullable<int> diagnosisID, Nullable<short> diseaseID, Nullable<int> departmentID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> therapyCode, Nullable<int> bodyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, string serviceCode, Nullable<byte> serviceTypeID, Nullable<double> numb, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var prescriptionTypeIDParameter = prescriptionTypeID.HasValue ?
                new ObjectParameter("PrescriptionTypeID", prescriptionTypeID) :
                new ObjectParameter("PrescriptionTypeID", typeof(short));
    
            var prescriptionCashTypeIDParameter = prescriptionCashTypeID.HasValue ?
                new ObjectParameter("PrescriptionCashTypeID", prescriptionCashTypeID) :
                new ObjectParameter("PrescriptionCashTypeID", typeof(short));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var expDateParameter = expDate.HasValue ?
                new ObjectParameter("ExpDate", expDate) :
                new ObjectParameter("ExpDate", typeof(System.DateTime));
    
            var nextVisitParameter = nextVisit.HasValue ?
                new ObjectParameter("NextVisit", nextVisit) :
                new ObjectParameter("NextVisit", typeof(System.DateTime));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var receptionServiceIDParameter = receptionServiceID.HasValue ?
                new ObjectParameter("ReceptionServiceID", receptionServiceID) :
                new ObjectParameter("ReceptionServiceID", typeof(int));
    
            var rowIDParameter = rowID.HasValue ?
                new ObjectParameter("RowID", rowID) :
                new ObjectParameter("RowID", typeof(byte));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var specialtyIDParameter = specialtyID.HasValue ?
                new ObjectParameter("SpecialtyID", specialtyID) :
                new ObjectParameter("SpecialtyID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(short));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var therapyCodeParameter = therapyCode.HasValue ?
                new ObjectParameter("TherapyCode", therapyCode) :
                new ObjectParameter("TherapyCode", typeof(int));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var serviceCodeParameter = serviceCode != null ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(string));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(byte));
    
            var numbParameter = numb.HasValue ?
                new ObjectParameter("Numb", numb) :
                new ObjectParameter("Numb", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Prescriptions_Update", iDParameter, prescriptionTypeIDParameter, prescriptionCashTypeIDParameter, registerDateParameter, expDateParameter, nextVisitParameter, shiftIDParameter, receptionIDParameter, receptionServiceIDParameter, rowIDParameter, doctorIDParameter, specialtyIDParameter, assistantIDParameter, sexTypeIDParameter, patientIDParameter, insuranceIDParameter, insuranceNumberParameter, pageNumberParameter, reasonIDParameter, diagnosisIDParameter, diseaseIDParameter, departmentIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, therapyCodeParameter, bodyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, serviceCodeParameter, serviceTypeIDParameter, numbParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_Prescriptions_UpdatePrices(Nullable<int> pID)
        {
            var pIDParameter = pID.HasValue ?
                new ObjectParameter("PID", pID) :
                new ObjectParameter("PID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Prescriptions_UpdatePrices", pIDParameter);
        }
    
        public virtual int sp_PrescriptionsChangeInsuranceID(Nullable<int> insuranceID1, Nullable<int> insuranceID2, Nullable<int> userID)
        {
            var insuranceID1Parameter = insuranceID1.HasValue ?
                new ObjectParameter("InsuranceID1", insuranceID1) :
                new ObjectParameter("InsuranceID1", typeof(int));
    
            var insuranceID2Parameter = insuranceID2.HasValue ?
                new ObjectParameter("InsuranceID2", insuranceID2) :
                new ObjectParameter("InsuranceID2", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PrescriptionsChangeInsuranceID", insuranceID1Parameter, insuranceID2Parameter, userIDParameter);
        }
    
        public virtual int sp_PrescriptionServiceTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PrescriptionServiceTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_PrescriptionServiceTypes_Insert(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PrescriptionServiceTypes_Insert", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_PrescriptionServiceTypes_Select_Result> sp_PrescriptionServiceTypes_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PrescriptionServiceTypes_Select_Result>("sp_PrescriptionServiceTypes_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_PrescriptionServiceTypes_SelectRow_Result> sp_PrescriptionServiceTypes_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PrescriptionServiceTypes_SelectRow_Result>("sp_PrescriptionServiceTypes_SelectRow", iDParameter);
        }
    
        public virtual int sp_PrescriptionServiceTypes_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PrescriptionServiceTypes_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_PrescriptionsGroupByReceptionID_Select(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, string expDate_Start, string expDate_End, string receptionDate_Start, string receptionDate_End, Nullable<int> receptionID, Nullable<int> doctorID, Nullable<int> nezamPezeshki, Nullable<int> specialtyID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<int> departmentID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<int> reasonID, Nullable<short> diseaseID, Nullable<short> diagnosisID, Nullable<int> bedID, Nullable<int> bodyID, Nullable<short> serviceTime_Start, Nullable<short> serviceTime_End, string dsc, Nullable<byte> archive, string archiveDsc, Nullable<short> prescriptionCashTypeID, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var expDate_StartParameter = expDate_Start != null ?
                new ObjectParameter("ExpDate_Start", expDate_Start) :
                new ObjectParameter("ExpDate_Start", typeof(string));
    
            var expDate_EndParameter = expDate_End != null ?
                new ObjectParameter("ExpDate_End", expDate_End) :
                new ObjectParameter("ExpDate_End", typeof(string));
    
            var receptionDate_StartParameter = receptionDate_Start != null ?
                new ObjectParameter("ReceptionDate_Start", receptionDate_Start) :
                new ObjectParameter("ReceptionDate_Start", typeof(string));
    
            var receptionDate_EndParameter = receptionDate_End != null ?
                new ObjectParameter("ReceptionDate_End", receptionDate_End) :
                new ObjectParameter("ReceptionDate_End", typeof(string));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var nezamPezeshkiParameter = nezamPezeshki.HasValue ?
                new ObjectParameter("NezamPezeshki", nezamPezeshki) :
                new ObjectParameter("NezamPezeshki", typeof(int));
    
            var specialtyIDParameter = specialtyID.HasValue ?
                new ObjectParameter("SpecialtyID", specialtyID) :
                new ObjectParameter("SpecialtyID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(short));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(short));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var serviceTime_StartParameter = serviceTime_Start.HasValue ?
                new ObjectParameter("ServiceTime_Start", serviceTime_Start) :
                new ObjectParameter("ServiceTime_Start", typeof(short));
    
            var serviceTime_EndParameter = serviceTime_End.HasValue ?
                new ObjectParameter("ServiceTime_End", serviceTime_End) :
                new ObjectParameter("ServiceTime_End", typeof(short));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var prescriptionCashTypeIDParameter = prescriptionCashTypeID.HasValue ?
                new ObjectParameter("PrescriptionCashTypeID", prescriptionCashTypeID) :
                new ObjectParameter("PrescriptionCashTypeID", typeof(short));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_PrescriptionsGroupByReceptionID_Select", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, expDate_StartParameter, expDate_EndParameter, receptionDate_StartParameter, receptionDate_EndParameter, receptionIDParameter, doctorIDParameter, nezamPezeshkiParameter, specialtyIDParameter, assistantIDParameter, patientIDParameter, departmentIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, reasonIDParameter, diseaseIDParameter, diagnosisIDParameter, bedIDParameter, bodyIDParameter, serviceTime_StartParameter, serviceTime_EndParameter, dscParameter, archiveParameter, archiveDscParameter, prescriptionCashTypeIDParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_PrescriptionsSalamat_Select_Result> sp_PrescriptionsSalamat_Select(Nullable<int> prescriptionCashTypeID, Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<int> insuranceID, Nullable<int> doctorID, string dsc)
        {
            var prescriptionCashTypeIDParameter = prescriptionCashTypeID.HasValue ?
                new ObjectParameter("PrescriptionCashTypeID", prescriptionCashTypeID) :
                new ObjectParameter("PrescriptionCashTypeID", typeof(int));
    
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PrescriptionsSalamat_Select_Result>("sp_PrescriptionsSalamat_Select", prescriptionCashTypeIDParameter, iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, insuranceIDParameter, doctorIDParameter, dscParameter);
        }
    
        public virtual ObjectResult<sp_PrescriptionsSalamatMaster_Select_Result> sp_PrescriptionsSalamatMaster_Select(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<int> insuranceID, Nullable<int> doctorID, string dsc)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PrescriptionsSalamatMaster_Select_Result>("sp_PrescriptionsSalamatMaster_Select", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, insuranceIDParameter, doctorIDParameter, dscParameter);
        }
    
        public virtual int sp_PrescriptionTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PrescriptionTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_PrescriptionTypes_Insert(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PrescriptionTypes_Insert", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_PrescriptionTypes_Select_Result> sp_PrescriptionTypes_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PrescriptionTypes_Select_Result>("sp_PrescriptionTypes_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_PrescriptionTypes_SelectRow_Result> sp_PrescriptionTypes_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PrescriptionTypes_SelectRow_Result>("sp_PrescriptionTypes_SelectRow", iDParameter);
        }
    
        public virtual int sp_PrescriptionTypes_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PrescriptionTypes_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_ReasonCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReasonCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_ReasonCategories_Insert(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReasonCategories_Insert", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_ReasonCategories_Select_Result> sp_ReasonCategories_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReasonCategories_Select_Result>("sp_ReasonCategories_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_ReasonCategories_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReasonCategories_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Reasons_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Reasons_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Reasons_Insert(Nullable<int> reasonCategoryID, Nullable<int> reasonSubCategoryID, Nullable<int> doctorID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var reasonCategoryIDParameter = reasonCategoryID.HasValue ?
                new ObjectParameter("ReasonCategoryID", reasonCategoryID) :
                new ObjectParameter("ReasonCategoryID", typeof(int));
    
            var reasonSubCategoryIDParameter = reasonSubCategoryID.HasValue ?
                new ObjectParameter("ReasonSubCategoryID", reasonSubCategoryID) :
                new ObjectParameter("ReasonSubCategoryID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Reasons_Insert", reasonCategoryIDParameter, reasonSubCategoryIDParameter, doctorIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Reasons_Select_Result> sp_Reasons_Select(Nullable<int> reasonCategoryID, Nullable<int> reasonSubCategoryID, Nullable<int> doctorID, string name, string dsc, Nullable<int> active)
        {
            var reasonCategoryIDParameter = reasonCategoryID.HasValue ?
                new ObjectParameter("ReasonCategoryID", reasonCategoryID) :
                new ObjectParameter("ReasonCategoryID", typeof(int));
    
            var reasonSubCategoryIDParameter = reasonSubCategoryID.HasValue ?
                new ObjectParameter("ReasonSubCategoryID", reasonSubCategoryID) :
                new ObjectParameter("ReasonSubCategoryID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Reasons_Select_Result>("sp_Reasons_Select", reasonCategoryIDParameter, reasonSubCategoryIDParameter, doctorIDParameter, nameParameter, dscParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_Reasons_SelectRow_Result> sp_Reasons_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Reasons_SelectRow_Result>("sp_Reasons_SelectRow", iDParameter);
        }
    
        public virtual int sp_Reasons_Update(Nullable<int> reasonCategoryID, Nullable<int> reasonSubCategoryID, Nullable<int> doctorID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var reasonCategoryIDParameter = reasonCategoryID.HasValue ?
                new ObjectParameter("ReasonCategoryID", reasonCategoryID) :
                new ObjectParameter("ReasonCategoryID", typeof(int));
    
            var reasonSubCategoryIDParameter = reasonSubCategoryID.HasValue ?
                new ObjectParameter("ReasonSubCategoryID", reasonSubCategoryID) :
                new ObjectParameter("ReasonSubCategoryID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Reasons_Update", reasonCategoryIDParameter, reasonSubCategoryIDParameter, doctorIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_ReasonSubCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReasonSubCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_ReasonSubCategories_Insert(Nullable<int> reasonCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var reasonCategoryIDParameter = reasonCategoryID.HasValue ?
                new ObjectParameter("ReasonCategoryID", reasonCategoryID) :
                new ObjectParameter("ReasonCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReasonSubCategories_Insert", reasonCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_ReasonSubCategories_Select_Result> sp_ReasonSubCategories_Select(Nullable<int> reasonCategoryID, string name, Nullable<int> active)
        {
            var reasonCategoryIDParameter = reasonCategoryID.HasValue ?
                new ObjectParameter("ReasonCategoryID", reasonCategoryID) :
                new ObjectParameter("ReasonCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReasonSubCategories_Select_Result>("sp_ReasonSubCategories_Select", reasonCategoryIDParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_ReasonSubCategories_Update(Nullable<int> iD, Nullable<int> reasonCategoryID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var reasonCategoryIDParameter = reasonCategoryID.HasValue ?
                new ObjectParameter("ReasonCategoryID", reasonCategoryID) :
                new ObjectParameter("ReasonCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReasonSubCategories_Update", iDParameter, reasonCategoryIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_ReceptionDrugs_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionDrugs_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_ReceptionDrugs_Insert(Nullable<System.DateTime> registerDate, Nullable<int> receptionID, Nullable<byte> rowID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<short> drugCategoryID, Nullable<int> drugsubCategoryID, Nullable<int> drugClassID, Nullable<short> drugTypeID, Nullable<int> drugID, Nullable<int> drugCode, Nullable<double> number, Nullable<byte> countingUnitID, string servDsc, string dsc, Nullable<int> userid)
        {
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var rowIDParameter = rowID.HasValue ?
                new ObjectParameter("RowID", rowID) :
                new ObjectParameter("RowID", typeof(byte));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var drugCategoryIDParameter = drugCategoryID.HasValue ?
                new ObjectParameter("DrugCategoryID", drugCategoryID) :
                new ObjectParameter("DrugCategoryID", typeof(short));
    
            var drugsubCategoryIDParameter = drugsubCategoryID.HasValue ?
                new ObjectParameter("DrugsubCategoryID", drugsubCategoryID) :
                new ObjectParameter("DrugsubCategoryID", typeof(int));
    
            var drugClassIDParameter = drugClassID.HasValue ?
                new ObjectParameter("DrugClassID", drugClassID) :
                new ObjectParameter("DrugClassID", typeof(int));
    
            var drugTypeIDParameter = drugTypeID.HasValue ?
                new ObjectParameter("DrugTypeID", drugTypeID) :
                new ObjectParameter("DrugTypeID", typeof(short));
    
            var drugIDParameter = drugID.HasValue ?
                new ObjectParameter("DrugID", drugID) :
                new ObjectParameter("DrugID", typeof(int));
    
            var drugCodeParameter = drugCode.HasValue ?
                new ObjectParameter("DrugCode", drugCode) :
                new ObjectParameter("DrugCode", typeof(int));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var servDscParameter = servDsc != null ?
                new ObjectParameter("ServDsc", servDsc) :
                new ObjectParameter("ServDsc", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionDrugs_Insert", registerDateParameter, receptionIDParameter, rowIDParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, drugCategoryIDParameter, drugsubCategoryIDParameter, drugClassIDParameter, drugTypeIDParameter, drugIDParameter, drugCodeParameter, numberParameter, countingUnitIDParameter, servDscParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_ReceptionDrugs_Select_Result> sp_ReceptionDrugs_Select(string registerDate_Start, string registerDate_End, Nullable<int> doctorID, Nullable<int> patientID, Nullable<int> receptionID, Nullable<int> drugID, string servDsc, Nullable<int> topRange)
        {
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var drugIDParameter = drugID.HasValue ?
                new ObjectParameter("DrugID", drugID) :
                new ObjectParameter("DrugID", typeof(int));
    
            var servDscParameter = servDsc != null ?
                new ObjectParameter("ServDsc", servDsc) :
                new ObjectParameter("ServDsc", typeof(string));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReceptionDrugs_Select_Result>("sp_ReceptionDrugs_Select", registerDate_StartParameter, registerDate_EndParameter, doctorIDParameter, patientIDParameter, receptionIDParameter, drugIDParameter, servDscParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_ReceptionDrugs_SelectRow_Result> sp_ReceptionDrugs_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReceptionDrugs_SelectRow_Result>("sp_ReceptionDrugs_SelectRow", iDParameter);
        }
    
        public virtual int sp_ReceptionDrugs_Update(Nullable<int> iD, Nullable<System.DateTime> registerDate, Nullable<int> receptionID, Nullable<byte> rowID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<short> drugCategoryID, Nullable<int> drugsubCategoryID, Nullable<int> drugClassID, Nullable<short> drugTypeID, Nullable<int> drugID, Nullable<int> drugCode, Nullable<double> number, Nullable<byte> countingUnitID, string servDsc, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var rowIDParameter = rowID.HasValue ?
                new ObjectParameter("RowID", rowID) :
                new ObjectParameter("RowID", typeof(byte));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var drugCategoryIDParameter = drugCategoryID.HasValue ?
                new ObjectParameter("DrugCategoryID", drugCategoryID) :
                new ObjectParameter("DrugCategoryID", typeof(short));
    
            var drugsubCategoryIDParameter = drugsubCategoryID.HasValue ?
                new ObjectParameter("DrugsubCategoryID", drugsubCategoryID) :
                new ObjectParameter("DrugsubCategoryID", typeof(int));
    
            var drugClassIDParameter = drugClassID.HasValue ?
                new ObjectParameter("DrugClassID", drugClassID) :
                new ObjectParameter("DrugClassID", typeof(int));
    
            var drugTypeIDParameter = drugTypeID.HasValue ?
                new ObjectParameter("DrugTypeID", drugTypeID) :
                new ObjectParameter("DrugTypeID", typeof(short));
    
            var drugIDParameter = drugID.HasValue ?
                new ObjectParameter("DrugID", drugID) :
                new ObjectParameter("DrugID", typeof(int));
    
            var drugCodeParameter = drugCode.HasValue ?
                new ObjectParameter("DrugCode", drugCode) :
                new ObjectParameter("DrugCode", typeof(int));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var servDscParameter = servDsc != null ?
                new ObjectParameter("ServDsc", servDsc) :
                new ObjectParameter("ServDsc", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionDrugs_Update", iDParameter, registerDateParameter, receptionIDParameter, rowIDParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, drugCategoryIDParameter, drugsubCategoryIDParameter, drugClassIDParameter, drugTypeIDParameter, drugIDParameter, drugCodeParameter, numberParameter, countingUnitIDParameter, servDscParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_ReceptionForms_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionForms_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_ReceptionForms_Insert(Nullable<int> iD, string name, string dsc, Nullable<short> frm_Reception_Height, Nullable<short> frm_Reception_Width, Nullable<short> pnl_Main_Height, Nullable<short> lbl_ID_Top, Nullable<short> lbl_ID_Left, Nullable<short> lbl_ID_Width, Nullable<short> lbl_ID_Height, Nullable<bool> lbl_ID_Visible, Nullable<short> edt_ID_Top, Nullable<short> edt_ID_Left, Nullable<short> edt_ID_Width, Nullable<short> edt_ID_Height, Nullable<bool> edt_ID_Visible, Nullable<short> cbb_ReceptionTypes_Top, Nullable<short> cbb_ReceptionTypes_Left, Nullable<short> cbb_ReceptionTypes_Width, Nullable<short> cbb_ReceptionTypes_Height, Nullable<bool> cbb_ReceptionTypes_Visible, Nullable<short> lbl_RegisterDate_Top, Nullable<short> lbl_RegisterDate_Left, Nullable<short> lbl_RegisterDate_Width, Nullable<short> lbl_RegisterDate_Height, Nullable<bool> lbl_RegisterDate_Visible, Nullable<short> edt_RegisterDate_Time_Top, Nullable<short> edt_RegisterDate_Time_Left, Nullable<short> edt_RegisterDate_Time_Width, Nullable<short> edt_RegisterDate_Time_Height, Nullable<bool> edt_RegisterDate_Time_Visible, Nullable<short> edt_RegisterDate_Top, Nullable<short> edt_RegisterDate_Left, Nullable<short> edt_RegisterDate_Width, Nullable<short> edt_RegisterDate_Height, Nullable<bool> edt_RegisterDate_Visible, Nullable<short> btn_NewPatient_Top, Nullable<short> btn_NewPatient_Left, Nullable<short> btn_NewPatient_Width, Nullable<short> btn_NewPatient_Height, Nullable<bool> btn_NewPatient_Visible, Nullable<short> btn_Patients_Top, Nullable<short> btn_Patients_Left, Nullable<short> btn_Patients_Width, Nullable<short> btn_Patients_Height, Nullable<bool> btn_Patients_Visible, Nullable<short> edt_PatientID_Top, Nullable<short> edt_PatientID_Left, Nullable<short> edt_PatientID_Width, Nullable<short> edt_PatientID_Height, Nullable<bool> edt_PatientID_Visible, Nullable<short> cbb_SexTypes_Top, Nullable<short> cbb_SexTypes_Left, Nullable<short> cbb_SexTypes_Width, Nullable<short> cbb_SexTypes_Height, Nullable<bool> cbb_SexTypes_Visible, Nullable<short> edt_FirstName_Top, Nullable<short> edt_FirstName_Left, Nullable<short> edt_FirstName_Width, Nullable<short> edt_FirstName_Height, Nullable<bool> edt_FirstName_Visible, Nullable<short> edt_LastName_Top, Nullable<short> edt_LastName_Left, Nullable<short> edt_LastName_Width, Nullable<short> edt_LastName_Height, Nullable<bool> edt_LastName_Visible, Nullable<short> edt_General_Top, Nullable<short> edt_General_Left, Nullable<short> edt_General_Width, Nullable<short> edt_General_Height, Nullable<bool> edt_General_Visible, Nullable<short> btn_Insurances_Top, Nullable<short> btn_Insurances_Left, Nullable<short> btn_Insurances_Width, Nullable<short> btn_Insurances_Height, Nullable<bool> btn_Insurances_Visible, Nullable<short> edt_InsuranceID_Top, Nullable<short> edt_InsuranceID_Left, Nullable<short> edt_InsuranceID_Width, Nullable<short> edt_InsuranceID_Height, Nullable<bool> edt_InsuranceID_Visible, Nullable<short> lbl_InsuranceName_Top, Nullable<short> lbl_InsuranceName_Left, Nullable<short> lbl_InsuranceName_Width, Nullable<short> lbl_InsuranceName_Height, Nullable<bool> lbl_InsuranceName_Visible, Nullable<short> lbl_InsuranceNumber_Top, Nullable<short> lbl_InsuranceNumber_Left, Nullable<short> lbl_InsuranceNumber_Width, Nullable<short> lbl_InsuranceNumber_Height, Nullable<bool> lbl_InsuranceNumber_Visible, Nullable<short> edt_InsuranceNumber_Top, Nullable<short> edt_InsuranceNumber_Left, Nullable<short> edt_InsuranceNumber_Width, Nullable<short> edt_InsuranceNumber_Height, Nullable<bool> edt_InsuranceNumber_Visible, Nullable<short> btn_Reasons_Top, Nullable<short> btn_Reasons_Left, Nullable<short> btn_Reasons_Width, Nullable<short> btn_Reasons_Height, Nullable<bool> btn_Reasons_Visible, Nullable<short> edt_ReasonID_Top, Nullable<short> edt_ReasonID_Left, Nullable<short> edt_ReasonID_Width, Nullable<short> edt_ReasonID_Height, Nullable<bool> edt_ReasonID_Visible, Nullable<short> lbl_ReasonName_Top, Nullable<short> lbl_ReasonName_Left, Nullable<short> lbl_ReasonName_Width, Nullable<short> lbl_ReasonName_Height, Nullable<bool> lbl_ReasonName_Visible, Nullable<short> btn_Customers_Top, Nullable<short> btn_Customers_Left, Nullable<short> btn_Customers_Width, Nullable<short> btn_Customers_Height, Nullable<bool> btn_Customers_Visible, Nullable<short> edt_CustomerID_Top, Nullable<short> edt_CustomerID_Left, Nullable<short> edt_CustomerID_Width, Nullable<short> edt_CustomerID_Height, Nullable<bool> edt_CustomerID_Visible, Nullable<short> btn_Departments_Top, Nullable<short> btn_Departments_Left, Nullable<short> btn_Departments_Width, Nullable<short> btn_Departments_Height, Nullable<bool> btn_Departments_Visible, Nullable<short> edt_DepartmentID_Top, Nullable<short> edt_DepartmentID_Left, Nullable<short> edt_DepartmentID_Width, Nullable<short> edt_DepartmentID_Height, Nullable<bool> edt_DepartmentID_Visible, Nullable<short> lbl_DepartmentName_Top, Nullable<short> lbl_DepartmentName_Left, Nullable<short> lbl_DepartmentName_Width, Nullable<short> lbl_DepartmentName_Height, Nullable<bool> lbl_DepartmentName_Visible, Nullable<short> lbl_Room_Top, Nullable<short> lbl_Room_Left, Nullable<short> lbl_Room_Width, Nullable<short> lbl_Room_Height, Nullable<bool> lbl_Room_Visible, Nullable<short> edt_RoomID_Top, Nullable<short> edt_RoomID_Left, Nullable<short> edt_RoomID_Width, Nullable<short> edt_RoomID_Height, Nullable<bool> edt_RoomID_Visible, Nullable<short> edt_BedID_Top, Nullable<short> edt_BedID_Left, Nullable<short> edt_BedID_Width, Nullable<short> edt_BedID_Height, Nullable<bool> edt_BedID_Visible, Nullable<short> btn_Doctors_Top, Nullable<short> btn_Doctors_Left, Nullable<short> btn_Doctors_Width, Nullable<short> btn_Doctors_Height, Nullable<bool> btn_Doctors_Visible, Nullable<short> edt_DoctorID_Top, Nullable<short> edt_DoctorID_Left, Nullable<short> edt_DoctorID_Width, Nullable<short> edt_DoctorID_Height, Nullable<bool> edt_DoctorID_Visible, Nullable<short> lbl_DoctorName_Top, Nullable<short> lbl_DoctorName_Left, Nullable<short> lbl_DoctorName_Width, Nullable<short> lbl_DoctorName_Height, Nullable<bool> lbl_DoctorName_Visible, Nullable<short> btn_ReceptionFactor_Top, Nullable<short> btn_ReceptionFactor_Left, Nullable<short> btn_ReceptionFactor_Width, Nullable<short> btn_ReceptionFactor_Height, Nullable<bool> btn_ReceptionFactor_Visible, Nullable<short> btn_DigitalDocuments_Top, Nullable<short> btn_DigitalDocuments_Left, Nullable<short> btn_DigitalDocuments_Width, Nullable<short> btn_DigitalDocuments_Height, Nullable<bool> btn_DigitalDocuments_Visible, Nullable<short> btn_Images_Top, Nullable<short> btn_Images_Left, Nullable<short> btn_Images_Width, Nullable<short> btn_Images_Height, Nullable<bool> btn_Images_Visible, Nullable<short> btn_Assistants_Top, Nullable<short> btn_Assistants_Left, Nullable<short> btn_Assistants_Width, Nullable<short> btn_Assistants_Height, Nullable<bool> btn_Assistants_Visible, Nullable<short> edt_AssistantID_Top, Nullable<short> edt_AssistantID_Left, Nullable<short> edt_AssistantID_Width, Nullable<short> edt_AssistantID_Height, Nullable<bool> edt_AssistantID_Visible, Nullable<short> lbl_AssistantName_Top, Nullable<short> lbl_AssistantName_Left, Nullable<short> lbl_AssistantName_Width, Nullable<short> lbl_AssistantName_Height, Nullable<bool> lbl_AssistantName_Visible, Nullable<short> chk_AutoPrint_Top, Nullable<short> chk_AutoPrint_Left, Nullable<short> chk_AutoPrint_Width, Nullable<short> chk_AutoPrint_Height, Nullable<bool> chk_AutoPrint_Visible, Nullable<short> chk_AutoSMS_Top, Nullable<short> chk_AutoSMS_Left, Nullable<short> chk_AutoSMS_Width, Nullable<short> chk_AutoSMS_Height, Nullable<bool> chk_AutoSMS_Visible, Nullable<short> btn_Diagnosises_Top, Nullable<short> btn_Diagnosises_Left, Nullable<short> btn_Diagnosises_Width, Nullable<short> btn_Diagnosises_Height, Nullable<bool> btn_Diagnosises_Visible, Nullable<short> edt_DiagnosisID_Top, Nullable<short> edt_DiagnosisID_Left, Nullable<short> edt_DiagnosisID_Width, Nullable<short> edt_DiagnosisID_Height, Nullable<bool> edt_DiagnosisID_Visible, Nullable<short> lbl_DiagnosisName_Top, Nullable<short> lbl_DiagnosisName_Left, Nullable<short> lbl_DiagnosisName_Width, Nullable<short> lbl_DiagnosisName_Height, Nullable<bool> lbl_DiagnosisName_Visible, Nullable<short> btn_Therapies_Top, Nullable<short> btn_Therapies_Left, Nullable<short> btn_Therapies_Width, Nullable<short> btn_Therapies_Height, Nullable<bool> btn_Therapies_Visible, Nullable<short> edt_TherapyID_Top, Nullable<short> edt_TherapyID_Left, Nullable<short> edt_TherapyID_Width, Nullable<short> edt_TherapyID_Height, Nullable<bool> edt_TherapyID_Visible, Nullable<short> lbl_TherapyName_Top, Nullable<short> lbl_TherapyName_Left, Nullable<short> lbl_TherapyName_Width, Nullable<short> lbl_TherapyName_Height, Nullable<bool> lbl_TherapyName_Visible, Nullable<short> btn_NewPrescription_Top, Nullable<short> btn_NewPrescription_Left, Nullable<short> btn_NewPrescription_Width, Nullable<short> btn_NewPrescription_Height, Nullable<bool> btn_NewPrescription_Visible, Nullable<short> btn_Prescriptions_Top, Nullable<short> btn_Prescriptions_Left, Nullable<short> btn_Prescriptions_Width, Nullable<short> btn_Prescriptions_Height, Nullable<bool> btn_Prescriptions_Visible, Nullable<short> edt_PrescriptionID_Top, Nullable<short> edt_PrescriptionID_Left, Nullable<short> edt_PrescriptionID_Width, Nullable<short> edt_PrescriptionID_Height, Nullable<bool> edt_PrescriptionID_Visible, Nullable<short> btn_NewLaboratory_Top, Nullable<short> btn_NewLaboratory_Left, Nullable<short> btn_NewLaboratory_Width, Nullable<short> btn_NewLaboratory_Height, Nullable<bool> btn_NewLaboratory_Visible, Nullable<short> btn_Laboratories_Top, Nullable<short> btn_Laboratories_Left, Nullable<short> btn_Laboratories_Width, Nullable<short> btn_Laboratories_Height, Nullable<bool> btn_Laboratories_Visible, Nullable<short> edt_LaboratoryID_Top, Nullable<short> edt_LaboratoryID_Left, Nullable<short> edt_LaboratoryID_Width, Nullable<short> edt_LaboratoryID_Height, Nullable<bool> edt_LaboratoryID_Visible, Nullable<short> btn_ReceptionStates_Top, Nullable<short> btn_ReceptionStates_Left, Nullable<short> btn_ReceptionStates_Width, Nullable<short> btn_ReceptionStates_Height, Nullable<bool> btn_ReceptionStates_Visible, Nullable<short> cbb_ReceptionStates_Top, Nullable<short> cbb_ReceptionStates_Left, Nullable<short> cbb_ReceptionStates_Width, Nullable<short> cbb_ReceptionStates_Height, Nullable<bool> cbb_ReceptionStates_Visible, Nullable<short> btn_PaymentStates_Top, Nullable<short> btn_PaymentStates_Left, Nullable<short> btn_PaymentStates_Width, Nullable<short> btn_PaymentStates_Height, Nullable<bool> btn_PaymentStates_Visible, Nullable<short> cbb_PaymentStates_Top, Nullable<short> cbb_PaymentStates_Left, Nullable<short> cbb_PaymentStates_Width, Nullable<short> cbb_PaymentStates_Height, Nullable<bool> cbb_PaymentStates_Visible, Nullable<short> grb_Prices_Top, Nullable<short> grb_Prices_Left, Nullable<short> grb_Prices_Width, Nullable<short> grb_Prices_Height, Nullable<bool> grb_Prices_Visible, Nullable<short> edt_ServicePrice_Top, Nullable<short> edt_ServicePrice_Left, Nullable<short> edt_ServicePrice_Width, Nullable<short> edt_ServicePrice_Height, Nullable<bool> edt_ServicePrice_Visible, Nullable<short> lbl_ServicePrice_Top, Nullable<short> lbl_ServicePrice_Left, Nullable<short> lbl_ServicePrice_Width, Nullable<short> lbl_ServicePrice_Height, Nullable<bool> lbl_ServicePrice_Visible, Nullable<short> edt_ItemsPrice_Top, Nullable<short> edt_ItemsPrice_Left, Nullable<short> edt_ItemsPrice_Width, Nullable<short> edt_ItemsPrice_Height, Nullable<bool> edt_ItemsPrice_Visible, Nullable<short> chk_SetItemsPrice_Top, Nullable<short> chk_SetItemsPrice_Left, Nullable<short> chk_SetItemsPrice_Width, Nullable<short> chk_SetItemsPrice_Height, Nullable<bool> chk_SetItemsPrice_Visible, Nullable<short> edt_PatientPrice_Top, Nullable<short> edt_PatientPrice_Left, Nullable<short> edt_PatientPrice_Width, Nullable<short> edt_PatientPrice_Height, Nullable<bool> edt_PatientPrice_Visible, Nullable<short> lbl_PatientPrice_Top, Nullable<short> lbl_PatientPrice_Left, Nullable<short> lbl_PatientPrice_Width, Nullable<short> lbl_PatientPrice_Height, Nullable<bool> lbl_PatientPrice_Visible, Nullable<short> edt_InsurancePrice_Top, Nullable<short> edt_InsurancePrice_Left, Nullable<short> edt_InsurancePrice_Width, Nullable<short> edt_InsurancePrice_Height, Nullable<bool> edt_InsurancePrice_Visible, Nullable<short> lbl_InsurancePrice_Top, Nullable<short> lbl_InsurancePrice_Left, Nullable<short> lbl_InsurancePrice_Width, Nullable<short> lbl_InsurancePrice_Height, Nullable<bool> lbl_InsurancePrice_Visible, Nullable<short> edt_MarginPrice_Top, Nullable<short> edt_MarginPrice_Left, Nullable<short> edt_MarginPrice_Width, Nullable<short> edt_MarginPrice_Height, Nullable<bool> edt_MarginPrice_Visible, Nullable<short> lbl_MarginPrice_Top, Nullable<short> lbl_MarginPrice_Left, Nullable<short> lbl_MarginPrice_Width, Nullable<short> lbl_MarginPrice_Height, Nullable<bool> lbl_MarginPrice_Visible, Nullable<short> edt_DoctorPrice_Top, Nullable<short> edt_DoctorPrice_Left, Nullable<short> edt_DoctorPrice_Width, Nullable<short> edt_DoctorPrice_Height, Nullable<bool> edt_DoctorPrice_Visible, Nullable<short> lbl_DoctorPrice_Top, Nullable<short> lbl_DoctorPrice_Left, Nullable<short> lbl_DoctorPrice_Width, Nullable<short> lbl_DoctorPrice_Height, Nullable<bool> lbl_DoctorPrice_Visible, Nullable<short> edt_AssistantPrice_Top, Nullable<short> edt_AssistantPrice_Left, Nullable<short> edt_AssistantPrice_Width, Nullable<short> edt_AssistantPrice_Height, Nullable<bool> edt_AssistantPrice_Visible, Nullable<short> lbl_AssistantPrice_Top, Nullable<short> lbl_AssistantPrice_Left, Nullable<short> lbl_AssistantPrice_Width, Nullable<short> lbl_AssistantPrice_Height, Nullable<bool> lbl_AssistantPrice_Visible, Nullable<short> edt_Takh_Top, Nullable<short> edt_Takh_Left, Nullable<short> edt_Takh_Width, Nullable<short> edt_Takh_Height, Nullable<bool> edt_Takh_Visible, Nullable<short> lbl_Takh_Top, Nullable<short> lbl_Takh_Left, Nullable<short> lbl_Takh_Width, Nullable<short> lbl_Takh_Height, Nullable<bool> lbl_Takh_Visible, Nullable<short> shp_Prices0_Top, Nullable<short> shp_Prices0_Left, Nullable<short> shp_Prices0_Width, Nullable<short> shp_Prices0_Height, Nullable<bool> shp_Prices0_Visible, Nullable<short> lbl_Bed_Top, Nullable<short> lbl_Bed_Left, Nullable<short> lbl_Bed_Width, Nullable<short> lbl_Bed_Height, Nullable<bool> lbl_Bed_Visible, Nullable<short> lbl_BedInfo_Top, Nullable<short> lbl_BedInfo_Left, Nullable<short> lbl_BedInfo_Width, Nullable<short> lbl_BedInfo_Height, Nullable<bool> lbl_BedInfo_Visible, Nullable<short> lbl_Bes_Top, Nullable<short> lbl_Bes_Left, Nullable<short> lbl_Bes_Width, Nullable<short> lbl_Bes_Height, Nullable<bool> lbl_Bes_Visible, Nullable<short> lbl_BesInfo_Top, Nullable<short> lbl_BesInfo_Left, Nullable<short> lbl_BesInfo_Width, Nullable<short> lbl_BesInfo_Height, Nullable<bool> lbl_BesInfo_Visible, Nullable<short> shp_Prices1_Top, Nullable<short> shp_Prices1_Left, Nullable<short> shp_Prices1_Width, Nullable<short> shp_Prices1_Height, Nullable<bool> shp_Prices1_Visible, Nullable<short> lbl_Mandeh_Top, Nullable<short> lbl_Mandeh_Left, Nullable<short> lbl_Mandeh_Width, Nullable<short> lbl_Mandeh_Height, Nullable<bool> lbl_Mandeh_Visible, Nullable<short> lbl_MandehInfo_Top, Nullable<short> lbl_MandehInfo_Left, Nullable<short> lbl_MandehInfo_Width, Nullable<short> lbl_MandehInfo_Height, Nullable<bool> lbl_MandehInfo_Visible, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var frm_Reception_HeightParameter = frm_Reception_Height.HasValue ?
                new ObjectParameter("Frm_Reception_Height", frm_Reception_Height) :
                new ObjectParameter("Frm_Reception_Height", typeof(short));
    
            var frm_Reception_WidthParameter = frm_Reception_Width.HasValue ?
                new ObjectParameter("Frm_Reception_Width", frm_Reception_Width) :
                new ObjectParameter("Frm_Reception_Width", typeof(short));
    
            var pnl_Main_HeightParameter = pnl_Main_Height.HasValue ?
                new ObjectParameter("Pnl_Main_Height", pnl_Main_Height) :
                new ObjectParameter("Pnl_Main_Height", typeof(short));
    
            var lbl_ID_TopParameter = lbl_ID_Top.HasValue ?
                new ObjectParameter("Lbl_ID_Top", lbl_ID_Top) :
                new ObjectParameter("Lbl_ID_Top", typeof(short));
    
            var lbl_ID_LeftParameter = lbl_ID_Left.HasValue ?
                new ObjectParameter("Lbl_ID_Left", lbl_ID_Left) :
                new ObjectParameter("Lbl_ID_Left", typeof(short));
    
            var lbl_ID_WidthParameter = lbl_ID_Width.HasValue ?
                new ObjectParameter("Lbl_ID_Width", lbl_ID_Width) :
                new ObjectParameter("Lbl_ID_Width", typeof(short));
    
            var lbl_ID_HeightParameter = lbl_ID_Height.HasValue ?
                new ObjectParameter("Lbl_ID_Height", lbl_ID_Height) :
                new ObjectParameter("Lbl_ID_Height", typeof(short));
    
            var lbl_ID_VisibleParameter = lbl_ID_Visible.HasValue ?
                new ObjectParameter("Lbl_ID_Visible", lbl_ID_Visible) :
                new ObjectParameter("Lbl_ID_Visible", typeof(bool));
    
            var edt_ID_TopParameter = edt_ID_Top.HasValue ?
                new ObjectParameter("Edt_ID_Top", edt_ID_Top) :
                new ObjectParameter("Edt_ID_Top", typeof(short));
    
            var edt_ID_LeftParameter = edt_ID_Left.HasValue ?
                new ObjectParameter("Edt_ID_Left", edt_ID_Left) :
                new ObjectParameter("Edt_ID_Left", typeof(short));
    
            var edt_ID_WidthParameter = edt_ID_Width.HasValue ?
                new ObjectParameter("Edt_ID_Width", edt_ID_Width) :
                new ObjectParameter("Edt_ID_Width", typeof(short));
    
            var edt_ID_HeightParameter = edt_ID_Height.HasValue ?
                new ObjectParameter("Edt_ID_Height", edt_ID_Height) :
                new ObjectParameter("Edt_ID_Height", typeof(short));
    
            var edt_ID_VisibleParameter = edt_ID_Visible.HasValue ?
                new ObjectParameter("Edt_ID_Visible", edt_ID_Visible) :
                new ObjectParameter("Edt_ID_Visible", typeof(bool));
    
            var cbb_ReceptionTypes_TopParameter = cbb_ReceptionTypes_Top.HasValue ?
                new ObjectParameter("Cbb_ReceptionTypes_Top", cbb_ReceptionTypes_Top) :
                new ObjectParameter("Cbb_ReceptionTypes_Top", typeof(short));
    
            var cbb_ReceptionTypes_LeftParameter = cbb_ReceptionTypes_Left.HasValue ?
                new ObjectParameter("Cbb_ReceptionTypes_Left", cbb_ReceptionTypes_Left) :
                new ObjectParameter("Cbb_ReceptionTypes_Left", typeof(short));
    
            var cbb_ReceptionTypes_WidthParameter = cbb_ReceptionTypes_Width.HasValue ?
                new ObjectParameter("Cbb_ReceptionTypes_Width", cbb_ReceptionTypes_Width) :
                new ObjectParameter("Cbb_ReceptionTypes_Width", typeof(short));
    
            var cbb_ReceptionTypes_HeightParameter = cbb_ReceptionTypes_Height.HasValue ?
                new ObjectParameter("Cbb_ReceptionTypes_Height", cbb_ReceptionTypes_Height) :
                new ObjectParameter("Cbb_ReceptionTypes_Height", typeof(short));
    
            var cbb_ReceptionTypes_VisibleParameter = cbb_ReceptionTypes_Visible.HasValue ?
                new ObjectParameter("Cbb_ReceptionTypes_Visible", cbb_ReceptionTypes_Visible) :
                new ObjectParameter("Cbb_ReceptionTypes_Visible", typeof(bool));
    
            var lbl_RegisterDate_TopParameter = lbl_RegisterDate_Top.HasValue ?
                new ObjectParameter("Lbl_RegisterDate_Top", lbl_RegisterDate_Top) :
                new ObjectParameter("Lbl_RegisterDate_Top", typeof(short));
    
            var lbl_RegisterDate_LeftParameter = lbl_RegisterDate_Left.HasValue ?
                new ObjectParameter("Lbl_RegisterDate_Left", lbl_RegisterDate_Left) :
                new ObjectParameter("Lbl_RegisterDate_Left", typeof(short));
    
            var lbl_RegisterDate_WidthParameter = lbl_RegisterDate_Width.HasValue ?
                new ObjectParameter("Lbl_RegisterDate_Width", lbl_RegisterDate_Width) :
                new ObjectParameter("Lbl_RegisterDate_Width", typeof(short));
    
            var lbl_RegisterDate_HeightParameter = lbl_RegisterDate_Height.HasValue ?
                new ObjectParameter("Lbl_RegisterDate_Height", lbl_RegisterDate_Height) :
                new ObjectParameter("Lbl_RegisterDate_Height", typeof(short));
    
            var lbl_RegisterDate_VisibleParameter = lbl_RegisterDate_Visible.HasValue ?
                new ObjectParameter("Lbl_RegisterDate_Visible", lbl_RegisterDate_Visible) :
                new ObjectParameter("Lbl_RegisterDate_Visible", typeof(bool));
    
            var edt_RegisterDate_Time_TopParameter = edt_RegisterDate_Time_Top.HasValue ?
                new ObjectParameter("Edt_RegisterDate_Time_Top", edt_RegisterDate_Time_Top) :
                new ObjectParameter("Edt_RegisterDate_Time_Top", typeof(short));
    
            var edt_RegisterDate_Time_LeftParameter = edt_RegisterDate_Time_Left.HasValue ?
                new ObjectParameter("Edt_RegisterDate_Time_Left", edt_RegisterDate_Time_Left) :
                new ObjectParameter("Edt_RegisterDate_Time_Left", typeof(short));
    
            var edt_RegisterDate_Time_WidthParameter = edt_RegisterDate_Time_Width.HasValue ?
                new ObjectParameter("Edt_RegisterDate_Time_Width", edt_RegisterDate_Time_Width) :
                new ObjectParameter("Edt_RegisterDate_Time_Width", typeof(short));
    
            var edt_RegisterDate_Time_HeightParameter = edt_RegisterDate_Time_Height.HasValue ?
                new ObjectParameter("Edt_RegisterDate_Time_Height", edt_RegisterDate_Time_Height) :
                new ObjectParameter("Edt_RegisterDate_Time_Height", typeof(short));
    
            var edt_RegisterDate_Time_VisibleParameter = edt_RegisterDate_Time_Visible.HasValue ?
                new ObjectParameter("Edt_RegisterDate_Time_Visible", edt_RegisterDate_Time_Visible) :
                new ObjectParameter("Edt_RegisterDate_Time_Visible", typeof(bool));
    
            var edt_RegisterDate_TopParameter = edt_RegisterDate_Top.HasValue ?
                new ObjectParameter("Edt_RegisterDate_Top", edt_RegisterDate_Top) :
                new ObjectParameter("Edt_RegisterDate_Top", typeof(short));
    
            var edt_RegisterDate_LeftParameter = edt_RegisterDate_Left.HasValue ?
                new ObjectParameter("Edt_RegisterDate_Left", edt_RegisterDate_Left) :
                new ObjectParameter("Edt_RegisterDate_Left", typeof(short));
    
            var edt_RegisterDate_WidthParameter = edt_RegisterDate_Width.HasValue ?
                new ObjectParameter("Edt_RegisterDate_Width", edt_RegisterDate_Width) :
                new ObjectParameter("Edt_RegisterDate_Width", typeof(short));
    
            var edt_RegisterDate_HeightParameter = edt_RegisterDate_Height.HasValue ?
                new ObjectParameter("Edt_RegisterDate_Height", edt_RegisterDate_Height) :
                new ObjectParameter("Edt_RegisterDate_Height", typeof(short));
    
            var edt_RegisterDate_VisibleParameter = edt_RegisterDate_Visible.HasValue ?
                new ObjectParameter("Edt_RegisterDate_Visible", edt_RegisterDate_Visible) :
                new ObjectParameter("Edt_RegisterDate_Visible", typeof(bool));
    
            var btn_NewPatient_TopParameter = btn_NewPatient_Top.HasValue ?
                new ObjectParameter("Btn_NewPatient_Top", btn_NewPatient_Top) :
                new ObjectParameter("Btn_NewPatient_Top", typeof(short));
    
            var btn_NewPatient_LeftParameter = btn_NewPatient_Left.HasValue ?
                new ObjectParameter("Btn_NewPatient_Left", btn_NewPatient_Left) :
                new ObjectParameter("Btn_NewPatient_Left", typeof(short));
    
            var btn_NewPatient_WidthParameter = btn_NewPatient_Width.HasValue ?
                new ObjectParameter("Btn_NewPatient_Width", btn_NewPatient_Width) :
                new ObjectParameter("Btn_NewPatient_Width", typeof(short));
    
            var btn_NewPatient_HeightParameter = btn_NewPatient_Height.HasValue ?
                new ObjectParameter("Btn_NewPatient_Height", btn_NewPatient_Height) :
                new ObjectParameter("Btn_NewPatient_Height", typeof(short));
    
            var btn_NewPatient_VisibleParameter = btn_NewPatient_Visible.HasValue ?
                new ObjectParameter("Btn_NewPatient_Visible", btn_NewPatient_Visible) :
                new ObjectParameter("Btn_NewPatient_Visible", typeof(bool));
    
            var btn_Patients_TopParameter = btn_Patients_Top.HasValue ?
                new ObjectParameter("Btn_Patients_Top", btn_Patients_Top) :
                new ObjectParameter("Btn_Patients_Top", typeof(short));
    
            var btn_Patients_LeftParameter = btn_Patients_Left.HasValue ?
                new ObjectParameter("Btn_Patients_Left", btn_Patients_Left) :
                new ObjectParameter("Btn_Patients_Left", typeof(short));
    
            var btn_Patients_WidthParameter = btn_Patients_Width.HasValue ?
                new ObjectParameter("Btn_Patients_Width", btn_Patients_Width) :
                new ObjectParameter("Btn_Patients_Width", typeof(short));
    
            var btn_Patients_HeightParameter = btn_Patients_Height.HasValue ?
                new ObjectParameter("Btn_Patients_Height", btn_Patients_Height) :
                new ObjectParameter("Btn_Patients_Height", typeof(short));
    
            var btn_Patients_VisibleParameter = btn_Patients_Visible.HasValue ?
                new ObjectParameter("Btn_Patients_Visible", btn_Patients_Visible) :
                new ObjectParameter("Btn_Patients_Visible", typeof(bool));
    
            var edt_PatientID_TopParameter = edt_PatientID_Top.HasValue ?
                new ObjectParameter("Edt_PatientID_Top", edt_PatientID_Top) :
                new ObjectParameter("Edt_PatientID_Top", typeof(short));
    
            var edt_PatientID_LeftParameter = edt_PatientID_Left.HasValue ?
                new ObjectParameter("Edt_PatientID_Left", edt_PatientID_Left) :
                new ObjectParameter("Edt_PatientID_Left", typeof(short));
    
            var edt_PatientID_WidthParameter = edt_PatientID_Width.HasValue ?
                new ObjectParameter("Edt_PatientID_Width", edt_PatientID_Width) :
                new ObjectParameter("Edt_PatientID_Width", typeof(short));
    
            var edt_PatientID_HeightParameter = edt_PatientID_Height.HasValue ?
                new ObjectParameter("Edt_PatientID_Height", edt_PatientID_Height) :
                new ObjectParameter("Edt_PatientID_Height", typeof(short));
    
            var edt_PatientID_VisibleParameter = edt_PatientID_Visible.HasValue ?
                new ObjectParameter("Edt_PatientID_Visible", edt_PatientID_Visible) :
                new ObjectParameter("Edt_PatientID_Visible", typeof(bool));
    
            var cbb_SexTypes_TopParameter = cbb_SexTypes_Top.HasValue ?
                new ObjectParameter("Cbb_SexTypes_Top", cbb_SexTypes_Top) :
                new ObjectParameter("Cbb_SexTypes_Top", typeof(short));
    
            var cbb_SexTypes_LeftParameter = cbb_SexTypes_Left.HasValue ?
                new ObjectParameter("Cbb_SexTypes_Left", cbb_SexTypes_Left) :
                new ObjectParameter("Cbb_SexTypes_Left", typeof(short));
    
            var cbb_SexTypes_WidthParameter = cbb_SexTypes_Width.HasValue ?
                new ObjectParameter("Cbb_SexTypes_Width", cbb_SexTypes_Width) :
                new ObjectParameter("Cbb_SexTypes_Width", typeof(short));
    
            var cbb_SexTypes_HeightParameter = cbb_SexTypes_Height.HasValue ?
                new ObjectParameter("Cbb_SexTypes_Height", cbb_SexTypes_Height) :
                new ObjectParameter("Cbb_SexTypes_Height", typeof(short));
    
            var cbb_SexTypes_VisibleParameter = cbb_SexTypes_Visible.HasValue ?
                new ObjectParameter("Cbb_SexTypes_Visible", cbb_SexTypes_Visible) :
                new ObjectParameter("Cbb_SexTypes_Visible", typeof(bool));
    
            var edt_FirstName_TopParameter = edt_FirstName_Top.HasValue ?
                new ObjectParameter("Edt_FirstName_Top", edt_FirstName_Top) :
                new ObjectParameter("Edt_FirstName_Top", typeof(short));
    
            var edt_FirstName_LeftParameter = edt_FirstName_Left.HasValue ?
                new ObjectParameter("Edt_FirstName_Left", edt_FirstName_Left) :
                new ObjectParameter("Edt_FirstName_Left", typeof(short));
    
            var edt_FirstName_WidthParameter = edt_FirstName_Width.HasValue ?
                new ObjectParameter("Edt_FirstName_Width", edt_FirstName_Width) :
                new ObjectParameter("Edt_FirstName_Width", typeof(short));
    
            var edt_FirstName_HeightParameter = edt_FirstName_Height.HasValue ?
                new ObjectParameter("Edt_FirstName_Height", edt_FirstName_Height) :
                new ObjectParameter("Edt_FirstName_Height", typeof(short));
    
            var edt_FirstName_VisibleParameter = edt_FirstName_Visible.HasValue ?
                new ObjectParameter("Edt_FirstName_Visible", edt_FirstName_Visible) :
                new ObjectParameter("Edt_FirstName_Visible", typeof(bool));
    
            var edt_LastName_TopParameter = edt_LastName_Top.HasValue ?
                new ObjectParameter("Edt_LastName_Top", edt_LastName_Top) :
                new ObjectParameter("Edt_LastName_Top", typeof(short));
    
            var edt_LastName_LeftParameter = edt_LastName_Left.HasValue ?
                new ObjectParameter("Edt_LastName_Left", edt_LastName_Left) :
                new ObjectParameter("Edt_LastName_Left", typeof(short));
    
            var edt_LastName_WidthParameter = edt_LastName_Width.HasValue ?
                new ObjectParameter("Edt_LastName_Width", edt_LastName_Width) :
                new ObjectParameter("Edt_LastName_Width", typeof(short));
    
            var edt_LastName_HeightParameter = edt_LastName_Height.HasValue ?
                new ObjectParameter("Edt_LastName_Height", edt_LastName_Height) :
                new ObjectParameter("Edt_LastName_Height", typeof(short));
    
            var edt_LastName_VisibleParameter = edt_LastName_Visible.HasValue ?
                new ObjectParameter("Edt_LastName_Visible", edt_LastName_Visible) :
                new ObjectParameter("Edt_LastName_Visible", typeof(bool));
    
            var edt_General_TopParameter = edt_General_Top.HasValue ?
                new ObjectParameter("Edt_General_Top", edt_General_Top) :
                new ObjectParameter("Edt_General_Top", typeof(short));
    
            var edt_General_LeftParameter = edt_General_Left.HasValue ?
                new ObjectParameter("Edt_General_Left", edt_General_Left) :
                new ObjectParameter("Edt_General_Left", typeof(short));
    
            var edt_General_WidthParameter = edt_General_Width.HasValue ?
                new ObjectParameter("Edt_General_Width", edt_General_Width) :
                new ObjectParameter("Edt_General_Width", typeof(short));
    
            var edt_General_HeightParameter = edt_General_Height.HasValue ?
                new ObjectParameter("Edt_General_Height", edt_General_Height) :
                new ObjectParameter("Edt_General_Height", typeof(short));
    
            var edt_General_VisibleParameter = edt_General_Visible.HasValue ?
                new ObjectParameter("Edt_General_Visible", edt_General_Visible) :
                new ObjectParameter("Edt_General_Visible", typeof(bool));
    
            var btn_Insurances_TopParameter = btn_Insurances_Top.HasValue ?
                new ObjectParameter("Btn_Insurances_Top", btn_Insurances_Top) :
                new ObjectParameter("Btn_Insurances_Top", typeof(short));
    
            var btn_Insurances_LeftParameter = btn_Insurances_Left.HasValue ?
                new ObjectParameter("Btn_Insurances_Left", btn_Insurances_Left) :
                new ObjectParameter("Btn_Insurances_Left", typeof(short));
    
            var btn_Insurances_WidthParameter = btn_Insurances_Width.HasValue ?
                new ObjectParameter("Btn_Insurances_Width", btn_Insurances_Width) :
                new ObjectParameter("Btn_Insurances_Width", typeof(short));
    
            var btn_Insurances_HeightParameter = btn_Insurances_Height.HasValue ?
                new ObjectParameter("Btn_Insurances_Height", btn_Insurances_Height) :
                new ObjectParameter("Btn_Insurances_Height", typeof(short));
    
            var btn_Insurances_VisibleParameter = btn_Insurances_Visible.HasValue ?
                new ObjectParameter("Btn_Insurances_Visible", btn_Insurances_Visible) :
                new ObjectParameter("Btn_Insurances_Visible", typeof(bool));
    
            var edt_InsuranceID_TopParameter = edt_InsuranceID_Top.HasValue ?
                new ObjectParameter("Edt_InsuranceID_Top", edt_InsuranceID_Top) :
                new ObjectParameter("Edt_InsuranceID_Top", typeof(short));
    
            var edt_InsuranceID_LeftParameter = edt_InsuranceID_Left.HasValue ?
                new ObjectParameter("Edt_InsuranceID_Left", edt_InsuranceID_Left) :
                new ObjectParameter("Edt_InsuranceID_Left", typeof(short));
    
            var edt_InsuranceID_WidthParameter = edt_InsuranceID_Width.HasValue ?
                new ObjectParameter("Edt_InsuranceID_Width", edt_InsuranceID_Width) :
                new ObjectParameter("Edt_InsuranceID_Width", typeof(short));
    
            var edt_InsuranceID_HeightParameter = edt_InsuranceID_Height.HasValue ?
                new ObjectParameter("Edt_InsuranceID_Height", edt_InsuranceID_Height) :
                new ObjectParameter("Edt_InsuranceID_Height", typeof(short));
    
            var edt_InsuranceID_VisibleParameter = edt_InsuranceID_Visible.HasValue ?
                new ObjectParameter("Edt_InsuranceID_Visible", edt_InsuranceID_Visible) :
                new ObjectParameter("Edt_InsuranceID_Visible", typeof(bool));
    
            var lbl_InsuranceName_TopParameter = lbl_InsuranceName_Top.HasValue ?
                new ObjectParameter("Lbl_InsuranceName_Top", lbl_InsuranceName_Top) :
                new ObjectParameter("Lbl_InsuranceName_Top", typeof(short));
    
            var lbl_InsuranceName_LeftParameter = lbl_InsuranceName_Left.HasValue ?
                new ObjectParameter("Lbl_InsuranceName_Left", lbl_InsuranceName_Left) :
                new ObjectParameter("Lbl_InsuranceName_Left", typeof(short));
    
            var lbl_InsuranceName_WidthParameter = lbl_InsuranceName_Width.HasValue ?
                new ObjectParameter("Lbl_InsuranceName_Width", lbl_InsuranceName_Width) :
                new ObjectParameter("Lbl_InsuranceName_Width", typeof(short));
    
            var lbl_InsuranceName_HeightParameter = lbl_InsuranceName_Height.HasValue ?
                new ObjectParameter("Lbl_InsuranceName_Height", lbl_InsuranceName_Height) :
                new ObjectParameter("Lbl_InsuranceName_Height", typeof(short));
    
            var lbl_InsuranceName_VisibleParameter = lbl_InsuranceName_Visible.HasValue ?
                new ObjectParameter("Lbl_InsuranceName_Visible", lbl_InsuranceName_Visible) :
                new ObjectParameter("Lbl_InsuranceName_Visible", typeof(bool));
    
            var lbl_InsuranceNumber_TopParameter = lbl_InsuranceNumber_Top.HasValue ?
                new ObjectParameter("Lbl_InsuranceNumber_Top", lbl_InsuranceNumber_Top) :
                new ObjectParameter("Lbl_InsuranceNumber_Top", typeof(short));
    
            var lbl_InsuranceNumber_LeftParameter = lbl_InsuranceNumber_Left.HasValue ?
                new ObjectParameter("Lbl_InsuranceNumber_Left", lbl_InsuranceNumber_Left) :
                new ObjectParameter("Lbl_InsuranceNumber_Left", typeof(short));
    
            var lbl_InsuranceNumber_WidthParameter = lbl_InsuranceNumber_Width.HasValue ?
                new ObjectParameter("Lbl_InsuranceNumber_Width", lbl_InsuranceNumber_Width) :
                new ObjectParameter("Lbl_InsuranceNumber_Width", typeof(short));
    
            var lbl_InsuranceNumber_HeightParameter = lbl_InsuranceNumber_Height.HasValue ?
                new ObjectParameter("Lbl_InsuranceNumber_Height", lbl_InsuranceNumber_Height) :
                new ObjectParameter("Lbl_InsuranceNumber_Height", typeof(short));
    
            var lbl_InsuranceNumber_VisibleParameter = lbl_InsuranceNumber_Visible.HasValue ?
                new ObjectParameter("Lbl_InsuranceNumber_Visible", lbl_InsuranceNumber_Visible) :
                new ObjectParameter("Lbl_InsuranceNumber_Visible", typeof(bool));
    
            var edt_InsuranceNumber_TopParameter = edt_InsuranceNumber_Top.HasValue ?
                new ObjectParameter("Edt_InsuranceNumber_Top", edt_InsuranceNumber_Top) :
                new ObjectParameter("Edt_InsuranceNumber_Top", typeof(short));
    
            var edt_InsuranceNumber_LeftParameter = edt_InsuranceNumber_Left.HasValue ?
                new ObjectParameter("Edt_InsuranceNumber_Left", edt_InsuranceNumber_Left) :
                new ObjectParameter("Edt_InsuranceNumber_Left", typeof(short));
    
            var edt_InsuranceNumber_WidthParameter = edt_InsuranceNumber_Width.HasValue ?
                new ObjectParameter("Edt_InsuranceNumber_Width", edt_InsuranceNumber_Width) :
                new ObjectParameter("Edt_InsuranceNumber_Width", typeof(short));
    
            var edt_InsuranceNumber_HeightParameter = edt_InsuranceNumber_Height.HasValue ?
                new ObjectParameter("Edt_InsuranceNumber_Height", edt_InsuranceNumber_Height) :
                new ObjectParameter("Edt_InsuranceNumber_Height", typeof(short));
    
            var edt_InsuranceNumber_VisibleParameter = edt_InsuranceNumber_Visible.HasValue ?
                new ObjectParameter("Edt_InsuranceNumber_Visible", edt_InsuranceNumber_Visible) :
                new ObjectParameter("Edt_InsuranceNumber_Visible", typeof(bool));
    
            var btn_Reasons_TopParameter = btn_Reasons_Top.HasValue ?
                new ObjectParameter("Btn_Reasons_Top", btn_Reasons_Top) :
                new ObjectParameter("Btn_Reasons_Top", typeof(short));
    
            var btn_Reasons_LeftParameter = btn_Reasons_Left.HasValue ?
                new ObjectParameter("Btn_Reasons_Left", btn_Reasons_Left) :
                new ObjectParameter("Btn_Reasons_Left", typeof(short));
    
            var btn_Reasons_WidthParameter = btn_Reasons_Width.HasValue ?
                new ObjectParameter("Btn_Reasons_Width", btn_Reasons_Width) :
                new ObjectParameter("Btn_Reasons_Width", typeof(short));
    
            var btn_Reasons_HeightParameter = btn_Reasons_Height.HasValue ?
                new ObjectParameter("Btn_Reasons_Height", btn_Reasons_Height) :
                new ObjectParameter("Btn_Reasons_Height", typeof(short));
    
            var btn_Reasons_VisibleParameter = btn_Reasons_Visible.HasValue ?
                new ObjectParameter("Btn_Reasons_Visible", btn_Reasons_Visible) :
                new ObjectParameter("Btn_Reasons_Visible", typeof(bool));
    
            var edt_ReasonID_TopParameter = edt_ReasonID_Top.HasValue ?
                new ObjectParameter("Edt_ReasonID_Top", edt_ReasonID_Top) :
                new ObjectParameter("Edt_ReasonID_Top", typeof(short));
    
            var edt_ReasonID_LeftParameter = edt_ReasonID_Left.HasValue ?
                new ObjectParameter("Edt_ReasonID_Left", edt_ReasonID_Left) :
                new ObjectParameter("Edt_ReasonID_Left", typeof(short));
    
            var edt_ReasonID_WidthParameter = edt_ReasonID_Width.HasValue ?
                new ObjectParameter("Edt_ReasonID_Width", edt_ReasonID_Width) :
                new ObjectParameter("Edt_ReasonID_Width", typeof(short));
    
            var edt_ReasonID_HeightParameter = edt_ReasonID_Height.HasValue ?
                new ObjectParameter("Edt_ReasonID_Height", edt_ReasonID_Height) :
                new ObjectParameter("Edt_ReasonID_Height", typeof(short));
    
            var edt_ReasonID_VisibleParameter = edt_ReasonID_Visible.HasValue ?
                new ObjectParameter("Edt_ReasonID_Visible", edt_ReasonID_Visible) :
                new ObjectParameter("Edt_ReasonID_Visible", typeof(bool));
    
            var lbl_ReasonName_TopParameter = lbl_ReasonName_Top.HasValue ?
                new ObjectParameter("Lbl_ReasonName_Top", lbl_ReasonName_Top) :
                new ObjectParameter("Lbl_ReasonName_Top", typeof(short));
    
            var lbl_ReasonName_LeftParameter = lbl_ReasonName_Left.HasValue ?
                new ObjectParameter("Lbl_ReasonName_Left", lbl_ReasonName_Left) :
                new ObjectParameter("Lbl_ReasonName_Left", typeof(short));
    
            var lbl_ReasonName_WidthParameter = lbl_ReasonName_Width.HasValue ?
                new ObjectParameter("Lbl_ReasonName_Width", lbl_ReasonName_Width) :
                new ObjectParameter("Lbl_ReasonName_Width", typeof(short));
    
            var lbl_ReasonName_HeightParameter = lbl_ReasonName_Height.HasValue ?
                new ObjectParameter("Lbl_ReasonName_Height", lbl_ReasonName_Height) :
                new ObjectParameter("Lbl_ReasonName_Height", typeof(short));
    
            var lbl_ReasonName_VisibleParameter = lbl_ReasonName_Visible.HasValue ?
                new ObjectParameter("Lbl_ReasonName_Visible", lbl_ReasonName_Visible) :
                new ObjectParameter("Lbl_ReasonName_Visible", typeof(bool));
    
            var btn_Customers_TopParameter = btn_Customers_Top.HasValue ?
                new ObjectParameter("Btn_Customers_Top", btn_Customers_Top) :
                new ObjectParameter("Btn_Customers_Top", typeof(short));
    
            var btn_Customers_LeftParameter = btn_Customers_Left.HasValue ?
                new ObjectParameter("Btn_Customers_Left", btn_Customers_Left) :
                new ObjectParameter("Btn_Customers_Left", typeof(short));
    
            var btn_Customers_WidthParameter = btn_Customers_Width.HasValue ?
                new ObjectParameter("Btn_Customers_Width", btn_Customers_Width) :
                new ObjectParameter("Btn_Customers_Width", typeof(short));
    
            var btn_Customers_HeightParameter = btn_Customers_Height.HasValue ?
                new ObjectParameter("Btn_Customers_Height", btn_Customers_Height) :
                new ObjectParameter("Btn_Customers_Height", typeof(short));
    
            var btn_Customers_VisibleParameter = btn_Customers_Visible.HasValue ?
                new ObjectParameter("Btn_Customers_Visible", btn_Customers_Visible) :
                new ObjectParameter("Btn_Customers_Visible", typeof(bool));
    
            var edt_CustomerID_TopParameter = edt_CustomerID_Top.HasValue ?
                new ObjectParameter("Edt_CustomerID_Top", edt_CustomerID_Top) :
                new ObjectParameter("Edt_CustomerID_Top", typeof(short));
    
            var edt_CustomerID_LeftParameter = edt_CustomerID_Left.HasValue ?
                new ObjectParameter("Edt_CustomerID_Left", edt_CustomerID_Left) :
                new ObjectParameter("Edt_CustomerID_Left", typeof(short));
    
            var edt_CustomerID_WidthParameter = edt_CustomerID_Width.HasValue ?
                new ObjectParameter("Edt_CustomerID_Width", edt_CustomerID_Width) :
                new ObjectParameter("Edt_CustomerID_Width", typeof(short));
    
            var edt_CustomerID_HeightParameter = edt_CustomerID_Height.HasValue ?
                new ObjectParameter("Edt_CustomerID_Height", edt_CustomerID_Height) :
                new ObjectParameter("Edt_CustomerID_Height", typeof(short));
    
            var edt_CustomerID_VisibleParameter = edt_CustomerID_Visible.HasValue ?
                new ObjectParameter("Edt_CustomerID_Visible", edt_CustomerID_Visible) :
                new ObjectParameter("Edt_CustomerID_Visible", typeof(bool));
    
            var btn_Departments_TopParameter = btn_Departments_Top.HasValue ?
                new ObjectParameter("Btn_Departments_Top", btn_Departments_Top) :
                new ObjectParameter("Btn_Departments_Top", typeof(short));
    
            var btn_Departments_LeftParameter = btn_Departments_Left.HasValue ?
                new ObjectParameter("Btn_Departments_Left", btn_Departments_Left) :
                new ObjectParameter("Btn_Departments_Left", typeof(short));
    
            var btn_Departments_WidthParameter = btn_Departments_Width.HasValue ?
                new ObjectParameter("Btn_Departments_Width", btn_Departments_Width) :
                new ObjectParameter("Btn_Departments_Width", typeof(short));
    
            var btn_Departments_HeightParameter = btn_Departments_Height.HasValue ?
                new ObjectParameter("Btn_Departments_Height", btn_Departments_Height) :
                new ObjectParameter("Btn_Departments_Height", typeof(short));
    
            var btn_Departments_VisibleParameter = btn_Departments_Visible.HasValue ?
                new ObjectParameter("Btn_Departments_Visible", btn_Departments_Visible) :
                new ObjectParameter("Btn_Departments_Visible", typeof(bool));
    
            var edt_DepartmentID_TopParameter = edt_DepartmentID_Top.HasValue ?
                new ObjectParameter("Edt_DepartmentID_Top", edt_DepartmentID_Top) :
                new ObjectParameter("Edt_DepartmentID_Top", typeof(short));
    
            var edt_DepartmentID_LeftParameter = edt_DepartmentID_Left.HasValue ?
                new ObjectParameter("Edt_DepartmentID_Left", edt_DepartmentID_Left) :
                new ObjectParameter("Edt_DepartmentID_Left", typeof(short));
    
            var edt_DepartmentID_WidthParameter = edt_DepartmentID_Width.HasValue ?
                new ObjectParameter("Edt_DepartmentID_Width", edt_DepartmentID_Width) :
                new ObjectParameter("Edt_DepartmentID_Width", typeof(short));
    
            var edt_DepartmentID_HeightParameter = edt_DepartmentID_Height.HasValue ?
                new ObjectParameter("Edt_DepartmentID_Height", edt_DepartmentID_Height) :
                new ObjectParameter("Edt_DepartmentID_Height", typeof(short));
    
            var edt_DepartmentID_VisibleParameter = edt_DepartmentID_Visible.HasValue ?
                new ObjectParameter("Edt_DepartmentID_Visible", edt_DepartmentID_Visible) :
                new ObjectParameter("Edt_DepartmentID_Visible", typeof(bool));
    
            var lbl_DepartmentName_TopParameter = lbl_DepartmentName_Top.HasValue ?
                new ObjectParameter("Lbl_DepartmentName_Top", lbl_DepartmentName_Top) :
                new ObjectParameter("Lbl_DepartmentName_Top", typeof(short));
    
            var lbl_DepartmentName_LeftParameter = lbl_DepartmentName_Left.HasValue ?
                new ObjectParameter("Lbl_DepartmentName_Left", lbl_DepartmentName_Left) :
                new ObjectParameter("Lbl_DepartmentName_Left", typeof(short));
    
            var lbl_DepartmentName_WidthParameter = lbl_DepartmentName_Width.HasValue ?
                new ObjectParameter("Lbl_DepartmentName_Width", lbl_DepartmentName_Width) :
                new ObjectParameter("Lbl_DepartmentName_Width", typeof(short));
    
            var lbl_DepartmentName_HeightParameter = lbl_DepartmentName_Height.HasValue ?
                new ObjectParameter("Lbl_DepartmentName_Height", lbl_DepartmentName_Height) :
                new ObjectParameter("Lbl_DepartmentName_Height", typeof(short));
    
            var lbl_DepartmentName_VisibleParameter = lbl_DepartmentName_Visible.HasValue ?
                new ObjectParameter("Lbl_DepartmentName_Visible", lbl_DepartmentName_Visible) :
                new ObjectParameter("Lbl_DepartmentName_Visible", typeof(bool));
    
            var lbl_Room_TopParameter = lbl_Room_Top.HasValue ?
                new ObjectParameter("Lbl_Room_Top", lbl_Room_Top) :
                new ObjectParameter("Lbl_Room_Top", typeof(short));
    
            var lbl_Room_LeftParameter = lbl_Room_Left.HasValue ?
                new ObjectParameter("Lbl_Room_Left", lbl_Room_Left) :
                new ObjectParameter("Lbl_Room_Left", typeof(short));
    
            var lbl_Room_WidthParameter = lbl_Room_Width.HasValue ?
                new ObjectParameter("Lbl_Room_Width", lbl_Room_Width) :
                new ObjectParameter("Lbl_Room_Width", typeof(short));
    
            var lbl_Room_HeightParameter = lbl_Room_Height.HasValue ?
                new ObjectParameter("Lbl_Room_Height", lbl_Room_Height) :
                new ObjectParameter("Lbl_Room_Height", typeof(short));
    
            var lbl_Room_VisibleParameter = lbl_Room_Visible.HasValue ?
                new ObjectParameter("Lbl_Room_Visible", lbl_Room_Visible) :
                new ObjectParameter("Lbl_Room_Visible", typeof(bool));
    
            var edt_RoomID_TopParameter = edt_RoomID_Top.HasValue ?
                new ObjectParameter("Edt_RoomID_Top", edt_RoomID_Top) :
                new ObjectParameter("Edt_RoomID_Top", typeof(short));
    
            var edt_RoomID_LeftParameter = edt_RoomID_Left.HasValue ?
                new ObjectParameter("Edt_RoomID_Left", edt_RoomID_Left) :
                new ObjectParameter("Edt_RoomID_Left", typeof(short));
    
            var edt_RoomID_WidthParameter = edt_RoomID_Width.HasValue ?
                new ObjectParameter("Edt_RoomID_Width", edt_RoomID_Width) :
                new ObjectParameter("Edt_RoomID_Width", typeof(short));
    
            var edt_RoomID_HeightParameter = edt_RoomID_Height.HasValue ?
                new ObjectParameter("Edt_RoomID_Height", edt_RoomID_Height) :
                new ObjectParameter("Edt_RoomID_Height", typeof(short));
    
            var edt_RoomID_VisibleParameter = edt_RoomID_Visible.HasValue ?
                new ObjectParameter("Edt_RoomID_Visible", edt_RoomID_Visible) :
                new ObjectParameter("Edt_RoomID_Visible", typeof(bool));
    
            var edt_BedID_TopParameter = edt_BedID_Top.HasValue ?
                new ObjectParameter("Edt_BedID_Top", edt_BedID_Top) :
                new ObjectParameter("Edt_BedID_Top", typeof(short));
    
            var edt_BedID_LeftParameter = edt_BedID_Left.HasValue ?
                new ObjectParameter("Edt_BedID_Left", edt_BedID_Left) :
                new ObjectParameter("Edt_BedID_Left", typeof(short));
    
            var edt_BedID_WidthParameter = edt_BedID_Width.HasValue ?
                new ObjectParameter("Edt_BedID_Width", edt_BedID_Width) :
                new ObjectParameter("Edt_BedID_Width", typeof(short));
    
            var edt_BedID_HeightParameter = edt_BedID_Height.HasValue ?
                new ObjectParameter("Edt_BedID_Height", edt_BedID_Height) :
                new ObjectParameter("Edt_BedID_Height", typeof(short));
    
            var edt_BedID_VisibleParameter = edt_BedID_Visible.HasValue ?
                new ObjectParameter("Edt_BedID_Visible", edt_BedID_Visible) :
                new ObjectParameter("Edt_BedID_Visible", typeof(bool));
    
            var btn_Doctors_TopParameter = btn_Doctors_Top.HasValue ?
                new ObjectParameter("Btn_Doctors_Top", btn_Doctors_Top) :
                new ObjectParameter("Btn_Doctors_Top", typeof(short));
    
            var btn_Doctors_LeftParameter = btn_Doctors_Left.HasValue ?
                new ObjectParameter("Btn_Doctors_Left", btn_Doctors_Left) :
                new ObjectParameter("Btn_Doctors_Left", typeof(short));
    
            var btn_Doctors_WidthParameter = btn_Doctors_Width.HasValue ?
                new ObjectParameter("Btn_Doctors_Width", btn_Doctors_Width) :
                new ObjectParameter("Btn_Doctors_Width", typeof(short));
    
            var btn_Doctors_HeightParameter = btn_Doctors_Height.HasValue ?
                new ObjectParameter("Btn_Doctors_Height", btn_Doctors_Height) :
                new ObjectParameter("Btn_Doctors_Height", typeof(short));
    
            var btn_Doctors_VisibleParameter = btn_Doctors_Visible.HasValue ?
                new ObjectParameter("Btn_Doctors_Visible", btn_Doctors_Visible) :
                new ObjectParameter("Btn_Doctors_Visible", typeof(bool));
    
            var edt_DoctorID_TopParameter = edt_DoctorID_Top.HasValue ?
                new ObjectParameter("Edt_DoctorID_Top", edt_DoctorID_Top) :
                new ObjectParameter("Edt_DoctorID_Top", typeof(short));
    
            var edt_DoctorID_LeftParameter = edt_DoctorID_Left.HasValue ?
                new ObjectParameter("Edt_DoctorID_Left", edt_DoctorID_Left) :
                new ObjectParameter("Edt_DoctorID_Left", typeof(short));
    
            var edt_DoctorID_WidthParameter = edt_DoctorID_Width.HasValue ?
                new ObjectParameter("Edt_DoctorID_Width", edt_DoctorID_Width) :
                new ObjectParameter("Edt_DoctorID_Width", typeof(short));
    
            var edt_DoctorID_HeightParameter = edt_DoctorID_Height.HasValue ?
                new ObjectParameter("Edt_DoctorID_Height", edt_DoctorID_Height) :
                new ObjectParameter("Edt_DoctorID_Height", typeof(short));
    
            var edt_DoctorID_VisibleParameter = edt_DoctorID_Visible.HasValue ?
                new ObjectParameter("Edt_DoctorID_Visible", edt_DoctorID_Visible) :
                new ObjectParameter("Edt_DoctorID_Visible", typeof(bool));
    
            var lbl_DoctorName_TopParameter = lbl_DoctorName_Top.HasValue ?
                new ObjectParameter("Lbl_DoctorName_Top", lbl_DoctorName_Top) :
                new ObjectParameter("Lbl_DoctorName_Top", typeof(short));
    
            var lbl_DoctorName_LeftParameter = lbl_DoctorName_Left.HasValue ?
                new ObjectParameter("Lbl_DoctorName_Left", lbl_DoctorName_Left) :
                new ObjectParameter("Lbl_DoctorName_Left", typeof(short));
    
            var lbl_DoctorName_WidthParameter = lbl_DoctorName_Width.HasValue ?
                new ObjectParameter("Lbl_DoctorName_Width", lbl_DoctorName_Width) :
                new ObjectParameter("Lbl_DoctorName_Width", typeof(short));
    
            var lbl_DoctorName_HeightParameter = lbl_DoctorName_Height.HasValue ?
                new ObjectParameter("Lbl_DoctorName_Height", lbl_DoctorName_Height) :
                new ObjectParameter("Lbl_DoctorName_Height", typeof(short));
    
            var lbl_DoctorName_VisibleParameter = lbl_DoctorName_Visible.HasValue ?
                new ObjectParameter("Lbl_DoctorName_Visible", lbl_DoctorName_Visible) :
                new ObjectParameter("Lbl_DoctorName_Visible", typeof(bool));
    
            var btn_ReceptionFactor_TopParameter = btn_ReceptionFactor_Top.HasValue ?
                new ObjectParameter("Btn_ReceptionFactor_Top", btn_ReceptionFactor_Top) :
                new ObjectParameter("Btn_ReceptionFactor_Top", typeof(short));
    
            var btn_ReceptionFactor_LeftParameter = btn_ReceptionFactor_Left.HasValue ?
                new ObjectParameter("Btn_ReceptionFactor_Left", btn_ReceptionFactor_Left) :
                new ObjectParameter("Btn_ReceptionFactor_Left", typeof(short));
    
            var btn_ReceptionFactor_WidthParameter = btn_ReceptionFactor_Width.HasValue ?
                new ObjectParameter("Btn_ReceptionFactor_Width", btn_ReceptionFactor_Width) :
                new ObjectParameter("Btn_ReceptionFactor_Width", typeof(short));
    
            var btn_ReceptionFactor_HeightParameter = btn_ReceptionFactor_Height.HasValue ?
                new ObjectParameter("Btn_ReceptionFactor_Height", btn_ReceptionFactor_Height) :
                new ObjectParameter("Btn_ReceptionFactor_Height", typeof(short));
    
            var btn_ReceptionFactor_VisibleParameter = btn_ReceptionFactor_Visible.HasValue ?
                new ObjectParameter("Btn_ReceptionFactor_Visible", btn_ReceptionFactor_Visible) :
                new ObjectParameter("Btn_ReceptionFactor_Visible", typeof(bool));
    
            var btn_DigitalDocuments_TopParameter = btn_DigitalDocuments_Top.HasValue ?
                new ObjectParameter("Btn_DigitalDocuments_Top", btn_DigitalDocuments_Top) :
                new ObjectParameter("Btn_DigitalDocuments_Top", typeof(short));
    
            var btn_DigitalDocuments_LeftParameter = btn_DigitalDocuments_Left.HasValue ?
                new ObjectParameter("Btn_DigitalDocuments_Left", btn_DigitalDocuments_Left) :
                new ObjectParameter("Btn_DigitalDocuments_Left", typeof(short));
    
            var btn_DigitalDocuments_WidthParameter = btn_DigitalDocuments_Width.HasValue ?
                new ObjectParameter("Btn_DigitalDocuments_Width", btn_DigitalDocuments_Width) :
                new ObjectParameter("Btn_DigitalDocuments_Width", typeof(short));
    
            var btn_DigitalDocuments_HeightParameter = btn_DigitalDocuments_Height.HasValue ?
                new ObjectParameter("Btn_DigitalDocuments_Height", btn_DigitalDocuments_Height) :
                new ObjectParameter("Btn_DigitalDocuments_Height", typeof(short));
    
            var btn_DigitalDocuments_VisibleParameter = btn_DigitalDocuments_Visible.HasValue ?
                new ObjectParameter("Btn_DigitalDocuments_Visible", btn_DigitalDocuments_Visible) :
                new ObjectParameter("Btn_DigitalDocuments_Visible", typeof(bool));
    
            var btn_Images_TopParameter = btn_Images_Top.HasValue ?
                new ObjectParameter("Btn_Images_Top", btn_Images_Top) :
                new ObjectParameter("Btn_Images_Top", typeof(short));
    
            var btn_Images_LeftParameter = btn_Images_Left.HasValue ?
                new ObjectParameter("Btn_Images_Left", btn_Images_Left) :
                new ObjectParameter("Btn_Images_Left", typeof(short));
    
            var btn_Images_WidthParameter = btn_Images_Width.HasValue ?
                new ObjectParameter("Btn_Images_Width", btn_Images_Width) :
                new ObjectParameter("Btn_Images_Width", typeof(short));
    
            var btn_Images_HeightParameter = btn_Images_Height.HasValue ?
                new ObjectParameter("Btn_Images_Height", btn_Images_Height) :
                new ObjectParameter("Btn_Images_Height", typeof(short));
    
            var btn_Images_VisibleParameter = btn_Images_Visible.HasValue ?
                new ObjectParameter("Btn_Images_Visible", btn_Images_Visible) :
                new ObjectParameter("Btn_Images_Visible", typeof(bool));
    
            var btn_Assistants_TopParameter = btn_Assistants_Top.HasValue ?
                new ObjectParameter("Btn_Assistants_Top", btn_Assistants_Top) :
                new ObjectParameter("Btn_Assistants_Top", typeof(short));
    
            var btn_Assistants_LeftParameter = btn_Assistants_Left.HasValue ?
                new ObjectParameter("Btn_Assistants_Left", btn_Assistants_Left) :
                new ObjectParameter("Btn_Assistants_Left", typeof(short));
    
            var btn_Assistants_WidthParameter = btn_Assistants_Width.HasValue ?
                new ObjectParameter("Btn_Assistants_Width", btn_Assistants_Width) :
                new ObjectParameter("Btn_Assistants_Width", typeof(short));
    
            var btn_Assistants_HeightParameter = btn_Assistants_Height.HasValue ?
                new ObjectParameter("Btn_Assistants_Height", btn_Assistants_Height) :
                new ObjectParameter("Btn_Assistants_Height", typeof(short));
    
            var btn_Assistants_VisibleParameter = btn_Assistants_Visible.HasValue ?
                new ObjectParameter("Btn_Assistants_Visible", btn_Assistants_Visible) :
                new ObjectParameter("Btn_Assistants_Visible", typeof(bool));
    
            var edt_AssistantID_TopParameter = edt_AssistantID_Top.HasValue ?
                new ObjectParameter("Edt_AssistantID_Top", edt_AssistantID_Top) :
                new ObjectParameter("Edt_AssistantID_Top", typeof(short));
    
            var edt_AssistantID_LeftParameter = edt_AssistantID_Left.HasValue ?
                new ObjectParameter("Edt_AssistantID_Left", edt_AssistantID_Left) :
                new ObjectParameter("Edt_AssistantID_Left", typeof(short));
    
            var edt_AssistantID_WidthParameter = edt_AssistantID_Width.HasValue ?
                new ObjectParameter("Edt_AssistantID_Width", edt_AssistantID_Width) :
                new ObjectParameter("Edt_AssistantID_Width", typeof(short));
    
            var edt_AssistantID_HeightParameter = edt_AssistantID_Height.HasValue ?
                new ObjectParameter("Edt_AssistantID_Height", edt_AssistantID_Height) :
                new ObjectParameter("Edt_AssistantID_Height", typeof(short));
    
            var edt_AssistantID_VisibleParameter = edt_AssistantID_Visible.HasValue ?
                new ObjectParameter("Edt_AssistantID_Visible", edt_AssistantID_Visible) :
                new ObjectParameter("Edt_AssistantID_Visible", typeof(bool));
    
            var lbl_AssistantName_TopParameter = lbl_AssistantName_Top.HasValue ?
                new ObjectParameter("Lbl_AssistantName_Top", lbl_AssistantName_Top) :
                new ObjectParameter("Lbl_AssistantName_Top", typeof(short));
    
            var lbl_AssistantName_LeftParameter = lbl_AssistantName_Left.HasValue ?
                new ObjectParameter("Lbl_AssistantName_Left", lbl_AssistantName_Left) :
                new ObjectParameter("Lbl_AssistantName_Left", typeof(short));
    
            var lbl_AssistantName_WidthParameter = lbl_AssistantName_Width.HasValue ?
                new ObjectParameter("Lbl_AssistantName_Width", lbl_AssistantName_Width) :
                new ObjectParameter("Lbl_AssistantName_Width", typeof(short));
    
            var lbl_AssistantName_HeightParameter = lbl_AssistantName_Height.HasValue ?
                new ObjectParameter("Lbl_AssistantName_Height", lbl_AssistantName_Height) :
                new ObjectParameter("Lbl_AssistantName_Height", typeof(short));
    
            var lbl_AssistantName_VisibleParameter = lbl_AssistantName_Visible.HasValue ?
                new ObjectParameter("Lbl_AssistantName_Visible", lbl_AssistantName_Visible) :
                new ObjectParameter("Lbl_AssistantName_Visible", typeof(bool));
    
            var chk_AutoPrint_TopParameter = chk_AutoPrint_Top.HasValue ?
                new ObjectParameter("Chk_AutoPrint_Top", chk_AutoPrint_Top) :
                new ObjectParameter("Chk_AutoPrint_Top", typeof(short));
    
            var chk_AutoPrint_LeftParameter = chk_AutoPrint_Left.HasValue ?
                new ObjectParameter("Chk_AutoPrint_Left", chk_AutoPrint_Left) :
                new ObjectParameter("Chk_AutoPrint_Left", typeof(short));
    
            var chk_AutoPrint_WidthParameter = chk_AutoPrint_Width.HasValue ?
                new ObjectParameter("Chk_AutoPrint_Width", chk_AutoPrint_Width) :
                new ObjectParameter("Chk_AutoPrint_Width", typeof(short));
    
            var chk_AutoPrint_HeightParameter = chk_AutoPrint_Height.HasValue ?
                new ObjectParameter("Chk_AutoPrint_Height", chk_AutoPrint_Height) :
                new ObjectParameter("Chk_AutoPrint_Height", typeof(short));
    
            var chk_AutoPrint_VisibleParameter = chk_AutoPrint_Visible.HasValue ?
                new ObjectParameter("Chk_AutoPrint_Visible", chk_AutoPrint_Visible) :
                new ObjectParameter("Chk_AutoPrint_Visible", typeof(bool));
    
            var chk_AutoSMS_TopParameter = chk_AutoSMS_Top.HasValue ?
                new ObjectParameter("Chk_AutoSMS_Top", chk_AutoSMS_Top) :
                new ObjectParameter("Chk_AutoSMS_Top", typeof(short));
    
            var chk_AutoSMS_LeftParameter = chk_AutoSMS_Left.HasValue ?
                new ObjectParameter("Chk_AutoSMS_Left", chk_AutoSMS_Left) :
                new ObjectParameter("Chk_AutoSMS_Left", typeof(short));
    
            var chk_AutoSMS_WidthParameter = chk_AutoSMS_Width.HasValue ?
                new ObjectParameter("Chk_AutoSMS_Width", chk_AutoSMS_Width) :
                new ObjectParameter("Chk_AutoSMS_Width", typeof(short));
    
            var chk_AutoSMS_HeightParameter = chk_AutoSMS_Height.HasValue ?
                new ObjectParameter("Chk_AutoSMS_Height", chk_AutoSMS_Height) :
                new ObjectParameter("Chk_AutoSMS_Height", typeof(short));
    
            var chk_AutoSMS_VisibleParameter = chk_AutoSMS_Visible.HasValue ?
                new ObjectParameter("Chk_AutoSMS_Visible", chk_AutoSMS_Visible) :
                new ObjectParameter("Chk_AutoSMS_Visible", typeof(bool));
    
            var btn_Diagnosises_TopParameter = btn_Diagnosises_Top.HasValue ?
                new ObjectParameter("Btn_Diagnosises_Top", btn_Diagnosises_Top) :
                new ObjectParameter("Btn_Diagnosises_Top", typeof(short));
    
            var btn_Diagnosises_LeftParameter = btn_Diagnosises_Left.HasValue ?
                new ObjectParameter("Btn_Diagnosises_Left", btn_Diagnosises_Left) :
                new ObjectParameter("Btn_Diagnosises_Left", typeof(short));
    
            var btn_Diagnosises_WidthParameter = btn_Diagnosises_Width.HasValue ?
                new ObjectParameter("Btn_Diagnosises_Width", btn_Diagnosises_Width) :
                new ObjectParameter("Btn_Diagnosises_Width", typeof(short));
    
            var btn_Diagnosises_HeightParameter = btn_Diagnosises_Height.HasValue ?
                new ObjectParameter("Btn_Diagnosises_Height", btn_Diagnosises_Height) :
                new ObjectParameter("Btn_Diagnosises_Height", typeof(short));
    
            var btn_Diagnosises_VisibleParameter = btn_Diagnosises_Visible.HasValue ?
                new ObjectParameter("Btn_Diagnosises_Visible", btn_Diagnosises_Visible) :
                new ObjectParameter("Btn_Diagnosises_Visible", typeof(bool));
    
            var edt_DiagnosisID_TopParameter = edt_DiagnosisID_Top.HasValue ?
                new ObjectParameter("Edt_DiagnosisID_Top", edt_DiagnosisID_Top) :
                new ObjectParameter("Edt_DiagnosisID_Top", typeof(short));
    
            var edt_DiagnosisID_LeftParameter = edt_DiagnosisID_Left.HasValue ?
                new ObjectParameter("Edt_DiagnosisID_Left", edt_DiagnosisID_Left) :
                new ObjectParameter("Edt_DiagnosisID_Left", typeof(short));
    
            var edt_DiagnosisID_WidthParameter = edt_DiagnosisID_Width.HasValue ?
                new ObjectParameter("Edt_DiagnosisID_Width", edt_DiagnosisID_Width) :
                new ObjectParameter("Edt_DiagnosisID_Width", typeof(short));
    
            var edt_DiagnosisID_HeightParameter = edt_DiagnosisID_Height.HasValue ?
                new ObjectParameter("Edt_DiagnosisID_Height", edt_DiagnosisID_Height) :
                new ObjectParameter("Edt_DiagnosisID_Height", typeof(short));
    
            var edt_DiagnosisID_VisibleParameter = edt_DiagnosisID_Visible.HasValue ?
                new ObjectParameter("Edt_DiagnosisID_Visible", edt_DiagnosisID_Visible) :
                new ObjectParameter("Edt_DiagnosisID_Visible", typeof(bool));
    
            var lbl_DiagnosisName_TopParameter = lbl_DiagnosisName_Top.HasValue ?
                new ObjectParameter("Lbl_DiagnosisName_Top", lbl_DiagnosisName_Top) :
                new ObjectParameter("Lbl_DiagnosisName_Top", typeof(short));
    
            var lbl_DiagnosisName_LeftParameter = lbl_DiagnosisName_Left.HasValue ?
                new ObjectParameter("Lbl_DiagnosisName_Left", lbl_DiagnosisName_Left) :
                new ObjectParameter("Lbl_DiagnosisName_Left", typeof(short));
    
            var lbl_DiagnosisName_WidthParameter = lbl_DiagnosisName_Width.HasValue ?
                new ObjectParameter("Lbl_DiagnosisName_Width", lbl_DiagnosisName_Width) :
                new ObjectParameter("Lbl_DiagnosisName_Width", typeof(short));
    
            var lbl_DiagnosisName_HeightParameter = lbl_DiagnosisName_Height.HasValue ?
                new ObjectParameter("Lbl_DiagnosisName_Height", lbl_DiagnosisName_Height) :
                new ObjectParameter("Lbl_DiagnosisName_Height", typeof(short));
    
            var lbl_DiagnosisName_VisibleParameter = lbl_DiagnosisName_Visible.HasValue ?
                new ObjectParameter("Lbl_DiagnosisName_Visible", lbl_DiagnosisName_Visible) :
                new ObjectParameter("Lbl_DiagnosisName_Visible", typeof(bool));
    
            var btn_Therapies_TopParameter = btn_Therapies_Top.HasValue ?
                new ObjectParameter("Btn_Therapies_Top", btn_Therapies_Top) :
                new ObjectParameter("Btn_Therapies_Top", typeof(short));
    
            var btn_Therapies_LeftParameter = btn_Therapies_Left.HasValue ?
                new ObjectParameter("Btn_Therapies_Left", btn_Therapies_Left) :
                new ObjectParameter("Btn_Therapies_Left", typeof(short));
    
            var btn_Therapies_WidthParameter = btn_Therapies_Width.HasValue ?
                new ObjectParameter("Btn_Therapies_Width", btn_Therapies_Width) :
                new ObjectParameter("Btn_Therapies_Width", typeof(short));
    
            var btn_Therapies_HeightParameter = btn_Therapies_Height.HasValue ?
                new ObjectParameter("Btn_Therapies_Height", btn_Therapies_Height) :
                new ObjectParameter("Btn_Therapies_Height", typeof(short));
    
            var btn_Therapies_VisibleParameter = btn_Therapies_Visible.HasValue ?
                new ObjectParameter("Btn_Therapies_Visible", btn_Therapies_Visible) :
                new ObjectParameter("Btn_Therapies_Visible", typeof(bool));
    
            var edt_TherapyID_TopParameter = edt_TherapyID_Top.HasValue ?
                new ObjectParameter("Edt_TherapyID_Top", edt_TherapyID_Top) :
                new ObjectParameter("Edt_TherapyID_Top", typeof(short));
    
            var edt_TherapyID_LeftParameter = edt_TherapyID_Left.HasValue ?
                new ObjectParameter("Edt_TherapyID_Left", edt_TherapyID_Left) :
                new ObjectParameter("Edt_TherapyID_Left", typeof(short));
    
            var edt_TherapyID_WidthParameter = edt_TherapyID_Width.HasValue ?
                new ObjectParameter("Edt_TherapyID_Width", edt_TherapyID_Width) :
                new ObjectParameter("Edt_TherapyID_Width", typeof(short));
    
            var edt_TherapyID_HeightParameter = edt_TherapyID_Height.HasValue ?
                new ObjectParameter("Edt_TherapyID_Height", edt_TherapyID_Height) :
                new ObjectParameter("Edt_TherapyID_Height", typeof(short));
    
            var edt_TherapyID_VisibleParameter = edt_TherapyID_Visible.HasValue ?
                new ObjectParameter("Edt_TherapyID_Visible", edt_TherapyID_Visible) :
                new ObjectParameter("Edt_TherapyID_Visible", typeof(bool));
    
            var lbl_TherapyName_TopParameter = lbl_TherapyName_Top.HasValue ?
                new ObjectParameter("Lbl_TherapyName_Top", lbl_TherapyName_Top) :
                new ObjectParameter("Lbl_TherapyName_Top", typeof(short));
    
            var lbl_TherapyName_LeftParameter = lbl_TherapyName_Left.HasValue ?
                new ObjectParameter("Lbl_TherapyName_Left", lbl_TherapyName_Left) :
                new ObjectParameter("Lbl_TherapyName_Left", typeof(short));
    
            var lbl_TherapyName_WidthParameter = lbl_TherapyName_Width.HasValue ?
                new ObjectParameter("Lbl_TherapyName_Width", lbl_TherapyName_Width) :
                new ObjectParameter("Lbl_TherapyName_Width", typeof(short));
    
            var lbl_TherapyName_HeightParameter = lbl_TherapyName_Height.HasValue ?
                new ObjectParameter("Lbl_TherapyName_Height", lbl_TherapyName_Height) :
                new ObjectParameter("Lbl_TherapyName_Height", typeof(short));
    
            var lbl_TherapyName_VisibleParameter = lbl_TherapyName_Visible.HasValue ?
                new ObjectParameter("Lbl_TherapyName_Visible", lbl_TherapyName_Visible) :
                new ObjectParameter("Lbl_TherapyName_Visible", typeof(bool));
    
            var btn_NewPrescription_TopParameter = btn_NewPrescription_Top.HasValue ?
                new ObjectParameter("Btn_NewPrescription_Top", btn_NewPrescription_Top) :
                new ObjectParameter("Btn_NewPrescription_Top", typeof(short));
    
            var btn_NewPrescription_LeftParameter = btn_NewPrescription_Left.HasValue ?
                new ObjectParameter("Btn_NewPrescription_Left", btn_NewPrescription_Left) :
                new ObjectParameter("Btn_NewPrescription_Left", typeof(short));
    
            var btn_NewPrescription_WidthParameter = btn_NewPrescription_Width.HasValue ?
                new ObjectParameter("Btn_NewPrescription_Width", btn_NewPrescription_Width) :
                new ObjectParameter("Btn_NewPrescription_Width", typeof(short));
    
            var btn_NewPrescription_HeightParameter = btn_NewPrescription_Height.HasValue ?
                new ObjectParameter("Btn_NewPrescription_Height", btn_NewPrescription_Height) :
                new ObjectParameter("Btn_NewPrescription_Height", typeof(short));
    
            var btn_NewPrescription_VisibleParameter = btn_NewPrescription_Visible.HasValue ?
                new ObjectParameter("Btn_NewPrescription_Visible", btn_NewPrescription_Visible) :
                new ObjectParameter("Btn_NewPrescription_Visible", typeof(bool));
    
            var btn_Prescriptions_TopParameter = btn_Prescriptions_Top.HasValue ?
                new ObjectParameter("Btn_Prescriptions_Top", btn_Prescriptions_Top) :
                new ObjectParameter("Btn_Prescriptions_Top", typeof(short));
    
            var btn_Prescriptions_LeftParameter = btn_Prescriptions_Left.HasValue ?
                new ObjectParameter("Btn_Prescriptions_Left", btn_Prescriptions_Left) :
                new ObjectParameter("Btn_Prescriptions_Left", typeof(short));
    
            var btn_Prescriptions_WidthParameter = btn_Prescriptions_Width.HasValue ?
                new ObjectParameter("Btn_Prescriptions_Width", btn_Prescriptions_Width) :
                new ObjectParameter("Btn_Prescriptions_Width", typeof(short));
    
            var btn_Prescriptions_HeightParameter = btn_Prescriptions_Height.HasValue ?
                new ObjectParameter("Btn_Prescriptions_Height", btn_Prescriptions_Height) :
                new ObjectParameter("Btn_Prescriptions_Height", typeof(short));
    
            var btn_Prescriptions_VisibleParameter = btn_Prescriptions_Visible.HasValue ?
                new ObjectParameter("Btn_Prescriptions_Visible", btn_Prescriptions_Visible) :
                new ObjectParameter("Btn_Prescriptions_Visible", typeof(bool));
    
            var edt_PrescriptionID_TopParameter = edt_PrescriptionID_Top.HasValue ?
                new ObjectParameter("Edt_PrescriptionID_Top", edt_PrescriptionID_Top) :
                new ObjectParameter("Edt_PrescriptionID_Top", typeof(short));
    
            var edt_PrescriptionID_LeftParameter = edt_PrescriptionID_Left.HasValue ?
                new ObjectParameter("Edt_PrescriptionID_Left", edt_PrescriptionID_Left) :
                new ObjectParameter("Edt_PrescriptionID_Left", typeof(short));
    
            var edt_PrescriptionID_WidthParameter = edt_PrescriptionID_Width.HasValue ?
                new ObjectParameter("Edt_PrescriptionID_Width", edt_PrescriptionID_Width) :
                new ObjectParameter("Edt_PrescriptionID_Width", typeof(short));
    
            var edt_PrescriptionID_HeightParameter = edt_PrescriptionID_Height.HasValue ?
                new ObjectParameter("Edt_PrescriptionID_Height", edt_PrescriptionID_Height) :
                new ObjectParameter("Edt_PrescriptionID_Height", typeof(short));
    
            var edt_PrescriptionID_VisibleParameter = edt_PrescriptionID_Visible.HasValue ?
                new ObjectParameter("Edt_PrescriptionID_Visible", edt_PrescriptionID_Visible) :
                new ObjectParameter("Edt_PrescriptionID_Visible", typeof(bool));
    
            var btn_NewLaboratory_TopParameter = btn_NewLaboratory_Top.HasValue ?
                new ObjectParameter("Btn_NewLaboratory_Top", btn_NewLaboratory_Top) :
                new ObjectParameter("Btn_NewLaboratory_Top", typeof(short));
    
            var btn_NewLaboratory_LeftParameter = btn_NewLaboratory_Left.HasValue ?
                new ObjectParameter("Btn_NewLaboratory_Left", btn_NewLaboratory_Left) :
                new ObjectParameter("Btn_NewLaboratory_Left", typeof(short));
    
            var btn_NewLaboratory_WidthParameter = btn_NewLaboratory_Width.HasValue ?
                new ObjectParameter("Btn_NewLaboratory_Width", btn_NewLaboratory_Width) :
                new ObjectParameter("Btn_NewLaboratory_Width", typeof(short));
    
            var btn_NewLaboratory_HeightParameter = btn_NewLaboratory_Height.HasValue ?
                new ObjectParameter("Btn_NewLaboratory_Height", btn_NewLaboratory_Height) :
                new ObjectParameter("Btn_NewLaboratory_Height", typeof(short));
    
            var btn_NewLaboratory_VisibleParameter = btn_NewLaboratory_Visible.HasValue ?
                new ObjectParameter("Btn_NewLaboratory_Visible", btn_NewLaboratory_Visible) :
                new ObjectParameter("Btn_NewLaboratory_Visible", typeof(bool));
    
            var btn_Laboratories_TopParameter = btn_Laboratories_Top.HasValue ?
                new ObjectParameter("Btn_Laboratories_Top", btn_Laboratories_Top) :
                new ObjectParameter("Btn_Laboratories_Top", typeof(short));
    
            var btn_Laboratories_LeftParameter = btn_Laboratories_Left.HasValue ?
                new ObjectParameter("Btn_Laboratories_Left", btn_Laboratories_Left) :
                new ObjectParameter("Btn_Laboratories_Left", typeof(short));
    
            var btn_Laboratories_WidthParameter = btn_Laboratories_Width.HasValue ?
                new ObjectParameter("Btn_Laboratories_Width", btn_Laboratories_Width) :
                new ObjectParameter("Btn_Laboratories_Width", typeof(short));
    
            var btn_Laboratories_HeightParameter = btn_Laboratories_Height.HasValue ?
                new ObjectParameter("Btn_Laboratories_Height", btn_Laboratories_Height) :
                new ObjectParameter("Btn_Laboratories_Height", typeof(short));
    
            var btn_Laboratories_VisibleParameter = btn_Laboratories_Visible.HasValue ?
                new ObjectParameter("Btn_Laboratories_Visible", btn_Laboratories_Visible) :
                new ObjectParameter("Btn_Laboratories_Visible", typeof(bool));
    
            var edt_LaboratoryID_TopParameter = edt_LaboratoryID_Top.HasValue ?
                new ObjectParameter("Edt_LaboratoryID_Top", edt_LaboratoryID_Top) :
                new ObjectParameter("Edt_LaboratoryID_Top", typeof(short));
    
            var edt_LaboratoryID_LeftParameter = edt_LaboratoryID_Left.HasValue ?
                new ObjectParameter("Edt_LaboratoryID_Left", edt_LaboratoryID_Left) :
                new ObjectParameter("Edt_LaboratoryID_Left", typeof(short));
    
            var edt_LaboratoryID_WidthParameter = edt_LaboratoryID_Width.HasValue ?
                new ObjectParameter("Edt_LaboratoryID_Width", edt_LaboratoryID_Width) :
                new ObjectParameter("Edt_LaboratoryID_Width", typeof(short));
    
            var edt_LaboratoryID_HeightParameter = edt_LaboratoryID_Height.HasValue ?
                new ObjectParameter("Edt_LaboratoryID_Height", edt_LaboratoryID_Height) :
                new ObjectParameter("Edt_LaboratoryID_Height", typeof(short));
    
            var edt_LaboratoryID_VisibleParameter = edt_LaboratoryID_Visible.HasValue ?
                new ObjectParameter("Edt_LaboratoryID_Visible", edt_LaboratoryID_Visible) :
                new ObjectParameter("Edt_LaboratoryID_Visible", typeof(bool));
    
            var btn_ReceptionStates_TopParameter = btn_ReceptionStates_Top.HasValue ?
                new ObjectParameter("Btn_ReceptionStates_Top", btn_ReceptionStates_Top) :
                new ObjectParameter("Btn_ReceptionStates_Top", typeof(short));
    
            var btn_ReceptionStates_LeftParameter = btn_ReceptionStates_Left.HasValue ?
                new ObjectParameter("Btn_ReceptionStates_Left", btn_ReceptionStates_Left) :
                new ObjectParameter("Btn_ReceptionStates_Left", typeof(short));
    
            var btn_ReceptionStates_WidthParameter = btn_ReceptionStates_Width.HasValue ?
                new ObjectParameter("Btn_ReceptionStates_Width", btn_ReceptionStates_Width) :
                new ObjectParameter("Btn_ReceptionStates_Width", typeof(short));
    
            var btn_ReceptionStates_HeightParameter = btn_ReceptionStates_Height.HasValue ?
                new ObjectParameter("Btn_ReceptionStates_Height", btn_ReceptionStates_Height) :
                new ObjectParameter("Btn_ReceptionStates_Height", typeof(short));
    
            var btn_ReceptionStates_VisibleParameter = btn_ReceptionStates_Visible.HasValue ?
                new ObjectParameter("Btn_ReceptionStates_Visible", btn_ReceptionStates_Visible) :
                new ObjectParameter("Btn_ReceptionStates_Visible", typeof(bool));
    
            var cbb_ReceptionStates_TopParameter = cbb_ReceptionStates_Top.HasValue ?
                new ObjectParameter("Cbb_ReceptionStates_Top", cbb_ReceptionStates_Top) :
                new ObjectParameter("Cbb_ReceptionStates_Top", typeof(short));
    
            var cbb_ReceptionStates_LeftParameter = cbb_ReceptionStates_Left.HasValue ?
                new ObjectParameter("Cbb_ReceptionStates_Left", cbb_ReceptionStates_Left) :
                new ObjectParameter("Cbb_ReceptionStates_Left", typeof(short));
    
            var cbb_ReceptionStates_WidthParameter = cbb_ReceptionStates_Width.HasValue ?
                new ObjectParameter("Cbb_ReceptionStates_Width", cbb_ReceptionStates_Width) :
                new ObjectParameter("Cbb_ReceptionStates_Width", typeof(short));
    
            var cbb_ReceptionStates_HeightParameter = cbb_ReceptionStates_Height.HasValue ?
                new ObjectParameter("Cbb_ReceptionStates_Height", cbb_ReceptionStates_Height) :
                new ObjectParameter("Cbb_ReceptionStates_Height", typeof(short));
    
            var cbb_ReceptionStates_VisibleParameter = cbb_ReceptionStates_Visible.HasValue ?
                new ObjectParameter("Cbb_ReceptionStates_Visible", cbb_ReceptionStates_Visible) :
                new ObjectParameter("Cbb_ReceptionStates_Visible", typeof(bool));
    
            var btn_PaymentStates_TopParameter = btn_PaymentStates_Top.HasValue ?
                new ObjectParameter("Btn_PaymentStates_Top", btn_PaymentStates_Top) :
                new ObjectParameter("Btn_PaymentStates_Top", typeof(short));
    
            var btn_PaymentStates_LeftParameter = btn_PaymentStates_Left.HasValue ?
                new ObjectParameter("Btn_PaymentStates_Left", btn_PaymentStates_Left) :
                new ObjectParameter("Btn_PaymentStates_Left", typeof(short));
    
            var btn_PaymentStates_WidthParameter = btn_PaymentStates_Width.HasValue ?
                new ObjectParameter("Btn_PaymentStates_Width", btn_PaymentStates_Width) :
                new ObjectParameter("Btn_PaymentStates_Width", typeof(short));
    
            var btn_PaymentStates_HeightParameter = btn_PaymentStates_Height.HasValue ?
                new ObjectParameter("Btn_PaymentStates_Height", btn_PaymentStates_Height) :
                new ObjectParameter("Btn_PaymentStates_Height", typeof(short));
    
            var btn_PaymentStates_VisibleParameter = btn_PaymentStates_Visible.HasValue ?
                new ObjectParameter("Btn_PaymentStates_Visible", btn_PaymentStates_Visible) :
                new ObjectParameter("Btn_PaymentStates_Visible", typeof(bool));
    
            var cbb_PaymentStates_TopParameter = cbb_PaymentStates_Top.HasValue ?
                new ObjectParameter("Cbb_PaymentStates_Top", cbb_PaymentStates_Top) :
                new ObjectParameter("Cbb_PaymentStates_Top", typeof(short));
    
            var cbb_PaymentStates_LeftParameter = cbb_PaymentStates_Left.HasValue ?
                new ObjectParameter("Cbb_PaymentStates_Left", cbb_PaymentStates_Left) :
                new ObjectParameter("Cbb_PaymentStates_Left", typeof(short));
    
            var cbb_PaymentStates_WidthParameter = cbb_PaymentStates_Width.HasValue ?
                new ObjectParameter("Cbb_PaymentStates_Width", cbb_PaymentStates_Width) :
                new ObjectParameter("Cbb_PaymentStates_Width", typeof(short));
    
            var cbb_PaymentStates_HeightParameter = cbb_PaymentStates_Height.HasValue ?
                new ObjectParameter("Cbb_PaymentStates_Height", cbb_PaymentStates_Height) :
                new ObjectParameter("Cbb_PaymentStates_Height", typeof(short));
    
            var cbb_PaymentStates_VisibleParameter = cbb_PaymentStates_Visible.HasValue ?
                new ObjectParameter("Cbb_PaymentStates_Visible", cbb_PaymentStates_Visible) :
                new ObjectParameter("Cbb_PaymentStates_Visible", typeof(bool));
    
            var grb_Prices_TopParameter = grb_Prices_Top.HasValue ?
                new ObjectParameter("Grb_Prices_Top", grb_Prices_Top) :
                new ObjectParameter("Grb_Prices_Top", typeof(short));
    
            var grb_Prices_LeftParameter = grb_Prices_Left.HasValue ?
                new ObjectParameter("Grb_Prices_Left", grb_Prices_Left) :
                new ObjectParameter("Grb_Prices_Left", typeof(short));
    
            var grb_Prices_WidthParameter = grb_Prices_Width.HasValue ?
                new ObjectParameter("Grb_Prices_Width", grb_Prices_Width) :
                new ObjectParameter("Grb_Prices_Width", typeof(short));
    
            var grb_Prices_HeightParameter = grb_Prices_Height.HasValue ?
                new ObjectParameter("Grb_Prices_Height", grb_Prices_Height) :
                new ObjectParameter("Grb_Prices_Height", typeof(short));
    
            var grb_Prices_VisibleParameter = grb_Prices_Visible.HasValue ?
                new ObjectParameter("Grb_Prices_Visible", grb_Prices_Visible) :
                new ObjectParameter("Grb_Prices_Visible", typeof(bool));
    
            var edt_ServicePrice_TopParameter = edt_ServicePrice_Top.HasValue ?
                new ObjectParameter("Edt_ServicePrice_Top", edt_ServicePrice_Top) :
                new ObjectParameter("Edt_ServicePrice_Top", typeof(short));
    
            var edt_ServicePrice_LeftParameter = edt_ServicePrice_Left.HasValue ?
                new ObjectParameter("Edt_ServicePrice_Left", edt_ServicePrice_Left) :
                new ObjectParameter("Edt_ServicePrice_Left", typeof(short));
    
            var edt_ServicePrice_WidthParameter = edt_ServicePrice_Width.HasValue ?
                new ObjectParameter("Edt_ServicePrice_Width", edt_ServicePrice_Width) :
                new ObjectParameter("Edt_ServicePrice_Width", typeof(short));
    
            var edt_ServicePrice_HeightParameter = edt_ServicePrice_Height.HasValue ?
                new ObjectParameter("Edt_ServicePrice_Height", edt_ServicePrice_Height) :
                new ObjectParameter("Edt_ServicePrice_Height", typeof(short));
    
            var edt_ServicePrice_VisibleParameter = edt_ServicePrice_Visible.HasValue ?
                new ObjectParameter("Edt_ServicePrice_Visible", edt_ServicePrice_Visible) :
                new ObjectParameter("Edt_ServicePrice_Visible", typeof(bool));
    
            var lbl_ServicePrice_TopParameter = lbl_ServicePrice_Top.HasValue ?
                new ObjectParameter("Lbl_ServicePrice_Top", lbl_ServicePrice_Top) :
                new ObjectParameter("Lbl_ServicePrice_Top", typeof(short));
    
            var lbl_ServicePrice_LeftParameter = lbl_ServicePrice_Left.HasValue ?
                new ObjectParameter("Lbl_ServicePrice_Left", lbl_ServicePrice_Left) :
                new ObjectParameter("Lbl_ServicePrice_Left", typeof(short));
    
            var lbl_ServicePrice_WidthParameter = lbl_ServicePrice_Width.HasValue ?
                new ObjectParameter("Lbl_ServicePrice_Width", lbl_ServicePrice_Width) :
                new ObjectParameter("Lbl_ServicePrice_Width", typeof(short));
    
            var lbl_ServicePrice_HeightParameter = lbl_ServicePrice_Height.HasValue ?
                new ObjectParameter("Lbl_ServicePrice_Height", lbl_ServicePrice_Height) :
                new ObjectParameter("Lbl_ServicePrice_Height", typeof(short));
    
            var lbl_ServicePrice_VisibleParameter = lbl_ServicePrice_Visible.HasValue ?
                new ObjectParameter("Lbl_ServicePrice_Visible", lbl_ServicePrice_Visible) :
                new ObjectParameter("Lbl_ServicePrice_Visible", typeof(bool));
    
            var edt_ItemsPrice_TopParameter = edt_ItemsPrice_Top.HasValue ?
                new ObjectParameter("Edt_ItemsPrice_Top", edt_ItemsPrice_Top) :
                new ObjectParameter("Edt_ItemsPrice_Top", typeof(short));
    
            var edt_ItemsPrice_LeftParameter = edt_ItemsPrice_Left.HasValue ?
                new ObjectParameter("Edt_ItemsPrice_Left", edt_ItemsPrice_Left) :
                new ObjectParameter("Edt_ItemsPrice_Left", typeof(short));
    
            var edt_ItemsPrice_WidthParameter = edt_ItemsPrice_Width.HasValue ?
                new ObjectParameter("Edt_ItemsPrice_Width", edt_ItemsPrice_Width) :
                new ObjectParameter("Edt_ItemsPrice_Width", typeof(short));
    
            var edt_ItemsPrice_HeightParameter = edt_ItemsPrice_Height.HasValue ?
                new ObjectParameter("Edt_ItemsPrice_Height", edt_ItemsPrice_Height) :
                new ObjectParameter("Edt_ItemsPrice_Height", typeof(short));
    
            var edt_ItemsPrice_VisibleParameter = edt_ItemsPrice_Visible.HasValue ?
                new ObjectParameter("Edt_ItemsPrice_Visible", edt_ItemsPrice_Visible) :
                new ObjectParameter("Edt_ItemsPrice_Visible", typeof(bool));
    
            var chk_SetItemsPrice_TopParameter = chk_SetItemsPrice_Top.HasValue ?
                new ObjectParameter("Chk_SetItemsPrice_Top", chk_SetItemsPrice_Top) :
                new ObjectParameter("Chk_SetItemsPrice_Top", typeof(short));
    
            var chk_SetItemsPrice_LeftParameter = chk_SetItemsPrice_Left.HasValue ?
                new ObjectParameter("Chk_SetItemsPrice_Left", chk_SetItemsPrice_Left) :
                new ObjectParameter("Chk_SetItemsPrice_Left", typeof(short));
    
            var chk_SetItemsPrice_WidthParameter = chk_SetItemsPrice_Width.HasValue ?
                new ObjectParameter("Chk_SetItemsPrice_Width", chk_SetItemsPrice_Width) :
                new ObjectParameter("Chk_SetItemsPrice_Width", typeof(short));
    
            var chk_SetItemsPrice_HeightParameter = chk_SetItemsPrice_Height.HasValue ?
                new ObjectParameter("Chk_SetItemsPrice_Height", chk_SetItemsPrice_Height) :
                new ObjectParameter("Chk_SetItemsPrice_Height", typeof(short));
    
            var chk_SetItemsPrice_VisibleParameter = chk_SetItemsPrice_Visible.HasValue ?
                new ObjectParameter("Chk_SetItemsPrice_Visible", chk_SetItemsPrice_Visible) :
                new ObjectParameter("Chk_SetItemsPrice_Visible", typeof(bool));
    
            var edt_PatientPrice_TopParameter = edt_PatientPrice_Top.HasValue ?
                new ObjectParameter("Edt_PatientPrice_Top", edt_PatientPrice_Top) :
                new ObjectParameter("Edt_PatientPrice_Top", typeof(short));
    
            var edt_PatientPrice_LeftParameter = edt_PatientPrice_Left.HasValue ?
                new ObjectParameter("Edt_PatientPrice_Left", edt_PatientPrice_Left) :
                new ObjectParameter("Edt_PatientPrice_Left", typeof(short));
    
            var edt_PatientPrice_WidthParameter = edt_PatientPrice_Width.HasValue ?
                new ObjectParameter("Edt_PatientPrice_Width", edt_PatientPrice_Width) :
                new ObjectParameter("Edt_PatientPrice_Width", typeof(short));
    
            var edt_PatientPrice_HeightParameter = edt_PatientPrice_Height.HasValue ?
                new ObjectParameter("Edt_PatientPrice_Height", edt_PatientPrice_Height) :
                new ObjectParameter("Edt_PatientPrice_Height", typeof(short));
    
            var edt_PatientPrice_VisibleParameter = edt_PatientPrice_Visible.HasValue ?
                new ObjectParameter("Edt_PatientPrice_Visible", edt_PatientPrice_Visible) :
                new ObjectParameter("Edt_PatientPrice_Visible", typeof(bool));
    
            var lbl_PatientPrice_TopParameter = lbl_PatientPrice_Top.HasValue ?
                new ObjectParameter("Lbl_PatientPrice_Top", lbl_PatientPrice_Top) :
                new ObjectParameter("Lbl_PatientPrice_Top", typeof(short));
    
            var lbl_PatientPrice_LeftParameter = lbl_PatientPrice_Left.HasValue ?
                new ObjectParameter("Lbl_PatientPrice_Left", lbl_PatientPrice_Left) :
                new ObjectParameter("Lbl_PatientPrice_Left", typeof(short));
    
            var lbl_PatientPrice_WidthParameter = lbl_PatientPrice_Width.HasValue ?
                new ObjectParameter("Lbl_PatientPrice_Width", lbl_PatientPrice_Width) :
                new ObjectParameter("Lbl_PatientPrice_Width", typeof(short));
    
            var lbl_PatientPrice_HeightParameter = lbl_PatientPrice_Height.HasValue ?
                new ObjectParameter("Lbl_PatientPrice_Height", lbl_PatientPrice_Height) :
                new ObjectParameter("Lbl_PatientPrice_Height", typeof(short));
    
            var lbl_PatientPrice_VisibleParameter = lbl_PatientPrice_Visible.HasValue ?
                new ObjectParameter("Lbl_PatientPrice_Visible", lbl_PatientPrice_Visible) :
                new ObjectParameter("Lbl_PatientPrice_Visible", typeof(bool));
    
            var edt_InsurancePrice_TopParameter = edt_InsurancePrice_Top.HasValue ?
                new ObjectParameter("Edt_InsurancePrice_Top", edt_InsurancePrice_Top) :
                new ObjectParameter("Edt_InsurancePrice_Top", typeof(short));
    
            var edt_InsurancePrice_LeftParameter = edt_InsurancePrice_Left.HasValue ?
                new ObjectParameter("Edt_InsurancePrice_Left", edt_InsurancePrice_Left) :
                new ObjectParameter("Edt_InsurancePrice_Left", typeof(short));
    
            var edt_InsurancePrice_WidthParameter = edt_InsurancePrice_Width.HasValue ?
                new ObjectParameter("Edt_InsurancePrice_Width", edt_InsurancePrice_Width) :
                new ObjectParameter("Edt_InsurancePrice_Width", typeof(short));
    
            var edt_InsurancePrice_HeightParameter = edt_InsurancePrice_Height.HasValue ?
                new ObjectParameter("Edt_InsurancePrice_Height", edt_InsurancePrice_Height) :
                new ObjectParameter("Edt_InsurancePrice_Height", typeof(short));
    
            var edt_InsurancePrice_VisibleParameter = edt_InsurancePrice_Visible.HasValue ?
                new ObjectParameter("Edt_InsurancePrice_Visible", edt_InsurancePrice_Visible) :
                new ObjectParameter("Edt_InsurancePrice_Visible", typeof(bool));
    
            var lbl_InsurancePrice_TopParameter = lbl_InsurancePrice_Top.HasValue ?
                new ObjectParameter("Lbl_InsurancePrice_Top", lbl_InsurancePrice_Top) :
                new ObjectParameter("Lbl_InsurancePrice_Top", typeof(short));
    
            var lbl_InsurancePrice_LeftParameter = lbl_InsurancePrice_Left.HasValue ?
                new ObjectParameter("Lbl_InsurancePrice_Left", lbl_InsurancePrice_Left) :
                new ObjectParameter("Lbl_InsurancePrice_Left", typeof(short));
    
            var lbl_InsurancePrice_WidthParameter = lbl_InsurancePrice_Width.HasValue ?
                new ObjectParameter("Lbl_InsurancePrice_Width", lbl_InsurancePrice_Width) :
                new ObjectParameter("Lbl_InsurancePrice_Width", typeof(short));
    
            var lbl_InsurancePrice_HeightParameter = lbl_InsurancePrice_Height.HasValue ?
                new ObjectParameter("Lbl_InsurancePrice_Height", lbl_InsurancePrice_Height) :
                new ObjectParameter("Lbl_InsurancePrice_Height", typeof(short));
    
            var lbl_InsurancePrice_VisibleParameter = lbl_InsurancePrice_Visible.HasValue ?
                new ObjectParameter("Lbl_InsurancePrice_Visible", lbl_InsurancePrice_Visible) :
                new ObjectParameter("Lbl_InsurancePrice_Visible", typeof(bool));
    
            var edt_MarginPrice_TopParameter = edt_MarginPrice_Top.HasValue ?
                new ObjectParameter("Edt_MarginPrice_Top", edt_MarginPrice_Top) :
                new ObjectParameter("Edt_MarginPrice_Top", typeof(short));
    
            var edt_MarginPrice_LeftParameter = edt_MarginPrice_Left.HasValue ?
                new ObjectParameter("Edt_MarginPrice_Left", edt_MarginPrice_Left) :
                new ObjectParameter("Edt_MarginPrice_Left", typeof(short));
    
            var edt_MarginPrice_WidthParameter = edt_MarginPrice_Width.HasValue ?
                new ObjectParameter("Edt_MarginPrice_Width", edt_MarginPrice_Width) :
                new ObjectParameter("Edt_MarginPrice_Width", typeof(short));
    
            var edt_MarginPrice_HeightParameter = edt_MarginPrice_Height.HasValue ?
                new ObjectParameter("Edt_MarginPrice_Height", edt_MarginPrice_Height) :
                new ObjectParameter("Edt_MarginPrice_Height", typeof(short));
    
            var edt_MarginPrice_VisibleParameter = edt_MarginPrice_Visible.HasValue ?
                new ObjectParameter("Edt_MarginPrice_Visible", edt_MarginPrice_Visible) :
                new ObjectParameter("Edt_MarginPrice_Visible", typeof(bool));
    
            var lbl_MarginPrice_TopParameter = lbl_MarginPrice_Top.HasValue ?
                new ObjectParameter("Lbl_MarginPrice_Top", lbl_MarginPrice_Top) :
                new ObjectParameter("Lbl_MarginPrice_Top", typeof(short));
    
            var lbl_MarginPrice_LeftParameter = lbl_MarginPrice_Left.HasValue ?
                new ObjectParameter("Lbl_MarginPrice_Left", lbl_MarginPrice_Left) :
                new ObjectParameter("Lbl_MarginPrice_Left", typeof(short));
    
            var lbl_MarginPrice_WidthParameter = lbl_MarginPrice_Width.HasValue ?
                new ObjectParameter("Lbl_MarginPrice_Width", lbl_MarginPrice_Width) :
                new ObjectParameter("Lbl_MarginPrice_Width", typeof(short));
    
            var lbl_MarginPrice_HeightParameter = lbl_MarginPrice_Height.HasValue ?
                new ObjectParameter("Lbl_MarginPrice_Height", lbl_MarginPrice_Height) :
                new ObjectParameter("Lbl_MarginPrice_Height", typeof(short));
    
            var lbl_MarginPrice_VisibleParameter = lbl_MarginPrice_Visible.HasValue ?
                new ObjectParameter("Lbl_MarginPrice_Visible", lbl_MarginPrice_Visible) :
                new ObjectParameter("Lbl_MarginPrice_Visible", typeof(bool));
    
            var edt_DoctorPrice_TopParameter = edt_DoctorPrice_Top.HasValue ?
                new ObjectParameter("Edt_DoctorPrice_Top", edt_DoctorPrice_Top) :
                new ObjectParameter("Edt_DoctorPrice_Top", typeof(short));
    
            var edt_DoctorPrice_LeftParameter = edt_DoctorPrice_Left.HasValue ?
                new ObjectParameter("Edt_DoctorPrice_Left", edt_DoctorPrice_Left) :
                new ObjectParameter("Edt_DoctorPrice_Left", typeof(short));
    
            var edt_DoctorPrice_WidthParameter = edt_DoctorPrice_Width.HasValue ?
                new ObjectParameter("Edt_DoctorPrice_Width", edt_DoctorPrice_Width) :
                new ObjectParameter("Edt_DoctorPrice_Width", typeof(short));
    
            var edt_DoctorPrice_HeightParameter = edt_DoctorPrice_Height.HasValue ?
                new ObjectParameter("Edt_DoctorPrice_Height", edt_DoctorPrice_Height) :
                new ObjectParameter("Edt_DoctorPrice_Height", typeof(short));
    
            var edt_DoctorPrice_VisibleParameter = edt_DoctorPrice_Visible.HasValue ?
                new ObjectParameter("Edt_DoctorPrice_Visible", edt_DoctorPrice_Visible) :
                new ObjectParameter("Edt_DoctorPrice_Visible", typeof(bool));
    
            var lbl_DoctorPrice_TopParameter = lbl_DoctorPrice_Top.HasValue ?
                new ObjectParameter("Lbl_DoctorPrice_Top", lbl_DoctorPrice_Top) :
                new ObjectParameter("Lbl_DoctorPrice_Top", typeof(short));
    
            var lbl_DoctorPrice_LeftParameter = lbl_DoctorPrice_Left.HasValue ?
                new ObjectParameter("Lbl_DoctorPrice_Left", lbl_DoctorPrice_Left) :
                new ObjectParameter("Lbl_DoctorPrice_Left", typeof(short));
    
            var lbl_DoctorPrice_WidthParameter = lbl_DoctorPrice_Width.HasValue ?
                new ObjectParameter("Lbl_DoctorPrice_Width", lbl_DoctorPrice_Width) :
                new ObjectParameter("Lbl_DoctorPrice_Width", typeof(short));
    
            var lbl_DoctorPrice_HeightParameter = lbl_DoctorPrice_Height.HasValue ?
                new ObjectParameter("Lbl_DoctorPrice_Height", lbl_DoctorPrice_Height) :
                new ObjectParameter("Lbl_DoctorPrice_Height", typeof(short));
    
            var lbl_DoctorPrice_VisibleParameter = lbl_DoctorPrice_Visible.HasValue ?
                new ObjectParameter("Lbl_DoctorPrice_Visible", lbl_DoctorPrice_Visible) :
                new ObjectParameter("Lbl_DoctorPrice_Visible", typeof(bool));
    
            var edt_AssistantPrice_TopParameter = edt_AssistantPrice_Top.HasValue ?
                new ObjectParameter("Edt_AssistantPrice_Top", edt_AssistantPrice_Top) :
                new ObjectParameter("Edt_AssistantPrice_Top", typeof(short));
    
            var edt_AssistantPrice_LeftParameter = edt_AssistantPrice_Left.HasValue ?
                new ObjectParameter("Edt_AssistantPrice_Left", edt_AssistantPrice_Left) :
                new ObjectParameter("Edt_AssistantPrice_Left", typeof(short));
    
            var edt_AssistantPrice_WidthParameter = edt_AssistantPrice_Width.HasValue ?
                new ObjectParameter("Edt_AssistantPrice_Width", edt_AssistantPrice_Width) :
                new ObjectParameter("Edt_AssistantPrice_Width", typeof(short));
    
            var edt_AssistantPrice_HeightParameter = edt_AssistantPrice_Height.HasValue ?
                new ObjectParameter("Edt_AssistantPrice_Height", edt_AssistantPrice_Height) :
                new ObjectParameter("Edt_AssistantPrice_Height", typeof(short));
    
            var edt_AssistantPrice_VisibleParameter = edt_AssistantPrice_Visible.HasValue ?
                new ObjectParameter("Edt_AssistantPrice_Visible", edt_AssistantPrice_Visible) :
                new ObjectParameter("Edt_AssistantPrice_Visible", typeof(bool));
    
            var lbl_AssistantPrice_TopParameter = lbl_AssistantPrice_Top.HasValue ?
                new ObjectParameter("Lbl_AssistantPrice_Top", lbl_AssistantPrice_Top) :
                new ObjectParameter("Lbl_AssistantPrice_Top", typeof(short));
    
            var lbl_AssistantPrice_LeftParameter = lbl_AssistantPrice_Left.HasValue ?
                new ObjectParameter("Lbl_AssistantPrice_Left", lbl_AssistantPrice_Left) :
                new ObjectParameter("Lbl_AssistantPrice_Left", typeof(short));
    
            var lbl_AssistantPrice_WidthParameter = lbl_AssistantPrice_Width.HasValue ?
                new ObjectParameter("Lbl_AssistantPrice_Width", lbl_AssistantPrice_Width) :
                new ObjectParameter("Lbl_AssistantPrice_Width", typeof(short));
    
            var lbl_AssistantPrice_HeightParameter = lbl_AssistantPrice_Height.HasValue ?
                new ObjectParameter("Lbl_AssistantPrice_Height", lbl_AssistantPrice_Height) :
                new ObjectParameter("Lbl_AssistantPrice_Height", typeof(short));
    
            var lbl_AssistantPrice_VisibleParameter = lbl_AssistantPrice_Visible.HasValue ?
                new ObjectParameter("Lbl_AssistantPrice_Visible", lbl_AssistantPrice_Visible) :
                new ObjectParameter("Lbl_AssistantPrice_Visible", typeof(bool));
    
            var edt_Takh_TopParameter = edt_Takh_Top.HasValue ?
                new ObjectParameter("Edt_Takh_Top", edt_Takh_Top) :
                new ObjectParameter("Edt_Takh_Top", typeof(short));
    
            var edt_Takh_LeftParameter = edt_Takh_Left.HasValue ?
                new ObjectParameter("Edt_Takh_Left", edt_Takh_Left) :
                new ObjectParameter("Edt_Takh_Left", typeof(short));
    
            var edt_Takh_WidthParameter = edt_Takh_Width.HasValue ?
                new ObjectParameter("Edt_Takh_Width", edt_Takh_Width) :
                new ObjectParameter("Edt_Takh_Width", typeof(short));
    
            var edt_Takh_HeightParameter = edt_Takh_Height.HasValue ?
                new ObjectParameter("Edt_Takh_Height", edt_Takh_Height) :
                new ObjectParameter("Edt_Takh_Height", typeof(short));
    
            var edt_Takh_VisibleParameter = edt_Takh_Visible.HasValue ?
                new ObjectParameter("Edt_Takh_Visible", edt_Takh_Visible) :
                new ObjectParameter("Edt_Takh_Visible", typeof(bool));
    
            var lbl_Takh_TopParameter = lbl_Takh_Top.HasValue ?
                new ObjectParameter("Lbl_Takh_Top", lbl_Takh_Top) :
                new ObjectParameter("Lbl_Takh_Top", typeof(short));
    
            var lbl_Takh_LeftParameter = lbl_Takh_Left.HasValue ?
                new ObjectParameter("Lbl_Takh_Left", lbl_Takh_Left) :
                new ObjectParameter("Lbl_Takh_Left", typeof(short));
    
            var lbl_Takh_WidthParameter = lbl_Takh_Width.HasValue ?
                new ObjectParameter("Lbl_Takh_Width", lbl_Takh_Width) :
                new ObjectParameter("Lbl_Takh_Width", typeof(short));
    
            var lbl_Takh_HeightParameter = lbl_Takh_Height.HasValue ?
                new ObjectParameter("Lbl_Takh_Height", lbl_Takh_Height) :
                new ObjectParameter("Lbl_Takh_Height", typeof(short));
    
            var lbl_Takh_VisibleParameter = lbl_Takh_Visible.HasValue ?
                new ObjectParameter("Lbl_Takh_Visible", lbl_Takh_Visible) :
                new ObjectParameter("Lbl_Takh_Visible", typeof(bool));
    
            var shp_Prices0_TopParameter = shp_Prices0_Top.HasValue ?
                new ObjectParameter("Shp_Prices0_Top", shp_Prices0_Top) :
                new ObjectParameter("Shp_Prices0_Top", typeof(short));
    
            var shp_Prices0_LeftParameter = shp_Prices0_Left.HasValue ?
                new ObjectParameter("Shp_Prices0_Left", shp_Prices0_Left) :
                new ObjectParameter("Shp_Prices0_Left", typeof(short));
    
            var shp_Prices0_WidthParameter = shp_Prices0_Width.HasValue ?
                new ObjectParameter("Shp_Prices0_Width", shp_Prices0_Width) :
                new ObjectParameter("Shp_Prices0_Width", typeof(short));
    
            var shp_Prices0_HeightParameter = shp_Prices0_Height.HasValue ?
                new ObjectParameter("Shp_Prices0_Height", shp_Prices0_Height) :
                new ObjectParameter("Shp_Prices0_Height", typeof(short));
    
            var shp_Prices0_VisibleParameter = shp_Prices0_Visible.HasValue ?
                new ObjectParameter("Shp_Prices0_Visible", shp_Prices0_Visible) :
                new ObjectParameter("Shp_Prices0_Visible", typeof(bool));
    
            var lbl_Bed_TopParameter = lbl_Bed_Top.HasValue ?
                new ObjectParameter("Lbl_Bed_Top", lbl_Bed_Top) :
                new ObjectParameter("Lbl_Bed_Top", typeof(short));
    
            var lbl_Bed_LeftParameter = lbl_Bed_Left.HasValue ?
                new ObjectParameter("Lbl_Bed_Left", lbl_Bed_Left) :
                new ObjectParameter("Lbl_Bed_Left", typeof(short));
    
            var lbl_Bed_WidthParameter = lbl_Bed_Width.HasValue ?
                new ObjectParameter("Lbl_Bed_Width", lbl_Bed_Width) :
                new ObjectParameter("Lbl_Bed_Width", typeof(short));
    
            var lbl_Bed_HeightParameter = lbl_Bed_Height.HasValue ?
                new ObjectParameter("Lbl_Bed_Height", lbl_Bed_Height) :
                new ObjectParameter("Lbl_Bed_Height", typeof(short));
    
            var lbl_Bed_VisibleParameter = lbl_Bed_Visible.HasValue ?
                new ObjectParameter("Lbl_Bed_Visible", lbl_Bed_Visible) :
                new ObjectParameter("Lbl_Bed_Visible", typeof(bool));
    
            var lbl_BedInfo_TopParameter = lbl_BedInfo_Top.HasValue ?
                new ObjectParameter("Lbl_BedInfo_Top", lbl_BedInfo_Top) :
                new ObjectParameter("Lbl_BedInfo_Top", typeof(short));
    
            var lbl_BedInfo_LeftParameter = lbl_BedInfo_Left.HasValue ?
                new ObjectParameter("Lbl_BedInfo_Left", lbl_BedInfo_Left) :
                new ObjectParameter("Lbl_BedInfo_Left", typeof(short));
    
            var lbl_BedInfo_WidthParameter = lbl_BedInfo_Width.HasValue ?
                new ObjectParameter("Lbl_BedInfo_Width", lbl_BedInfo_Width) :
                new ObjectParameter("Lbl_BedInfo_Width", typeof(short));
    
            var lbl_BedInfo_HeightParameter = lbl_BedInfo_Height.HasValue ?
                new ObjectParameter("Lbl_BedInfo_Height", lbl_BedInfo_Height) :
                new ObjectParameter("Lbl_BedInfo_Height", typeof(short));
    
            var lbl_BedInfo_VisibleParameter = lbl_BedInfo_Visible.HasValue ?
                new ObjectParameter("Lbl_BedInfo_Visible", lbl_BedInfo_Visible) :
                new ObjectParameter("Lbl_BedInfo_Visible", typeof(bool));
    
            var lbl_Bes_TopParameter = lbl_Bes_Top.HasValue ?
                new ObjectParameter("Lbl_Bes_Top", lbl_Bes_Top) :
                new ObjectParameter("Lbl_Bes_Top", typeof(short));
    
            var lbl_Bes_LeftParameter = lbl_Bes_Left.HasValue ?
                new ObjectParameter("Lbl_Bes_Left", lbl_Bes_Left) :
                new ObjectParameter("Lbl_Bes_Left", typeof(short));
    
            var lbl_Bes_WidthParameter = lbl_Bes_Width.HasValue ?
                new ObjectParameter("Lbl_Bes_Width", lbl_Bes_Width) :
                new ObjectParameter("Lbl_Bes_Width", typeof(short));
    
            var lbl_Bes_HeightParameter = lbl_Bes_Height.HasValue ?
                new ObjectParameter("Lbl_Bes_Height", lbl_Bes_Height) :
                new ObjectParameter("Lbl_Bes_Height", typeof(short));
    
            var lbl_Bes_VisibleParameter = lbl_Bes_Visible.HasValue ?
                new ObjectParameter("Lbl_Bes_Visible", lbl_Bes_Visible) :
                new ObjectParameter("Lbl_Bes_Visible", typeof(bool));
    
            var lbl_BesInfo_TopParameter = lbl_BesInfo_Top.HasValue ?
                new ObjectParameter("Lbl_BesInfo_Top", lbl_BesInfo_Top) :
                new ObjectParameter("Lbl_BesInfo_Top", typeof(short));
    
            var lbl_BesInfo_LeftParameter = lbl_BesInfo_Left.HasValue ?
                new ObjectParameter("Lbl_BesInfo_Left", lbl_BesInfo_Left) :
                new ObjectParameter("Lbl_BesInfo_Left", typeof(short));
    
            var lbl_BesInfo_WidthParameter = lbl_BesInfo_Width.HasValue ?
                new ObjectParameter("Lbl_BesInfo_Width", lbl_BesInfo_Width) :
                new ObjectParameter("Lbl_BesInfo_Width", typeof(short));
    
            var lbl_BesInfo_HeightParameter = lbl_BesInfo_Height.HasValue ?
                new ObjectParameter("Lbl_BesInfo_Height", lbl_BesInfo_Height) :
                new ObjectParameter("Lbl_BesInfo_Height", typeof(short));
    
            var lbl_BesInfo_VisibleParameter = lbl_BesInfo_Visible.HasValue ?
                new ObjectParameter("Lbl_BesInfo_Visible", lbl_BesInfo_Visible) :
                new ObjectParameter("Lbl_BesInfo_Visible", typeof(bool));
    
            var shp_Prices1_TopParameter = shp_Prices1_Top.HasValue ?
                new ObjectParameter("Shp_Prices1_Top", shp_Prices1_Top) :
                new ObjectParameter("Shp_Prices1_Top", typeof(short));
    
            var shp_Prices1_LeftParameter = shp_Prices1_Left.HasValue ?
                new ObjectParameter("Shp_Prices1_Left", shp_Prices1_Left) :
                new ObjectParameter("Shp_Prices1_Left", typeof(short));
    
            var shp_Prices1_WidthParameter = shp_Prices1_Width.HasValue ?
                new ObjectParameter("Shp_Prices1_Width", shp_Prices1_Width) :
                new ObjectParameter("Shp_Prices1_Width", typeof(short));
    
            var shp_Prices1_HeightParameter = shp_Prices1_Height.HasValue ?
                new ObjectParameter("Shp_Prices1_Height", shp_Prices1_Height) :
                new ObjectParameter("Shp_Prices1_Height", typeof(short));
    
            var shp_Prices1_VisibleParameter = shp_Prices1_Visible.HasValue ?
                new ObjectParameter("Shp_Prices1_Visible", shp_Prices1_Visible) :
                new ObjectParameter("Shp_Prices1_Visible", typeof(bool));
    
            var lbl_Mandeh_TopParameter = lbl_Mandeh_Top.HasValue ?
                new ObjectParameter("Lbl_Mandeh_Top", lbl_Mandeh_Top) :
                new ObjectParameter("Lbl_Mandeh_Top", typeof(short));
    
            var lbl_Mandeh_LeftParameter = lbl_Mandeh_Left.HasValue ?
                new ObjectParameter("Lbl_Mandeh_Left", lbl_Mandeh_Left) :
                new ObjectParameter("Lbl_Mandeh_Left", typeof(short));
    
            var lbl_Mandeh_WidthParameter = lbl_Mandeh_Width.HasValue ?
                new ObjectParameter("Lbl_Mandeh_Width", lbl_Mandeh_Width) :
                new ObjectParameter("Lbl_Mandeh_Width", typeof(short));
    
            var lbl_Mandeh_HeightParameter = lbl_Mandeh_Height.HasValue ?
                new ObjectParameter("Lbl_Mandeh_Height", lbl_Mandeh_Height) :
                new ObjectParameter("Lbl_Mandeh_Height", typeof(short));
    
            var lbl_Mandeh_VisibleParameter = lbl_Mandeh_Visible.HasValue ?
                new ObjectParameter("Lbl_Mandeh_Visible", lbl_Mandeh_Visible) :
                new ObjectParameter("Lbl_Mandeh_Visible", typeof(bool));
    
            var lbl_MandehInfo_TopParameter = lbl_MandehInfo_Top.HasValue ?
                new ObjectParameter("Lbl_MandehInfo_Top", lbl_MandehInfo_Top) :
                new ObjectParameter("Lbl_MandehInfo_Top", typeof(short));
    
            var lbl_MandehInfo_LeftParameter = lbl_MandehInfo_Left.HasValue ?
                new ObjectParameter("Lbl_MandehInfo_Left", lbl_MandehInfo_Left) :
                new ObjectParameter("Lbl_MandehInfo_Left", typeof(short));
    
            var lbl_MandehInfo_WidthParameter = lbl_MandehInfo_Width.HasValue ?
                new ObjectParameter("Lbl_MandehInfo_Width", lbl_MandehInfo_Width) :
                new ObjectParameter("Lbl_MandehInfo_Width", typeof(short));
    
            var lbl_MandehInfo_HeightParameter = lbl_MandehInfo_Height.HasValue ?
                new ObjectParameter("Lbl_MandehInfo_Height", lbl_MandehInfo_Height) :
                new ObjectParameter("Lbl_MandehInfo_Height", typeof(short));
    
            var lbl_MandehInfo_VisibleParameter = lbl_MandehInfo_Visible.HasValue ?
                new ObjectParameter("Lbl_MandehInfo_Visible", lbl_MandehInfo_Visible) :
                new ObjectParameter("Lbl_MandehInfo_Visible", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionForms_Insert", iDParameter, nameParameter, dscParameter, frm_Reception_HeightParameter, frm_Reception_WidthParameter, pnl_Main_HeightParameter, lbl_ID_TopParameter, lbl_ID_LeftParameter, lbl_ID_WidthParameter, lbl_ID_HeightParameter, lbl_ID_VisibleParameter, edt_ID_TopParameter, edt_ID_LeftParameter, edt_ID_WidthParameter, edt_ID_HeightParameter, edt_ID_VisibleParameter, cbb_ReceptionTypes_TopParameter, cbb_ReceptionTypes_LeftParameter, cbb_ReceptionTypes_WidthParameter, cbb_ReceptionTypes_HeightParameter, cbb_ReceptionTypes_VisibleParameter, lbl_RegisterDate_TopParameter, lbl_RegisterDate_LeftParameter, lbl_RegisterDate_WidthParameter, lbl_RegisterDate_HeightParameter, lbl_RegisterDate_VisibleParameter, edt_RegisterDate_Time_TopParameter, edt_RegisterDate_Time_LeftParameter, edt_RegisterDate_Time_WidthParameter, edt_RegisterDate_Time_HeightParameter, edt_RegisterDate_Time_VisibleParameter, edt_RegisterDate_TopParameter, edt_RegisterDate_LeftParameter, edt_RegisterDate_WidthParameter, edt_RegisterDate_HeightParameter, edt_RegisterDate_VisibleParameter, btn_NewPatient_TopParameter, btn_NewPatient_LeftParameter, btn_NewPatient_WidthParameter, btn_NewPatient_HeightParameter, btn_NewPatient_VisibleParameter, btn_Patients_TopParameter, btn_Patients_LeftParameter, btn_Patients_WidthParameter, btn_Patients_HeightParameter, btn_Patients_VisibleParameter, edt_PatientID_TopParameter, edt_PatientID_LeftParameter, edt_PatientID_WidthParameter, edt_PatientID_HeightParameter, edt_PatientID_VisibleParameter, cbb_SexTypes_TopParameter, cbb_SexTypes_LeftParameter, cbb_SexTypes_WidthParameter, cbb_SexTypes_HeightParameter, cbb_SexTypes_VisibleParameter, edt_FirstName_TopParameter, edt_FirstName_LeftParameter, edt_FirstName_WidthParameter, edt_FirstName_HeightParameter, edt_FirstName_VisibleParameter, edt_LastName_TopParameter, edt_LastName_LeftParameter, edt_LastName_WidthParameter, edt_LastName_HeightParameter, edt_LastName_VisibleParameter, edt_General_TopParameter, edt_General_LeftParameter, edt_General_WidthParameter, edt_General_HeightParameter, edt_General_VisibleParameter, btn_Insurances_TopParameter, btn_Insurances_LeftParameter, btn_Insurances_WidthParameter, btn_Insurances_HeightParameter, btn_Insurances_VisibleParameter, edt_InsuranceID_TopParameter, edt_InsuranceID_LeftParameter, edt_InsuranceID_WidthParameter, edt_InsuranceID_HeightParameter, edt_InsuranceID_VisibleParameter, lbl_InsuranceName_TopParameter, lbl_InsuranceName_LeftParameter, lbl_InsuranceName_WidthParameter, lbl_InsuranceName_HeightParameter, lbl_InsuranceName_VisibleParameter, lbl_InsuranceNumber_TopParameter, lbl_InsuranceNumber_LeftParameter, lbl_InsuranceNumber_WidthParameter, lbl_InsuranceNumber_HeightParameter, lbl_InsuranceNumber_VisibleParameter, edt_InsuranceNumber_TopParameter, edt_InsuranceNumber_LeftParameter, edt_InsuranceNumber_WidthParameter, edt_InsuranceNumber_HeightParameter, edt_InsuranceNumber_VisibleParameter, btn_Reasons_TopParameter, btn_Reasons_LeftParameter, btn_Reasons_WidthParameter, btn_Reasons_HeightParameter, btn_Reasons_VisibleParameter, edt_ReasonID_TopParameter, edt_ReasonID_LeftParameter, edt_ReasonID_WidthParameter, edt_ReasonID_HeightParameter, edt_ReasonID_VisibleParameter, lbl_ReasonName_TopParameter, lbl_ReasonName_LeftParameter, lbl_ReasonName_WidthParameter, lbl_ReasonName_HeightParameter, lbl_ReasonName_VisibleParameter, btn_Customers_TopParameter, btn_Customers_LeftParameter, btn_Customers_WidthParameter, btn_Customers_HeightParameter, btn_Customers_VisibleParameter, edt_CustomerID_TopParameter, edt_CustomerID_LeftParameter, edt_CustomerID_WidthParameter, edt_CustomerID_HeightParameter, edt_CustomerID_VisibleParameter, btn_Departments_TopParameter, btn_Departments_LeftParameter, btn_Departments_WidthParameter, btn_Departments_HeightParameter, btn_Departments_VisibleParameter, edt_DepartmentID_TopParameter, edt_DepartmentID_LeftParameter, edt_DepartmentID_WidthParameter, edt_DepartmentID_HeightParameter, edt_DepartmentID_VisibleParameter, lbl_DepartmentName_TopParameter, lbl_DepartmentName_LeftParameter, lbl_DepartmentName_WidthParameter, lbl_DepartmentName_HeightParameter, lbl_DepartmentName_VisibleParameter, lbl_Room_TopParameter, lbl_Room_LeftParameter, lbl_Room_WidthParameter, lbl_Room_HeightParameter, lbl_Room_VisibleParameter, edt_RoomID_TopParameter, edt_RoomID_LeftParameter, edt_RoomID_WidthParameter, edt_RoomID_HeightParameter, edt_RoomID_VisibleParameter, edt_BedID_TopParameter, edt_BedID_LeftParameter, edt_BedID_WidthParameter, edt_BedID_HeightParameter, edt_BedID_VisibleParameter, btn_Doctors_TopParameter, btn_Doctors_LeftParameter, btn_Doctors_WidthParameter, btn_Doctors_HeightParameter, btn_Doctors_VisibleParameter, edt_DoctorID_TopParameter, edt_DoctorID_LeftParameter, edt_DoctorID_WidthParameter, edt_DoctorID_HeightParameter, edt_DoctorID_VisibleParameter, lbl_DoctorName_TopParameter, lbl_DoctorName_LeftParameter, lbl_DoctorName_WidthParameter, lbl_DoctorName_HeightParameter, lbl_DoctorName_VisibleParameter, btn_ReceptionFactor_TopParameter, btn_ReceptionFactor_LeftParameter, btn_ReceptionFactor_WidthParameter, btn_ReceptionFactor_HeightParameter, btn_ReceptionFactor_VisibleParameter, btn_DigitalDocuments_TopParameter, btn_DigitalDocuments_LeftParameter, btn_DigitalDocuments_WidthParameter, btn_DigitalDocuments_HeightParameter, btn_DigitalDocuments_VisibleParameter, btn_Images_TopParameter, btn_Images_LeftParameter, btn_Images_WidthParameter, btn_Images_HeightParameter, btn_Images_VisibleParameter, btn_Assistants_TopParameter, btn_Assistants_LeftParameter, btn_Assistants_WidthParameter, btn_Assistants_HeightParameter, btn_Assistants_VisibleParameter, edt_AssistantID_TopParameter, edt_AssistantID_LeftParameter, edt_AssistantID_WidthParameter, edt_AssistantID_HeightParameter, edt_AssistantID_VisibleParameter, lbl_AssistantName_TopParameter, lbl_AssistantName_LeftParameter, lbl_AssistantName_WidthParameter, lbl_AssistantName_HeightParameter, lbl_AssistantName_VisibleParameter, chk_AutoPrint_TopParameter, chk_AutoPrint_LeftParameter, chk_AutoPrint_WidthParameter, chk_AutoPrint_HeightParameter, chk_AutoPrint_VisibleParameter, chk_AutoSMS_TopParameter, chk_AutoSMS_LeftParameter, chk_AutoSMS_WidthParameter, chk_AutoSMS_HeightParameter, chk_AutoSMS_VisibleParameter, btn_Diagnosises_TopParameter, btn_Diagnosises_LeftParameter, btn_Diagnosises_WidthParameter, btn_Diagnosises_HeightParameter, btn_Diagnosises_VisibleParameter, edt_DiagnosisID_TopParameter, edt_DiagnosisID_LeftParameter, edt_DiagnosisID_WidthParameter, edt_DiagnosisID_HeightParameter, edt_DiagnosisID_VisibleParameter, lbl_DiagnosisName_TopParameter, lbl_DiagnosisName_LeftParameter, lbl_DiagnosisName_WidthParameter, lbl_DiagnosisName_HeightParameter, lbl_DiagnosisName_VisibleParameter, btn_Therapies_TopParameter, btn_Therapies_LeftParameter, btn_Therapies_WidthParameter, btn_Therapies_HeightParameter, btn_Therapies_VisibleParameter, edt_TherapyID_TopParameter, edt_TherapyID_LeftParameter, edt_TherapyID_WidthParameter, edt_TherapyID_HeightParameter, edt_TherapyID_VisibleParameter, lbl_TherapyName_TopParameter, lbl_TherapyName_LeftParameter, lbl_TherapyName_WidthParameter, lbl_TherapyName_HeightParameter, lbl_TherapyName_VisibleParameter, btn_NewPrescription_TopParameter, btn_NewPrescription_LeftParameter, btn_NewPrescription_WidthParameter, btn_NewPrescription_HeightParameter, btn_NewPrescription_VisibleParameter, btn_Prescriptions_TopParameter, btn_Prescriptions_LeftParameter, btn_Prescriptions_WidthParameter, btn_Prescriptions_HeightParameter, btn_Prescriptions_VisibleParameter, edt_PrescriptionID_TopParameter, edt_PrescriptionID_LeftParameter, edt_PrescriptionID_WidthParameter, edt_PrescriptionID_HeightParameter, edt_PrescriptionID_VisibleParameter, btn_NewLaboratory_TopParameter, btn_NewLaboratory_LeftParameter, btn_NewLaboratory_WidthParameter, btn_NewLaboratory_HeightParameter, btn_NewLaboratory_VisibleParameter, btn_Laboratories_TopParameter, btn_Laboratories_LeftParameter, btn_Laboratories_WidthParameter, btn_Laboratories_HeightParameter, btn_Laboratories_VisibleParameter, edt_LaboratoryID_TopParameter, edt_LaboratoryID_LeftParameter, edt_LaboratoryID_WidthParameter, edt_LaboratoryID_HeightParameter, edt_LaboratoryID_VisibleParameter, btn_ReceptionStates_TopParameter, btn_ReceptionStates_LeftParameter, btn_ReceptionStates_WidthParameter, btn_ReceptionStates_HeightParameter, btn_ReceptionStates_VisibleParameter, cbb_ReceptionStates_TopParameter, cbb_ReceptionStates_LeftParameter, cbb_ReceptionStates_WidthParameter, cbb_ReceptionStates_HeightParameter, cbb_ReceptionStates_VisibleParameter, btn_PaymentStates_TopParameter, btn_PaymentStates_LeftParameter, btn_PaymentStates_WidthParameter, btn_PaymentStates_HeightParameter, btn_PaymentStates_VisibleParameter, cbb_PaymentStates_TopParameter, cbb_PaymentStates_LeftParameter, cbb_PaymentStates_WidthParameter, cbb_PaymentStates_HeightParameter, cbb_PaymentStates_VisibleParameter, grb_Prices_TopParameter, grb_Prices_LeftParameter, grb_Prices_WidthParameter, grb_Prices_HeightParameter, grb_Prices_VisibleParameter, edt_ServicePrice_TopParameter, edt_ServicePrice_LeftParameter, edt_ServicePrice_WidthParameter, edt_ServicePrice_HeightParameter, edt_ServicePrice_VisibleParameter, lbl_ServicePrice_TopParameter, lbl_ServicePrice_LeftParameter, lbl_ServicePrice_WidthParameter, lbl_ServicePrice_HeightParameter, lbl_ServicePrice_VisibleParameter, edt_ItemsPrice_TopParameter, edt_ItemsPrice_LeftParameter, edt_ItemsPrice_WidthParameter, edt_ItemsPrice_HeightParameter, edt_ItemsPrice_VisibleParameter, chk_SetItemsPrice_TopParameter, chk_SetItemsPrice_LeftParameter, chk_SetItemsPrice_WidthParameter, chk_SetItemsPrice_HeightParameter, chk_SetItemsPrice_VisibleParameter, edt_PatientPrice_TopParameter, edt_PatientPrice_LeftParameter, edt_PatientPrice_WidthParameter, edt_PatientPrice_HeightParameter, edt_PatientPrice_VisibleParameter, lbl_PatientPrice_TopParameter, lbl_PatientPrice_LeftParameter, lbl_PatientPrice_WidthParameter, lbl_PatientPrice_HeightParameter, lbl_PatientPrice_VisibleParameter, edt_InsurancePrice_TopParameter, edt_InsurancePrice_LeftParameter, edt_InsurancePrice_WidthParameter, edt_InsurancePrice_HeightParameter, edt_InsurancePrice_VisibleParameter, lbl_InsurancePrice_TopParameter, lbl_InsurancePrice_LeftParameter, lbl_InsurancePrice_WidthParameter, lbl_InsurancePrice_HeightParameter, lbl_InsurancePrice_VisibleParameter, edt_MarginPrice_TopParameter, edt_MarginPrice_LeftParameter, edt_MarginPrice_WidthParameter, edt_MarginPrice_HeightParameter, edt_MarginPrice_VisibleParameter, lbl_MarginPrice_TopParameter, lbl_MarginPrice_LeftParameter, lbl_MarginPrice_WidthParameter, lbl_MarginPrice_HeightParameter, lbl_MarginPrice_VisibleParameter, edt_DoctorPrice_TopParameter, edt_DoctorPrice_LeftParameter, edt_DoctorPrice_WidthParameter, edt_DoctorPrice_HeightParameter, edt_DoctorPrice_VisibleParameter, lbl_DoctorPrice_TopParameter, lbl_DoctorPrice_LeftParameter, lbl_DoctorPrice_WidthParameter, lbl_DoctorPrice_HeightParameter, lbl_DoctorPrice_VisibleParameter, edt_AssistantPrice_TopParameter, edt_AssistantPrice_LeftParameter, edt_AssistantPrice_WidthParameter, edt_AssistantPrice_HeightParameter, edt_AssistantPrice_VisibleParameter, lbl_AssistantPrice_TopParameter, lbl_AssistantPrice_LeftParameter, lbl_AssistantPrice_WidthParameter, lbl_AssistantPrice_HeightParameter, lbl_AssistantPrice_VisibleParameter, edt_Takh_TopParameter, edt_Takh_LeftParameter, edt_Takh_WidthParameter, edt_Takh_HeightParameter, edt_Takh_VisibleParameter, lbl_Takh_TopParameter, lbl_Takh_LeftParameter, lbl_Takh_WidthParameter, lbl_Takh_HeightParameter, lbl_Takh_VisibleParameter, shp_Prices0_TopParameter, shp_Prices0_LeftParameter, shp_Prices0_WidthParameter, shp_Prices0_HeightParameter, shp_Prices0_VisibleParameter, lbl_Bed_TopParameter, lbl_Bed_LeftParameter, lbl_Bed_WidthParameter, lbl_Bed_HeightParameter, lbl_Bed_VisibleParameter, lbl_BedInfo_TopParameter, lbl_BedInfo_LeftParameter, lbl_BedInfo_WidthParameter, lbl_BedInfo_HeightParameter, lbl_BedInfo_VisibleParameter, lbl_Bes_TopParameter, lbl_Bes_LeftParameter, lbl_Bes_WidthParameter, lbl_Bes_HeightParameter, lbl_Bes_VisibleParameter, lbl_BesInfo_TopParameter, lbl_BesInfo_LeftParameter, lbl_BesInfo_WidthParameter, lbl_BesInfo_HeightParameter, lbl_BesInfo_VisibleParameter, shp_Prices1_TopParameter, shp_Prices1_LeftParameter, shp_Prices1_WidthParameter, shp_Prices1_HeightParameter, shp_Prices1_VisibleParameter, lbl_Mandeh_TopParameter, lbl_Mandeh_LeftParameter, lbl_Mandeh_WidthParameter, lbl_Mandeh_HeightParameter, lbl_Mandeh_VisibleParameter, lbl_MandehInfo_TopParameter, lbl_MandehInfo_LeftParameter, lbl_MandehInfo_WidthParameter, lbl_MandehInfo_HeightParameter, lbl_MandehInfo_VisibleParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_ReceptionForms_Select_Result> sp_ReceptionForms_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReceptionForms_Select_Result>("sp_ReceptionForms_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_ReceptionForms_SelectRow_Result> sp_ReceptionForms_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReceptionForms_SelectRow_Result>("sp_ReceptionForms_SelectRow", iDParameter);
        }
    
        public virtual int sp_ReceptionForms_Update(Nullable<int> iD, string name, string dsc, Nullable<short> frm_Reception_Height, Nullable<short> frm_Reception_Width, Nullable<short> pnl_Main_Height, Nullable<short> lbl_ID_Top, Nullable<short> lbl_ID_Left, Nullable<short> lbl_ID_Width, Nullable<short> lbl_ID_Height, Nullable<bool> lbl_ID_Visible, Nullable<short> edt_ID_Top, Nullable<short> edt_ID_Left, Nullable<short> edt_ID_Width, Nullable<short> edt_ID_Height, Nullable<bool> edt_ID_Visible, Nullable<short> cbb_ReceptionTypes_Top, Nullable<short> cbb_ReceptionTypes_Left, Nullable<short> cbb_ReceptionTypes_Width, Nullable<short> cbb_ReceptionTypes_Height, Nullable<bool> cbb_ReceptionTypes_Visible, Nullable<short> lbl_RegisterDate_Top, Nullable<short> lbl_RegisterDate_Left, Nullable<short> lbl_RegisterDate_Width, Nullable<short> lbl_RegisterDate_Height, Nullable<bool> lbl_RegisterDate_Visible, Nullable<short> edt_RegisterDate_Time_Top, Nullable<short> edt_RegisterDate_Time_Left, Nullable<short> edt_RegisterDate_Time_Width, Nullable<short> edt_RegisterDate_Time_Height, Nullable<bool> edt_RegisterDate_Time_Visible, Nullable<short> edt_RegisterDate_Top, Nullable<short> edt_RegisterDate_Left, Nullable<short> edt_RegisterDate_Width, Nullable<short> edt_RegisterDate_Height, Nullable<bool> edt_RegisterDate_Visible, Nullable<short> btn_NewPatient_Top, Nullable<short> btn_NewPatient_Left, Nullable<short> btn_NewPatient_Width, Nullable<short> btn_NewPatient_Height, Nullable<bool> btn_NewPatient_Visible, Nullable<short> btn_Patients_Top, Nullable<short> btn_Patients_Left, Nullable<short> btn_Patients_Width, Nullable<short> btn_Patients_Height, Nullable<bool> btn_Patients_Visible, Nullable<short> edt_PatientID_Top, Nullable<short> edt_PatientID_Left, Nullable<short> edt_PatientID_Width, Nullable<short> edt_PatientID_Height, Nullable<bool> edt_PatientID_Visible, Nullable<short> cbb_SexTypes_Top, Nullable<short> cbb_SexTypes_Left, Nullable<short> cbb_SexTypes_Width, Nullable<short> cbb_SexTypes_Height, Nullable<bool> cbb_SexTypes_Visible, Nullable<short> edt_FirstName_Top, Nullable<short> edt_FirstName_Left, Nullable<short> edt_FirstName_Width, Nullable<short> edt_FirstName_Height, Nullable<bool> edt_FirstName_Visible, Nullable<short> edt_LastName_Top, Nullable<short> edt_LastName_Left, Nullable<short> edt_LastName_Width, Nullable<short> edt_LastName_Height, Nullable<bool> edt_LastName_Visible, Nullable<short> edt_General_Top, Nullable<short> edt_General_Left, Nullable<short> edt_General_Width, Nullable<short> edt_General_Height, Nullable<bool> edt_General_Visible, Nullable<short> btn_Insurances_Top, Nullable<short> btn_Insurances_Left, Nullable<short> btn_Insurances_Width, Nullable<short> btn_Insurances_Height, Nullable<bool> btn_Insurances_Visible, Nullable<short> edt_InsuranceID_Top, Nullable<short> edt_InsuranceID_Left, Nullable<short> edt_InsuranceID_Width, Nullable<short> edt_InsuranceID_Height, Nullable<bool> edt_InsuranceID_Visible, Nullable<short> lbl_InsuranceName_Top, Nullable<short> lbl_InsuranceName_Left, Nullable<short> lbl_InsuranceName_Width, Nullable<short> lbl_InsuranceName_Height, Nullable<bool> lbl_InsuranceName_Visible, Nullable<short> lbl_InsuranceNumber_Top, Nullable<short> lbl_InsuranceNumber_Left, Nullable<short> lbl_InsuranceNumber_Width, Nullable<short> lbl_InsuranceNumber_Height, Nullable<bool> lbl_InsuranceNumber_Visible, Nullable<short> edt_InsuranceNumber_Top, Nullable<short> edt_InsuranceNumber_Left, Nullable<short> edt_InsuranceNumber_Width, Nullable<short> edt_InsuranceNumber_Height, Nullable<bool> edt_InsuranceNumber_Visible, Nullable<short> btn_Reasons_Top, Nullable<short> btn_Reasons_Left, Nullable<short> btn_Reasons_Width, Nullable<short> btn_Reasons_Height, Nullable<bool> btn_Reasons_Visible, Nullable<short> edt_ReasonID_Top, Nullable<short> edt_ReasonID_Left, Nullable<short> edt_ReasonID_Width, Nullable<short> edt_ReasonID_Height, Nullable<bool> edt_ReasonID_Visible, Nullable<short> lbl_ReasonName_Top, Nullable<short> lbl_ReasonName_Left, Nullable<short> lbl_ReasonName_Width, Nullable<short> lbl_ReasonName_Height, Nullable<bool> lbl_ReasonName_Visible, Nullable<short> btn_Customers_Top, Nullable<short> btn_Customers_Left, Nullable<short> btn_Customers_Width, Nullable<short> btn_Customers_Height, Nullable<bool> btn_Customers_Visible, Nullable<short> edt_CustomerID_Top, Nullable<short> edt_CustomerID_Left, Nullable<short> edt_CustomerID_Width, Nullable<short> edt_CustomerID_Height, Nullable<bool> edt_CustomerID_Visible, Nullable<short> btn_Departments_Top, Nullable<short> btn_Departments_Left, Nullable<short> btn_Departments_Width, Nullable<short> btn_Departments_Height, Nullable<bool> btn_Departments_Visible, Nullable<short> edt_DepartmentID_Top, Nullable<short> edt_DepartmentID_Left, Nullable<short> edt_DepartmentID_Width, Nullable<short> edt_DepartmentID_Height, Nullable<bool> edt_DepartmentID_Visible, Nullable<short> lbl_DepartmentName_Top, Nullable<short> lbl_DepartmentName_Left, Nullable<short> lbl_DepartmentName_Width, Nullable<short> lbl_DepartmentName_Height, Nullable<bool> lbl_DepartmentName_Visible, Nullable<short> lbl_Room_Top, Nullable<short> lbl_Room_Left, Nullable<short> lbl_Room_Width, Nullable<short> lbl_Room_Height, Nullable<bool> lbl_Room_Visible, Nullable<short> edt_RoomID_Top, Nullable<short> edt_RoomID_Left, Nullable<short> edt_RoomID_Width, Nullable<short> edt_RoomID_Height, Nullable<bool> edt_RoomID_Visible, Nullable<short> edt_BedID_Top, Nullable<short> edt_BedID_Left, Nullable<short> edt_BedID_Width, Nullable<short> edt_BedID_Height, Nullable<bool> edt_BedID_Visible, Nullable<short> btn_Doctors_Top, Nullable<short> btn_Doctors_Left, Nullable<short> btn_Doctors_Width, Nullable<short> btn_Doctors_Height, Nullable<bool> btn_Doctors_Visible, Nullable<short> edt_DoctorID_Top, Nullable<short> edt_DoctorID_Left, Nullable<short> edt_DoctorID_Width, Nullable<short> edt_DoctorID_Height, Nullable<bool> edt_DoctorID_Visible, Nullable<short> lbl_DoctorName_Top, Nullable<short> lbl_DoctorName_Left, Nullable<short> lbl_DoctorName_Width, Nullable<short> lbl_DoctorName_Height, Nullable<bool> lbl_DoctorName_Visible, Nullable<short> btn_ReceptionFactor_Top, Nullable<short> btn_ReceptionFactor_Left, Nullable<short> btn_ReceptionFactor_Width, Nullable<short> btn_ReceptionFactor_Height, Nullable<bool> btn_ReceptionFactor_Visible, Nullable<short> btn_DigitalDocuments_Top, Nullable<short> btn_DigitalDocuments_Left, Nullable<short> btn_DigitalDocuments_Width, Nullable<short> btn_DigitalDocuments_Height, Nullable<bool> btn_DigitalDocuments_Visible, Nullable<short> btn_Images_Top, Nullable<short> btn_Images_Left, Nullable<short> btn_Images_Width, Nullable<short> btn_Images_Height, Nullable<bool> btn_Images_Visible, Nullable<short> btn_Assistants_Top, Nullable<short> btn_Assistants_Left, Nullable<short> btn_Assistants_Width, Nullable<short> btn_Assistants_Height, Nullable<bool> btn_Assistants_Visible, Nullable<short> edt_AssistantID_Top, Nullable<short> edt_AssistantID_Left, Nullable<short> edt_AssistantID_Width, Nullable<short> edt_AssistantID_Height, Nullable<bool> edt_AssistantID_Visible, Nullable<short> lbl_AssistantName_Top, Nullable<short> lbl_AssistantName_Left, Nullable<short> lbl_AssistantName_Width, Nullable<short> lbl_AssistantName_Height, Nullable<bool> lbl_AssistantName_Visible, Nullable<short> chk_AutoPrint_Top, Nullable<short> chk_AutoPrint_Left, Nullable<short> chk_AutoPrint_Width, Nullable<short> chk_AutoPrint_Height, Nullable<bool> chk_AutoPrint_Visible, Nullable<short> chk_AutoSMS_Top, Nullable<short> chk_AutoSMS_Left, Nullable<short> chk_AutoSMS_Width, Nullable<short> chk_AutoSMS_Height, Nullable<bool> chk_AutoSMS_Visible, Nullable<short> btn_Diagnosises_Top, Nullable<short> btn_Diagnosises_Left, Nullable<short> btn_Diagnosises_Width, Nullable<short> btn_Diagnosises_Height, Nullable<bool> btn_Diagnosises_Visible, Nullable<short> edt_DiagnosisID_Top, Nullable<short> edt_DiagnosisID_Left, Nullable<short> edt_DiagnosisID_Width, Nullable<short> edt_DiagnosisID_Height, Nullable<bool> edt_DiagnosisID_Visible, Nullable<short> lbl_DiagnosisName_Top, Nullable<short> lbl_DiagnosisName_Left, Nullable<short> lbl_DiagnosisName_Width, Nullable<short> lbl_DiagnosisName_Height, Nullable<bool> lbl_DiagnosisName_Visible, Nullable<short> btn_Therapies_Top, Nullable<short> btn_Therapies_Left, Nullable<short> btn_Therapies_Width, Nullable<short> btn_Therapies_Height, Nullable<bool> btn_Therapies_Visible, Nullable<short> edt_TherapyID_Top, Nullable<short> edt_TherapyID_Left, Nullable<short> edt_TherapyID_Width, Nullable<short> edt_TherapyID_Height, Nullable<bool> edt_TherapyID_Visible, Nullable<short> lbl_TherapyName_Top, Nullable<short> lbl_TherapyName_Left, Nullable<short> lbl_TherapyName_Width, Nullable<short> lbl_TherapyName_Height, Nullable<bool> lbl_TherapyName_Visible, Nullable<short> btn_NewPrescription_Top, Nullable<short> btn_NewPrescription_Left, Nullable<short> btn_NewPrescription_Width, Nullable<short> btn_NewPrescription_Height, Nullable<bool> btn_NewPrescription_Visible, Nullable<short> btn_Prescriptions_Top, Nullable<short> btn_Prescriptions_Left, Nullable<short> btn_Prescriptions_Width, Nullable<short> btn_Prescriptions_Height, Nullable<bool> btn_Prescriptions_Visible, Nullable<short> edt_PrescriptionID_Top, Nullable<short> edt_PrescriptionID_Left, Nullable<short> edt_PrescriptionID_Width, Nullable<short> edt_PrescriptionID_Height, Nullable<bool> edt_PrescriptionID_Visible, Nullable<short> btn_NewLaboratory_Top, Nullable<short> btn_NewLaboratory_Left, Nullable<short> btn_NewLaboratory_Width, Nullable<short> btn_NewLaboratory_Height, Nullable<bool> btn_NewLaboratory_Visible, Nullable<short> btn_Laboratories_Top, Nullable<short> btn_Laboratories_Left, Nullable<short> btn_Laboratories_Width, Nullable<short> btn_Laboratories_Height, Nullable<bool> btn_Laboratories_Visible, Nullable<short> edt_LaboratoryID_Top, Nullable<short> edt_LaboratoryID_Left, Nullable<short> edt_LaboratoryID_Width, Nullable<short> edt_LaboratoryID_Height, Nullable<bool> edt_LaboratoryID_Visible, Nullable<short> btn_ReceptionStates_Top, Nullable<short> btn_ReceptionStates_Left, Nullable<short> btn_ReceptionStates_Width, Nullable<short> btn_ReceptionStates_Height, Nullable<bool> btn_ReceptionStates_Visible, Nullable<short> cbb_ReceptionStates_Top, Nullable<short> cbb_ReceptionStates_Left, Nullable<short> cbb_ReceptionStates_Width, Nullable<short> cbb_ReceptionStates_Height, Nullable<bool> cbb_ReceptionStates_Visible, Nullable<short> btn_PaymentStates_Top, Nullable<short> btn_PaymentStates_Left, Nullable<short> btn_PaymentStates_Width, Nullable<short> btn_PaymentStates_Height, Nullable<bool> btn_PaymentStates_Visible, Nullable<short> cbb_PaymentStates_Top, Nullable<short> cbb_PaymentStates_Left, Nullable<short> cbb_PaymentStates_Width, Nullable<short> cbb_PaymentStates_Height, Nullable<bool> cbb_PaymentStates_Visible, Nullable<short> grb_Prices_Top, Nullable<short> grb_Prices_Left, Nullable<short> grb_Prices_Width, Nullable<short> grb_Prices_Height, Nullable<bool> grb_Prices_Visible, Nullable<short> edt_ServicePrice_Top, Nullable<short> edt_ServicePrice_Left, Nullable<short> edt_ServicePrice_Width, Nullable<short> edt_ServicePrice_Height, Nullable<bool> edt_ServicePrice_Visible, Nullable<short> lbl_ServicePrice_Top, Nullable<short> lbl_ServicePrice_Left, Nullable<short> lbl_ServicePrice_Width, Nullable<short> lbl_ServicePrice_Height, Nullable<bool> lbl_ServicePrice_Visible, Nullable<short> edt_ItemsPrice_Top, Nullable<short> edt_ItemsPrice_Left, Nullable<short> edt_ItemsPrice_Width, Nullable<short> edt_ItemsPrice_Height, Nullable<bool> edt_ItemsPrice_Visible, Nullable<short> chk_SetItemsPrice_Top, Nullable<short> chk_SetItemsPrice_Left, Nullable<short> chk_SetItemsPrice_Width, Nullable<short> chk_SetItemsPrice_Height, Nullable<bool> chk_SetItemsPrice_Visible, Nullable<short> edt_PatientPrice_Top, Nullable<short> edt_PatientPrice_Left, Nullable<short> edt_PatientPrice_Width, Nullable<short> edt_PatientPrice_Height, Nullable<bool> edt_PatientPrice_Visible, Nullable<short> lbl_PatientPrice_Top, Nullable<short> lbl_PatientPrice_Left, Nullable<short> lbl_PatientPrice_Width, Nullable<short> lbl_PatientPrice_Height, Nullable<bool> lbl_PatientPrice_Visible, Nullable<short> edt_InsurancePrice_Top, Nullable<short> edt_InsurancePrice_Left, Nullable<short> edt_InsurancePrice_Width, Nullable<short> edt_InsurancePrice_Height, Nullable<bool> edt_InsurancePrice_Visible, Nullable<short> lbl_InsurancePrice_Top, Nullable<short> lbl_InsurancePrice_Left, Nullable<short> lbl_InsurancePrice_Width, Nullable<short> lbl_InsurancePrice_Height, Nullable<bool> lbl_InsurancePrice_Visible, Nullable<short> edt_MarginPrice_Top, Nullable<short> edt_MarginPrice_Left, Nullable<short> edt_MarginPrice_Width, Nullable<short> edt_MarginPrice_Height, Nullable<bool> edt_MarginPrice_Visible, Nullable<short> lbl_MarginPrice_Top, Nullable<short> lbl_MarginPrice_Left, Nullable<short> lbl_MarginPrice_Width, Nullable<short> lbl_MarginPrice_Height, Nullable<bool> lbl_MarginPrice_Visible, Nullable<short> edt_DoctorPrice_Top, Nullable<short> edt_DoctorPrice_Left, Nullable<short> edt_DoctorPrice_Width, Nullable<short> edt_DoctorPrice_Height, Nullable<bool> edt_DoctorPrice_Visible, Nullable<short> lbl_DoctorPrice_Top, Nullable<short> lbl_DoctorPrice_Left, Nullable<short> lbl_DoctorPrice_Width, Nullable<short> lbl_DoctorPrice_Height, Nullable<bool> lbl_DoctorPrice_Visible, Nullable<short> edt_AssistantPrice_Top, Nullable<short> edt_AssistantPrice_Left, Nullable<short> edt_AssistantPrice_Width, Nullable<short> edt_AssistantPrice_Height, Nullable<bool> edt_AssistantPrice_Visible, Nullable<short> lbl_AssistantPrice_Top, Nullable<short> lbl_AssistantPrice_Left, Nullable<short> lbl_AssistantPrice_Width, Nullable<short> lbl_AssistantPrice_Height, Nullable<bool> lbl_AssistantPrice_Visible, Nullable<short> edt_Takh_Top, Nullable<short> edt_Takh_Left, Nullable<short> edt_Takh_Width, Nullable<short> edt_Takh_Height, Nullable<bool> edt_Takh_Visible, Nullable<short> lbl_Takh_Top, Nullable<short> lbl_Takh_Left, Nullable<short> lbl_Takh_Width, Nullable<short> lbl_Takh_Height, Nullable<bool> lbl_Takh_Visible, Nullable<short> shp_Prices0_Top, Nullable<short> shp_Prices0_Left, Nullable<short> shp_Prices0_Width, Nullable<short> shp_Prices0_Height, Nullable<bool> shp_Prices0_Visible, Nullable<short> lbl_Bed_Top, Nullable<short> lbl_Bed_Left, Nullable<short> lbl_Bed_Width, Nullable<short> lbl_Bed_Height, Nullable<bool> lbl_Bed_Visible, Nullable<short> lbl_BedInfo_Top, Nullable<short> lbl_BedInfo_Left, Nullable<short> lbl_BedInfo_Width, Nullable<short> lbl_BedInfo_Height, Nullable<bool> lbl_BedInfo_Visible, Nullable<short> lbl_Bes_Top, Nullable<short> lbl_Bes_Left, Nullable<short> lbl_Bes_Width, Nullable<short> lbl_Bes_Height, Nullable<bool> lbl_Bes_Visible, Nullable<short> lbl_BesInfo_Top, Nullable<short> lbl_BesInfo_Left, Nullable<short> lbl_BesInfo_Width, Nullable<short> lbl_BesInfo_Height, Nullable<bool> lbl_BesInfo_Visible, Nullable<short> shp_Prices1_Top, Nullable<short> shp_Prices1_Left, Nullable<short> shp_Prices1_Width, Nullable<short> shp_Prices1_Height, Nullable<bool> shp_Prices1_Visible, Nullable<short> lbl_Mandeh_Top, Nullable<short> lbl_Mandeh_Left, Nullable<short> lbl_Mandeh_Width, Nullable<short> lbl_Mandeh_Height, Nullable<bool> lbl_Mandeh_Visible, Nullable<short> lbl_MandehInfo_Top, Nullable<short> lbl_MandehInfo_Left, Nullable<short> lbl_MandehInfo_Width, Nullable<short> lbl_MandehInfo_Height, Nullable<bool> lbl_MandehInfo_Visible, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var frm_Reception_HeightParameter = frm_Reception_Height.HasValue ?
                new ObjectParameter("Frm_Reception_Height", frm_Reception_Height) :
                new ObjectParameter("Frm_Reception_Height", typeof(short));
    
            var frm_Reception_WidthParameter = frm_Reception_Width.HasValue ?
                new ObjectParameter("Frm_Reception_Width", frm_Reception_Width) :
                new ObjectParameter("Frm_Reception_Width", typeof(short));
    
            var pnl_Main_HeightParameter = pnl_Main_Height.HasValue ?
                new ObjectParameter("Pnl_Main_Height", pnl_Main_Height) :
                new ObjectParameter("Pnl_Main_Height", typeof(short));
    
            var lbl_ID_TopParameter = lbl_ID_Top.HasValue ?
                new ObjectParameter("Lbl_ID_Top", lbl_ID_Top) :
                new ObjectParameter("Lbl_ID_Top", typeof(short));
    
            var lbl_ID_LeftParameter = lbl_ID_Left.HasValue ?
                new ObjectParameter("Lbl_ID_Left", lbl_ID_Left) :
                new ObjectParameter("Lbl_ID_Left", typeof(short));
    
            var lbl_ID_WidthParameter = lbl_ID_Width.HasValue ?
                new ObjectParameter("Lbl_ID_Width", lbl_ID_Width) :
                new ObjectParameter("Lbl_ID_Width", typeof(short));
    
            var lbl_ID_HeightParameter = lbl_ID_Height.HasValue ?
                new ObjectParameter("Lbl_ID_Height", lbl_ID_Height) :
                new ObjectParameter("Lbl_ID_Height", typeof(short));
    
            var lbl_ID_VisibleParameter = lbl_ID_Visible.HasValue ?
                new ObjectParameter("Lbl_ID_Visible", lbl_ID_Visible) :
                new ObjectParameter("Lbl_ID_Visible", typeof(bool));
    
            var edt_ID_TopParameter = edt_ID_Top.HasValue ?
                new ObjectParameter("Edt_ID_Top", edt_ID_Top) :
                new ObjectParameter("Edt_ID_Top", typeof(short));
    
            var edt_ID_LeftParameter = edt_ID_Left.HasValue ?
                new ObjectParameter("Edt_ID_Left", edt_ID_Left) :
                new ObjectParameter("Edt_ID_Left", typeof(short));
    
            var edt_ID_WidthParameter = edt_ID_Width.HasValue ?
                new ObjectParameter("Edt_ID_Width", edt_ID_Width) :
                new ObjectParameter("Edt_ID_Width", typeof(short));
    
            var edt_ID_HeightParameter = edt_ID_Height.HasValue ?
                new ObjectParameter("Edt_ID_Height", edt_ID_Height) :
                new ObjectParameter("Edt_ID_Height", typeof(short));
    
            var edt_ID_VisibleParameter = edt_ID_Visible.HasValue ?
                new ObjectParameter("Edt_ID_Visible", edt_ID_Visible) :
                new ObjectParameter("Edt_ID_Visible", typeof(bool));
    
            var cbb_ReceptionTypes_TopParameter = cbb_ReceptionTypes_Top.HasValue ?
                new ObjectParameter("Cbb_ReceptionTypes_Top", cbb_ReceptionTypes_Top) :
                new ObjectParameter("Cbb_ReceptionTypes_Top", typeof(short));
    
            var cbb_ReceptionTypes_LeftParameter = cbb_ReceptionTypes_Left.HasValue ?
                new ObjectParameter("Cbb_ReceptionTypes_Left", cbb_ReceptionTypes_Left) :
                new ObjectParameter("Cbb_ReceptionTypes_Left", typeof(short));
    
            var cbb_ReceptionTypes_WidthParameter = cbb_ReceptionTypes_Width.HasValue ?
                new ObjectParameter("Cbb_ReceptionTypes_Width", cbb_ReceptionTypes_Width) :
                new ObjectParameter("Cbb_ReceptionTypes_Width", typeof(short));
    
            var cbb_ReceptionTypes_HeightParameter = cbb_ReceptionTypes_Height.HasValue ?
                new ObjectParameter("Cbb_ReceptionTypes_Height", cbb_ReceptionTypes_Height) :
                new ObjectParameter("Cbb_ReceptionTypes_Height", typeof(short));
    
            var cbb_ReceptionTypes_VisibleParameter = cbb_ReceptionTypes_Visible.HasValue ?
                new ObjectParameter("Cbb_ReceptionTypes_Visible", cbb_ReceptionTypes_Visible) :
                new ObjectParameter("Cbb_ReceptionTypes_Visible", typeof(bool));
    
            var lbl_RegisterDate_TopParameter = lbl_RegisterDate_Top.HasValue ?
                new ObjectParameter("Lbl_RegisterDate_Top", lbl_RegisterDate_Top) :
                new ObjectParameter("Lbl_RegisterDate_Top", typeof(short));
    
            var lbl_RegisterDate_LeftParameter = lbl_RegisterDate_Left.HasValue ?
                new ObjectParameter("Lbl_RegisterDate_Left", lbl_RegisterDate_Left) :
                new ObjectParameter("Lbl_RegisterDate_Left", typeof(short));
    
            var lbl_RegisterDate_WidthParameter = lbl_RegisterDate_Width.HasValue ?
                new ObjectParameter("Lbl_RegisterDate_Width", lbl_RegisterDate_Width) :
                new ObjectParameter("Lbl_RegisterDate_Width", typeof(short));
    
            var lbl_RegisterDate_HeightParameter = lbl_RegisterDate_Height.HasValue ?
                new ObjectParameter("Lbl_RegisterDate_Height", lbl_RegisterDate_Height) :
                new ObjectParameter("Lbl_RegisterDate_Height", typeof(short));
    
            var lbl_RegisterDate_VisibleParameter = lbl_RegisterDate_Visible.HasValue ?
                new ObjectParameter("Lbl_RegisterDate_Visible", lbl_RegisterDate_Visible) :
                new ObjectParameter("Lbl_RegisterDate_Visible", typeof(bool));
    
            var edt_RegisterDate_Time_TopParameter = edt_RegisterDate_Time_Top.HasValue ?
                new ObjectParameter("Edt_RegisterDate_Time_Top", edt_RegisterDate_Time_Top) :
                new ObjectParameter("Edt_RegisterDate_Time_Top", typeof(short));
    
            var edt_RegisterDate_Time_LeftParameter = edt_RegisterDate_Time_Left.HasValue ?
                new ObjectParameter("Edt_RegisterDate_Time_Left", edt_RegisterDate_Time_Left) :
                new ObjectParameter("Edt_RegisterDate_Time_Left", typeof(short));
    
            var edt_RegisterDate_Time_WidthParameter = edt_RegisterDate_Time_Width.HasValue ?
                new ObjectParameter("Edt_RegisterDate_Time_Width", edt_RegisterDate_Time_Width) :
                new ObjectParameter("Edt_RegisterDate_Time_Width", typeof(short));
    
            var edt_RegisterDate_Time_HeightParameter = edt_RegisterDate_Time_Height.HasValue ?
                new ObjectParameter("Edt_RegisterDate_Time_Height", edt_RegisterDate_Time_Height) :
                new ObjectParameter("Edt_RegisterDate_Time_Height", typeof(short));
    
            var edt_RegisterDate_Time_VisibleParameter = edt_RegisterDate_Time_Visible.HasValue ?
                new ObjectParameter("Edt_RegisterDate_Time_Visible", edt_RegisterDate_Time_Visible) :
                new ObjectParameter("Edt_RegisterDate_Time_Visible", typeof(bool));
    
            var edt_RegisterDate_TopParameter = edt_RegisterDate_Top.HasValue ?
                new ObjectParameter("Edt_RegisterDate_Top", edt_RegisterDate_Top) :
                new ObjectParameter("Edt_RegisterDate_Top", typeof(short));
    
            var edt_RegisterDate_LeftParameter = edt_RegisterDate_Left.HasValue ?
                new ObjectParameter("Edt_RegisterDate_Left", edt_RegisterDate_Left) :
                new ObjectParameter("Edt_RegisterDate_Left", typeof(short));
    
            var edt_RegisterDate_WidthParameter = edt_RegisterDate_Width.HasValue ?
                new ObjectParameter("Edt_RegisterDate_Width", edt_RegisterDate_Width) :
                new ObjectParameter("Edt_RegisterDate_Width", typeof(short));
    
            var edt_RegisterDate_HeightParameter = edt_RegisterDate_Height.HasValue ?
                new ObjectParameter("Edt_RegisterDate_Height", edt_RegisterDate_Height) :
                new ObjectParameter("Edt_RegisterDate_Height", typeof(short));
    
            var edt_RegisterDate_VisibleParameter = edt_RegisterDate_Visible.HasValue ?
                new ObjectParameter("Edt_RegisterDate_Visible", edt_RegisterDate_Visible) :
                new ObjectParameter("Edt_RegisterDate_Visible", typeof(bool));
    
            var btn_NewPatient_TopParameter = btn_NewPatient_Top.HasValue ?
                new ObjectParameter("Btn_NewPatient_Top", btn_NewPatient_Top) :
                new ObjectParameter("Btn_NewPatient_Top", typeof(short));
    
            var btn_NewPatient_LeftParameter = btn_NewPatient_Left.HasValue ?
                new ObjectParameter("Btn_NewPatient_Left", btn_NewPatient_Left) :
                new ObjectParameter("Btn_NewPatient_Left", typeof(short));
    
            var btn_NewPatient_WidthParameter = btn_NewPatient_Width.HasValue ?
                new ObjectParameter("Btn_NewPatient_Width", btn_NewPatient_Width) :
                new ObjectParameter("Btn_NewPatient_Width", typeof(short));
    
            var btn_NewPatient_HeightParameter = btn_NewPatient_Height.HasValue ?
                new ObjectParameter("Btn_NewPatient_Height", btn_NewPatient_Height) :
                new ObjectParameter("Btn_NewPatient_Height", typeof(short));
    
            var btn_NewPatient_VisibleParameter = btn_NewPatient_Visible.HasValue ?
                new ObjectParameter("Btn_NewPatient_Visible", btn_NewPatient_Visible) :
                new ObjectParameter("Btn_NewPatient_Visible", typeof(bool));
    
            var btn_Patients_TopParameter = btn_Patients_Top.HasValue ?
                new ObjectParameter("Btn_Patients_Top", btn_Patients_Top) :
                new ObjectParameter("Btn_Patients_Top", typeof(short));
    
            var btn_Patients_LeftParameter = btn_Patients_Left.HasValue ?
                new ObjectParameter("Btn_Patients_Left", btn_Patients_Left) :
                new ObjectParameter("Btn_Patients_Left", typeof(short));
    
            var btn_Patients_WidthParameter = btn_Patients_Width.HasValue ?
                new ObjectParameter("Btn_Patients_Width", btn_Patients_Width) :
                new ObjectParameter("Btn_Patients_Width", typeof(short));
    
            var btn_Patients_HeightParameter = btn_Patients_Height.HasValue ?
                new ObjectParameter("Btn_Patients_Height", btn_Patients_Height) :
                new ObjectParameter("Btn_Patients_Height", typeof(short));
    
            var btn_Patients_VisibleParameter = btn_Patients_Visible.HasValue ?
                new ObjectParameter("Btn_Patients_Visible", btn_Patients_Visible) :
                new ObjectParameter("Btn_Patients_Visible", typeof(bool));
    
            var edt_PatientID_TopParameter = edt_PatientID_Top.HasValue ?
                new ObjectParameter("Edt_PatientID_Top", edt_PatientID_Top) :
                new ObjectParameter("Edt_PatientID_Top", typeof(short));
    
            var edt_PatientID_LeftParameter = edt_PatientID_Left.HasValue ?
                new ObjectParameter("Edt_PatientID_Left", edt_PatientID_Left) :
                new ObjectParameter("Edt_PatientID_Left", typeof(short));
    
            var edt_PatientID_WidthParameter = edt_PatientID_Width.HasValue ?
                new ObjectParameter("Edt_PatientID_Width", edt_PatientID_Width) :
                new ObjectParameter("Edt_PatientID_Width", typeof(short));
    
            var edt_PatientID_HeightParameter = edt_PatientID_Height.HasValue ?
                new ObjectParameter("Edt_PatientID_Height", edt_PatientID_Height) :
                new ObjectParameter("Edt_PatientID_Height", typeof(short));
    
            var edt_PatientID_VisibleParameter = edt_PatientID_Visible.HasValue ?
                new ObjectParameter("Edt_PatientID_Visible", edt_PatientID_Visible) :
                new ObjectParameter("Edt_PatientID_Visible", typeof(bool));
    
            var cbb_SexTypes_TopParameter = cbb_SexTypes_Top.HasValue ?
                new ObjectParameter("Cbb_SexTypes_Top", cbb_SexTypes_Top) :
                new ObjectParameter("Cbb_SexTypes_Top", typeof(short));
    
            var cbb_SexTypes_LeftParameter = cbb_SexTypes_Left.HasValue ?
                new ObjectParameter("Cbb_SexTypes_Left", cbb_SexTypes_Left) :
                new ObjectParameter("Cbb_SexTypes_Left", typeof(short));
    
            var cbb_SexTypes_WidthParameter = cbb_SexTypes_Width.HasValue ?
                new ObjectParameter("Cbb_SexTypes_Width", cbb_SexTypes_Width) :
                new ObjectParameter("Cbb_SexTypes_Width", typeof(short));
    
            var cbb_SexTypes_HeightParameter = cbb_SexTypes_Height.HasValue ?
                new ObjectParameter("Cbb_SexTypes_Height", cbb_SexTypes_Height) :
                new ObjectParameter("Cbb_SexTypes_Height", typeof(short));
    
            var cbb_SexTypes_VisibleParameter = cbb_SexTypes_Visible.HasValue ?
                new ObjectParameter("Cbb_SexTypes_Visible", cbb_SexTypes_Visible) :
                new ObjectParameter("Cbb_SexTypes_Visible", typeof(bool));
    
            var edt_FirstName_TopParameter = edt_FirstName_Top.HasValue ?
                new ObjectParameter("Edt_FirstName_Top", edt_FirstName_Top) :
                new ObjectParameter("Edt_FirstName_Top", typeof(short));
    
            var edt_FirstName_LeftParameter = edt_FirstName_Left.HasValue ?
                new ObjectParameter("Edt_FirstName_Left", edt_FirstName_Left) :
                new ObjectParameter("Edt_FirstName_Left", typeof(short));
    
            var edt_FirstName_WidthParameter = edt_FirstName_Width.HasValue ?
                new ObjectParameter("Edt_FirstName_Width", edt_FirstName_Width) :
                new ObjectParameter("Edt_FirstName_Width", typeof(short));
    
            var edt_FirstName_HeightParameter = edt_FirstName_Height.HasValue ?
                new ObjectParameter("Edt_FirstName_Height", edt_FirstName_Height) :
                new ObjectParameter("Edt_FirstName_Height", typeof(short));
    
            var edt_FirstName_VisibleParameter = edt_FirstName_Visible.HasValue ?
                new ObjectParameter("Edt_FirstName_Visible", edt_FirstName_Visible) :
                new ObjectParameter("Edt_FirstName_Visible", typeof(bool));
    
            var edt_LastName_TopParameter = edt_LastName_Top.HasValue ?
                new ObjectParameter("Edt_LastName_Top", edt_LastName_Top) :
                new ObjectParameter("Edt_LastName_Top", typeof(short));
    
            var edt_LastName_LeftParameter = edt_LastName_Left.HasValue ?
                new ObjectParameter("Edt_LastName_Left", edt_LastName_Left) :
                new ObjectParameter("Edt_LastName_Left", typeof(short));
    
            var edt_LastName_WidthParameter = edt_LastName_Width.HasValue ?
                new ObjectParameter("Edt_LastName_Width", edt_LastName_Width) :
                new ObjectParameter("Edt_LastName_Width", typeof(short));
    
            var edt_LastName_HeightParameter = edt_LastName_Height.HasValue ?
                new ObjectParameter("Edt_LastName_Height", edt_LastName_Height) :
                new ObjectParameter("Edt_LastName_Height", typeof(short));
    
            var edt_LastName_VisibleParameter = edt_LastName_Visible.HasValue ?
                new ObjectParameter("Edt_LastName_Visible", edt_LastName_Visible) :
                new ObjectParameter("Edt_LastName_Visible", typeof(bool));
    
            var edt_General_TopParameter = edt_General_Top.HasValue ?
                new ObjectParameter("Edt_General_Top", edt_General_Top) :
                new ObjectParameter("Edt_General_Top", typeof(short));
    
            var edt_General_LeftParameter = edt_General_Left.HasValue ?
                new ObjectParameter("Edt_General_Left", edt_General_Left) :
                new ObjectParameter("Edt_General_Left", typeof(short));
    
            var edt_General_WidthParameter = edt_General_Width.HasValue ?
                new ObjectParameter("Edt_General_Width", edt_General_Width) :
                new ObjectParameter("Edt_General_Width", typeof(short));
    
            var edt_General_HeightParameter = edt_General_Height.HasValue ?
                new ObjectParameter("Edt_General_Height", edt_General_Height) :
                new ObjectParameter("Edt_General_Height", typeof(short));
    
            var edt_General_VisibleParameter = edt_General_Visible.HasValue ?
                new ObjectParameter("Edt_General_Visible", edt_General_Visible) :
                new ObjectParameter("Edt_General_Visible", typeof(bool));
    
            var btn_Insurances_TopParameter = btn_Insurances_Top.HasValue ?
                new ObjectParameter("Btn_Insurances_Top", btn_Insurances_Top) :
                new ObjectParameter("Btn_Insurances_Top", typeof(short));
    
            var btn_Insurances_LeftParameter = btn_Insurances_Left.HasValue ?
                new ObjectParameter("Btn_Insurances_Left", btn_Insurances_Left) :
                new ObjectParameter("Btn_Insurances_Left", typeof(short));
    
            var btn_Insurances_WidthParameter = btn_Insurances_Width.HasValue ?
                new ObjectParameter("Btn_Insurances_Width", btn_Insurances_Width) :
                new ObjectParameter("Btn_Insurances_Width", typeof(short));
    
            var btn_Insurances_HeightParameter = btn_Insurances_Height.HasValue ?
                new ObjectParameter("Btn_Insurances_Height", btn_Insurances_Height) :
                new ObjectParameter("Btn_Insurances_Height", typeof(short));
    
            var btn_Insurances_VisibleParameter = btn_Insurances_Visible.HasValue ?
                new ObjectParameter("Btn_Insurances_Visible", btn_Insurances_Visible) :
                new ObjectParameter("Btn_Insurances_Visible", typeof(bool));
    
            var edt_InsuranceID_TopParameter = edt_InsuranceID_Top.HasValue ?
                new ObjectParameter("Edt_InsuranceID_Top", edt_InsuranceID_Top) :
                new ObjectParameter("Edt_InsuranceID_Top", typeof(short));
    
            var edt_InsuranceID_LeftParameter = edt_InsuranceID_Left.HasValue ?
                new ObjectParameter("Edt_InsuranceID_Left", edt_InsuranceID_Left) :
                new ObjectParameter("Edt_InsuranceID_Left", typeof(short));
    
            var edt_InsuranceID_WidthParameter = edt_InsuranceID_Width.HasValue ?
                new ObjectParameter("Edt_InsuranceID_Width", edt_InsuranceID_Width) :
                new ObjectParameter("Edt_InsuranceID_Width", typeof(short));
    
            var edt_InsuranceID_HeightParameter = edt_InsuranceID_Height.HasValue ?
                new ObjectParameter("Edt_InsuranceID_Height", edt_InsuranceID_Height) :
                new ObjectParameter("Edt_InsuranceID_Height", typeof(short));
    
            var edt_InsuranceID_VisibleParameter = edt_InsuranceID_Visible.HasValue ?
                new ObjectParameter("Edt_InsuranceID_Visible", edt_InsuranceID_Visible) :
                new ObjectParameter("Edt_InsuranceID_Visible", typeof(bool));
    
            var lbl_InsuranceName_TopParameter = lbl_InsuranceName_Top.HasValue ?
                new ObjectParameter("Lbl_InsuranceName_Top", lbl_InsuranceName_Top) :
                new ObjectParameter("Lbl_InsuranceName_Top", typeof(short));
    
            var lbl_InsuranceName_LeftParameter = lbl_InsuranceName_Left.HasValue ?
                new ObjectParameter("Lbl_InsuranceName_Left", lbl_InsuranceName_Left) :
                new ObjectParameter("Lbl_InsuranceName_Left", typeof(short));
    
            var lbl_InsuranceName_WidthParameter = lbl_InsuranceName_Width.HasValue ?
                new ObjectParameter("Lbl_InsuranceName_Width", lbl_InsuranceName_Width) :
                new ObjectParameter("Lbl_InsuranceName_Width", typeof(short));
    
            var lbl_InsuranceName_HeightParameter = lbl_InsuranceName_Height.HasValue ?
                new ObjectParameter("Lbl_InsuranceName_Height", lbl_InsuranceName_Height) :
                new ObjectParameter("Lbl_InsuranceName_Height", typeof(short));
    
            var lbl_InsuranceName_VisibleParameter = lbl_InsuranceName_Visible.HasValue ?
                new ObjectParameter("Lbl_InsuranceName_Visible", lbl_InsuranceName_Visible) :
                new ObjectParameter("Lbl_InsuranceName_Visible", typeof(bool));
    
            var lbl_InsuranceNumber_TopParameter = lbl_InsuranceNumber_Top.HasValue ?
                new ObjectParameter("Lbl_InsuranceNumber_Top", lbl_InsuranceNumber_Top) :
                new ObjectParameter("Lbl_InsuranceNumber_Top", typeof(short));
    
            var lbl_InsuranceNumber_LeftParameter = lbl_InsuranceNumber_Left.HasValue ?
                new ObjectParameter("Lbl_InsuranceNumber_Left", lbl_InsuranceNumber_Left) :
                new ObjectParameter("Lbl_InsuranceNumber_Left", typeof(short));
    
            var lbl_InsuranceNumber_WidthParameter = lbl_InsuranceNumber_Width.HasValue ?
                new ObjectParameter("Lbl_InsuranceNumber_Width", lbl_InsuranceNumber_Width) :
                new ObjectParameter("Lbl_InsuranceNumber_Width", typeof(short));
    
            var lbl_InsuranceNumber_HeightParameter = lbl_InsuranceNumber_Height.HasValue ?
                new ObjectParameter("Lbl_InsuranceNumber_Height", lbl_InsuranceNumber_Height) :
                new ObjectParameter("Lbl_InsuranceNumber_Height", typeof(short));
    
            var lbl_InsuranceNumber_VisibleParameter = lbl_InsuranceNumber_Visible.HasValue ?
                new ObjectParameter("Lbl_InsuranceNumber_Visible", lbl_InsuranceNumber_Visible) :
                new ObjectParameter("Lbl_InsuranceNumber_Visible", typeof(bool));
    
            var edt_InsuranceNumber_TopParameter = edt_InsuranceNumber_Top.HasValue ?
                new ObjectParameter("Edt_InsuranceNumber_Top", edt_InsuranceNumber_Top) :
                new ObjectParameter("Edt_InsuranceNumber_Top", typeof(short));
    
            var edt_InsuranceNumber_LeftParameter = edt_InsuranceNumber_Left.HasValue ?
                new ObjectParameter("Edt_InsuranceNumber_Left", edt_InsuranceNumber_Left) :
                new ObjectParameter("Edt_InsuranceNumber_Left", typeof(short));
    
            var edt_InsuranceNumber_WidthParameter = edt_InsuranceNumber_Width.HasValue ?
                new ObjectParameter("Edt_InsuranceNumber_Width", edt_InsuranceNumber_Width) :
                new ObjectParameter("Edt_InsuranceNumber_Width", typeof(short));
    
            var edt_InsuranceNumber_HeightParameter = edt_InsuranceNumber_Height.HasValue ?
                new ObjectParameter("Edt_InsuranceNumber_Height", edt_InsuranceNumber_Height) :
                new ObjectParameter("Edt_InsuranceNumber_Height", typeof(short));
    
            var edt_InsuranceNumber_VisibleParameter = edt_InsuranceNumber_Visible.HasValue ?
                new ObjectParameter("Edt_InsuranceNumber_Visible", edt_InsuranceNumber_Visible) :
                new ObjectParameter("Edt_InsuranceNumber_Visible", typeof(bool));
    
            var btn_Reasons_TopParameter = btn_Reasons_Top.HasValue ?
                new ObjectParameter("Btn_Reasons_Top", btn_Reasons_Top) :
                new ObjectParameter("Btn_Reasons_Top", typeof(short));
    
            var btn_Reasons_LeftParameter = btn_Reasons_Left.HasValue ?
                new ObjectParameter("Btn_Reasons_Left", btn_Reasons_Left) :
                new ObjectParameter("Btn_Reasons_Left", typeof(short));
    
            var btn_Reasons_WidthParameter = btn_Reasons_Width.HasValue ?
                new ObjectParameter("Btn_Reasons_Width", btn_Reasons_Width) :
                new ObjectParameter("Btn_Reasons_Width", typeof(short));
    
            var btn_Reasons_HeightParameter = btn_Reasons_Height.HasValue ?
                new ObjectParameter("Btn_Reasons_Height", btn_Reasons_Height) :
                new ObjectParameter("Btn_Reasons_Height", typeof(short));
    
            var btn_Reasons_VisibleParameter = btn_Reasons_Visible.HasValue ?
                new ObjectParameter("Btn_Reasons_Visible", btn_Reasons_Visible) :
                new ObjectParameter("Btn_Reasons_Visible", typeof(bool));
    
            var edt_ReasonID_TopParameter = edt_ReasonID_Top.HasValue ?
                new ObjectParameter("Edt_ReasonID_Top", edt_ReasonID_Top) :
                new ObjectParameter("Edt_ReasonID_Top", typeof(short));
    
            var edt_ReasonID_LeftParameter = edt_ReasonID_Left.HasValue ?
                new ObjectParameter("Edt_ReasonID_Left", edt_ReasonID_Left) :
                new ObjectParameter("Edt_ReasonID_Left", typeof(short));
    
            var edt_ReasonID_WidthParameter = edt_ReasonID_Width.HasValue ?
                new ObjectParameter("Edt_ReasonID_Width", edt_ReasonID_Width) :
                new ObjectParameter("Edt_ReasonID_Width", typeof(short));
    
            var edt_ReasonID_HeightParameter = edt_ReasonID_Height.HasValue ?
                new ObjectParameter("Edt_ReasonID_Height", edt_ReasonID_Height) :
                new ObjectParameter("Edt_ReasonID_Height", typeof(short));
    
            var edt_ReasonID_VisibleParameter = edt_ReasonID_Visible.HasValue ?
                new ObjectParameter("Edt_ReasonID_Visible", edt_ReasonID_Visible) :
                new ObjectParameter("Edt_ReasonID_Visible", typeof(bool));
    
            var lbl_ReasonName_TopParameter = lbl_ReasonName_Top.HasValue ?
                new ObjectParameter("Lbl_ReasonName_Top", lbl_ReasonName_Top) :
                new ObjectParameter("Lbl_ReasonName_Top", typeof(short));
    
            var lbl_ReasonName_LeftParameter = lbl_ReasonName_Left.HasValue ?
                new ObjectParameter("Lbl_ReasonName_Left", lbl_ReasonName_Left) :
                new ObjectParameter("Lbl_ReasonName_Left", typeof(short));
    
            var lbl_ReasonName_WidthParameter = lbl_ReasonName_Width.HasValue ?
                new ObjectParameter("Lbl_ReasonName_Width", lbl_ReasonName_Width) :
                new ObjectParameter("Lbl_ReasonName_Width", typeof(short));
    
            var lbl_ReasonName_HeightParameter = lbl_ReasonName_Height.HasValue ?
                new ObjectParameter("Lbl_ReasonName_Height", lbl_ReasonName_Height) :
                new ObjectParameter("Lbl_ReasonName_Height", typeof(short));
    
            var lbl_ReasonName_VisibleParameter = lbl_ReasonName_Visible.HasValue ?
                new ObjectParameter("Lbl_ReasonName_Visible", lbl_ReasonName_Visible) :
                new ObjectParameter("Lbl_ReasonName_Visible", typeof(bool));
    
            var btn_Customers_TopParameter = btn_Customers_Top.HasValue ?
                new ObjectParameter("Btn_Customers_Top", btn_Customers_Top) :
                new ObjectParameter("Btn_Customers_Top", typeof(short));
    
            var btn_Customers_LeftParameter = btn_Customers_Left.HasValue ?
                new ObjectParameter("Btn_Customers_Left", btn_Customers_Left) :
                new ObjectParameter("Btn_Customers_Left", typeof(short));
    
            var btn_Customers_WidthParameter = btn_Customers_Width.HasValue ?
                new ObjectParameter("Btn_Customers_Width", btn_Customers_Width) :
                new ObjectParameter("Btn_Customers_Width", typeof(short));
    
            var btn_Customers_HeightParameter = btn_Customers_Height.HasValue ?
                new ObjectParameter("Btn_Customers_Height", btn_Customers_Height) :
                new ObjectParameter("Btn_Customers_Height", typeof(short));
    
            var btn_Customers_VisibleParameter = btn_Customers_Visible.HasValue ?
                new ObjectParameter("Btn_Customers_Visible", btn_Customers_Visible) :
                new ObjectParameter("Btn_Customers_Visible", typeof(bool));
    
            var edt_CustomerID_TopParameter = edt_CustomerID_Top.HasValue ?
                new ObjectParameter("Edt_CustomerID_Top", edt_CustomerID_Top) :
                new ObjectParameter("Edt_CustomerID_Top", typeof(short));
    
            var edt_CustomerID_LeftParameter = edt_CustomerID_Left.HasValue ?
                new ObjectParameter("Edt_CustomerID_Left", edt_CustomerID_Left) :
                new ObjectParameter("Edt_CustomerID_Left", typeof(short));
    
            var edt_CustomerID_WidthParameter = edt_CustomerID_Width.HasValue ?
                new ObjectParameter("Edt_CustomerID_Width", edt_CustomerID_Width) :
                new ObjectParameter("Edt_CustomerID_Width", typeof(short));
    
            var edt_CustomerID_HeightParameter = edt_CustomerID_Height.HasValue ?
                new ObjectParameter("Edt_CustomerID_Height", edt_CustomerID_Height) :
                new ObjectParameter("Edt_CustomerID_Height", typeof(short));
    
            var edt_CustomerID_VisibleParameter = edt_CustomerID_Visible.HasValue ?
                new ObjectParameter("Edt_CustomerID_Visible", edt_CustomerID_Visible) :
                new ObjectParameter("Edt_CustomerID_Visible", typeof(bool));
    
            var btn_Departments_TopParameter = btn_Departments_Top.HasValue ?
                new ObjectParameter("Btn_Departments_Top", btn_Departments_Top) :
                new ObjectParameter("Btn_Departments_Top", typeof(short));
    
            var btn_Departments_LeftParameter = btn_Departments_Left.HasValue ?
                new ObjectParameter("Btn_Departments_Left", btn_Departments_Left) :
                new ObjectParameter("Btn_Departments_Left", typeof(short));
    
            var btn_Departments_WidthParameter = btn_Departments_Width.HasValue ?
                new ObjectParameter("Btn_Departments_Width", btn_Departments_Width) :
                new ObjectParameter("Btn_Departments_Width", typeof(short));
    
            var btn_Departments_HeightParameter = btn_Departments_Height.HasValue ?
                new ObjectParameter("Btn_Departments_Height", btn_Departments_Height) :
                new ObjectParameter("Btn_Departments_Height", typeof(short));
    
            var btn_Departments_VisibleParameter = btn_Departments_Visible.HasValue ?
                new ObjectParameter("Btn_Departments_Visible", btn_Departments_Visible) :
                new ObjectParameter("Btn_Departments_Visible", typeof(bool));
    
            var edt_DepartmentID_TopParameter = edt_DepartmentID_Top.HasValue ?
                new ObjectParameter("Edt_DepartmentID_Top", edt_DepartmentID_Top) :
                new ObjectParameter("Edt_DepartmentID_Top", typeof(short));
    
            var edt_DepartmentID_LeftParameter = edt_DepartmentID_Left.HasValue ?
                new ObjectParameter("Edt_DepartmentID_Left", edt_DepartmentID_Left) :
                new ObjectParameter("Edt_DepartmentID_Left", typeof(short));
    
            var edt_DepartmentID_WidthParameter = edt_DepartmentID_Width.HasValue ?
                new ObjectParameter("Edt_DepartmentID_Width", edt_DepartmentID_Width) :
                new ObjectParameter("Edt_DepartmentID_Width", typeof(short));
    
            var edt_DepartmentID_HeightParameter = edt_DepartmentID_Height.HasValue ?
                new ObjectParameter("Edt_DepartmentID_Height", edt_DepartmentID_Height) :
                new ObjectParameter("Edt_DepartmentID_Height", typeof(short));
    
            var edt_DepartmentID_VisibleParameter = edt_DepartmentID_Visible.HasValue ?
                new ObjectParameter("Edt_DepartmentID_Visible", edt_DepartmentID_Visible) :
                new ObjectParameter("Edt_DepartmentID_Visible", typeof(bool));
    
            var lbl_DepartmentName_TopParameter = lbl_DepartmentName_Top.HasValue ?
                new ObjectParameter("Lbl_DepartmentName_Top", lbl_DepartmentName_Top) :
                new ObjectParameter("Lbl_DepartmentName_Top", typeof(short));
    
            var lbl_DepartmentName_LeftParameter = lbl_DepartmentName_Left.HasValue ?
                new ObjectParameter("Lbl_DepartmentName_Left", lbl_DepartmentName_Left) :
                new ObjectParameter("Lbl_DepartmentName_Left", typeof(short));
    
            var lbl_DepartmentName_WidthParameter = lbl_DepartmentName_Width.HasValue ?
                new ObjectParameter("Lbl_DepartmentName_Width", lbl_DepartmentName_Width) :
                new ObjectParameter("Lbl_DepartmentName_Width", typeof(short));
    
            var lbl_DepartmentName_HeightParameter = lbl_DepartmentName_Height.HasValue ?
                new ObjectParameter("Lbl_DepartmentName_Height", lbl_DepartmentName_Height) :
                new ObjectParameter("Lbl_DepartmentName_Height", typeof(short));
    
            var lbl_DepartmentName_VisibleParameter = lbl_DepartmentName_Visible.HasValue ?
                new ObjectParameter("Lbl_DepartmentName_Visible", lbl_DepartmentName_Visible) :
                new ObjectParameter("Lbl_DepartmentName_Visible", typeof(bool));
    
            var lbl_Room_TopParameter = lbl_Room_Top.HasValue ?
                new ObjectParameter("Lbl_Room_Top", lbl_Room_Top) :
                new ObjectParameter("Lbl_Room_Top", typeof(short));
    
            var lbl_Room_LeftParameter = lbl_Room_Left.HasValue ?
                new ObjectParameter("Lbl_Room_Left", lbl_Room_Left) :
                new ObjectParameter("Lbl_Room_Left", typeof(short));
    
            var lbl_Room_WidthParameter = lbl_Room_Width.HasValue ?
                new ObjectParameter("Lbl_Room_Width", lbl_Room_Width) :
                new ObjectParameter("Lbl_Room_Width", typeof(short));
    
            var lbl_Room_HeightParameter = lbl_Room_Height.HasValue ?
                new ObjectParameter("Lbl_Room_Height", lbl_Room_Height) :
                new ObjectParameter("Lbl_Room_Height", typeof(short));
    
            var lbl_Room_VisibleParameter = lbl_Room_Visible.HasValue ?
                new ObjectParameter("Lbl_Room_Visible", lbl_Room_Visible) :
                new ObjectParameter("Lbl_Room_Visible", typeof(bool));
    
            var edt_RoomID_TopParameter = edt_RoomID_Top.HasValue ?
                new ObjectParameter("Edt_RoomID_Top", edt_RoomID_Top) :
                new ObjectParameter("Edt_RoomID_Top", typeof(short));
    
            var edt_RoomID_LeftParameter = edt_RoomID_Left.HasValue ?
                new ObjectParameter("Edt_RoomID_Left", edt_RoomID_Left) :
                new ObjectParameter("Edt_RoomID_Left", typeof(short));
    
            var edt_RoomID_WidthParameter = edt_RoomID_Width.HasValue ?
                new ObjectParameter("Edt_RoomID_Width", edt_RoomID_Width) :
                new ObjectParameter("Edt_RoomID_Width", typeof(short));
    
            var edt_RoomID_HeightParameter = edt_RoomID_Height.HasValue ?
                new ObjectParameter("Edt_RoomID_Height", edt_RoomID_Height) :
                new ObjectParameter("Edt_RoomID_Height", typeof(short));
    
            var edt_RoomID_VisibleParameter = edt_RoomID_Visible.HasValue ?
                new ObjectParameter("Edt_RoomID_Visible", edt_RoomID_Visible) :
                new ObjectParameter("Edt_RoomID_Visible", typeof(bool));
    
            var edt_BedID_TopParameter = edt_BedID_Top.HasValue ?
                new ObjectParameter("Edt_BedID_Top", edt_BedID_Top) :
                new ObjectParameter("Edt_BedID_Top", typeof(short));
    
            var edt_BedID_LeftParameter = edt_BedID_Left.HasValue ?
                new ObjectParameter("Edt_BedID_Left", edt_BedID_Left) :
                new ObjectParameter("Edt_BedID_Left", typeof(short));
    
            var edt_BedID_WidthParameter = edt_BedID_Width.HasValue ?
                new ObjectParameter("Edt_BedID_Width", edt_BedID_Width) :
                new ObjectParameter("Edt_BedID_Width", typeof(short));
    
            var edt_BedID_HeightParameter = edt_BedID_Height.HasValue ?
                new ObjectParameter("Edt_BedID_Height", edt_BedID_Height) :
                new ObjectParameter("Edt_BedID_Height", typeof(short));
    
            var edt_BedID_VisibleParameter = edt_BedID_Visible.HasValue ?
                new ObjectParameter("Edt_BedID_Visible", edt_BedID_Visible) :
                new ObjectParameter("Edt_BedID_Visible", typeof(bool));
    
            var btn_Doctors_TopParameter = btn_Doctors_Top.HasValue ?
                new ObjectParameter("Btn_Doctors_Top", btn_Doctors_Top) :
                new ObjectParameter("Btn_Doctors_Top", typeof(short));
    
            var btn_Doctors_LeftParameter = btn_Doctors_Left.HasValue ?
                new ObjectParameter("Btn_Doctors_Left", btn_Doctors_Left) :
                new ObjectParameter("Btn_Doctors_Left", typeof(short));
    
            var btn_Doctors_WidthParameter = btn_Doctors_Width.HasValue ?
                new ObjectParameter("Btn_Doctors_Width", btn_Doctors_Width) :
                new ObjectParameter("Btn_Doctors_Width", typeof(short));
    
            var btn_Doctors_HeightParameter = btn_Doctors_Height.HasValue ?
                new ObjectParameter("Btn_Doctors_Height", btn_Doctors_Height) :
                new ObjectParameter("Btn_Doctors_Height", typeof(short));
    
            var btn_Doctors_VisibleParameter = btn_Doctors_Visible.HasValue ?
                new ObjectParameter("Btn_Doctors_Visible", btn_Doctors_Visible) :
                new ObjectParameter("Btn_Doctors_Visible", typeof(bool));
    
            var edt_DoctorID_TopParameter = edt_DoctorID_Top.HasValue ?
                new ObjectParameter("Edt_DoctorID_Top", edt_DoctorID_Top) :
                new ObjectParameter("Edt_DoctorID_Top", typeof(short));
    
            var edt_DoctorID_LeftParameter = edt_DoctorID_Left.HasValue ?
                new ObjectParameter("Edt_DoctorID_Left", edt_DoctorID_Left) :
                new ObjectParameter("Edt_DoctorID_Left", typeof(short));
    
            var edt_DoctorID_WidthParameter = edt_DoctorID_Width.HasValue ?
                new ObjectParameter("Edt_DoctorID_Width", edt_DoctorID_Width) :
                new ObjectParameter("Edt_DoctorID_Width", typeof(short));
    
            var edt_DoctorID_HeightParameter = edt_DoctorID_Height.HasValue ?
                new ObjectParameter("Edt_DoctorID_Height", edt_DoctorID_Height) :
                new ObjectParameter("Edt_DoctorID_Height", typeof(short));
    
            var edt_DoctorID_VisibleParameter = edt_DoctorID_Visible.HasValue ?
                new ObjectParameter("Edt_DoctorID_Visible", edt_DoctorID_Visible) :
                new ObjectParameter("Edt_DoctorID_Visible", typeof(bool));
    
            var lbl_DoctorName_TopParameter = lbl_DoctorName_Top.HasValue ?
                new ObjectParameter("Lbl_DoctorName_Top", lbl_DoctorName_Top) :
                new ObjectParameter("Lbl_DoctorName_Top", typeof(short));
    
            var lbl_DoctorName_LeftParameter = lbl_DoctorName_Left.HasValue ?
                new ObjectParameter("Lbl_DoctorName_Left", lbl_DoctorName_Left) :
                new ObjectParameter("Lbl_DoctorName_Left", typeof(short));
    
            var lbl_DoctorName_WidthParameter = lbl_DoctorName_Width.HasValue ?
                new ObjectParameter("Lbl_DoctorName_Width", lbl_DoctorName_Width) :
                new ObjectParameter("Lbl_DoctorName_Width", typeof(short));
    
            var lbl_DoctorName_HeightParameter = lbl_DoctorName_Height.HasValue ?
                new ObjectParameter("Lbl_DoctorName_Height", lbl_DoctorName_Height) :
                new ObjectParameter("Lbl_DoctorName_Height", typeof(short));
    
            var lbl_DoctorName_VisibleParameter = lbl_DoctorName_Visible.HasValue ?
                new ObjectParameter("Lbl_DoctorName_Visible", lbl_DoctorName_Visible) :
                new ObjectParameter("Lbl_DoctorName_Visible", typeof(bool));
    
            var btn_ReceptionFactor_TopParameter = btn_ReceptionFactor_Top.HasValue ?
                new ObjectParameter("Btn_ReceptionFactor_Top", btn_ReceptionFactor_Top) :
                new ObjectParameter("Btn_ReceptionFactor_Top", typeof(short));
    
            var btn_ReceptionFactor_LeftParameter = btn_ReceptionFactor_Left.HasValue ?
                new ObjectParameter("Btn_ReceptionFactor_Left", btn_ReceptionFactor_Left) :
                new ObjectParameter("Btn_ReceptionFactor_Left", typeof(short));
    
            var btn_ReceptionFactor_WidthParameter = btn_ReceptionFactor_Width.HasValue ?
                new ObjectParameter("Btn_ReceptionFactor_Width", btn_ReceptionFactor_Width) :
                new ObjectParameter("Btn_ReceptionFactor_Width", typeof(short));
    
            var btn_ReceptionFactor_HeightParameter = btn_ReceptionFactor_Height.HasValue ?
                new ObjectParameter("Btn_ReceptionFactor_Height", btn_ReceptionFactor_Height) :
                new ObjectParameter("Btn_ReceptionFactor_Height", typeof(short));
    
            var btn_ReceptionFactor_VisibleParameter = btn_ReceptionFactor_Visible.HasValue ?
                new ObjectParameter("Btn_ReceptionFactor_Visible", btn_ReceptionFactor_Visible) :
                new ObjectParameter("Btn_ReceptionFactor_Visible", typeof(bool));
    
            var btn_DigitalDocuments_TopParameter = btn_DigitalDocuments_Top.HasValue ?
                new ObjectParameter("Btn_DigitalDocuments_Top", btn_DigitalDocuments_Top) :
                new ObjectParameter("Btn_DigitalDocuments_Top", typeof(short));
    
            var btn_DigitalDocuments_LeftParameter = btn_DigitalDocuments_Left.HasValue ?
                new ObjectParameter("Btn_DigitalDocuments_Left", btn_DigitalDocuments_Left) :
                new ObjectParameter("Btn_DigitalDocuments_Left", typeof(short));
    
            var btn_DigitalDocuments_WidthParameter = btn_DigitalDocuments_Width.HasValue ?
                new ObjectParameter("Btn_DigitalDocuments_Width", btn_DigitalDocuments_Width) :
                new ObjectParameter("Btn_DigitalDocuments_Width", typeof(short));
    
            var btn_DigitalDocuments_HeightParameter = btn_DigitalDocuments_Height.HasValue ?
                new ObjectParameter("Btn_DigitalDocuments_Height", btn_DigitalDocuments_Height) :
                new ObjectParameter("Btn_DigitalDocuments_Height", typeof(short));
    
            var btn_DigitalDocuments_VisibleParameter = btn_DigitalDocuments_Visible.HasValue ?
                new ObjectParameter("Btn_DigitalDocuments_Visible", btn_DigitalDocuments_Visible) :
                new ObjectParameter("Btn_DigitalDocuments_Visible", typeof(bool));
    
            var btn_Images_TopParameter = btn_Images_Top.HasValue ?
                new ObjectParameter("Btn_Images_Top", btn_Images_Top) :
                new ObjectParameter("Btn_Images_Top", typeof(short));
    
            var btn_Images_LeftParameter = btn_Images_Left.HasValue ?
                new ObjectParameter("Btn_Images_Left", btn_Images_Left) :
                new ObjectParameter("Btn_Images_Left", typeof(short));
    
            var btn_Images_WidthParameter = btn_Images_Width.HasValue ?
                new ObjectParameter("Btn_Images_Width", btn_Images_Width) :
                new ObjectParameter("Btn_Images_Width", typeof(short));
    
            var btn_Images_HeightParameter = btn_Images_Height.HasValue ?
                new ObjectParameter("Btn_Images_Height", btn_Images_Height) :
                new ObjectParameter("Btn_Images_Height", typeof(short));
    
            var btn_Images_VisibleParameter = btn_Images_Visible.HasValue ?
                new ObjectParameter("Btn_Images_Visible", btn_Images_Visible) :
                new ObjectParameter("Btn_Images_Visible", typeof(bool));
    
            var btn_Assistants_TopParameter = btn_Assistants_Top.HasValue ?
                new ObjectParameter("Btn_Assistants_Top", btn_Assistants_Top) :
                new ObjectParameter("Btn_Assistants_Top", typeof(short));
    
            var btn_Assistants_LeftParameter = btn_Assistants_Left.HasValue ?
                new ObjectParameter("Btn_Assistants_Left", btn_Assistants_Left) :
                new ObjectParameter("Btn_Assistants_Left", typeof(short));
    
            var btn_Assistants_WidthParameter = btn_Assistants_Width.HasValue ?
                new ObjectParameter("Btn_Assistants_Width", btn_Assistants_Width) :
                new ObjectParameter("Btn_Assistants_Width", typeof(short));
    
            var btn_Assistants_HeightParameter = btn_Assistants_Height.HasValue ?
                new ObjectParameter("Btn_Assistants_Height", btn_Assistants_Height) :
                new ObjectParameter("Btn_Assistants_Height", typeof(short));
    
            var btn_Assistants_VisibleParameter = btn_Assistants_Visible.HasValue ?
                new ObjectParameter("Btn_Assistants_Visible", btn_Assistants_Visible) :
                new ObjectParameter("Btn_Assistants_Visible", typeof(bool));
    
            var edt_AssistantID_TopParameter = edt_AssistantID_Top.HasValue ?
                new ObjectParameter("Edt_AssistantID_Top", edt_AssistantID_Top) :
                new ObjectParameter("Edt_AssistantID_Top", typeof(short));
    
            var edt_AssistantID_LeftParameter = edt_AssistantID_Left.HasValue ?
                new ObjectParameter("Edt_AssistantID_Left", edt_AssistantID_Left) :
                new ObjectParameter("Edt_AssistantID_Left", typeof(short));
    
            var edt_AssistantID_WidthParameter = edt_AssistantID_Width.HasValue ?
                new ObjectParameter("Edt_AssistantID_Width", edt_AssistantID_Width) :
                new ObjectParameter("Edt_AssistantID_Width", typeof(short));
    
            var edt_AssistantID_HeightParameter = edt_AssistantID_Height.HasValue ?
                new ObjectParameter("Edt_AssistantID_Height", edt_AssistantID_Height) :
                new ObjectParameter("Edt_AssistantID_Height", typeof(short));
    
            var edt_AssistantID_VisibleParameter = edt_AssistantID_Visible.HasValue ?
                new ObjectParameter("Edt_AssistantID_Visible", edt_AssistantID_Visible) :
                new ObjectParameter("Edt_AssistantID_Visible", typeof(bool));
    
            var lbl_AssistantName_TopParameter = lbl_AssistantName_Top.HasValue ?
                new ObjectParameter("Lbl_AssistantName_Top", lbl_AssistantName_Top) :
                new ObjectParameter("Lbl_AssistantName_Top", typeof(short));
    
            var lbl_AssistantName_LeftParameter = lbl_AssistantName_Left.HasValue ?
                new ObjectParameter("Lbl_AssistantName_Left", lbl_AssistantName_Left) :
                new ObjectParameter("Lbl_AssistantName_Left", typeof(short));
    
            var lbl_AssistantName_WidthParameter = lbl_AssistantName_Width.HasValue ?
                new ObjectParameter("Lbl_AssistantName_Width", lbl_AssistantName_Width) :
                new ObjectParameter("Lbl_AssistantName_Width", typeof(short));
    
            var lbl_AssistantName_HeightParameter = lbl_AssistantName_Height.HasValue ?
                new ObjectParameter("Lbl_AssistantName_Height", lbl_AssistantName_Height) :
                new ObjectParameter("Lbl_AssistantName_Height", typeof(short));
    
            var lbl_AssistantName_VisibleParameter = lbl_AssistantName_Visible.HasValue ?
                new ObjectParameter("Lbl_AssistantName_Visible", lbl_AssistantName_Visible) :
                new ObjectParameter("Lbl_AssistantName_Visible", typeof(bool));
    
            var chk_AutoPrint_TopParameter = chk_AutoPrint_Top.HasValue ?
                new ObjectParameter("Chk_AutoPrint_Top", chk_AutoPrint_Top) :
                new ObjectParameter("Chk_AutoPrint_Top", typeof(short));
    
            var chk_AutoPrint_LeftParameter = chk_AutoPrint_Left.HasValue ?
                new ObjectParameter("Chk_AutoPrint_Left", chk_AutoPrint_Left) :
                new ObjectParameter("Chk_AutoPrint_Left", typeof(short));
    
            var chk_AutoPrint_WidthParameter = chk_AutoPrint_Width.HasValue ?
                new ObjectParameter("Chk_AutoPrint_Width", chk_AutoPrint_Width) :
                new ObjectParameter("Chk_AutoPrint_Width", typeof(short));
    
            var chk_AutoPrint_HeightParameter = chk_AutoPrint_Height.HasValue ?
                new ObjectParameter("Chk_AutoPrint_Height", chk_AutoPrint_Height) :
                new ObjectParameter("Chk_AutoPrint_Height", typeof(short));
    
            var chk_AutoPrint_VisibleParameter = chk_AutoPrint_Visible.HasValue ?
                new ObjectParameter("Chk_AutoPrint_Visible", chk_AutoPrint_Visible) :
                new ObjectParameter("Chk_AutoPrint_Visible", typeof(bool));
    
            var chk_AutoSMS_TopParameter = chk_AutoSMS_Top.HasValue ?
                new ObjectParameter("Chk_AutoSMS_Top", chk_AutoSMS_Top) :
                new ObjectParameter("Chk_AutoSMS_Top", typeof(short));
    
            var chk_AutoSMS_LeftParameter = chk_AutoSMS_Left.HasValue ?
                new ObjectParameter("Chk_AutoSMS_Left", chk_AutoSMS_Left) :
                new ObjectParameter("Chk_AutoSMS_Left", typeof(short));
    
            var chk_AutoSMS_WidthParameter = chk_AutoSMS_Width.HasValue ?
                new ObjectParameter("Chk_AutoSMS_Width", chk_AutoSMS_Width) :
                new ObjectParameter("Chk_AutoSMS_Width", typeof(short));
    
            var chk_AutoSMS_HeightParameter = chk_AutoSMS_Height.HasValue ?
                new ObjectParameter("Chk_AutoSMS_Height", chk_AutoSMS_Height) :
                new ObjectParameter("Chk_AutoSMS_Height", typeof(short));
    
            var chk_AutoSMS_VisibleParameter = chk_AutoSMS_Visible.HasValue ?
                new ObjectParameter("Chk_AutoSMS_Visible", chk_AutoSMS_Visible) :
                new ObjectParameter("Chk_AutoSMS_Visible", typeof(bool));
    
            var btn_Diagnosises_TopParameter = btn_Diagnosises_Top.HasValue ?
                new ObjectParameter("Btn_Diagnosises_Top", btn_Diagnosises_Top) :
                new ObjectParameter("Btn_Diagnosises_Top", typeof(short));
    
            var btn_Diagnosises_LeftParameter = btn_Diagnosises_Left.HasValue ?
                new ObjectParameter("Btn_Diagnosises_Left", btn_Diagnosises_Left) :
                new ObjectParameter("Btn_Diagnosises_Left", typeof(short));
    
            var btn_Diagnosises_WidthParameter = btn_Diagnosises_Width.HasValue ?
                new ObjectParameter("Btn_Diagnosises_Width", btn_Diagnosises_Width) :
                new ObjectParameter("Btn_Diagnosises_Width", typeof(short));
    
            var btn_Diagnosises_HeightParameter = btn_Diagnosises_Height.HasValue ?
                new ObjectParameter("Btn_Diagnosises_Height", btn_Diagnosises_Height) :
                new ObjectParameter("Btn_Diagnosises_Height", typeof(short));
    
            var btn_Diagnosises_VisibleParameter = btn_Diagnosises_Visible.HasValue ?
                new ObjectParameter("Btn_Diagnosises_Visible", btn_Diagnosises_Visible) :
                new ObjectParameter("Btn_Diagnosises_Visible", typeof(bool));
    
            var edt_DiagnosisID_TopParameter = edt_DiagnosisID_Top.HasValue ?
                new ObjectParameter("Edt_DiagnosisID_Top", edt_DiagnosisID_Top) :
                new ObjectParameter("Edt_DiagnosisID_Top", typeof(short));
    
            var edt_DiagnosisID_LeftParameter = edt_DiagnosisID_Left.HasValue ?
                new ObjectParameter("Edt_DiagnosisID_Left", edt_DiagnosisID_Left) :
                new ObjectParameter("Edt_DiagnosisID_Left", typeof(short));
    
            var edt_DiagnosisID_WidthParameter = edt_DiagnosisID_Width.HasValue ?
                new ObjectParameter("Edt_DiagnosisID_Width", edt_DiagnosisID_Width) :
                new ObjectParameter("Edt_DiagnosisID_Width", typeof(short));
    
            var edt_DiagnosisID_HeightParameter = edt_DiagnosisID_Height.HasValue ?
                new ObjectParameter("Edt_DiagnosisID_Height", edt_DiagnosisID_Height) :
                new ObjectParameter("Edt_DiagnosisID_Height", typeof(short));
    
            var edt_DiagnosisID_VisibleParameter = edt_DiagnosisID_Visible.HasValue ?
                new ObjectParameter("Edt_DiagnosisID_Visible", edt_DiagnosisID_Visible) :
                new ObjectParameter("Edt_DiagnosisID_Visible", typeof(bool));
    
            var lbl_DiagnosisName_TopParameter = lbl_DiagnosisName_Top.HasValue ?
                new ObjectParameter("Lbl_DiagnosisName_Top", lbl_DiagnosisName_Top) :
                new ObjectParameter("Lbl_DiagnosisName_Top", typeof(short));
    
            var lbl_DiagnosisName_LeftParameter = lbl_DiagnosisName_Left.HasValue ?
                new ObjectParameter("Lbl_DiagnosisName_Left", lbl_DiagnosisName_Left) :
                new ObjectParameter("Lbl_DiagnosisName_Left", typeof(short));
    
            var lbl_DiagnosisName_WidthParameter = lbl_DiagnosisName_Width.HasValue ?
                new ObjectParameter("Lbl_DiagnosisName_Width", lbl_DiagnosisName_Width) :
                new ObjectParameter("Lbl_DiagnosisName_Width", typeof(short));
    
            var lbl_DiagnosisName_HeightParameter = lbl_DiagnosisName_Height.HasValue ?
                new ObjectParameter("Lbl_DiagnosisName_Height", lbl_DiagnosisName_Height) :
                new ObjectParameter("Lbl_DiagnosisName_Height", typeof(short));
    
            var lbl_DiagnosisName_VisibleParameter = lbl_DiagnosisName_Visible.HasValue ?
                new ObjectParameter("Lbl_DiagnosisName_Visible", lbl_DiagnosisName_Visible) :
                new ObjectParameter("Lbl_DiagnosisName_Visible", typeof(bool));
    
            var btn_Therapies_TopParameter = btn_Therapies_Top.HasValue ?
                new ObjectParameter("Btn_Therapies_Top", btn_Therapies_Top) :
                new ObjectParameter("Btn_Therapies_Top", typeof(short));
    
            var btn_Therapies_LeftParameter = btn_Therapies_Left.HasValue ?
                new ObjectParameter("Btn_Therapies_Left", btn_Therapies_Left) :
                new ObjectParameter("Btn_Therapies_Left", typeof(short));
    
            var btn_Therapies_WidthParameter = btn_Therapies_Width.HasValue ?
                new ObjectParameter("Btn_Therapies_Width", btn_Therapies_Width) :
                new ObjectParameter("Btn_Therapies_Width", typeof(short));
    
            var btn_Therapies_HeightParameter = btn_Therapies_Height.HasValue ?
                new ObjectParameter("Btn_Therapies_Height", btn_Therapies_Height) :
                new ObjectParameter("Btn_Therapies_Height", typeof(short));
    
            var btn_Therapies_VisibleParameter = btn_Therapies_Visible.HasValue ?
                new ObjectParameter("Btn_Therapies_Visible", btn_Therapies_Visible) :
                new ObjectParameter("Btn_Therapies_Visible", typeof(bool));
    
            var edt_TherapyID_TopParameter = edt_TherapyID_Top.HasValue ?
                new ObjectParameter("Edt_TherapyID_Top", edt_TherapyID_Top) :
                new ObjectParameter("Edt_TherapyID_Top", typeof(short));
    
            var edt_TherapyID_LeftParameter = edt_TherapyID_Left.HasValue ?
                new ObjectParameter("Edt_TherapyID_Left", edt_TherapyID_Left) :
                new ObjectParameter("Edt_TherapyID_Left", typeof(short));
    
            var edt_TherapyID_WidthParameter = edt_TherapyID_Width.HasValue ?
                new ObjectParameter("Edt_TherapyID_Width", edt_TherapyID_Width) :
                new ObjectParameter("Edt_TherapyID_Width", typeof(short));
    
            var edt_TherapyID_HeightParameter = edt_TherapyID_Height.HasValue ?
                new ObjectParameter("Edt_TherapyID_Height", edt_TherapyID_Height) :
                new ObjectParameter("Edt_TherapyID_Height", typeof(short));
    
            var edt_TherapyID_VisibleParameter = edt_TherapyID_Visible.HasValue ?
                new ObjectParameter("Edt_TherapyID_Visible", edt_TherapyID_Visible) :
                new ObjectParameter("Edt_TherapyID_Visible", typeof(bool));
    
            var lbl_TherapyName_TopParameter = lbl_TherapyName_Top.HasValue ?
                new ObjectParameter("Lbl_TherapyName_Top", lbl_TherapyName_Top) :
                new ObjectParameter("Lbl_TherapyName_Top", typeof(short));
    
            var lbl_TherapyName_LeftParameter = lbl_TherapyName_Left.HasValue ?
                new ObjectParameter("Lbl_TherapyName_Left", lbl_TherapyName_Left) :
                new ObjectParameter("Lbl_TherapyName_Left", typeof(short));
    
            var lbl_TherapyName_WidthParameter = lbl_TherapyName_Width.HasValue ?
                new ObjectParameter("Lbl_TherapyName_Width", lbl_TherapyName_Width) :
                new ObjectParameter("Lbl_TherapyName_Width", typeof(short));
    
            var lbl_TherapyName_HeightParameter = lbl_TherapyName_Height.HasValue ?
                new ObjectParameter("Lbl_TherapyName_Height", lbl_TherapyName_Height) :
                new ObjectParameter("Lbl_TherapyName_Height", typeof(short));
    
            var lbl_TherapyName_VisibleParameter = lbl_TherapyName_Visible.HasValue ?
                new ObjectParameter("Lbl_TherapyName_Visible", lbl_TherapyName_Visible) :
                new ObjectParameter("Lbl_TherapyName_Visible", typeof(bool));
    
            var btn_NewPrescription_TopParameter = btn_NewPrescription_Top.HasValue ?
                new ObjectParameter("Btn_NewPrescription_Top", btn_NewPrescription_Top) :
                new ObjectParameter("Btn_NewPrescription_Top", typeof(short));
    
            var btn_NewPrescription_LeftParameter = btn_NewPrescription_Left.HasValue ?
                new ObjectParameter("Btn_NewPrescription_Left", btn_NewPrescription_Left) :
                new ObjectParameter("Btn_NewPrescription_Left", typeof(short));
    
            var btn_NewPrescription_WidthParameter = btn_NewPrescription_Width.HasValue ?
                new ObjectParameter("Btn_NewPrescription_Width", btn_NewPrescription_Width) :
                new ObjectParameter("Btn_NewPrescription_Width", typeof(short));
    
            var btn_NewPrescription_HeightParameter = btn_NewPrescription_Height.HasValue ?
                new ObjectParameter("Btn_NewPrescription_Height", btn_NewPrescription_Height) :
                new ObjectParameter("Btn_NewPrescription_Height", typeof(short));
    
            var btn_NewPrescription_VisibleParameter = btn_NewPrescription_Visible.HasValue ?
                new ObjectParameter("Btn_NewPrescription_Visible", btn_NewPrescription_Visible) :
                new ObjectParameter("Btn_NewPrescription_Visible", typeof(bool));
    
            var btn_Prescriptions_TopParameter = btn_Prescriptions_Top.HasValue ?
                new ObjectParameter("Btn_Prescriptions_Top", btn_Prescriptions_Top) :
                new ObjectParameter("Btn_Prescriptions_Top", typeof(short));
    
            var btn_Prescriptions_LeftParameter = btn_Prescriptions_Left.HasValue ?
                new ObjectParameter("Btn_Prescriptions_Left", btn_Prescriptions_Left) :
                new ObjectParameter("Btn_Prescriptions_Left", typeof(short));
    
            var btn_Prescriptions_WidthParameter = btn_Prescriptions_Width.HasValue ?
                new ObjectParameter("Btn_Prescriptions_Width", btn_Prescriptions_Width) :
                new ObjectParameter("Btn_Prescriptions_Width", typeof(short));
    
            var btn_Prescriptions_HeightParameter = btn_Prescriptions_Height.HasValue ?
                new ObjectParameter("Btn_Prescriptions_Height", btn_Prescriptions_Height) :
                new ObjectParameter("Btn_Prescriptions_Height", typeof(short));
    
            var btn_Prescriptions_VisibleParameter = btn_Prescriptions_Visible.HasValue ?
                new ObjectParameter("Btn_Prescriptions_Visible", btn_Prescriptions_Visible) :
                new ObjectParameter("Btn_Prescriptions_Visible", typeof(bool));
    
            var edt_PrescriptionID_TopParameter = edt_PrescriptionID_Top.HasValue ?
                new ObjectParameter("Edt_PrescriptionID_Top", edt_PrescriptionID_Top) :
                new ObjectParameter("Edt_PrescriptionID_Top", typeof(short));
    
            var edt_PrescriptionID_LeftParameter = edt_PrescriptionID_Left.HasValue ?
                new ObjectParameter("Edt_PrescriptionID_Left", edt_PrescriptionID_Left) :
                new ObjectParameter("Edt_PrescriptionID_Left", typeof(short));
    
            var edt_PrescriptionID_WidthParameter = edt_PrescriptionID_Width.HasValue ?
                new ObjectParameter("Edt_PrescriptionID_Width", edt_PrescriptionID_Width) :
                new ObjectParameter("Edt_PrescriptionID_Width", typeof(short));
    
            var edt_PrescriptionID_HeightParameter = edt_PrescriptionID_Height.HasValue ?
                new ObjectParameter("Edt_PrescriptionID_Height", edt_PrescriptionID_Height) :
                new ObjectParameter("Edt_PrescriptionID_Height", typeof(short));
    
            var edt_PrescriptionID_VisibleParameter = edt_PrescriptionID_Visible.HasValue ?
                new ObjectParameter("Edt_PrescriptionID_Visible", edt_PrescriptionID_Visible) :
                new ObjectParameter("Edt_PrescriptionID_Visible", typeof(bool));
    
            var btn_NewLaboratory_TopParameter = btn_NewLaboratory_Top.HasValue ?
                new ObjectParameter("Btn_NewLaboratory_Top", btn_NewLaboratory_Top) :
                new ObjectParameter("Btn_NewLaboratory_Top", typeof(short));
    
            var btn_NewLaboratory_LeftParameter = btn_NewLaboratory_Left.HasValue ?
                new ObjectParameter("Btn_NewLaboratory_Left", btn_NewLaboratory_Left) :
                new ObjectParameter("Btn_NewLaboratory_Left", typeof(short));
    
            var btn_NewLaboratory_WidthParameter = btn_NewLaboratory_Width.HasValue ?
                new ObjectParameter("Btn_NewLaboratory_Width", btn_NewLaboratory_Width) :
                new ObjectParameter("Btn_NewLaboratory_Width", typeof(short));
    
            var btn_NewLaboratory_HeightParameter = btn_NewLaboratory_Height.HasValue ?
                new ObjectParameter("Btn_NewLaboratory_Height", btn_NewLaboratory_Height) :
                new ObjectParameter("Btn_NewLaboratory_Height", typeof(short));
    
            var btn_NewLaboratory_VisibleParameter = btn_NewLaboratory_Visible.HasValue ?
                new ObjectParameter("Btn_NewLaboratory_Visible", btn_NewLaboratory_Visible) :
                new ObjectParameter("Btn_NewLaboratory_Visible", typeof(bool));
    
            var btn_Laboratories_TopParameter = btn_Laboratories_Top.HasValue ?
                new ObjectParameter("Btn_Laboratories_Top", btn_Laboratories_Top) :
                new ObjectParameter("Btn_Laboratories_Top", typeof(short));
    
            var btn_Laboratories_LeftParameter = btn_Laboratories_Left.HasValue ?
                new ObjectParameter("Btn_Laboratories_Left", btn_Laboratories_Left) :
                new ObjectParameter("Btn_Laboratories_Left", typeof(short));
    
            var btn_Laboratories_WidthParameter = btn_Laboratories_Width.HasValue ?
                new ObjectParameter("Btn_Laboratories_Width", btn_Laboratories_Width) :
                new ObjectParameter("Btn_Laboratories_Width", typeof(short));
    
            var btn_Laboratories_HeightParameter = btn_Laboratories_Height.HasValue ?
                new ObjectParameter("Btn_Laboratories_Height", btn_Laboratories_Height) :
                new ObjectParameter("Btn_Laboratories_Height", typeof(short));
    
            var btn_Laboratories_VisibleParameter = btn_Laboratories_Visible.HasValue ?
                new ObjectParameter("Btn_Laboratories_Visible", btn_Laboratories_Visible) :
                new ObjectParameter("Btn_Laboratories_Visible", typeof(bool));
    
            var edt_LaboratoryID_TopParameter = edt_LaboratoryID_Top.HasValue ?
                new ObjectParameter("Edt_LaboratoryID_Top", edt_LaboratoryID_Top) :
                new ObjectParameter("Edt_LaboratoryID_Top", typeof(short));
    
            var edt_LaboratoryID_LeftParameter = edt_LaboratoryID_Left.HasValue ?
                new ObjectParameter("Edt_LaboratoryID_Left", edt_LaboratoryID_Left) :
                new ObjectParameter("Edt_LaboratoryID_Left", typeof(short));
    
            var edt_LaboratoryID_WidthParameter = edt_LaboratoryID_Width.HasValue ?
                new ObjectParameter("Edt_LaboratoryID_Width", edt_LaboratoryID_Width) :
                new ObjectParameter("Edt_LaboratoryID_Width", typeof(short));
    
            var edt_LaboratoryID_HeightParameter = edt_LaboratoryID_Height.HasValue ?
                new ObjectParameter("Edt_LaboratoryID_Height", edt_LaboratoryID_Height) :
                new ObjectParameter("Edt_LaboratoryID_Height", typeof(short));
    
            var edt_LaboratoryID_VisibleParameter = edt_LaboratoryID_Visible.HasValue ?
                new ObjectParameter("Edt_LaboratoryID_Visible", edt_LaboratoryID_Visible) :
                new ObjectParameter("Edt_LaboratoryID_Visible", typeof(bool));
    
            var btn_ReceptionStates_TopParameter = btn_ReceptionStates_Top.HasValue ?
                new ObjectParameter("Btn_ReceptionStates_Top", btn_ReceptionStates_Top) :
                new ObjectParameter("Btn_ReceptionStates_Top", typeof(short));
    
            var btn_ReceptionStates_LeftParameter = btn_ReceptionStates_Left.HasValue ?
                new ObjectParameter("Btn_ReceptionStates_Left", btn_ReceptionStates_Left) :
                new ObjectParameter("Btn_ReceptionStates_Left", typeof(short));
    
            var btn_ReceptionStates_WidthParameter = btn_ReceptionStates_Width.HasValue ?
                new ObjectParameter("Btn_ReceptionStates_Width", btn_ReceptionStates_Width) :
                new ObjectParameter("Btn_ReceptionStates_Width", typeof(short));
    
            var btn_ReceptionStates_HeightParameter = btn_ReceptionStates_Height.HasValue ?
                new ObjectParameter("Btn_ReceptionStates_Height", btn_ReceptionStates_Height) :
                new ObjectParameter("Btn_ReceptionStates_Height", typeof(short));
    
            var btn_ReceptionStates_VisibleParameter = btn_ReceptionStates_Visible.HasValue ?
                new ObjectParameter("Btn_ReceptionStates_Visible", btn_ReceptionStates_Visible) :
                new ObjectParameter("Btn_ReceptionStates_Visible", typeof(bool));
    
            var cbb_ReceptionStates_TopParameter = cbb_ReceptionStates_Top.HasValue ?
                new ObjectParameter("Cbb_ReceptionStates_Top", cbb_ReceptionStates_Top) :
                new ObjectParameter("Cbb_ReceptionStates_Top", typeof(short));
    
            var cbb_ReceptionStates_LeftParameter = cbb_ReceptionStates_Left.HasValue ?
                new ObjectParameter("Cbb_ReceptionStates_Left", cbb_ReceptionStates_Left) :
                new ObjectParameter("Cbb_ReceptionStates_Left", typeof(short));
    
            var cbb_ReceptionStates_WidthParameter = cbb_ReceptionStates_Width.HasValue ?
                new ObjectParameter("Cbb_ReceptionStates_Width", cbb_ReceptionStates_Width) :
                new ObjectParameter("Cbb_ReceptionStates_Width", typeof(short));
    
            var cbb_ReceptionStates_HeightParameter = cbb_ReceptionStates_Height.HasValue ?
                new ObjectParameter("Cbb_ReceptionStates_Height", cbb_ReceptionStates_Height) :
                new ObjectParameter("Cbb_ReceptionStates_Height", typeof(short));
    
            var cbb_ReceptionStates_VisibleParameter = cbb_ReceptionStates_Visible.HasValue ?
                new ObjectParameter("Cbb_ReceptionStates_Visible", cbb_ReceptionStates_Visible) :
                new ObjectParameter("Cbb_ReceptionStates_Visible", typeof(bool));
    
            var btn_PaymentStates_TopParameter = btn_PaymentStates_Top.HasValue ?
                new ObjectParameter("Btn_PaymentStates_Top", btn_PaymentStates_Top) :
                new ObjectParameter("Btn_PaymentStates_Top", typeof(short));
    
            var btn_PaymentStates_LeftParameter = btn_PaymentStates_Left.HasValue ?
                new ObjectParameter("Btn_PaymentStates_Left", btn_PaymentStates_Left) :
                new ObjectParameter("Btn_PaymentStates_Left", typeof(short));
    
            var btn_PaymentStates_WidthParameter = btn_PaymentStates_Width.HasValue ?
                new ObjectParameter("Btn_PaymentStates_Width", btn_PaymentStates_Width) :
                new ObjectParameter("Btn_PaymentStates_Width", typeof(short));
    
            var btn_PaymentStates_HeightParameter = btn_PaymentStates_Height.HasValue ?
                new ObjectParameter("Btn_PaymentStates_Height", btn_PaymentStates_Height) :
                new ObjectParameter("Btn_PaymentStates_Height", typeof(short));
    
            var btn_PaymentStates_VisibleParameter = btn_PaymentStates_Visible.HasValue ?
                new ObjectParameter("Btn_PaymentStates_Visible", btn_PaymentStates_Visible) :
                new ObjectParameter("Btn_PaymentStates_Visible", typeof(bool));
    
            var cbb_PaymentStates_TopParameter = cbb_PaymentStates_Top.HasValue ?
                new ObjectParameter("Cbb_PaymentStates_Top", cbb_PaymentStates_Top) :
                new ObjectParameter("Cbb_PaymentStates_Top", typeof(short));
    
            var cbb_PaymentStates_LeftParameter = cbb_PaymentStates_Left.HasValue ?
                new ObjectParameter("Cbb_PaymentStates_Left", cbb_PaymentStates_Left) :
                new ObjectParameter("Cbb_PaymentStates_Left", typeof(short));
    
            var cbb_PaymentStates_WidthParameter = cbb_PaymentStates_Width.HasValue ?
                new ObjectParameter("Cbb_PaymentStates_Width", cbb_PaymentStates_Width) :
                new ObjectParameter("Cbb_PaymentStates_Width", typeof(short));
    
            var cbb_PaymentStates_HeightParameter = cbb_PaymentStates_Height.HasValue ?
                new ObjectParameter("Cbb_PaymentStates_Height", cbb_PaymentStates_Height) :
                new ObjectParameter("Cbb_PaymentStates_Height", typeof(short));
    
            var cbb_PaymentStates_VisibleParameter = cbb_PaymentStates_Visible.HasValue ?
                new ObjectParameter("Cbb_PaymentStates_Visible", cbb_PaymentStates_Visible) :
                new ObjectParameter("Cbb_PaymentStates_Visible", typeof(bool));
    
            var grb_Prices_TopParameter = grb_Prices_Top.HasValue ?
                new ObjectParameter("Grb_Prices_Top", grb_Prices_Top) :
                new ObjectParameter("Grb_Prices_Top", typeof(short));
    
            var grb_Prices_LeftParameter = grb_Prices_Left.HasValue ?
                new ObjectParameter("Grb_Prices_Left", grb_Prices_Left) :
                new ObjectParameter("Grb_Prices_Left", typeof(short));
    
            var grb_Prices_WidthParameter = grb_Prices_Width.HasValue ?
                new ObjectParameter("Grb_Prices_Width", grb_Prices_Width) :
                new ObjectParameter("Grb_Prices_Width", typeof(short));
    
            var grb_Prices_HeightParameter = grb_Prices_Height.HasValue ?
                new ObjectParameter("Grb_Prices_Height", grb_Prices_Height) :
                new ObjectParameter("Grb_Prices_Height", typeof(short));
    
            var grb_Prices_VisibleParameter = grb_Prices_Visible.HasValue ?
                new ObjectParameter("Grb_Prices_Visible", grb_Prices_Visible) :
                new ObjectParameter("Grb_Prices_Visible", typeof(bool));
    
            var edt_ServicePrice_TopParameter = edt_ServicePrice_Top.HasValue ?
                new ObjectParameter("Edt_ServicePrice_Top", edt_ServicePrice_Top) :
                new ObjectParameter("Edt_ServicePrice_Top", typeof(short));
    
            var edt_ServicePrice_LeftParameter = edt_ServicePrice_Left.HasValue ?
                new ObjectParameter("Edt_ServicePrice_Left", edt_ServicePrice_Left) :
                new ObjectParameter("Edt_ServicePrice_Left", typeof(short));
    
            var edt_ServicePrice_WidthParameter = edt_ServicePrice_Width.HasValue ?
                new ObjectParameter("Edt_ServicePrice_Width", edt_ServicePrice_Width) :
                new ObjectParameter("Edt_ServicePrice_Width", typeof(short));
    
            var edt_ServicePrice_HeightParameter = edt_ServicePrice_Height.HasValue ?
                new ObjectParameter("Edt_ServicePrice_Height", edt_ServicePrice_Height) :
                new ObjectParameter("Edt_ServicePrice_Height", typeof(short));
    
            var edt_ServicePrice_VisibleParameter = edt_ServicePrice_Visible.HasValue ?
                new ObjectParameter("Edt_ServicePrice_Visible", edt_ServicePrice_Visible) :
                new ObjectParameter("Edt_ServicePrice_Visible", typeof(bool));
    
            var lbl_ServicePrice_TopParameter = lbl_ServicePrice_Top.HasValue ?
                new ObjectParameter("Lbl_ServicePrice_Top", lbl_ServicePrice_Top) :
                new ObjectParameter("Lbl_ServicePrice_Top", typeof(short));
    
            var lbl_ServicePrice_LeftParameter = lbl_ServicePrice_Left.HasValue ?
                new ObjectParameter("Lbl_ServicePrice_Left", lbl_ServicePrice_Left) :
                new ObjectParameter("Lbl_ServicePrice_Left", typeof(short));
    
            var lbl_ServicePrice_WidthParameter = lbl_ServicePrice_Width.HasValue ?
                new ObjectParameter("Lbl_ServicePrice_Width", lbl_ServicePrice_Width) :
                new ObjectParameter("Lbl_ServicePrice_Width", typeof(short));
    
            var lbl_ServicePrice_HeightParameter = lbl_ServicePrice_Height.HasValue ?
                new ObjectParameter("Lbl_ServicePrice_Height", lbl_ServicePrice_Height) :
                new ObjectParameter("Lbl_ServicePrice_Height", typeof(short));
    
            var lbl_ServicePrice_VisibleParameter = lbl_ServicePrice_Visible.HasValue ?
                new ObjectParameter("Lbl_ServicePrice_Visible", lbl_ServicePrice_Visible) :
                new ObjectParameter("Lbl_ServicePrice_Visible", typeof(bool));
    
            var edt_ItemsPrice_TopParameter = edt_ItemsPrice_Top.HasValue ?
                new ObjectParameter("Edt_ItemsPrice_Top", edt_ItemsPrice_Top) :
                new ObjectParameter("Edt_ItemsPrice_Top", typeof(short));
    
            var edt_ItemsPrice_LeftParameter = edt_ItemsPrice_Left.HasValue ?
                new ObjectParameter("Edt_ItemsPrice_Left", edt_ItemsPrice_Left) :
                new ObjectParameter("Edt_ItemsPrice_Left", typeof(short));
    
            var edt_ItemsPrice_WidthParameter = edt_ItemsPrice_Width.HasValue ?
                new ObjectParameter("Edt_ItemsPrice_Width", edt_ItemsPrice_Width) :
                new ObjectParameter("Edt_ItemsPrice_Width", typeof(short));
    
            var edt_ItemsPrice_HeightParameter = edt_ItemsPrice_Height.HasValue ?
                new ObjectParameter("Edt_ItemsPrice_Height", edt_ItemsPrice_Height) :
                new ObjectParameter("Edt_ItemsPrice_Height", typeof(short));
    
            var edt_ItemsPrice_VisibleParameter = edt_ItemsPrice_Visible.HasValue ?
                new ObjectParameter("Edt_ItemsPrice_Visible", edt_ItemsPrice_Visible) :
                new ObjectParameter("Edt_ItemsPrice_Visible", typeof(bool));
    
            var chk_SetItemsPrice_TopParameter = chk_SetItemsPrice_Top.HasValue ?
                new ObjectParameter("Chk_SetItemsPrice_Top", chk_SetItemsPrice_Top) :
                new ObjectParameter("Chk_SetItemsPrice_Top", typeof(short));
    
            var chk_SetItemsPrice_LeftParameter = chk_SetItemsPrice_Left.HasValue ?
                new ObjectParameter("Chk_SetItemsPrice_Left", chk_SetItemsPrice_Left) :
                new ObjectParameter("Chk_SetItemsPrice_Left", typeof(short));
    
            var chk_SetItemsPrice_WidthParameter = chk_SetItemsPrice_Width.HasValue ?
                new ObjectParameter("Chk_SetItemsPrice_Width", chk_SetItemsPrice_Width) :
                new ObjectParameter("Chk_SetItemsPrice_Width", typeof(short));
    
            var chk_SetItemsPrice_HeightParameter = chk_SetItemsPrice_Height.HasValue ?
                new ObjectParameter("Chk_SetItemsPrice_Height", chk_SetItemsPrice_Height) :
                new ObjectParameter("Chk_SetItemsPrice_Height", typeof(short));
    
            var chk_SetItemsPrice_VisibleParameter = chk_SetItemsPrice_Visible.HasValue ?
                new ObjectParameter("Chk_SetItemsPrice_Visible", chk_SetItemsPrice_Visible) :
                new ObjectParameter("Chk_SetItemsPrice_Visible", typeof(bool));
    
            var edt_PatientPrice_TopParameter = edt_PatientPrice_Top.HasValue ?
                new ObjectParameter("Edt_PatientPrice_Top", edt_PatientPrice_Top) :
                new ObjectParameter("Edt_PatientPrice_Top", typeof(short));
    
            var edt_PatientPrice_LeftParameter = edt_PatientPrice_Left.HasValue ?
                new ObjectParameter("Edt_PatientPrice_Left", edt_PatientPrice_Left) :
                new ObjectParameter("Edt_PatientPrice_Left", typeof(short));
    
            var edt_PatientPrice_WidthParameter = edt_PatientPrice_Width.HasValue ?
                new ObjectParameter("Edt_PatientPrice_Width", edt_PatientPrice_Width) :
                new ObjectParameter("Edt_PatientPrice_Width", typeof(short));
    
            var edt_PatientPrice_HeightParameter = edt_PatientPrice_Height.HasValue ?
                new ObjectParameter("Edt_PatientPrice_Height", edt_PatientPrice_Height) :
                new ObjectParameter("Edt_PatientPrice_Height", typeof(short));
    
            var edt_PatientPrice_VisibleParameter = edt_PatientPrice_Visible.HasValue ?
                new ObjectParameter("Edt_PatientPrice_Visible", edt_PatientPrice_Visible) :
                new ObjectParameter("Edt_PatientPrice_Visible", typeof(bool));
    
            var lbl_PatientPrice_TopParameter = lbl_PatientPrice_Top.HasValue ?
                new ObjectParameter("Lbl_PatientPrice_Top", lbl_PatientPrice_Top) :
                new ObjectParameter("Lbl_PatientPrice_Top", typeof(short));
    
            var lbl_PatientPrice_LeftParameter = lbl_PatientPrice_Left.HasValue ?
                new ObjectParameter("Lbl_PatientPrice_Left", lbl_PatientPrice_Left) :
                new ObjectParameter("Lbl_PatientPrice_Left", typeof(short));
    
            var lbl_PatientPrice_WidthParameter = lbl_PatientPrice_Width.HasValue ?
                new ObjectParameter("Lbl_PatientPrice_Width", lbl_PatientPrice_Width) :
                new ObjectParameter("Lbl_PatientPrice_Width", typeof(short));
    
            var lbl_PatientPrice_HeightParameter = lbl_PatientPrice_Height.HasValue ?
                new ObjectParameter("Lbl_PatientPrice_Height", lbl_PatientPrice_Height) :
                new ObjectParameter("Lbl_PatientPrice_Height", typeof(short));
    
            var lbl_PatientPrice_VisibleParameter = lbl_PatientPrice_Visible.HasValue ?
                new ObjectParameter("Lbl_PatientPrice_Visible", lbl_PatientPrice_Visible) :
                new ObjectParameter("Lbl_PatientPrice_Visible", typeof(bool));
    
            var edt_InsurancePrice_TopParameter = edt_InsurancePrice_Top.HasValue ?
                new ObjectParameter("Edt_InsurancePrice_Top", edt_InsurancePrice_Top) :
                new ObjectParameter("Edt_InsurancePrice_Top", typeof(short));
    
            var edt_InsurancePrice_LeftParameter = edt_InsurancePrice_Left.HasValue ?
                new ObjectParameter("Edt_InsurancePrice_Left", edt_InsurancePrice_Left) :
                new ObjectParameter("Edt_InsurancePrice_Left", typeof(short));
    
            var edt_InsurancePrice_WidthParameter = edt_InsurancePrice_Width.HasValue ?
                new ObjectParameter("Edt_InsurancePrice_Width", edt_InsurancePrice_Width) :
                new ObjectParameter("Edt_InsurancePrice_Width", typeof(short));
    
            var edt_InsurancePrice_HeightParameter = edt_InsurancePrice_Height.HasValue ?
                new ObjectParameter("Edt_InsurancePrice_Height", edt_InsurancePrice_Height) :
                new ObjectParameter("Edt_InsurancePrice_Height", typeof(short));
    
            var edt_InsurancePrice_VisibleParameter = edt_InsurancePrice_Visible.HasValue ?
                new ObjectParameter("Edt_InsurancePrice_Visible", edt_InsurancePrice_Visible) :
                new ObjectParameter("Edt_InsurancePrice_Visible", typeof(bool));
    
            var lbl_InsurancePrice_TopParameter = lbl_InsurancePrice_Top.HasValue ?
                new ObjectParameter("Lbl_InsurancePrice_Top", lbl_InsurancePrice_Top) :
                new ObjectParameter("Lbl_InsurancePrice_Top", typeof(short));
    
            var lbl_InsurancePrice_LeftParameter = lbl_InsurancePrice_Left.HasValue ?
                new ObjectParameter("Lbl_InsurancePrice_Left", lbl_InsurancePrice_Left) :
                new ObjectParameter("Lbl_InsurancePrice_Left", typeof(short));
    
            var lbl_InsurancePrice_WidthParameter = lbl_InsurancePrice_Width.HasValue ?
                new ObjectParameter("Lbl_InsurancePrice_Width", lbl_InsurancePrice_Width) :
                new ObjectParameter("Lbl_InsurancePrice_Width", typeof(short));
    
            var lbl_InsurancePrice_HeightParameter = lbl_InsurancePrice_Height.HasValue ?
                new ObjectParameter("Lbl_InsurancePrice_Height", lbl_InsurancePrice_Height) :
                new ObjectParameter("Lbl_InsurancePrice_Height", typeof(short));
    
            var lbl_InsurancePrice_VisibleParameter = lbl_InsurancePrice_Visible.HasValue ?
                new ObjectParameter("Lbl_InsurancePrice_Visible", lbl_InsurancePrice_Visible) :
                new ObjectParameter("Lbl_InsurancePrice_Visible", typeof(bool));
    
            var edt_MarginPrice_TopParameter = edt_MarginPrice_Top.HasValue ?
                new ObjectParameter("Edt_MarginPrice_Top", edt_MarginPrice_Top) :
                new ObjectParameter("Edt_MarginPrice_Top", typeof(short));
    
            var edt_MarginPrice_LeftParameter = edt_MarginPrice_Left.HasValue ?
                new ObjectParameter("Edt_MarginPrice_Left", edt_MarginPrice_Left) :
                new ObjectParameter("Edt_MarginPrice_Left", typeof(short));
    
            var edt_MarginPrice_WidthParameter = edt_MarginPrice_Width.HasValue ?
                new ObjectParameter("Edt_MarginPrice_Width", edt_MarginPrice_Width) :
                new ObjectParameter("Edt_MarginPrice_Width", typeof(short));
    
            var edt_MarginPrice_HeightParameter = edt_MarginPrice_Height.HasValue ?
                new ObjectParameter("Edt_MarginPrice_Height", edt_MarginPrice_Height) :
                new ObjectParameter("Edt_MarginPrice_Height", typeof(short));
    
            var edt_MarginPrice_VisibleParameter = edt_MarginPrice_Visible.HasValue ?
                new ObjectParameter("Edt_MarginPrice_Visible", edt_MarginPrice_Visible) :
                new ObjectParameter("Edt_MarginPrice_Visible", typeof(bool));
    
            var lbl_MarginPrice_TopParameter = lbl_MarginPrice_Top.HasValue ?
                new ObjectParameter("Lbl_MarginPrice_Top", lbl_MarginPrice_Top) :
                new ObjectParameter("Lbl_MarginPrice_Top", typeof(short));
    
            var lbl_MarginPrice_LeftParameter = lbl_MarginPrice_Left.HasValue ?
                new ObjectParameter("Lbl_MarginPrice_Left", lbl_MarginPrice_Left) :
                new ObjectParameter("Lbl_MarginPrice_Left", typeof(short));
    
            var lbl_MarginPrice_WidthParameter = lbl_MarginPrice_Width.HasValue ?
                new ObjectParameter("Lbl_MarginPrice_Width", lbl_MarginPrice_Width) :
                new ObjectParameter("Lbl_MarginPrice_Width", typeof(short));
    
            var lbl_MarginPrice_HeightParameter = lbl_MarginPrice_Height.HasValue ?
                new ObjectParameter("Lbl_MarginPrice_Height", lbl_MarginPrice_Height) :
                new ObjectParameter("Lbl_MarginPrice_Height", typeof(short));
    
            var lbl_MarginPrice_VisibleParameter = lbl_MarginPrice_Visible.HasValue ?
                new ObjectParameter("Lbl_MarginPrice_Visible", lbl_MarginPrice_Visible) :
                new ObjectParameter("Lbl_MarginPrice_Visible", typeof(bool));
    
            var edt_DoctorPrice_TopParameter = edt_DoctorPrice_Top.HasValue ?
                new ObjectParameter("Edt_DoctorPrice_Top", edt_DoctorPrice_Top) :
                new ObjectParameter("Edt_DoctorPrice_Top", typeof(short));
    
            var edt_DoctorPrice_LeftParameter = edt_DoctorPrice_Left.HasValue ?
                new ObjectParameter("Edt_DoctorPrice_Left", edt_DoctorPrice_Left) :
                new ObjectParameter("Edt_DoctorPrice_Left", typeof(short));
    
            var edt_DoctorPrice_WidthParameter = edt_DoctorPrice_Width.HasValue ?
                new ObjectParameter("Edt_DoctorPrice_Width", edt_DoctorPrice_Width) :
                new ObjectParameter("Edt_DoctorPrice_Width", typeof(short));
    
            var edt_DoctorPrice_HeightParameter = edt_DoctorPrice_Height.HasValue ?
                new ObjectParameter("Edt_DoctorPrice_Height", edt_DoctorPrice_Height) :
                new ObjectParameter("Edt_DoctorPrice_Height", typeof(short));
    
            var edt_DoctorPrice_VisibleParameter = edt_DoctorPrice_Visible.HasValue ?
                new ObjectParameter("Edt_DoctorPrice_Visible", edt_DoctorPrice_Visible) :
                new ObjectParameter("Edt_DoctorPrice_Visible", typeof(bool));
    
            var lbl_DoctorPrice_TopParameter = lbl_DoctorPrice_Top.HasValue ?
                new ObjectParameter("Lbl_DoctorPrice_Top", lbl_DoctorPrice_Top) :
                new ObjectParameter("Lbl_DoctorPrice_Top", typeof(short));
    
            var lbl_DoctorPrice_LeftParameter = lbl_DoctorPrice_Left.HasValue ?
                new ObjectParameter("Lbl_DoctorPrice_Left", lbl_DoctorPrice_Left) :
                new ObjectParameter("Lbl_DoctorPrice_Left", typeof(short));
    
            var lbl_DoctorPrice_WidthParameter = lbl_DoctorPrice_Width.HasValue ?
                new ObjectParameter("Lbl_DoctorPrice_Width", lbl_DoctorPrice_Width) :
                new ObjectParameter("Lbl_DoctorPrice_Width", typeof(short));
    
            var lbl_DoctorPrice_HeightParameter = lbl_DoctorPrice_Height.HasValue ?
                new ObjectParameter("Lbl_DoctorPrice_Height", lbl_DoctorPrice_Height) :
                new ObjectParameter("Lbl_DoctorPrice_Height", typeof(short));
    
            var lbl_DoctorPrice_VisibleParameter = lbl_DoctorPrice_Visible.HasValue ?
                new ObjectParameter("Lbl_DoctorPrice_Visible", lbl_DoctorPrice_Visible) :
                new ObjectParameter("Lbl_DoctorPrice_Visible", typeof(bool));
    
            var edt_AssistantPrice_TopParameter = edt_AssistantPrice_Top.HasValue ?
                new ObjectParameter("Edt_AssistantPrice_Top", edt_AssistantPrice_Top) :
                new ObjectParameter("Edt_AssistantPrice_Top", typeof(short));
    
            var edt_AssistantPrice_LeftParameter = edt_AssistantPrice_Left.HasValue ?
                new ObjectParameter("Edt_AssistantPrice_Left", edt_AssistantPrice_Left) :
                new ObjectParameter("Edt_AssistantPrice_Left", typeof(short));
    
            var edt_AssistantPrice_WidthParameter = edt_AssistantPrice_Width.HasValue ?
                new ObjectParameter("Edt_AssistantPrice_Width", edt_AssistantPrice_Width) :
                new ObjectParameter("Edt_AssistantPrice_Width", typeof(short));
    
            var edt_AssistantPrice_HeightParameter = edt_AssistantPrice_Height.HasValue ?
                new ObjectParameter("Edt_AssistantPrice_Height", edt_AssistantPrice_Height) :
                new ObjectParameter("Edt_AssistantPrice_Height", typeof(short));
    
            var edt_AssistantPrice_VisibleParameter = edt_AssistantPrice_Visible.HasValue ?
                new ObjectParameter("Edt_AssistantPrice_Visible", edt_AssistantPrice_Visible) :
                new ObjectParameter("Edt_AssistantPrice_Visible", typeof(bool));
    
            var lbl_AssistantPrice_TopParameter = lbl_AssistantPrice_Top.HasValue ?
                new ObjectParameter("Lbl_AssistantPrice_Top", lbl_AssistantPrice_Top) :
                new ObjectParameter("Lbl_AssistantPrice_Top", typeof(short));
    
            var lbl_AssistantPrice_LeftParameter = lbl_AssistantPrice_Left.HasValue ?
                new ObjectParameter("Lbl_AssistantPrice_Left", lbl_AssistantPrice_Left) :
                new ObjectParameter("Lbl_AssistantPrice_Left", typeof(short));
    
            var lbl_AssistantPrice_WidthParameter = lbl_AssistantPrice_Width.HasValue ?
                new ObjectParameter("Lbl_AssistantPrice_Width", lbl_AssistantPrice_Width) :
                new ObjectParameter("Lbl_AssistantPrice_Width", typeof(short));
    
            var lbl_AssistantPrice_HeightParameter = lbl_AssistantPrice_Height.HasValue ?
                new ObjectParameter("Lbl_AssistantPrice_Height", lbl_AssistantPrice_Height) :
                new ObjectParameter("Lbl_AssistantPrice_Height", typeof(short));
    
            var lbl_AssistantPrice_VisibleParameter = lbl_AssistantPrice_Visible.HasValue ?
                new ObjectParameter("Lbl_AssistantPrice_Visible", lbl_AssistantPrice_Visible) :
                new ObjectParameter("Lbl_AssistantPrice_Visible", typeof(bool));
    
            var edt_Takh_TopParameter = edt_Takh_Top.HasValue ?
                new ObjectParameter("Edt_Takh_Top", edt_Takh_Top) :
                new ObjectParameter("Edt_Takh_Top", typeof(short));
    
            var edt_Takh_LeftParameter = edt_Takh_Left.HasValue ?
                new ObjectParameter("Edt_Takh_Left", edt_Takh_Left) :
                new ObjectParameter("Edt_Takh_Left", typeof(short));
    
            var edt_Takh_WidthParameter = edt_Takh_Width.HasValue ?
                new ObjectParameter("Edt_Takh_Width", edt_Takh_Width) :
                new ObjectParameter("Edt_Takh_Width", typeof(short));
    
            var edt_Takh_HeightParameter = edt_Takh_Height.HasValue ?
                new ObjectParameter("Edt_Takh_Height", edt_Takh_Height) :
                new ObjectParameter("Edt_Takh_Height", typeof(short));
    
            var edt_Takh_VisibleParameter = edt_Takh_Visible.HasValue ?
                new ObjectParameter("Edt_Takh_Visible", edt_Takh_Visible) :
                new ObjectParameter("Edt_Takh_Visible", typeof(bool));
    
            var lbl_Takh_TopParameter = lbl_Takh_Top.HasValue ?
                new ObjectParameter("Lbl_Takh_Top", lbl_Takh_Top) :
                new ObjectParameter("Lbl_Takh_Top", typeof(short));
    
            var lbl_Takh_LeftParameter = lbl_Takh_Left.HasValue ?
                new ObjectParameter("Lbl_Takh_Left", lbl_Takh_Left) :
                new ObjectParameter("Lbl_Takh_Left", typeof(short));
    
            var lbl_Takh_WidthParameter = lbl_Takh_Width.HasValue ?
                new ObjectParameter("Lbl_Takh_Width", lbl_Takh_Width) :
                new ObjectParameter("Lbl_Takh_Width", typeof(short));
    
            var lbl_Takh_HeightParameter = lbl_Takh_Height.HasValue ?
                new ObjectParameter("Lbl_Takh_Height", lbl_Takh_Height) :
                new ObjectParameter("Lbl_Takh_Height", typeof(short));
    
            var lbl_Takh_VisibleParameter = lbl_Takh_Visible.HasValue ?
                new ObjectParameter("Lbl_Takh_Visible", lbl_Takh_Visible) :
                new ObjectParameter("Lbl_Takh_Visible", typeof(bool));
    
            var shp_Prices0_TopParameter = shp_Prices0_Top.HasValue ?
                new ObjectParameter("Shp_Prices0_Top", shp_Prices0_Top) :
                new ObjectParameter("Shp_Prices0_Top", typeof(short));
    
            var shp_Prices0_LeftParameter = shp_Prices0_Left.HasValue ?
                new ObjectParameter("Shp_Prices0_Left", shp_Prices0_Left) :
                new ObjectParameter("Shp_Prices0_Left", typeof(short));
    
            var shp_Prices0_WidthParameter = shp_Prices0_Width.HasValue ?
                new ObjectParameter("Shp_Prices0_Width", shp_Prices0_Width) :
                new ObjectParameter("Shp_Prices0_Width", typeof(short));
    
            var shp_Prices0_HeightParameter = shp_Prices0_Height.HasValue ?
                new ObjectParameter("Shp_Prices0_Height", shp_Prices0_Height) :
                new ObjectParameter("Shp_Prices0_Height", typeof(short));
    
            var shp_Prices0_VisibleParameter = shp_Prices0_Visible.HasValue ?
                new ObjectParameter("Shp_Prices0_Visible", shp_Prices0_Visible) :
                new ObjectParameter("Shp_Prices0_Visible", typeof(bool));
    
            var lbl_Bed_TopParameter = lbl_Bed_Top.HasValue ?
                new ObjectParameter("Lbl_Bed_Top", lbl_Bed_Top) :
                new ObjectParameter("Lbl_Bed_Top", typeof(short));
    
            var lbl_Bed_LeftParameter = lbl_Bed_Left.HasValue ?
                new ObjectParameter("Lbl_Bed_Left", lbl_Bed_Left) :
                new ObjectParameter("Lbl_Bed_Left", typeof(short));
    
            var lbl_Bed_WidthParameter = lbl_Bed_Width.HasValue ?
                new ObjectParameter("Lbl_Bed_Width", lbl_Bed_Width) :
                new ObjectParameter("Lbl_Bed_Width", typeof(short));
    
            var lbl_Bed_HeightParameter = lbl_Bed_Height.HasValue ?
                new ObjectParameter("Lbl_Bed_Height", lbl_Bed_Height) :
                new ObjectParameter("Lbl_Bed_Height", typeof(short));
    
            var lbl_Bed_VisibleParameter = lbl_Bed_Visible.HasValue ?
                new ObjectParameter("Lbl_Bed_Visible", lbl_Bed_Visible) :
                new ObjectParameter("Lbl_Bed_Visible", typeof(bool));
    
            var lbl_BedInfo_TopParameter = lbl_BedInfo_Top.HasValue ?
                new ObjectParameter("Lbl_BedInfo_Top", lbl_BedInfo_Top) :
                new ObjectParameter("Lbl_BedInfo_Top", typeof(short));
    
            var lbl_BedInfo_LeftParameter = lbl_BedInfo_Left.HasValue ?
                new ObjectParameter("Lbl_BedInfo_Left", lbl_BedInfo_Left) :
                new ObjectParameter("Lbl_BedInfo_Left", typeof(short));
    
            var lbl_BedInfo_WidthParameter = lbl_BedInfo_Width.HasValue ?
                new ObjectParameter("Lbl_BedInfo_Width", lbl_BedInfo_Width) :
                new ObjectParameter("Lbl_BedInfo_Width", typeof(short));
    
            var lbl_BedInfo_HeightParameter = lbl_BedInfo_Height.HasValue ?
                new ObjectParameter("Lbl_BedInfo_Height", lbl_BedInfo_Height) :
                new ObjectParameter("Lbl_BedInfo_Height", typeof(short));
    
            var lbl_BedInfo_VisibleParameter = lbl_BedInfo_Visible.HasValue ?
                new ObjectParameter("Lbl_BedInfo_Visible", lbl_BedInfo_Visible) :
                new ObjectParameter("Lbl_BedInfo_Visible", typeof(bool));
    
            var lbl_Bes_TopParameter = lbl_Bes_Top.HasValue ?
                new ObjectParameter("Lbl_Bes_Top", lbl_Bes_Top) :
                new ObjectParameter("Lbl_Bes_Top", typeof(short));
    
            var lbl_Bes_LeftParameter = lbl_Bes_Left.HasValue ?
                new ObjectParameter("Lbl_Bes_Left", lbl_Bes_Left) :
                new ObjectParameter("Lbl_Bes_Left", typeof(short));
    
            var lbl_Bes_WidthParameter = lbl_Bes_Width.HasValue ?
                new ObjectParameter("Lbl_Bes_Width", lbl_Bes_Width) :
                new ObjectParameter("Lbl_Bes_Width", typeof(short));
    
            var lbl_Bes_HeightParameter = lbl_Bes_Height.HasValue ?
                new ObjectParameter("Lbl_Bes_Height", lbl_Bes_Height) :
                new ObjectParameter("Lbl_Bes_Height", typeof(short));
    
            var lbl_Bes_VisibleParameter = lbl_Bes_Visible.HasValue ?
                new ObjectParameter("Lbl_Bes_Visible", lbl_Bes_Visible) :
                new ObjectParameter("Lbl_Bes_Visible", typeof(bool));
    
            var lbl_BesInfo_TopParameter = lbl_BesInfo_Top.HasValue ?
                new ObjectParameter("Lbl_BesInfo_Top", lbl_BesInfo_Top) :
                new ObjectParameter("Lbl_BesInfo_Top", typeof(short));
    
            var lbl_BesInfo_LeftParameter = lbl_BesInfo_Left.HasValue ?
                new ObjectParameter("Lbl_BesInfo_Left", lbl_BesInfo_Left) :
                new ObjectParameter("Lbl_BesInfo_Left", typeof(short));
    
            var lbl_BesInfo_WidthParameter = lbl_BesInfo_Width.HasValue ?
                new ObjectParameter("Lbl_BesInfo_Width", lbl_BesInfo_Width) :
                new ObjectParameter("Lbl_BesInfo_Width", typeof(short));
    
            var lbl_BesInfo_HeightParameter = lbl_BesInfo_Height.HasValue ?
                new ObjectParameter("Lbl_BesInfo_Height", lbl_BesInfo_Height) :
                new ObjectParameter("Lbl_BesInfo_Height", typeof(short));
    
            var lbl_BesInfo_VisibleParameter = lbl_BesInfo_Visible.HasValue ?
                new ObjectParameter("Lbl_BesInfo_Visible", lbl_BesInfo_Visible) :
                new ObjectParameter("Lbl_BesInfo_Visible", typeof(bool));
    
            var shp_Prices1_TopParameter = shp_Prices1_Top.HasValue ?
                new ObjectParameter("Shp_Prices1_Top", shp_Prices1_Top) :
                new ObjectParameter("Shp_Prices1_Top", typeof(short));
    
            var shp_Prices1_LeftParameter = shp_Prices1_Left.HasValue ?
                new ObjectParameter("Shp_Prices1_Left", shp_Prices1_Left) :
                new ObjectParameter("Shp_Prices1_Left", typeof(short));
    
            var shp_Prices1_WidthParameter = shp_Prices1_Width.HasValue ?
                new ObjectParameter("Shp_Prices1_Width", shp_Prices1_Width) :
                new ObjectParameter("Shp_Prices1_Width", typeof(short));
    
            var shp_Prices1_HeightParameter = shp_Prices1_Height.HasValue ?
                new ObjectParameter("Shp_Prices1_Height", shp_Prices1_Height) :
                new ObjectParameter("Shp_Prices1_Height", typeof(short));
    
            var shp_Prices1_VisibleParameter = shp_Prices1_Visible.HasValue ?
                new ObjectParameter("Shp_Prices1_Visible", shp_Prices1_Visible) :
                new ObjectParameter("Shp_Prices1_Visible", typeof(bool));
    
            var lbl_Mandeh_TopParameter = lbl_Mandeh_Top.HasValue ?
                new ObjectParameter("Lbl_Mandeh_Top", lbl_Mandeh_Top) :
                new ObjectParameter("Lbl_Mandeh_Top", typeof(short));
    
            var lbl_Mandeh_LeftParameter = lbl_Mandeh_Left.HasValue ?
                new ObjectParameter("Lbl_Mandeh_Left", lbl_Mandeh_Left) :
                new ObjectParameter("Lbl_Mandeh_Left", typeof(short));
    
            var lbl_Mandeh_WidthParameter = lbl_Mandeh_Width.HasValue ?
                new ObjectParameter("Lbl_Mandeh_Width", lbl_Mandeh_Width) :
                new ObjectParameter("Lbl_Mandeh_Width", typeof(short));
    
            var lbl_Mandeh_HeightParameter = lbl_Mandeh_Height.HasValue ?
                new ObjectParameter("Lbl_Mandeh_Height", lbl_Mandeh_Height) :
                new ObjectParameter("Lbl_Mandeh_Height", typeof(short));
    
            var lbl_Mandeh_VisibleParameter = lbl_Mandeh_Visible.HasValue ?
                new ObjectParameter("Lbl_Mandeh_Visible", lbl_Mandeh_Visible) :
                new ObjectParameter("Lbl_Mandeh_Visible", typeof(bool));
    
            var lbl_MandehInfo_TopParameter = lbl_MandehInfo_Top.HasValue ?
                new ObjectParameter("Lbl_MandehInfo_Top", lbl_MandehInfo_Top) :
                new ObjectParameter("Lbl_MandehInfo_Top", typeof(short));
    
            var lbl_MandehInfo_LeftParameter = lbl_MandehInfo_Left.HasValue ?
                new ObjectParameter("Lbl_MandehInfo_Left", lbl_MandehInfo_Left) :
                new ObjectParameter("Lbl_MandehInfo_Left", typeof(short));
    
            var lbl_MandehInfo_WidthParameter = lbl_MandehInfo_Width.HasValue ?
                new ObjectParameter("Lbl_MandehInfo_Width", lbl_MandehInfo_Width) :
                new ObjectParameter("Lbl_MandehInfo_Width", typeof(short));
    
            var lbl_MandehInfo_HeightParameter = lbl_MandehInfo_Height.HasValue ?
                new ObjectParameter("Lbl_MandehInfo_Height", lbl_MandehInfo_Height) :
                new ObjectParameter("Lbl_MandehInfo_Height", typeof(short));
    
            var lbl_MandehInfo_VisibleParameter = lbl_MandehInfo_Visible.HasValue ?
                new ObjectParameter("Lbl_MandehInfo_Visible", lbl_MandehInfo_Visible) :
                new ObjectParameter("Lbl_MandehInfo_Visible", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionForms_Update", iDParameter, nameParameter, dscParameter, frm_Reception_HeightParameter, frm_Reception_WidthParameter, pnl_Main_HeightParameter, lbl_ID_TopParameter, lbl_ID_LeftParameter, lbl_ID_WidthParameter, lbl_ID_HeightParameter, lbl_ID_VisibleParameter, edt_ID_TopParameter, edt_ID_LeftParameter, edt_ID_WidthParameter, edt_ID_HeightParameter, edt_ID_VisibleParameter, cbb_ReceptionTypes_TopParameter, cbb_ReceptionTypes_LeftParameter, cbb_ReceptionTypes_WidthParameter, cbb_ReceptionTypes_HeightParameter, cbb_ReceptionTypes_VisibleParameter, lbl_RegisterDate_TopParameter, lbl_RegisterDate_LeftParameter, lbl_RegisterDate_WidthParameter, lbl_RegisterDate_HeightParameter, lbl_RegisterDate_VisibleParameter, edt_RegisterDate_Time_TopParameter, edt_RegisterDate_Time_LeftParameter, edt_RegisterDate_Time_WidthParameter, edt_RegisterDate_Time_HeightParameter, edt_RegisterDate_Time_VisibleParameter, edt_RegisterDate_TopParameter, edt_RegisterDate_LeftParameter, edt_RegisterDate_WidthParameter, edt_RegisterDate_HeightParameter, edt_RegisterDate_VisibleParameter, btn_NewPatient_TopParameter, btn_NewPatient_LeftParameter, btn_NewPatient_WidthParameter, btn_NewPatient_HeightParameter, btn_NewPatient_VisibleParameter, btn_Patients_TopParameter, btn_Patients_LeftParameter, btn_Patients_WidthParameter, btn_Patients_HeightParameter, btn_Patients_VisibleParameter, edt_PatientID_TopParameter, edt_PatientID_LeftParameter, edt_PatientID_WidthParameter, edt_PatientID_HeightParameter, edt_PatientID_VisibleParameter, cbb_SexTypes_TopParameter, cbb_SexTypes_LeftParameter, cbb_SexTypes_WidthParameter, cbb_SexTypes_HeightParameter, cbb_SexTypes_VisibleParameter, edt_FirstName_TopParameter, edt_FirstName_LeftParameter, edt_FirstName_WidthParameter, edt_FirstName_HeightParameter, edt_FirstName_VisibleParameter, edt_LastName_TopParameter, edt_LastName_LeftParameter, edt_LastName_WidthParameter, edt_LastName_HeightParameter, edt_LastName_VisibleParameter, edt_General_TopParameter, edt_General_LeftParameter, edt_General_WidthParameter, edt_General_HeightParameter, edt_General_VisibleParameter, btn_Insurances_TopParameter, btn_Insurances_LeftParameter, btn_Insurances_WidthParameter, btn_Insurances_HeightParameter, btn_Insurances_VisibleParameter, edt_InsuranceID_TopParameter, edt_InsuranceID_LeftParameter, edt_InsuranceID_WidthParameter, edt_InsuranceID_HeightParameter, edt_InsuranceID_VisibleParameter, lbl_InsuranceName_TopParameter, lbl_InsuranceName_LeftParameter, lbl_InsuranceName_WidthParameter, lbl_InsuranceName_HeightParameter, lbl_InsuranceName_VisibleParameter, lbl_InsuranceNumber_TopParameter, lbl_InsuranceNumber_LeftParameter, lbl_InsuranceNumber_WidthParameter, lbl_InsuranceNumber_HeightParameter, lbl_InsuranceNumber_VisibleParameter, edt_InsuranceNumber_TopParameter, edt_InsuranceNumber_LeftParameter, edt_InsuranceNumber_WidthParameter, edt_InsuranceNumber_HeightParameter, edt_InsuranceNumber_VisibleParameter, btn_Reasons_TopParameter, btn_Reasons_LeftParameter, btn_Reasons_WidthParameter, btn_Reasons_HeightParameter, btn_Reasons_VisibleParameter, edt_ReasonID_TopParameter, edt_ReasonID_LeftParameter, edt_ReasonID_WidthParameter, edt_ReasonID_HeightParameter, edt_ReasonID_VisibleParameter, lbl_ReasonName_TopParameter, lbl_ReasonName_LeftParameter, lbl_ReasonName_WidthParameter, lbl_ReasonName_HeightParameter, lbl_ReasonName_VisibleParameter, btn_Customers_TopParameter, btn_Customers_LeftParameter, btn_Customers_WidthParameter, btn_Customers_HeightParameter, btn_Customers_VisibleParameter, edt_CustomerID_TopParameter, edt_CustomerID_LeftParameter, edt_CustomerID_WidthParameter, edt_CustomerID_HeightParameter, edt_CustomerID_VisibleParameter, btn_Departments_TopParameter, btn_Departments_LeftParameter, btn_Departments_WidthParameter, btn_Departments_HeightParameter, btn_Departments_VisibleParameter, edt_DepartmentID_TopParameter, edt_DepartmentID_LeftParameter, edt_DepartmentID_WidthParameter, edt_DepartmentID_HeightParameter, edt_DepartmentID_VisibleParameter, lbl_DepartmentName_TopParameter, lbl_DepartmentName_LeftParameter, lbl_DepartmentName_WidthParameter, lbl_DepartmentName_HeightParameter, lbl_DepartmentName_VisibleParameter, lbl_Room_TopParameter, lbl_Room_LeftParameter, lbl_Room_WidthParameter, lbl_Room_HeightParameter, lbl_Room_VisibleParameter, edt_RoomID_TopParameter, edt_RoomID_LeftParameter, edt_RoomID_WidthParameter, edt_RoomID_HeightParameter, edt_RoomID_VisibleParameter, edt_BedID_TopParameter, edt_BedID_LeftParameter, edt_BedID_WidthParameter, edt_BedID_HeightParameter, edt_BedID_VisibleParameter, btn_Doctors_TopParameter, btn_Doctors_LeftParameter, btn_Doctors_WidthParameter, btn_Doctors_HeightParameter, btn_Doctors_VisibleParameter, edt_DoctorID_TopParameter, edt_DoctorID_LeftParameter, edt_DoctorID_WidthParameter, edt_DoctorID_HeightParameter, edt_DoctorID_VisibleParameter, lbl_DoctorName_TopParameter, lbl_DoctorName_LeftParameter, lbl_DoctorName_WidthParameter, lbl_DoctorName_HeightParameter, lbl_DoctorName_VisibleParameter, btn_ReceptionFactor_TopParameter, btn_ReceptionFactor_LeftParameter, btn_ReceptionFactor_WidthParameter, btn_ReceptionFactor_HeightParameter, btn_ReceptionFactor_VisibleParameter, btn_DigitalDocuments_TopParameter, btn_DigitalDocuments_LeftParameter, btn_DigitalDocuments_WidthParameter, btn_DigitalDocuments_HeightParameter, btn_DigitalDocuments_VisibleParameter, btn_Images_TopParameter, btn_Images_LeftParameter, btn_Images_WidthParameter, btn_Images_HeightParameter, btn_Images_VisibleParameter, btn_Assistants_TopParameter, btn_Assistants_LeftParameter, btn_Assistants_WidthParameter, btn_Assistants_HeightParameter, btn_Assistants_VisibleParameter, edt_AssistantID_TopParameter, edt_AssistantID_LeftParameter, edt_AssistantID_WidthParameter, edt_AssistantID_HeightParameter, edt_AssistantID_VisibleParameter, lbl_AssistantName_TopParameter, lbl_AssistantName_LeftParameter, lbl_AssistantName_WidthParameter, lbl_AssistantName_HeightParameter, lbl_AssistantName_VisibleParameter, chk_AutoPrint_TopParameter, chk_AutoPrint_LeftParameter, chk_AutoPrint_WidthParameter, chk_AutoPrint_HeightParameter, chk_AutoPrint_VisibleParameter, chk_AutoSMS_TopParameter, chk_AutoSMS_LeftParameter, chk_AutoSMS_WidthParameter, chk_AutoSMS_HeightParameter, chk_AutoSMS_VisibleParameter, btn_Diagnosises_TopParameter, btn_Diagnosises_LeftParameter, btn_Diagnosises_WidthParameter, btn_Diagnosises_HeightParameter, btn_Diagnosises_VisibleParameter, edt_DiagnosisID_TopParameter, edt_DiagnosisID_LeftParameter, edt_DiagnosisID_WidthParameter, edt_DiagnosisID_HeightParameter, edt_DiagnosisID_VisibleParameter, lbl_DiagnosisName_TopParameter, lbl_DiagnosisName_LeftParameter, lbl_DiagnosisName_WidthParameter, lbl_DiagnosisName_HeightParameter, lbl_DiagnosisName_VisibleParameter, btn_Therapies_TopParameter, btn_Therapies_LeftParameter, btn_Therapies_WidthParameter, btn_Therapies_HeightParameter, btn_Therapies_VisibleParameter, edt_TherapyID_TopParameter, edt_TherapyID_LeftParameter, edt_TherapyID_WidthParameter, edt_TherapyID_HeightParameter, edt_TherapyID_VisibleParameter, lbl_TherapyName_TopParameter, lbl_TherapyName_LeftParameter, lbl_TherapyName_WidthParameter, lbl_TherapyName_HeightParameter, lbl_TherapyName_VisibleParameter, btn_NewPrescription_TopParameter, btn_NewPrescription_LeftParameter, btn_NewPrescription_WidthParameter, btn_NewPrescription_HeightParameter, btn_NewPrescription_VisibleParameter, btn_Prescriptions_TopParameter, btn_Prescriptions_LeftParameter, btn_Prescriptions_WidthParameter, btn_Prescriptions_HeightParameter, btn_Prescriptions_VisibleParameter, edt_PrescriptionID_TopParameter, edt_PrescriptionID_LeftParameter, edt_PrescriptionID_WidthParameter, edt_PrescriptionID_HeightParameter, edt_PrescriptionID_VisibleParameter, btn_NewLaboratory_TopParameter, btn_NewLaboratory_LeftParameter, btn_NewLaboratory_WidthParameter, btn_NewLaboratory_HeightParameter, btn_NewLaboratory_VisibleParameter, btn_Laboratories_TopParameter, btn_Laboratories_LeftParameter, btn_Laboratories_WidthParameter, btn_Laboratories_HeightParameter, btn_Laboratories_VisibleParameter, edt_LaboratoryID_TopParameter, edt_LaboratoryID_LeftParameter, edt_LaboratoryID_WidthParameter, edt_LaboratoryID_HeightParameter, edt_LaboratoryID_VisibleParameter, btn_ReceptionStates_TopParameter, btn_ReceptionStates_LeftParameter, btn_ReceptionStates_WidthParameter, btn_ReceptionStates_HeightParameter, btn_ReceptionStates_VisibleParameter, cbb_ReceptionStates_TopParameter, cbb_ReceptionStates_LeftParameter, cbb_ReceptionStates_WidthParameter, cbb_ReceptionStates_HeightParameter, cbb_ReceptionStates_VisibleParameter, btn_PaymentStates_TopParameter, btn_PaymentStates_LeftParameter, btn_PaymentStates_WidthParameter, btn_PaymentStates_HeightParameter, btn_PaymentStates_VisibleParameter, cbb_PaymentStates_TopParameter, cbb_PaymentStates_LeftParameter, cbb_PaymentStates_WidthParameter, cbb_PaymentStates_HeightParameter, cbb_PaymentStates_VisibleParameter, grb_Prices_TopParameter, grb_Prices_LeftParameter, grb_Prices_WidthParameter, grb_Prices_HeightParameter, grb_Prices_VisibleParameter, edt_ServicePrice_TopParameter, edt_ServicePrice_LeftParameter, edt_ServicePrice_WidthParameter, edt_ServicePrice_HeightParameter, edt_ServicePrice_VisibleParameter, lbl_ServicePrice_TopParameter, lbl_ServicePrice_LeftParameter, lbl_ServicePrice_WidthParameter, lbl_ServicePrice_HeightParameter, lbl_ServicePrice_VisibleParameter, edt_ItemsPrice_TopParameter, edt_ItemsPrice_LeftParameter, edt_ItemsPrice_WidthParameter, edt_ItemsPrice_HeightParameter, edt_ItemsPrice_VisibleParameter, chk_SetItemsPrice_TopParameter, chk_SetItemsPrice_LeftParameter, chk_SetItemsPrice_WidthParameter, chk_SetItemsPrice_HeightParameter, chk_SetItemsPrice_VisibleParameter, edt_PatientPrice_TopParameter, edt_PatientPrice_LeftParameter, edt_PatientPrice_WidthParameter, edt_PatientPrice_HeightParameter, edt_PatientPrice_VisibleParameter, lbl_PatientPrice_TopParameter, lbl_PatientPrice_LeftParameter, lbl_PatientPrice_WidthParameter, lbl_PatientPrice_HeightParameter, lbl_PatientPrice_VisibleParameter, edt_InsurancePrice_TopParameter, edt_InsurancePrice_LeftParameter, edt_InsurancePrice_WidthParameter, edt_InsurancePrice_HeightParameter, edt_InsurancePrice_VisibleParameter, lbl_InsurancePrice_TopParameter, lbl_InsurancePrice_LeftParameter, lbl_InsurancePrice_WidthParameter, lbl_InsurancePrice_HeightParameter, lbl_InsurancePrice_VisibleParameter, edt_MarginPrice_TopParameter, edt_MarginPrice_LeftParameter, edt_MarginPrice_WidthParameter, edt_MarginPrice_HeightParameter, edt_MarginPrice_VisibleParameter, lbl_MarginPrice_TopParameter, lbl_MarginPrice_LeftParameter, lbl_MarginPrice_WidthParameter, lbl_MarginPrice_HeightParameter, lbl_MarginPrice_VisibleParameter, edt_DoctorPrice_TopParameter, edt_DoctorPrice_LeftParameter, edt_DoctorPrice_WidthParameter, edt_DoctorPrice_HeightParameter, edt_DoctorPrice_VisibleParameter, lbl_DoctorPrice_TopParameter, lbl_DoctorPrice_LeftParameter, lbl_DoctorPrice_WidthParameter, lbl_DoctorPrice_HeightParameter, lbl_DoctorPrice_VisibleParameter, edt_AssistantPrice_TopParameter, edt_AssistantPrice_LeftParameter, edt_AssistantPrice_WidthParameter, edt_AssistantPrice_HeightParameter, edt_AssistantPrice_VisibleParameter, lbl_AssistantPrice_TopParameter, lbl_AssistantPrice_LeftParameter, lbl_AssistantPrice_WidthParameter, lbl_AssistantPrice_HeightParameter, lbl_AssistantPrice_VisibleParameter, edt_Takh_TopParameter, edt_Takh_LeftParameter, edt_Takh_WidthParameter, edt_Takh_HeightParameter, edt_Takh_VisibleParameter, lbl_Takh_TopParameter, lbl_Takh_LeftParameter, lbl_Takh_WidthParameter, lbl_Takh_HeightParameter, lbl_Takh_VisibleParameter, shp_Prices0_TopParameter, shp_Prices0_LeftParameter, shp_Prices0_WidthParameter, shp_Prices0_HeightParameter, shp_Prices0_VisibleParameter, lbl_Bed_TopParameter, lbl_Bed_LeftParameter, lbl_Bed_WidthParameter, lbl_Bed_HeightParameter, lbl_Bed_VisibleParameter, lbl_BedInfo_TopParameter, lbl_BedInfo_LeftParameter, lbl_BedInfo_WidthParameter, lbl_BedInfo_HeightParameter, lbl_BedInfo_VisibleParameter, lbl_Bes_TopParameter, lbl_Bes_LeftParameter, lbl_Bes_WidthParameter, lbl_Bes_HeightParameter, lbl_Bes_VisibleParameter, lbl_BesInfo_TopParameter, lbl_BesInfo_LeftParameter, lbl_BesInfo_WidthParameter, lbl_BesInfo_HeightParameter, lbl_BesInfo_VisibleParameter, shp_Prices1_TopParameter, shp_Prices1_LeftParameter, shp_Prices1_WidthParameter, shp_Prices1_HeightParameter, shp_Prices1_VisibleParameter, lbl_Mandeh_TopParameter, lbl_Mandeh_LeftParameter, lbl_Mandeh_WidthParameter, lbl_Mandeh_HeightParameter, lbl_Mandeh_VisibleParameter, lbl_MandehInfo_TopParameter, lbl_MandehInfo_LeftParameter, lbl_MandehInfo_WidthParameter, lbl_MandehInfo_HeightParameter, lbl_MandehInfo_VisibleParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_ReceptionImages_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionImages_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_ReceptionImages_Insert(Nullable<byte> imageKindID, Nullable<short> imageTypeID, Nullable<short> archiveTypeID, Nullable<int> receptionID, Nullable<int> doctorID, Nullable<int> patientID, string imageTitle, byte[] imageFile, string dsc, Nullable<System.DateTime> write_date, Nullable<int> userid)
        {
            var imageKindIDParameter = imageKindID.HasValue ?
                new ObjectParameter("ImageKindID", imageKindID) :
                new ObjectParameter("ImageKindID", typeof(byte));
    
            var imageTypeIDParameter = imageTypeID.HasValue ?
                new ObjectParameter("ImageTypeID", imageTypeID) :
                new ObjectParameter("ImageTypeID", typeof(short));
    
            var archiveTypeIDParameter = archiveTypeID.HasValue ?
                new ObjectParameter("ArchiveTypeID", archiveTypeID) :
                new ObjectParameter("ArchiveTypeID", typeof(short));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var imageTitleParameter = imageTitle != null ?
                new ObjectParameter("ImageTitle", imageTitle) :
                new ObjectParameter("ImageTitle", typeof(string));
    
            var imageFileParameter = imageFile != null ?
                new ObjectParameter("imageFile", imageFile) :
                new ObjectParameter("imageFile", typeof(byte[]));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var write_dateParameter = write_date.HasValue ?
                new ObjectParameter("write_date", write_date) :
                new ObjectParameter("write_date", typeof(System.DateTime));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionImages_Insert", imageKindIDParameter, imageTypeIDParameter, archiveTypeIDParameter, receptionIDParameter, doctorIDParameter, patientIDParameter, imageTitleParameter, imageFileParameter, dscParameter, write_dateParameter, useridParameter);
        }
    
        public virtual int sp_ReceptionImages_Select(Nullable<byte> imageKindID, Nullable<short> imageTypeID, Nullable<short> archiveTypeID, string name, Nullable<int> receptionID, Nullable<int> doctorID, Nullable<int> patientID, Nullable<int> userid, Nullable<int> topRange)
        {
            var imageKindIDParameter = imageKindID.HasValue ?
                new ObjectParameter("ImageKindID", imageKindID) :
                new ObjectParameter("ImageKindID", typeof(byte));
    
            var imageTypeIDParameter = imageTypeID.HasValue ?
                new ObjectParameter("ImageTypeID", imageTypeID) :
                new ObjectParameter("ImageTypeID", typeof(short));
    
            var archiveTypeIDParameter = archiveTypeID.HasValue ?
                new ObjectParameter("ArchiveTypeID", archiveTypeID) :
                new ObjectParameter("ArchiveTypeID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionImages_Select", imageKindIDParameter, imageTypeIDParameter, archiveTypeIDParameter, nameParameter, receptionIDParameter, doctorIDParameter, patientIDParameter, useridParameter, topRangeParameter);
        }
    
        public virtual int sp_ReceptionImages_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionImages_SelectRow", iDParameter);
        }
    
        public virtual int sp_ReceptionImages_Update(Nullable<int> iD, Nullable<byte> imageKindID, Nullable<short> imageTypeID, Nullable<short> archiveTypeID, Nullable<int> receptionID, Nullable<int> doctorID, Nullable<int> patientID, string imageTitle, byte[] imageFile, string dsc, Nullable<System.DateTime> write_date, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var imageKindIDParameter = imageKindID.HasValue ?
                new ObjectParameter("ImageKindID", imageKindID) :
                new ObjectParameter("ImageKindID", typeof(byte));
    
            var imageTypeIDParameter = imageTypeID.HasValue ?
                new ObjectParameter("ImageTypeID", imageTypeID) :
                new ObjectParameter("ImageTypeID", typeof(short));
    
            var archiveTypeIDParameter = archiveTypeID.HasValue ?
                new ObjectParameter("ArchiveTypeID", archiveTypeID) :
                new ObjectParameter("ArchiveTypeID", typeof(short));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var imageTitleParameter = imageTitle != null ?
                new ObjectParameter("ImageTitle", imageTitle) :
                new ObjectParameter("ImageTitle", typeof(string));
    
            var imageFileParameter = imageFile != null ?
                new ObjectParameter("imageFile", imageFile) :
                new ObjectParameter("imageFile", typeof(byte[]));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var write_dateParameter = write_date.HasValue ?
                new ObjectParameter("write_date", write_date) :
                new ObjectParameter("write_date", typeof(System.DateTime));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionImages_Update", iDParameter, imageKindIDParameter, imageTypeIDParameter, archiveTypeIDParameter, receptionIDParameter, doctorIDParameter, patientIDParameter, imageTitleParameter, imageFileParameter, dscParameter, write_dateParameter, useridParameter);
        }
    
        public virtual int sp_Receptions_Archive(Nullable<int> iD, Nullable<byte> archiveStateID, string archiveDsc, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var archiveStateIDParameter = archiveStateID.HasValue ?
                new ObjectParameter("ArchiveStateID", archiveStateID) :
                new ObjectParameter("ArchiveStateID", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Receptions_Archive", iDParameter, archiveStateIDParameter, archiveDscParameter, userIDParameter);
        }
    
        public virtual int sp_Receptions_Cancel(Nullable<int> iD, string cancelDsc, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var cancelDscParameter = cancelDsc != null ?
                new ObjectParameter("CancelDsc", cancelDsc) :
                new ObjectParameter("CancelDsc", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Receptions_Cancel", iDParameter, cancelDscParameter, userIDParameter);
        }
    
        public virtual int sp_Receptions_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Receptions_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Receptions_DeleteAll(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, Nullable<int> petID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<double> bes_Start, Nullable<double> bes_End, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange, Nullable<int> delUserid)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var petIDParameter = petID.HasValue ?
                new ObjectParameter("PetID", petID) :
                new ObjectParameter("PetID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var bes_StartParameter = bes_Start.HasValue ?
                new ObjectParameter("Bes_Start", bes_Start) :
                new ObjectParameter("Bes_Start", typeof(double));
    
            var bes_EndParameter = bes_End.HasValue ?
                new ObjectParameter("Bes_End", bes_End) :
                new ObjectParameter("Bes_End", typeof(double));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            var delUseridParameter = delUserid.HasValue ?
                new ObjectParameter("DelUserid", delUserid) :
                new ObjectParameter("DelUserid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Receptions_DeleteAll", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, petIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, bes_StartParameter, bes_EndParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter, delUseridParameter);
        }
    
        public virtual int sp_Receptions_Insert(Nullable<int> iD, Nullable<byte> receptionUI, Nullable<System.DateTime> registerDate, Nullable<int> workCalendarID, Nullable<int> specialtyID, Nullable<int> doctorID, Nullable<double> doctorDarsad, Nullable<int> assistantID, Nullable<double> assistantDarsad, Nullable<byte> sexTypeID, Nullable<int> patientID, Nullable<int> petID, string patientName, string patientMeli, string patientGeneral, Nullable<double> patientDarsad, Nullable<int> insuranceID, string insuranceNumber, Nullable<int> customerID, Nullable<int> reasonID, Nullable<int> diagnosisID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> bodyID, Nullable<short> bodyNumb, Nullable<int> dentalInformationID, Nullable<int> therapyID, Nullable<int> medicalServiceID, string medicalServiceDsc, Nullable<double> numb, Nullable<double> serviceTime, Nullable<int> yaranehID, Nullable<int> mokamelID, Nullable<int> diseaseID, Nullable<bool> setItemsPrice, Nullable<int> inventoryHeaderID, Nullable<double> servicePrice, Nullable<double> itemsPrice, Nullable<double> patientPrice, Nullable<double> insurancePrice, Nullable<double> marginPrice, Nullable<double> yaranehPrice, Nullable<double> mokamelPrice, Nullable<double> doctorPrice, Nullable<double> assistantPrice, Nullable<double> takh, Nullable<double> bed, Nullable<double> bes, Nullable<double> mandeh, Nullable<double> zaribJ, Nullable<double> zaribD, Nullable<double> zaribB, Nullable<double> zaribK, Nullable<int> prescriptionID, Nullable<int> laboratoryID, Nullable<short> receptionTypeID, Nullable<short> receptionStateID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, string shortDsc, string dsc, Nullable<short> shiftID, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var receptionUIParameter = receptionUI.HasValue ?
                new ObjectParameter("ReceptionUI", receptionUI) :
                new ObjectParameter("ReceptionUI", typeof(byte));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var workCalendarIDParameter = workCalendarID.HasValue ?
                new ObjectParameter("WorkCalendarID", workCalendarID) :
                new ObjectParameter("WorkCalendarID", typeof(int));
    
            var specialtyIDParameter = specialtyID.HasValue ?
                new ObjectParameter("SpecialtyID", specialtyID) :
                new ObjectParameter("SpecialtyID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var doctorDarsadParameter = doctorDarsad.HasValue ?
                new ObjectParameter("DoctorDarsad", doctorDarsad) :
                new ObjectParameter("DoctorDarsad", typeof(double));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var assistantDarsadParameter = assistantDarsad.HasValue ?
                new ObjectParameter("AssistantDarsad", assistantDarsad) :
                new ObjectParameter("AssistantDarsad", typeof(double));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var petIDParameter = petID.HasValue ?
                new ObjectParameter("PetID", petID) :
                new ObjectParameter("PetID", typeof(int));
    
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var patientGeneralParameter = patientGeneral != null ?
                new ObjectParameter("PatientGeneral", patientGeneral) :
                new ObjectParameter("PatientGeneral", typeof(string));
    
            var patientDarsadParameter = patientDarsad.HasValue ?
                new ObjectParameter("PatientDarsad", patientDarsad) :
                new ObjectParameter("PatientDarsad", typeof(double));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var bodyNumbParameter = bodyNumb.HasValue ?
                new ObjectParameter("BodyNumb", bodyNumb) :
                new ObjectParameter("BodyNumb", typeof(short));
    
            var dentalInformationIDParameter = dentalInformationID.HasValue ?
                new ObjectParameter("DentalInformationID", dentalInformationID) :
                new ObjectParameter("DentalInformationID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var medicalServiceDscParameter = medicalServiceDsc != null ?
                new ObjectParameter("MedicalServiceDsc", medicalServiceDsc) :
                new ObjectParameter("MedicalServiceDsc", typeof(string));
    
            var numbParameter = numb.HasValue ?
                new ObjectParameter("Numb", numb) :
                new ObjectParameter("Numb", typeof(double));
    
            var serviceTimeParameter = serviceTime.HasValue ?
                new ObjectParameter("ServiceTime", serviceTime) :
                new ObjectParameter("ServiceTime", typeof(double));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(int));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var setItemsPriceParameter = setItemsPrice.HasValue ?
                new ObjectParameter("SetItemsPrice", setItemsPrice) :
                new ObjectParameter("SetItemsPrice", typeof(bool));
    
            var inventoryHeaderIDParameter = inventoryHeaderID.HasValue ?
                new ObjectParameter("InventoryHeaderID", inventoryHeaderID) :
                new ObjectParameter("InventoryHeaderID", typeof(int));
    
            var servicePriceParameter = servicePrice.HasValue ?
                new ObjectParameter("ServicePrice", servicePrice) :
                new ObjectParameter("ServicePrice", typeof(double));
    
            var itemsPriceParameter = itemsPrice.HasValue ?
                new ObjectParameter("ItemsPrice", itemsPrice) :
                new ObjectParameter("ItemsPrice", typeof(double));
    
            var patientPriceParameter = patientPrice.HasValue ?
                new ObjectParameter("PatientPrice", patientPrice) :
                new ObjectParameter("PatientPrice", typeof(double));
    
            var insurancePriceParameter = insurancePrice.HasValue ?
                new ObjectParameter("InsurancePrice", insurancePrice) :
                new ObjectParameter("InsurancePrice", typeof(double));
    
            var marginPriceParameter = marginPrice.HasValue ?
                new ObjectParameter("MarginPrice", marginPrice) :
                new ObjectParameter("MarginPrice", typeof(double));
    
            var yaranehPriceParameter = yaranehPrice.HasValue ?
                new ObjectParameter("YaranehPrice", yaranehPrice) :
                new ObjectParameter("YaranehPrice", typeof(double));
    
            var mokamelPriceParameter = mokamelPrice.HasValue ?
                new ObjectParameter("MokamelPrice", mokamelPrice) :
                new ObjectParameter("MokamelPrice", typeof(double));
    
            var doctorPriceParameter = doctorPrice.HasValue ?
                new ObjectParameter("DoctorPrice", doctorPrice) :
                new ObjectParameter("DoctorPrice", typeof(double));
    
            var assistantPriceParameter = assistantPrice.HasValue ?
                new ObjectParameter("AssistantPrice", assistantPrice) :
                new ObjectParameter("AssistantPrice", typeof(double));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var besParameter = bes.HasValue ?
                new ObjectParameter("Bes", bes) :
                new ObjectParameter("Bes", typeof(double));
    
            var mandehParameter = mandeh.HasValue ?
                new ObjectParameter("Mandeh", mandeh) :
                new ObjectParameter("Mandeh", typeof(double));
    
            var zaribJParameter = zaribJ.HasValue ?
                new ObjectParameter("ZaribJ", zaribJ) :
                new ObjectParameter("ZaribJ", typeof(double));
    
            var zaribDParameter = zaribD.HasValue ?
                new ObjectParameter("ZaribD", zaribD) :
                new ObjectParameter("ZaribD", typeof(double));
    
            var zaribBParameter = zaribB.HasValue ?
                new ObjectParameter("ZaribB", zaribB) :
                new ObjectParameter("ZaribB", typeof(double));
    
            var zaribKParameter = zaribK.HasValue ?
                new ObjectParameter("ZaribK", zaribK) :
                new ObjectParameter("ZaribK", typeof(double));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var laboratoryIDParameter = laboratoryID.HasValue ?
                new ObjectParameter("LaboratoryID", laboratoryID) :
                new ObjectParameter("LaboratoryID", typeof(int));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Receptions_Insert", iDParameter, receptionUIParameter, registerDateParameter, workCalendarIDParameter, specialtyIDParameter, doctorIDParameter, doctorDarsadParameter, assistantIDParameter, assistantDarsadParameter, sexTypeIDParameter, patientIDParameter, petIDParameter, patientNameParameter, patientMeliParameter, patientGeneralParameter, patientDarsadParameter, insuranceIDParameter, insuranceNumberParameter, customerIDParameter, reasonIDParameter, diagnosisIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, bodyIDParameter, bodyNumbParameter, dentalInformationIDParameter, therapyIDParameter, medicalServiceIDParameter, medicalServiceDscParameter, numbParameter, serviceTimeParameter, yaranehIDParameter, mokamelIDParameter, diseaseIDParameter, setItemsPriceParameter, inventoryHeaderIDParameter, servicePriceParameter, itemsPriceParameter, patientPriceParameter, insurancePriceParameter, marginPriceParameter, yaranehPriceParameter, mokamelPriceParameter, doctorPriceParameter, assistantPriceParameter, takhParameter, bedParameter, besParameter, mandehParameter, zaribJParameter, zaribDParameter, zaribBParameter, zaribKParameter, prescriptionIDParameter, laboratoryIDParameter, receptionTypeIDParameter, receptionStateIDParameter, paymentStateIDParameter, paymentTypeIDParameter, shortDscParameter, dscParameter, shiftIDParameter, userIDParameter);
        }
    
        public virtual int sp_Receptions_Recovery(Nullable<int> iD, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Receptions_Recovery", iDParameter, userIDParameter);
        }
    
        public virtual int sp_Receptions_RepairUpdatePrices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Receptions_RepairUpdatePrices");
        }
    
        public virtual int sp_Receptions_Select(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, Nullable<int> petID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<double> bes_Start, Nullable<double> bes_End, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var petIDParameter = petID.HasValue ?
                new ObjectParameter("PetID", petID) :
                new ObjectParameter("PetID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var bes_StartParameter = bes_Start.HasValue ?
                new ObjectParameter("Bes_Start", bes_Start) :
                new ObjectParameter("Bes_Start", typeof(double));
    
            var bes_EndParameter = bes_End.HasValue ?
                new ObjectParameter("Bes_End", bes_End) :
                new ObjectParameter("Bes_End", typeof(double));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Receptions_Select", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, petIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, bes_StartParameter, bes_EndParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual int sp_Receptions_Select_Funds(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Receptions_Select_Funds", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual int sp_Receptions_Select1(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, Nullable<int> petID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<double> bes_Start, Nullable<double> bes_End, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var petIDParameter = petID.HasValue ?
                new ObjectParameter("PetID", petID) :
                new ObjectParameter("PetID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var bes_StartParameter = bes_Start.HasValue ?
                new ObjectParameter("Bes_Start", bes_Start) :
                new ObjectParameter("Bes_Start", typeof(double));
    
            var bes_EndParameter = bes_End.HasValue ?
                new ObjectParameter("Bes_End", bes_End) :
                new ObjectParameter("Bes_End", typeof(double));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Receptions_Select1", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, petIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, bes_StartParameter, bes_EndParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Receptions_SelectRow_Result> sp_Receptions_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Receptions_SelectRow_Result>("sp_Receptions_SelectRow", iDParameter);
        }
    
        public virtual int sp_Receptions_Update(Nullable<int> iD, Nullable<byte> receptionUI, Nullable<System.DateTime> registerDate, Nullable<int> workCalendarID, Nullable<int> specialtyID, Nullable<int> doctorID, Nullable<double> doctorDarsad, Nullable<int> assistantID, Nullable<double> assistantDarsad, Nullable<byte> sexTypeID, Nullable<int> patientID, Nullable<int> petID, string patientName, string patientMeli, string patientGeneral, Nullable<double> patientDarsad, Nullable<int> insuranceID, string insuranceNumber, Nullable<int> customerID, Nullable<int> reasonID, Nullable<int> diagnosisID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> bodyID, Nullable<short> bodyNumb, Nullable<int> dentalInformationID, Nullable<int> therapyID, Nullable<int> medicalServiceID, string medicalServiceDsc, Nullable<double> numb, Nullable<double> serviceTime, Nullable<int> yaranehID, Nullable<int> mokamelID, Nullable<int> diseaseID, Nullable<bool> setItemsPrice, Nullable<int> inventoryHeaderID, Nullable<double> servicePrice, Nullable<double> itemsPrice, Nullable<double> patientPrice, Nullable<double> insurancePrice, Nullable<double> marginPrice, Nullable<double> yaranehPrice, Nullable<double> mokamelPrice, Nullable<double> doctorPrice, Nullable<double> assistantPrice, Nullable<double> takh, Nullable<double> bed, Nullable<double> bes, Nullable<double> mandeh, Nullable<double> zaribJ, Nullable<double> zaribD, Nullable<double> zaribB, Nullable<double> zaribK, Nullable<int> prescriptionID, Nullable<int> laboratoryID, Nullable<short> receptionTypeID, Nullable<short> receptionStateID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, string shortDsc, string dsc, Nullable<short> shiftID, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var receptionUIParameter = receptionUI.HasValue ?
                new ObjectParameter("ReceptionUI", receptionUI) :
                new ObjectParameter("ReceptionUI", typeof(byte));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var workCalendarIDParameter = workCalendarID.HasValue ?
                new ObjectParameter("WorkCalendarID", workCalendarID) :
                new ObjectParameter("WorkCalendarID", typeof(int));
    
            var specialtyIDParameter = specialtyID.HasValue ?
                new ObjectParameter("SpecialtyID", specialtyID) :
                new ObjectParameter("SpecialtyID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var doctorDarsadParameter = doctorDarsad.HasValue ?
                new ObjectParameter("DoctorDarsad", doctorDarsad) :
                new ObjectParameter("DoctorDarsad", typeof(double));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var assistantDarsadParameter = assistantDarsad.HasValue ?
                new ObjectParameter("AssistantDarsad", assistantDarsad) :
                new ObjectParameter("AssistantDarsad", typeof(double));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var petIDParameter = petID.HasValue ?
                new ObjectParameter("PetID", petID) :
                new ObjectParameter("PetID", typeof(int));
    
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var patientGeneralParameter = patientGeneral != null ?
                new ObjectParameter("PatientGeneral", patientGeneral) :
                new ObjectParameter("PatientGeneral", typeof(string));
    
            var patientDarsadParameter = patientDarsad.HasValue ?
                new ObjectParameter("PatientDarsad", patientDarsad) :
                new ObjectParameter("PatientDarsad", typeof(double));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var bodyNumbParameter = bodyNumb.HasValue ?
                new ObjectParameter("BodyNumb", bodyNumb) :
                new ObjectParameter("BodyNumb", typeof(short));
    
            var dentalInformationIDParameter = dentalInformationID.HasValue ?
                new ObjectParameter("DentalInformationID", dentalInformationID) :
                new ObjectParameter("DentalInformationID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var medicalServiceDscParameter = medicalServiceDsc != null ?
                new ObjectParameter("MedicalServiceDsc", medicalServiceDsc) :
                new ObjectParameter("MedicalServiceDsc", typeof(string));
    
            var numbParameter = numb.HasValue ?
                new ObjectParameter("Numb", numb) :
                new ObjectParameter("Numb", typeof(double));
    
            var serviceTimeParameter = serviceTime.HasValue ?
                new ObjectParameter("ServiceTime", serviceTime) :
                new ObjectParameter("ServiceTime", typeof(double));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(int));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var setItemsPriceParameter = setItemsPrice.HasValue ?
                new ObjectParameter("SetItemsPrice", setItemsPrice) :
                new ObjectParameter("SetItemsPrice", typeof(bool));
    
            var inventoryHeaderIDParameter = inventoryHeaderID.HasValue ?
                new ObjectParameter("InventoryHeaderID", inventoryHeaderID) :
                new ObjectParameter("InventoryHeaderID", typeof(int));
    
            var servicePriceParameter = servicePrice.HasValue ?
                new ObjectParameter("ServicePrice", servicePrice) :
                new ObjectParameter("ServicePrice", typeof(double));
    
            var itemsPriceParameter = itemsPrice.HasValue ?
                new ObjectParameter("ItemsPrice", itemsPrice) :
                new ObjectParameter("ItemsPrice", typeof(double));
    
            var patientPriceParameter = patientPrice.HasValue ?
                new ObjectParameter("PatientPrice", patientPrice) :
                new ObjectParameter("PatientPrice", typeof(double));
    
            var insurancePriceParameter = insurancePrice.HasValue ?
                new ObjectParameter("InsurancePrice", insurancePrice) :
                new ObjectParameter("InsurancePrice", typeof(double));
    
            var marginPriceParameter = marginPrice.HasValue ?
                new ObjectParameter("MarginPrice", marginPrice) :
                new ObjectParameter("MarginPrice", typeof(double));
    
            var yaranehPriceParameter = yaranehPrice.HasValue ?
                new ObjectParameter("YaranehPrice", yaranehPrice) :
                new ObjectParameter("YaranehPrice", typeof(double));
    
            var mokamelPriceParameter = mokamelPrice.HasValue ?
                new ObjectParameter("MokamelPrice", mokamelPrice) :
                new ObjectParameter("MokamelPrice", typeof(double));
    
            var doctorPriceParameter = doctorPrice.HasValue ?
                new ObjectParameter("DoctorPrice", doctorPrice) :
                new ObjectParameter("DoctorPrice", typeof(double));
    
            var assistantPriceParameter = assistantPrice.HasValue ?
                new ObjectParameter("AssistantPrice", assistantPrice) :
                new ObjectParameter("AssistantPrice", typeof(double));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var besParameter = bes.HasValue ?
                new ObjectParameter("Bes", bes) :
                new ObjectParameter("Bes", typeof(double));
    
            var mandehParameter = mandeh.HasValue ?
                new ObjectParameter("Mandeh", mandeh) :
                new ObjectParameter("Mandeh", typeof(double));
    
            var zaribJParameter = zaribJ.HasValue ?
                new ObjectParameter("ZaribJ", zaribJ) :
                new ObjectParameter("ZaribJ", typeof(double));
    
            var zaribDParameter = zaribD.HasValue ?
                new ObjectParameter("ZaribD", zaribD) :
                new ObjectParameter("ZaribD", typeof(double));
    
            var zaribBParameter = zaribB.HasValue ?
                new ObjectParameter("ZaribB", zaribB) :
                new ObjectParameter("ZaribB", typeof(double));
    
            var zaribKParameter = zaribK.HasValue ?
                new ObjectParameter("ZaribK", zaribK) :
                new ObjectParameter("ZaribK", typeof(double));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var laboratoryIDParameter = laboratoryID.HasValue ?
                new ObjectParameter("LaboratoryID", laboratoryID) :
                new ObjectParameter("LaboratoryID", typeof(int));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Receptions_Update", iDParameter, receptionUIParameter, registerDateParameter, workCalendarIDParameter, specialtyIDParameter, doctorIDParameter, doctorDarsadParameter, assistantIDParameter, assistantDarsadParameter, sexTypeIDParameter, patientIDParameter, petIDParameter, patientNameParameter, patientMeliParameter, patientGeneralParameter, patientDarsadParameter, insuranceIDParameter, insuranceNumberParameter, customerIDParameter, reasonIDParameter, diagnosisIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, bodyIDParameter, bodyNumbParameter, dentalInformationIDParameter, therapyIDParameter, medicalServiceIDParameter, medicalServiceDscParameter, numbParameter, serviceTimeParameter, yaranehIDParameter, mokamelIDParameter, diseaseIDParameter, setItemsPriceParameter, inventoryHeaderIDParameter, servicePriceParameter, itemsPriceParameter, patientPriceParameter, insurancePriceParameter, marginPriceParameter, yaranehPriceParameter, mokamelPriceParameter, doctorPriceParameter, assistantPriceParameter, takhParameter, bedParameter, besParameter, mandehParameter, zaribJParameter, zaribDParameter, zaribBParameter, zaribKParameter, prescriptionIDParameter, laboratoryIDParameter, receptionTypeIDParameter, receptionStateIDParameter, paymentStateIDParameter, paymentTypeIDParameter, shortDscParameter, dscParameter, shiftIDParameter, userIDParameter);
        }
    
        public virtual int sp_Receptions_UpdateBes(Nullable<int> rID)
        {
            var rIDParameter = rID.HasValue ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Receptions_UpdateBes", rIDParameter);
        }
    
        public virtual int sp_Receptions_UpdatePrices(Nullable<int> recID)
        {
            var recIDParameter = recID.HasValue ?
                new ObjectParameter("RecID", recID) :
                new ObjectParameter("RecID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Receptions_UpdatePrices", recIDParameter);
        }
    
        public virtual int sp_Receptions_updateshifts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Receptions_updateshifts");
        }
    
        public virtual int sp_ReceptionServices_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionServices_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_ReceptionServices_Insert(Nullable<int> receptionID, Nullable<System.DateTime> registerDate, Nullable<byte> rowID, Nullable<int> specialtyID, Nullable<int> doctorID, Nullable<double> doctorDarsad, Nullable<int> assistantID, Nullable<double> assistantDarsad, Nullable<byte> sexTypeID, Nullable<int> patientID, Nullable<int> petID, string patientName, string patientMeli, string patientGeneral, Nullable<double> patientDarsad, Nullable<int> insuranceID, string insuranceNumber, Nullable<int> customerID, Nullable<int> reasonID, Nullable<int> diagnosisID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> bodyID, Nullable<int> bodyNumb, Nullable<int> therapyID, Nullable<int> medicalServiceID, string dsc, Nullable<double> numb, Nullable<int> yaranehID, Nullable<int> mokamelID, Nullable<int> diseaseID, Nullable<short> serviceTime_P, Nullable<double> servicePrice_P, Nullable<double> patientPrice_P, Nullable<double> insurancePrice_P, Nullable<double> marginPrice_P, Nullable<double> yaranehPrice_P, Nullable<double> mokamelPrice_P, Nullable<double> doctorPrice_P, Nullable<double> assistantPrice_P, Nullable<double> takh_P, Nullable<double> bed_P, Nullable<double> zaribJ_P, Nullable<double> zaribD_P, Nullable<double> zaribB_P, Nullable<double> zaribK_P, Nullable<short> serviceTime, Nullable<double> servicePrice, Nullable<bool> setItemsPrice, Nullable<int> inventoryHeaderID, Nullable<double> itemsPrice, Nullable<double> patientPrice, Nullable<double> insurancePrice, Nullable<double> marginPrice, Nullable<double> yaranehPrice, Nullable<double> mokamelPrice, Nullable<double> doctorPrice, Nullable<double> assistantPrice, Nullable<double> takh, Nullable<double> bed, Nullable<double> bes, Nullable<double> mandeh, Nullable<double> zaribJ, Nullable<double> zaribD, Nullable<double> zaribB, Nullable<double> zaribK, Nullable<byte> upLeft1, Nullable<byte> upLeft2, Nullable<byte> upLeft3, Nullable<byte> upLeft4, Nullable<byte> upLeft5, Nullable<byte> upLeft6, Nullable<byte> upLeft7, Nullable<byte> upLeft8, Nullable<byte> upRight1, Nullable<byte> upRight2, Nullable<byte> upRight3, Nullable<byte> upRight4, Nullable<byte> upRight5, Nullable<byte> upRight6, Nullable<byte> upRight7, Nullable<byte> upRight8, Nullable<byte> downLeft1, Nullable<byte> downLeft2, Nullable<byte> downLeft3, Nullable<byte> downLeft4, Nullable<byte> downLeft5, Nullable<byte> downLeft6, Nullable<byte> downLeft7, Nullable<byte> downLeft8, Nullable<byte> downRight1, Nullable<byte> downRight2, Nullable<byte> downRight3, Nullable<byte> downRight4, Nullable<byte> downRight5, Nullable<byte> downRight6, Nullable<byte> downRight7, Nullable<byte> downRight8, Nullable<byte> upLeftA, Nullable<byte> upLeftB, Nullable<byte> upLeftC, Nullable<byte> upLeftD, Nullable<byte> upLeftE, Nullable<byte> upRightA, Nullable<byte> upRightB, Nullable<byte> upRightC, Nullable<byte> upRightD, Nullable<byte> upRightE, Nullable<byte> downLeftA, Nullable<byte> downLeftB, Nullable<byte> downLeftC, Nullable<byte> downLeftD, Nullable<byte> downLeftE, Nullable<byte> downRightA, Nullable<byte> downRightB, Nullable<byte> downRightC, Nullable<byte> downRightD, Nullable<byte> downRightE, byte[] diagram, Nullable<byte> dentalKindID, Nullable<short> dentalStateID, Nullable<bool> selected, Nullable<int> prescriptionID, Nullable<int> laboratoryID, Nullable<short> shiftID, Nullable<int> userid)
        {
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var rowIDParameter = rowID.HasValue ?
                new ObjectParameter("RowID", rowID) :
                new ObjectParameter("RowID", typeof(byte));
    
            var specialtyIDParameter = specialtyID.HasValue ?
                new ObjectParameter("SpecialtyID", specialtyID) :
                new ObjectParameter("SpecialtyID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var doctorDarsadParameter = doctorDarsad.HasValue ?
                new ObjectParameter("DoctorDarsad", doctorDarsad) :
                new ObjectParameter("DoctorDarsad", typeof(double));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var assistantDarsadParameter = assistantDarsad.HasValue ?
                new ObjectParameter("AssistantDarsad", assistantDarsad) :
                new ObjectParameter("AssistantDarsad", typeof(double));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var petIDParameter = petID.HasValue ?
                new ObjectParameter("PetID", petID) :
                new ObjectParameter("PetID", typeof(int));
    
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var patientGeneralParameter = patientGeneral != null ?
                new ObjectParameter("PatientGeneral", patientGeneral) :
                new ObjectParameter("PatientGeneral", typeof(string));
    
            var patientDarsadParameter = patientDarsad.HasValue ?
                new ObjectParameter("PatientDarsad", patientDarsad) :
                new ObjectParameter("PatientDarsad", typeof(double));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var bodyNumbParameter = bodyNumb.HasValue ?
                new ObjectParameter("BodyNumb", bodyNumb) :
                new ObjectParameter("BodyNumb", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var numbParameter = numb.HasValue ?
                new ObjectParameter("Numb", numb) :
                new ObjectParameter("Numb", typeof(double));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(int));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var serviceTime_PParameter = serviceTime_P.HasValue ?
                new ObjectParameter("ServiceTime_P", serviceTime_P) :
                new ObjectParameter("ServiceTime_P", typeof(short));
    
            var servicePrice_PParameter = servicePrice_P.HasValue ?
                new ObjectParameter("ServicePrice_P", servicePrice_P) :
                new ObjectParameter("ServicePrice_P", typeof(double));
    
            var patientPrice_PParameter = patientPrice_P.HasValue ?
                new ObjectParameter("PatientPrice_P", patientPrice_P) :
                new ObjectParameter("PatientPrice_P", typeof(double));
    
            var insurancePrice_PParameter = insurancePrice_P.HasValue ?
                new ObjectParameter("InsurancePrice_P", insurancePrice_P) :
                new ObjectParameter("InsurancePrice_P", typeof(double));
    
            var marginPrice_PParameter = marginPrice_P.HasValue ?
                new ObjectParameter("MarginPrice_P", marginPrice_P) :
                new ObjectParameter("MarginPrice_P", typeof(double));
    
            var yaranehPrice_PParameter = yaranehPrice_P.HasValue ?
                new ObjectParameter("YaranehPrice_P", yaranehPrice_P) :
                new ObjectParameter("YaranehPrice_P", typeof(double));
    
            var mokamelPrice_PParameter = mokamelPrice_P.HasValue ?
                new ObjectParameter("MokamelPrice_P", mokamelPrice_P) :
                new ObjectParameter("MokamelPrice_P", typeof(double));
    
            var doctorPrice_PParameter = doctorPrice_P.HasValue ?
                new ObjectParameter("DoctorPrice_P", doctorPrice_P) :
                new ObjectParameter("DoctorPrice_P", typeof(double));
    
            var assistantPrice_PParameter = assistantPrice_P.HasValue ?
                new ObjectParameter("AssistantPrice_P", assistantPrice_P) :
                new ObjectParameter("AssistantPrice_P", typeof(double));
    
            var takh_PParameter = takh_P.HasValue ?
                new ObjectParameter("Takh_P", takh_P) :
                new ObjectParameter("Takh_P", typeof(double));
    
            var bed_PParameter = bed_P.HasValue ?
                new ObjectParameter("Bed_P", bed_P) :
                new ObjectParameter("Bed_P", typeof(double));
    
            var zaribJ_PParameter = zaribJ_P.HasValue ?
                new ObjectParameter("ZaribJ_P", zaribJ_P) :
                new ObjectParameter("ZaribJ_P", typeof(double));
    
            var zaribD_PParameter = zaribD_P.HasValue ?
                new ObjectParameter("ZaribD_P", zaribD_P) :
                new ObjectParameter("ZaribD_P", typeof(double));
    
            var zaribB_PParameter = zaribB_P.HasValue ?
                new ObjectParameter("ZaribB_P", zaribB_P) :
                new ObjectParameter("ZaribB_P", typeof(double));
    
            var zaribK_PParameter = zaribK_P.HasValue ?
                new ObjectParameter("ZaribK_P", zaribK_P) :
                new ObjectParameter("ZaribK_P", typeof(double));
    
            var serviceTimeParameter = serviceTime.HasValue ?
                new ObjectParameter("ServiceTime", serviceTime) :
                new ObjectParameter("ServiceTime", typeof(short));
    
            var servicePriceParameter = servicePrice.HasValue ?
                new ObjectParameter("ServicePrice", servicePrice) :
                new ObjectParameter("ServicePrice", typeof(double));
    
            var setItemsPriceParameter = setItemsPrice.HasValue ?
                new ObjectParameter("SetItemsPrice", setItemsPrice) :
                new ObjectParameter("SetItemsPrice", typeof(bool));
    
            var inventoryHeaderIDParameter = inventoryHeaderID.HasValue ?
                new ObjectParameter("InventoryHeaderID", inventoryHeaderID) :
                new ObjectParameter("InventoryHeaderID", typeof(int));
    
            var itemsPriceParameter = itemsPrice.HasValue ?
                new ObjectParameter("ItemsPrice", itemsPrice) :
                new ObjectParameter("ItemsPrice", typeof(double));
    
            var patientPriceParameter = patientPrice.HasValue ?
                new ObjectParameter("PatientPrice", patientPrice) :
                new ObjectParameter("PatientPrice", typeof(double));
    
            var insurancePriceParameter = insurancePrice.HasValue ?
                new ObjectParameter("InsurancePrice", insurancePrice) :
                new ObjectParameter("InsurancePrice", typeof(double));
    
            var marginPriceParameter = marginPrice.HasValue ?
                new ObjectParameter("MarginPrice", marginPrice) :
                new ObjectParameter("MarginPrice", typeof(double));
    
            var yaranehPriceParameter = yaranehPrice.HasValue ?
                new ObjectParameter("YaranehPrice", yaranehPrice) :
                new ObjectParameter("YaranehPrice", typeof(double));
    
            var mokamelPriceParameter = mokamelPrice.HasValue ?
                new ObjectParameter("MokamelPrice", mokamelPrice) :
                new ObjectParameter("MokamelPrice", typeof(double));
    
            var doctorPriceParameter = doctorPrice.HasValue ?
                new ObjectParameter("DoctorPrice", doctorPrice) :
                new ObjectParameter("DoctorPrice", typeof(double));
    
            var assistantPriceParameter = assistantPrice.HasValue ?
                new ObjectParameter("AssistantPrice", assistantPrice) :
                new ObjectParameter("AssistantPrice", typeof(double));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var besParameter = bes.HasValue ?
                new ObjectParameter("Bes", bes) :
                new ObjectParameter("Bes", typeof(double));
    
            var mandehParameter = mandeh.HasValue ?
                new ObjectParameter("Mandeh", mandeh) :
                new ObjectParameter("Mandeh", typeof(double));
    
            var zaribJParameter = zaribJ.HasValue ?
                new ObjectParameter("ZaribJ", zaribJ) :
                new ObjectParameter("ZaribJ", typeof(double));
    
            var zaribDParameter = zaribD.HasValue ?
                new ObjectParameter("ZaribD", zaribD) :
                new ObjectParameter("ZaribD", typeof(double));
    
            var zaribBParameter = zaribB.HasValue ?
                new ObjectParameter("ZaribB", zaribB) :
                new ObjectParameter("ZaribB", typeof(double));
    
            var zaribKParameter = zaribK.HasValue ?
                new ObjectParameter("ZaribK", zaribK) :
                new ObjectParameter("ZaribK", typeof(double));
    
            var upLeft1Parameter = upLeft1.HasValue ?
                new ObjectParameter("UpLeft1", upLeft1) :
                new ObjectParameter("UpLeft1", typeof(byte));
    
            var upLeft2Parameter = upLeft2.HasValue ?
                new ObjectParameter("UpLeft2", upLeft2) :
                new ObjectParameter("UpLeft2", typeof(byte));
    
            var upLeft3Parameter = upLeft3.HasValue ?
                new ObjectParameter("UpLeft3", upLeft3) :
                new ObjectParameter("UpLeft3", typeof(byte));
    
            var upLeft4Parameter = upLeft4.HasValue ?
                new ObjectParameter("UpLeft4", upLeft4) :
                new ObjectParameter("UpLeft4", typeof(byte));
    
            var upLeft5Parameter = upLeft5.HasValue ?
                new ObjectParameter("UpLeft5", upLeft5) :
                new ObjectParameter("UpLeft5", typeof(byte));
    
            var upLeft6Parameter = upLeft6.HasValue ?
                new ObjectParameter("UpLeft6", upLeft6) :
                new ObjectParameter("UpLeft6", typeof(byte));
    
            var upLeft7Parameter = upLeft7.HasValue ?
                new ObjectParameter("UpLeft7", upLeft7) :
                new ObjectParameter("UpLeft7", typeof(byte));
    
            var upLeft8Parameter = upLeft8.HasValue ?
                new ObjectParameter("UpLeft8", upLeft8) :
                new ObjectParameter("UpLeft8", typeof(byte));
    
            var upRight1Parameter = upRight1.HasValue ?
                new ObjectParameter("UpRight1", upRight1) :
                new ObjectParameter("UpRight1", typeof(byte));
    
            var upRight2Parameter = upRight2.HasValue ?
                new ObjectParameter("UpRight2", upRight2) :
                new ObjectParameter("UpRight2", typeof(byte));
    
            var upRight3Parameter = upRight3.HasValue ?
                new ObjectParameter("UpRight3", upRight3) :
                new ObjectParameter("UpRight3", typeof(byte));
    
            var upRight4Parameter = upRight4.HasValue ?
                new ObjectParameter("UpRight4", upRight4) :
                new ObjectParameter("UpRight4", typeof(byte));
    
            var upRight5Parameter = upRight5.HasValue ?
                new ObjectParameter("UpRight5", upRight5) :
                new ObjectParameter("UpRight5", typeof(byte));
    
            var upRight6Parameter = upRight6.HasValue ?
                new ObjectParameter("UpRight6", upRight6) :
                new ObjectParameter("UpRight6", typeof(byte));
    
            var upRight7Parameter = upRight7.HasValue ?
                new ObjectParameter("UpRight7", upRight7) :
                new ObjectParameter("UpRight7", typeof(byte));
    
            var upRight8Parameter = upRight8.HasValue ?
                new ObjectParameter("UpRight8", upRight8) :
                new ObjectParameter("UpRight8", typeof(byte));
    
            var downLeft1Parameter = downLeft1.HasValue ?
                new ObjectParameter("DownLeft1", downLeft1) :
                new ObjectParameter("DownLeft1", typeof(byte));
    
            var downLeft2Parameter = downLeft2.HasValue ?
                new ObjectParameter("DownLeft2", downLeft2) :
                new ObjectParameter("DownLeft2", typeof(byte));
    
            var downLeft3Parameter = downLeft3.HasValue ?
                new ObjectParameter("DownLeft3", downLeft3) :
                new ObjectParameter("DownLeft3", typeof(byte));
    
            var downLeft4Parameter = downLeft4.HasValue ?
                new ObjectParameter("DownLeft4", downLeft4) :
                new ObjectParameter("DownLeft4", typeof(byte));
    
            var downLeft5Parameter = downLeft5.HasValue ?
                new ObjectParameter("DownLeft5", downLeft5) :
                new ObjectParameter("DownLeft5", typeof(byte));
    
            var downLeft6Parameter = downLeft6.HasValue ?
                new ObjectParameter("DownLeft6", downLeft6) :
                new ObjectParameter("DownLeft6", typeof(byte));
    
            var downLeft7Parameter = downLeft7.HasValue ?
                new ObjectParameter("DownLeft7", downLeft7) :
                new ObjectParameter("DownLeft7", typeof(byte));
    
            var downLeft8Parameter = downLeft8.HasValue ?
                new ObjectParameter("DownLeft8", downLeft8) :
                new ObjectParameter("DownLeft8", typeof(byte));
    
            var downRight1Parameter = downRight1.HasValue ?
                new ObjectParameter("DownRight1", downRight1) :
                new ObjectParameter("DownRight1", typeof(byte));
    
            var downRight2Parameter = downRight2.HasValue ?
                new ObjectParameter("DownRight2", downRight2) :
                new ObjectParameter("DownRight2", typeof(byte));
    
            var downRight3Parameter = downRight3.HasValue ?
                new ObjectParameter("DownRight3", downRight3) :
                new ObjectParameter("DownRight3", typeof(byte));
    
            var downRight4Parameter = downRight4.HasValue ?
                new ObjectParameter("DownRight4", downRight4) :
                new ObjectParameter("DownRight4", typeof(byte));
    
            var downRight5Parameter = downRight5.HasValue ?
                new ObjectParameter("DownRight5", downRight5) :
                new ObjectParameter("DownRight5", typeof(byte));
    
            var downRight6Parameter = downRight6.HasValue ?
                new ObjectParameter("DownRight6", downRight6) :
                new ObjectParameter("DownRight6", typeof(byte));
    
            var downRight7Parameter = downRight7.HasValue ?
                new ObjectParameter("DownRight7", downRight7) :
                new ObjectParameter("DownRight7", typeof(byte));
    
            var downRight8Parameter = downRight8.HasValue ?
                new ObjectParameter("DownRight8", downRight8) :
                new ObjectParameter("DownRight8", typeof(byte));
    
            var upLeftAParameter = upLeftA.HasValue ?
                new ObjectParameter("UpLeftA", upLeftA) :
                new ObjectParameter("UpLeftA", typeof(byte));
    
            var upLeftBParameter = upLeftB.HasValue ?
                new ObjectParameter("UpLeftB", upLeftB) :
                new ObjectParameter("UpLeftB", typeof(byte));
    
            var upLeftCParameter = upLeftC.HasValue ?
                new ObjectParameter("UpLeftC", upLeftC) :
                new ObjectParameter("UpLeftC", typeof(byte));
    
            var upLeftDParameter = upLeftD.HasValue ?
                new ObjectParameter("UpLeftD", upLeftD) :
                new ObjectParameter("UpLeftD", typeof(byte));
    
            var upLeftEParameter = upLeftE.HasValue ?
                new ObjectParameter("UpLeftE", upLeftE) :
                new ObjectParameter("UpLeftE", typeof(byte));
    
            var upRightAParameter = upRightA.HasValue ?
                new ObjectParameter("UpRightA", upRightA) :
                new ObjectParameter("UpRightA", typeof(byte));
    
            var upRightBParameter = upRightB.HasValue ?
                new ObjectParameter("UpRightB", upRightB) :
                new ObjectParameter("UpRightB", typeof(byte));
    
            var upRightCParameter = upRightC.HasValue ?
                new ObjectParameter("UpRightC", upRightC) :
                new ObjectParameter("UpRightC", typeof(byte));
    
            var upRightDParameter = upRightD.HasValue ?
                new ObjectParameter("UpRightD", upRightD) :
                new ObjectParameter("UpRightD", typeof(byte));
    
            var upRightEParameter = upRightE.HasValue ?
                new ObjectParameter("UpRightE", upRightE) :
                new ObjectParameter("UpRightE", typeof(byte));
    
            var downLeftAParameter = downLeftA.HasValue ?
                new ObjectParameter("DownLeftA", downLeftA) :
                new ObjectParameter("DownLeftA", typeof(byte));
    
            var downLeftBParameter = downLeftB.HasValue ?
                new ObjectParameter("DownLeftB", downLeftB) :
                new ObjectParameter("DownLeftB", typeof(byte));
    
            var downLeftCParameter = downLeftC.HasValue ?
                new ObjectParameter("DownLeftC", downLeftC) :
                new ObjectParameter("DownLeftC", typeof(byte));
    
            var downLeftDParameter = downLeftD.HasValue ?
                new ObjectParameter("DownLeftD", downLeftD) :
                new ObjectParameter("DownLeftD", typeof(byte));
    
            var downLeftEParameter = downLeftE.HasValue ?
                new ObjectParameter("DownLeftE", downLeftE) :
                new ObjectParameter("DownLeftE", typeof(byte));
    
            var downRightAParameter = downRightA.HasValue ?
                new ObjectParameter("DownRightA", downRightA) :
                new ObjectParameter("DownRightA", typeof(byte));
    
            var downRightBParameter = downRightB.HasValue ?
                new ObjectParameter("DownRightB", downRightB) :
                new ObjectParameter("DownRightB", typeof(byte));
    
            var downRightCParameter = downRightC.HasValue ?
                new ObjectParameter("DownRightC", downRightC) :
                new ObjectParameter("DownRightC", typeof(byte));
    
            var downRightDParameter = downRightD.HasValue ?
                new ObjectParameter("DownRightD", downRightD) :
                new ObjectParameter("DownRightD", typeof(byte));
    
            var downRightEParameter = downRightE.HasValue ?
                new ObjectParameter("DownRightE", downRightE) :
                new ObjectParameter("DownRightE", typeof(byte));
    
            var diagramParameter = diagram != null ?
                new ObjectParameter("Diagram", diagram) :
                new ObjectParameter("Diagram", typeof(byte[]));
    
            var dentalKindIDParameter = dentalKindID.HasValue ?
                new ObjectParameter("DentalKindID", dentalKindID) :
                new ObjectParameter("DentalKindID", typeof(byte));
    
            var dentalStateIDParameter = dentalStateID.HasValue ?
                new ObjectParameter("DentalStateID", dentalStateID) :
                new ObjectParameter("DentalStateID", typeof(short));
    
            var selectedParameter = selected.HasValue ?
                new ObjectParameter("Selected", selected) :
                new ObjectParameter("Selected", typeof(bool));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var laboratoryIDParameter = laboratoryID.HasValue ?
                new ObjectParameter("LaboratoryID", laboratoryID) :
                new ObjectParameter("LaboratoryID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionServices_Insert", receptionIDParameter, registerDateParameter, rowIDParameter, specialtyIDParameter, doctorIDParameter, doctorDarsadParameter, assistantIDParameter, assistantDarsadParameter, sexTypeIDParameter, patientIDParameter, petIDParameter, patientNameParameter, patientMeliParameter, patientGeneralParameter, patientDarsadParameter, insuranceIDParameter, insuranceNumberParameter, customerIDParameter, reasonIDParameter, diagnosisIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, bodyIDParameter, bodyNumbParameter, therapyIDParameter, medicalServiceIDParameter, dscParameter, numbParameter, yaranehIDParameter, mokamelIDParameter, diseaseIDParameter, serviceTime_PParameter, servicePrice_PParameter, patientPrice_PParameter, insurancePrice_PParameter, marginPrice_PParameter, yaranehPrice_PParameter, mokamelPrice_PParameter, doctorPrice_PParameter, assistantPrice_PParameter, takh_PParameter, bed_PParameter, zaribJ_PParameter, zaribD_PParameter, zaribB_PParameter, zaribK_PParameter, serviceTimeParameter, servicePriceParameter, setItemsPriceParameter, inventoryHeaderIDParameter, itemsPriceParameter, patientPriceParameter, insurancePriceParameter, marginPriceParameter, yaranehPriceParameter, mokamelPriceParameter, doctorPriceParameter, assistantPriceParameter, takhParameter, bedParameter, besParameter, mandehParameter, zaribJParameter, zaribDParameter, zaribBParameter, zaribKParameter, upLeft1Parameter, upLeft2Parameter, upLeft3Parameter, upLeft4Parameter, upLeft5Parameter, upLeft6Parameter, upLeft7Parameter, upLeft8Parameter, upRight1Parameter, upRight2Parameter, upRight3Parameter, upRight4Parameter, upRight5Parameter, upRight6Parameter, upRight7Parameter, upRight8Parameter, downLeft1Parameter, downLeft2Parameter, downLeft3Parameter, downLeft4Parameter, downLeft5Parameter, downLeft6Parameter, downLeft7Parameter, downLeft8Parameter, downRight1Parameter, downRight2Parameter, downRight3Parameter, downRight4Parameter, downRight5Parameter, downRight6Parameter, downRight7Parameter, downRight8Parameter, upLeftAParameter, upLeftBParameter, upLeftCParameter, upLeftDParameter, upLeftEParameter, upRightAParameter, upRightBParameter, upRightCParameter, upRightDParameter, upRightEParameter, downLeftAParameter, downLeftBParameter, downLeftCParameter, downLeftDParameter, downLeftEParameter, downRightAParameter, downRightBParameter, downRightCParameter, downRightDParameter, downRightEParameter, diagramParameter, dentalKindIDParameter, dentalStateIDParameter, selectedParameter, prescriptionIDParameter, laboratoryIDParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_ReceptionServices_Select_Result> sp_ReceptionServices_Select(string registerDate_Start, string registerDate_End, Nullable<int> receptionID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, Nullable<int> reasonID, Nullable<short> diseaseID, Nullable<short> diagnosisID, Nullable<int> bodyID, Nullable<short> serviceTime_Start, Nullable<short> serviceTime_End, string dsc, Nullable<int> centralID, Nullable<bool> servicePriceNotZero, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(short));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(short));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var serviceTime_StartParameter = serviceTime_Start.HasValue ?
                new ObjectParameter("ServiceTime_Start", serviceTime_Start) :
                new ObjectParameter("ServiceTime_Start", typeof(short));
    
            var serviceTime_EndParameter = serviceTime_End.HasValue ?
                new ObjectParameter("ServiceTime_End", serviceTime_End) :
                new ObjectParameter("ServiceTime_End", typeof(short));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var servicePriceNotZeroParameter = servicePriceNotZero.HasValue ?
                new ObjectParameter("ServicePriceNotZero", servicePriceNotZero) :
                new ObjectParameter("ServicePriceNotZero", typeof(bool));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReceptionServices_Select_Result>("sp_ReceptionServices_Select", registerDate_StartParameter, registerDate_EndParameter, receptionIDParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, reasonIDParameter, diseaseIDParameter, diagnosisIDParameter, bodyIDParameter, serviceTime_StartParameter, serviceTime_EndParameter, dscParameter, centralIDParameter, servicePriceNotZeroParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_ReceptionServices_SelectRow_Result> sp_ReceptionServices_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReceptionServices_SelectRow_Result>("sp_ReceptionServices_SelectRow", iDParameter);
        }
    
        public virtual int sp_ReceptionServices_Update(Nullable<int> iD, Nullable<int> receptionID, Nullable<System.DateTime> registerDate, Nullable<byte> rowID, Nullable<int> specialtyID, Nullable<int> doctorID, Nullable<double> doctorDarsad, Nullable<int> assistantID, Nullable<double> assistantDarsad, Nullable<byte> sexTypeID, Nullable<int> patientID, Nullable<int> petID, string patientName, string patientMeli, string patientGeneral, Nullable<double> patientDarsad, Nullable<int> insuranceID, string insuranceNumber, Nullable<int> customerID, Nullable<int> reasonID, Nullable<int> diagnosisID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> bodyID, Nullable<int> bodyNumb, Nullable<int> therapyID, Nullable<int> medicalServiceID, string dsc, Nullable<double> numb, Nullable<int> yaranehID, Nullable<int> mokamelID, Nullable<int> diseaseID, Nullable<short> serviceTime_P, Nullable<double> servicePrice_P, Nullable<double> patientPrice_P, Nullable<double> insurancePrice_P, Nullable<double> marginPrice_P, Nullable<double> yaranehPrice_P, Nullable<double> mokamelPrice_P, Nullable<double> doctorPrice_P, Nullable<double> assistantPrice_P, Nullable<double> takh_P, Nullable<double> bed_P, Nullable<double> zaribJ_P, Nullable<double> zaribD_P, Nullable<double> zaribB_P, Nullable<double> zaribK_P, Nullable<short> serviceTime, Nullable<double> servicePrice, Nullable<bool> setItemsPrice, Nullable<int> inventoryHeaderID, Nullable<double> itemsPrice, Nullable<double> patientPrice, Nullable<double> insurancePrice, Nullable<double> marginPrice, Nullable<double> yaranehPrice, Nullable<double> mokamelPrice, Nullable<double> doctorPrice, Nullable<double> assistantPrice, Nullable<double> takh, Nullable<double> bed, Nullable<double> bes, Nullable<double> mandeh, Nullable<double> zaribJ, Nullable<double> zaribD, Nullable<double> zaribB, Nullable<double> zaribK, Nullable<byte> upLeft1, Nullable<byte> upLeft2, Nullable<byte> upLeft3, Nullable<byte> upLeft4, Nullable<byte> upLeft5, Nullable<byte> upLeft6, Nullable<byte> upLeft7, Nullable<byte> upLeft8, Nullable<byte> upRight1, Nullable<byte> upRight2, Nullable<byte> upRight3, Nullable<byte> upRight4, Nullable<byte> upRight5, Nullable<byte> upRight6, Nullable<byte> upRight7, Nullable<byte> upRight8, Nullable<byte> downLeft1, Nullable<byte> downLeft2, Nullable<byte> downLeft3, Nullable<byte> downLeft4, Nullable<byte> downLeft5, Nullable<byte> downLeft6, Nullable<byte> downLeft7, Nullable<byte> downLeft8, Nullable<byte> downRight1, Nullable<byte> downRight2, Nullable<byte> downRight3, Nullable<byte> downRight4, Nullable<byte> downRight5, Nullable<byte> downRight6, Nullable<byte> downRight7, Nullable<byte> downRight8, Nullable<byte> upLeftA, Nullable<byte> upLeftB, Nullable<byte> upLeftC, Nullable<byte> upLeftD, Nullable<byte> upLeftE, Nullable<byte> upRightA, Nullable<byte> upRightB, Nullable<byte> upRightC, Nullable<byte> upRightD, Nullable<byte> upRightE, Nullable<byte> downLeftA, Nullable<byte> downLeftB, Nullable<byte> downLeftC, Nullable<byte> downLeftD, Nullable<byte> downLeftE, Nullable<byte> downRightA, Nullable<byte> downRightB, Nullable<byte> downRightC, Nullable<byte> downRightD, Nullable<byte> downRightE, byte[] diagram, Nullable<byte> dentalKindID, Nullable<short> dentalStateID, Nullable<bool> selected, Nullable<int> prescriptionID, Nullable<int> laboratoryID, Nullable<short> shiftID, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var rowIDParameter = rowID.HasValue ?
                new ObjectParameter("RowID", rowID) :
                new ObjectParameter("RowID", typeof(byte));
    
            var specialtyIDParameter = specialtyID.HasValue ?
                new ObjectParameter("SpecialtyID", specialtyID) :
                new ObjectParameter("SpecialtyID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var doctorDarsadParameter = doctorDarsad.HasValue ?
                new ObjectParameter("DoctorDarsad", doctorDarsad) :
                new ObjectParameter("DoctorDarsad", typeof(double));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var assistantDarsadParameter = assistantDarsad.HasValue ?
                new ObjectParameter("AssistantDarsad", assistantDarsad) :
                new ObjectParameter("AssistantDarsad", typeof(double));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var petIDParameter = petID.HasValue ?
                new ObjectParameter("PetID", petID) :
                new ObjectParameter("PetID", typeof(int));
    
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var patientGeneralParameter = patientGeneral != null ?
                new ObjectParameter("PatientGeneral", patientGeneral) :
                new ObjectParameter("PatientGeneral", typeof(string));
    
            var patientDarsadParameter = patientDarsad.HasValue ?
                new ObjectParameter("PatientDarsad", patientDarsad) :
                new ObjectParameter("PatientDarsad", typeof(double));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var bodyNumbParameter = bodyNumb.HasValue ?
                new ObjectParameter("BodyNumb", bodyNumb) :
                new ObjectParameter("BodyNumb", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var numbParameter = numb.HasValue ?
                new ObjectParameter("Numb", numb) :
                new ObjectParameter("Numb", typeof(double));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(int));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var serviceTime_PParameter = serviceTime_P.HasValue ?
                new ObjectParameter("ServiceTime_P", serviceTime_P) :
                new ObjectParameter("ServiceTime_P", typeof(short));
    
            var servicePrice_PParameter = servicePrice_P.HasValue ?
                new ObjectParameter("ServicePrice_P", servicePrice_P) :
                new ObjectParameter("ServicePrice_P", typeof(double));
    
            var patientPrice_PParameter = patientPrice_P.HasValue ?
                new ObjectParameter("PatientPrice_P", patientPrice_P) :
                new ObjectParameter("PatientPrice_P", typeof(double));
    
            var insurancePrice_PParameter = insurancePrice_P.HasValue ?
                new ObjectParameter("InsurancePrice_P", insurancePrice_P) :
                new ObjectParameter("InsurancePrice_P", typeof(double));
    
            var marginPrice_PParameter = marginPrice_P.HasValue ?
                new ObjectParameter("MarginPrice_P", marginPrice_P) :
                new ObjectParameter("MarginPrice_P", typeof(double));
    
            var yaranehPrice_PParameter = yaranehPrice_P.HasValue ?
                new ObjectParameter("YaranehPrice_P", yaranehPrice_P) :
                new ObjectParameter("YaranehPrice_P", typeof(double));
    
            var mokamelPrice_PParameter = mokamelPrice_P.HasValue ?
                new ObjectParameter("MokamelPrice_P", mokamelPrice_P) :
                new ObjectParameter("MokamelPrice_P", typeof(double));
    
            var doctorPrice_PParameter = doctorPrice_P.HasValue ?
                new ObjectParameter("DoctorPrice_P", doctorPrice_P) :
                new ObjectParameter("DoctorPrice_P", typeof(double));
    
            var assistantPrice_PParameter = assistantPrice_P.HasValue ?
                new ObjectParameter("AssistantPrice_P", assistantPrice_P) :
                new ObjectParameter("AssistantPrice_P", typeof(double));
    
            var takh_PParameter = takh_P.HasValue ?
                new ObjectParameter("Takh_P", takh_P) :
                new ObjectParameter("Takh_P", typeof(double));
    
            var bed_PParameter = bed_P.HasValue ?
                new ObjectParameter("Bed_P", bed_P) :
                new ObjectParameter("Bed_P", typeof(double));
    
            var zaribJ_PParameter = zaribJ_P.HasValue ?
                new ObjectParameter("ZaribJ_P", zaribJ_P) :
                new ObjectParameter("ZaribJ_P", typeof(double));
    
            var zaribD_PParameter = zaribD_P.HasValue ?
                new ObjectParameter("ZaribD_P", zaribD_P) :
                new ObjectParameter("ZaribD_P", typeof(double));
    
            var zaribB_PParameter = zaribB_P.HasValue ?
                new ObjectParameter("ZaribB_P", zaribB_P) :
                new ObjectParameter("ZaribB_P", typeof(double));
    
            var zaribK_PParameter = zaribK_P.HasValue ?
                new ObjectParameter("ZaribK_P", zaribK_P) :
                new ObjectParameter("ZaribK_P", typeof(double));
    
            var serviceTimeParameter = serviceTime.HasValue ?
                new ObjectParameter("ServiceTime", serviceTime) :
                new ObjectParameter("ServiceTime", typeof(short));
    
            var servicePriceParameter = servicePrice.HasValue ?
                new ObjectParameter("ServicePrice", servicePrice) :
                new ObjectParameter("ServicePrice", typeof(double));
    
            var setItemsPriceParameter = setItemsPrice.HasValue ?
                new ObjectParameter("SetItemsPrice", setItemsPrice) :
                new ObjectParameter("SetItemsPrice", typeof(bool));
    
            var inventoryHeaderIDParameter = inventoryHeaderID.HasValue ?
                new ObjectParameter("InventoryHeaderID", inventoryHeaderID) :
                new ObjectParameter("InventoryHeaderID", typeof(int));
    
            var itemsPriceParameter = itemsPrice.HasValue ?
                new ObjectParameter("ItemsPrice", itemsPrice) :
                new ObjectParameter("ItemsPrice", typeof(double));
    
            var patientPriceParameter = patientPrice.HasValue ?
                new ObjectParameter("PatientPrice", patientPrice) :
                new ObjectParameter("PatientPrice", typeof(double));
    
            var insurancePriceParameter = insurancePrice.HasValue ?
                new ObjectParameter("InsurancePrice", insurancePrice) :
                new ObjectParameter("InsurancePrice", typeof(double));
    
            var marginPriceParameter = marginPrice.HasValue ?
                new ObjectParameter("MarginPrice", marginPrice) :
                new ObjectParameter("MarginPrice", typeof(double));
    
            var yaranehPriceParameter = yaranehPrice.HasValue ?
                new ObjectParameter("YaranehPrice", yaranehPrice) :
                new ObjectParameter("YaranehPrice", typeof(double));
    
            var mokamelPriceParameter = mokamelPrice.HasValue ?
                new ObjectParameter("MokamelPrice", mokamelPrice) :
                new ObjectParameter("MokamelPrice", typeof(double));
    
            var doctorPriceParameter = doctorPrice.HasValue ?
                new ObjectParameter("DoctorPrice", doctorPrice) :
                new ObjectParameter("DoctorPrice", typeof(double));
    
            var assistantPriceParameter = assistantPrice.HasValue ?
                new ObjectParameter("AssistantPrice", assistantPrice) :
                new ObjectParameter("AssistantPrice", typeof(double));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var besParameter = bes.HasValue ?
                new ObjectParameter("Bes", bes) :
                new ObjectParameter("Bes", typeof(double));
    
            var mandehParameter = mandeh.HasValue ?
                new ObjectParameter("Mandeh", mandeh) :
                new ObjectParameter("Mandeh", typeof(double));
    
            var zaribJParameter = zaribJ.HasValue ?
                new ObjectParameter("ZaribJ", zaribJ) :
                new ObjectParameter("ZaribJ", typeof(double));
    
            var zaribDParameter = zaribD.HasValue ?
                new ObjectParameter("ZaribD", zaribD) :
                new ObjectParameter("ZaribD", typeof(double));
    
            var zaribBParameter = zaribB.HasValue ?
                new ObjectParameter("ZaribB", zaribB) :
                new ObjectParameter("ZaribB", typeof(double));
    
            var zaribKParameter = zaribK.HasValue ?
                new ObjectParameter("ZaribK", zaribK) :
                new ObjectParameter("ZaribK", typeof(double));
    
            var upLeft1Parameter = upLeft1.HasValue ?
                new ObjectParameter("UpLeft1", upLeft1) :
                new ObjectParameter("UpLeft1", typeof(byte));
    
            var upLeft2Parameter = upLeft2.HasValue ?
                new ObjectParameter("UpLeft2", upLeft2) :
                new ObjectParameter("UpLeft2", typeof(byte));
    
            var upLeft3Parameter = upLeft3.HasValue ?
                new ObjectParameter("UpLeft3", upLeft3) :
                new ObjectParameter("UpLeft3", typeof(byte));
    
            var upLeft4Parameter = upLeft4.HasValue ?
                new ObjectParameter("UpLeft4", upLeft4) :
                new ObjectParameter("UpLeft4", typeof(byte));
    
            var upLeft5Parameter = upLeft5.HasValue ?
                new ObjectParameter("UpLeft5", upLeft5) :
                new ObjectParameter("UpLeft5", typeof(byte));
    
            var upLeft6Parameter = upLeft6.HasValue ?
                new ObjectParameter("UpLeft6", upLeft6) :
                new ObjectParameter("UpLeft6", typeof(byte));
    
            var upLeft7Parameter = upLeft7.HasValue ?
                new ObjectParameter("UpLeft7", upLeft7) :
                new ObjectParameter("UpLeft7", typeof(byte));
    
            var upLeft8Parameter = upLeft8.HasValue ?
                new ObjectParameter("UpLeft8", upLeft8) :
                new ObjectParameter("UpLeft8", typeof(byte));
    
            var upRight1Parameter = upRight1.HasValue ?
                new ObjectParameter("UpRight1", upRight1) :
                new ObjectParameter("UpRight1", typeof(byte));
    
            var upRight2Parameter = upRight2.HasValue ?
                new ObjectParameter("UpRight2", upRight2) :
                new ObjectParameter("UpRight2", typeof(byte));
    
            var upRight3Parameter = upRight3.HasValue ?
                new ObjectParameter("UpRight3", upRight3) :
                new ObjectParameter("UpRight3", typeof(byte));
    
            var upRight4Parameter = upRight4.HasValue ?
                new ObjectParameter("UpRight4", upRight4) :
                new ObjectParameter("UpRight4", typeof(byte));
    
            var upRight5Parameter = upRight5.HasValue ?
                new ObjectParameter("UpRight5", upRight5) :
                new ObjectParameter("UpRight5", typeof(byte));
    
            var upRight6Parameter = upRight6.HasValue ?
                new ObjectParameter("UpRight6", upRight6) :
                new ObjectParameter("UpRight6", typeof(byte));
    
            var upRight7Parameter = upRight7.HasValue ?
                new ObjectParameter("UpRight7", upRight7) :
                new ObjectParameter("UpRight7", typeof(byte));
    
            var upRight8Parameter = upRight8.HasValue ?
                new ObjectParameter("UpRight8", upRight8) :
                new ObjectParameter("UpRight8", typeof(byte));
    
            var downLeft1Parameter = downLeft1.HasValue ?
                new ObjectParameter("DownLeft1", downLeft1) :
                new ObjectParameter("DownLeft1", typeof(byte));
    
            var downLeft2Parameter = downLeft2.HasValue ?
                new ObjectParameter("DownLeft2", downLeft2) :
                new ObjectParameter("DownLeft2", typeof(byte));
    
            var downLeft3Parameter = downLeft3.HasValue ?
                new ObjectParameter("DownLeft3", downLeft3) :
                new ObjectParameter("DownLeft3", typeof(byte));
    
            var downLeft4Parameter = downLeft4.HasValue ?
                new ObjectParameter("DownLeft4", downLeft4) :
                new ObjectParameter("DownLeft4", typeof(byte));
    
            var downLeft5Parameter = downLeft5.HasValue ?
                new ObjectParameter("DownLeft5", downLeft5) :
                new ObjectParameter("DownLeft5", typeof(byte));
    
            var downLeft6Parameter = downLeft6.HasValue ?
                new ObjectParameter("DownLeft6", downLeft6) :
                new ObjectParameter("DownLeft6", typeof(byte));
    
            var downLeft7Parameter = downLeft7.HasValue ?
                new ObjectParameter("DownLeft7", downLeft7) :
                new ObjectParameter("DownLeft7", typeof(byte));
    
            var downLeft8Parameter = downLeft8.HasValue ?
                new ObjectParameter("DownLeft8", downLeft8) :
                new ObjectParameter("DownLeft8", typeof(byte));
    
            var downRight1Parameter = downRight1.HasValue ?
                new ObjectParameter("DownRight1", downRight1) :
                new ObjectParameter("DownRight1", typeof(byte));
    
            var downRight2Parameter = downRight2.HasValue ?
                new ObjectParameter("DownRight2", downRight2) :
                new ObjectParameter("DownRight2", typeof(byte));
    
            var downRight3Parameter = downRight3.HasValue ?
                new ObjectParameter("DownRight3", downRight3) :
                new ObjectParameter("DownRight3", typeof(byte));
    
            var downRight4Parameter = downRight4.HasValue ?
                new ObjectParameter("DownRight4", downRight4) :
                new ObjectParameter("DownRight4", typeof(byte));
    
            var downRight5Parameter = downRight5.HasValue ?
                new ObjectParameter("DownRight5", downRight5) :
                new ObjectParameter("DownRight5", typeof(byte));
    
            var downRight6Parameter = downRight6.HasValue ?
                new ObjectParameter("DownRight6", downRight6) :
                new ObjectParameter("DownRight6", typeof(byte));
    
            var downRight7Parameter = downRight7.HasValue ?
                new ObjectParameter("DownRight7", downRight7) :
                new ObjectParameter("DownRight7", typeof(byte));
    
            var downRight8Parameter = downRight8.HasValue ?
                new ObjectParameter("DownRight8", downRight8) :
                new ObjectParameter("DownRight8", typeof(byte));
    
            var upLeftAParameter = upLeftA.HasValue ?
                new ObjectParameter("UpLeftA", upLeftA) :
                new ObjectParameter("UpLeftA", typeof(byte));
    
            var upLeftBParameter = upLeftB.HasValue ?
                new ObjectParameter("UpLeftB", upLeftB) :
                new ObjectParameter("UpLeftB", typeof(byte));
    
            var upLeftCParameter = upLeftC.HasValue ?
                new ObjectParameter("UpLeftC", upLeftC) :
                new ObjectParameter("UpLeftC", typeof(byte));
    
            var upLeftDParameter = upLeftD.HasValue ?
                new ObjectParameter("UpLeftD", upLeftD) :
                new ObjectParameter("UpLeftD", typeof(byte));
    
            var upLeftEParameter = upLeftE.HasValue ?
                new ObjectParameter("UpLeftE", upLeftE) :
                new ObjectParameter("UpLeftE", typeof(byte));
    
            var upRightAParameter = upRightA.HasValue ?
                new ObjectParameter("UpRightA", upRightA) :
                new ObjectParameter("UpRightA", typeof(byte));
    
            var upRightBParameter = upRightB.HasValue ?
                new ObjectParameter("UpRightB", upRightB) :
                new ObjectParameter("UpRightB", typeof(byte));
    
            var upRightCParameter = upRightC.HasValue ?
                new ObjectParameter("UpRightC", upRightC) :
                new ObjectParameter("UpRightC", typeof(byte));
    
            var upRightDParameter = upRightD.HasValue ?
                new ObjectParameter("UpRightD", upRightD) :
                new ObjectParameter("UpRightD", typeof(byte));
    
            var upRightEParameter = upRightE.HasValue ?
                new ObjectParameter("UpRightE", upRightE) :
                new ObjectParameter("UpRightE", typeof(byte));
    
            var downLeftAParameter = downLeftA.HasValue ?
                new ObjectParameter("DownLeftA", downLeftA) :
                new ObjectParameter("DownLeftA", typeof(byte));
    
            var downLeftBParameter = downLeftB.HasValue ?
                new ObjectParameter("DownLeftB", downLeftB) :
                new ObjectParameter("DownLeftB", typeof(byte));
    
            var downLeftCParameter = downLeftC.HasValue ?
                new ObjectParameter("DownLeftC", downLeftC) :
                new ObjectParameter("DownLeftC", typeof(byte));
    
            var downLeftDParameter = downLeftD.HasValue ?
                new ObjectParameter("DownLeftD", downLeftD) :
                new ObjectParameter("DownLeftD", typeof(byte));
    
            var downLeftEParameter = downLeftE.HasValue ?
                new ObjectParameter("DownLeftE", downLeftE) :
                new ObjectParameter("DownLeftE", typeof(byte));
    
            var downRightAParameter = downRightA.HasValue ?
                new ObjectParameter("DownRightA", downRightA) :
                new ObjectParameter("DownRightA", typeof(byte));
    
            var downRightBParameter = downRightB.HasValue ?
                new ObjectParameter("DownRightB", downRightB) :
                new ObjectParameter("DownRightB", typeof(byte));
    
            var downRightCParameter = downRightC.HasValue ?
                new ObjectParameter("DownRightC", downRightC) :
                new ObjectParameter("DownRightC", typeof(byte));
    
            var downRightDParameter = downRightD.HasValue ?
                new ObjectParameter("DownRightD", downRightD) :
                new ObjectParameter("DownRightD", typeof(byte));
    
            var downRightEParameter = downRightE.HasValue ?
                new ObjectParameter("DownRightE", downRightE) :
                new ObjectParameter("DownRightE", typeof(byte));
    
            var diagramParameter = diagram != null ?
                new ObjectParameter("Diagram", diagram) :
                new ObjectParameter("Diagram", typeof(byte[]));
    
            var dentalKindIDParameter = dentalKindID.HasValue ?
                new ObjectParameter("DentalKindID", dentalKindID) :
                new ObjectParameter("DentalKindID", typeof(byte));
    
            var dentalStateIDParameter = dentalStateID.HasValue ?
                new ObjectParameter("DentalStateID", dentalStateID) :
                new ObjectParameter("DentalStateID", typeof(short));
    
            var selectedParameter = selected.HasValue ?
                new ObjectParameter("Selected", selected) :
                new ObjectParameter("Selected", typeof(bool));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var laboratoryIDParameter = laboratoryID.HasValue ?
                new ObjectParameter("LaboratoryID", laboratoryID) :
                new ObjectParameter("LaboratoryID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionServices_Update", iDParameter, receptionIDParameter, registerDateParameter, rowIDParameter, specialtyIDParameter, doctorIDParameter, doctorDarsadParameter, assistantIDParameter, assistantDarsadParameter, sexTypeIDParameter, patientIDParameter, petIDParameter, patientNameParameter, patientMeliParameter, patientGeneralParameter, patientDarsadParameter, insuranceIDParameter, insuranceNumberParameter, customerIDParameter, reasonIDParameter, diagnosisIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, bodyIDParameter, bodyNumbParameter, therapyIDParameter, medicalServiceIDParameter, dscParameter, numbParameter, yaranehIDParameter, mokamelIDParameter, diseaseIDParameter, serviceTime_PParameter, servicePrice_PParameter, patientPrice_PParameter, insurancePrice_PParameter, marginPrice_PParameter, yaranehPrice_PParameter, mokamelPrice_PParameter, doctorPrice_PParameter, assistantPrice_PParameter, takh_PParameter, bed_PParameter, zaribJ_PParameter, zaribD_PParameter, zaribB_PParameter, zaribK_PParameter, serviceTimeParameter, servicePriceParameter, setItemsPriceParameter, inventoryHeaderIDParameter, itemsPriceParameter, patientPriceParameter, insurancePriceParameter, marginPriceParameter, yaranehPriceParameter, mokamelPriceParameter, doctorPriceParameter, assistantPriceParameter, takhParameter, bedParameter, besParameter, mandehParameter, zaribJParameter, zaribDParameter, zaribBParameter, zaribKParameter, upLeft1Parameter, upLeft2Parameter, upLeft3Parameter, upLeft4Parameter, upLeft5Parameter, upLeft6Parameter, upLeft7Parameter, upLeft8Parameter, upRight1Parameter, upRight2Parameter, upRight3Parameter, upRight4Parameter, upRight5Parameter, upRight6Parameter, upRight7Parameter, upRight8Parameter, downLeft1Parameter, downLeft2Parameter, downLeft3Parameter, downLeft4Parameter, downLeft5Parameter, downLeft6Parameter, downLeft7Parameter, downLeft8Parameter, downRight1Parameter, downRight2Parameter, downRight3Parameter, downRight4Parameter, downRight5Parameter, downRight6Parameter, downRight7Parameter, downRight8Parameter, upLeftAParameter, upLeftBParameter, upLeftCParameter, upLeftDParameter, upLeftEParameter, upRightAParameter, upRightBParameter, upRightCParameter, upRightDParameter, upRightEParameter, downLeftAParameter, downLeftBParameter, downLeftCParameter, downLeftDParameter, downLeftEParameter, downRightAParameter, downRightBParameter, downRightCParameter, downRightDParameter, downRightEParameter, diagramParameter, dentalKindIDParameter, dentalStateIDParameter, selectedParameter, prescriptionIDParameter, laboratoryIDParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_ReceptionServicesForPrescriptions_Result> sp_ReceptionServicesForPrescriptions(string registerDate_Start, string registerDate_End, Nullable<int> specialtyID, Nullable<int> doctorID)
        {
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var specialtyIDParameter = specialtyID.HasValue ?
                new ObjectParameter("SpecialtyID", specialtyID) :
                new ObjectParameter("SpecialtyID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReceptionServicesForPrescriptions_Result>("sp_ReceptionServicesForPrescriptions", registerDate_StartParameter, registerDate_EndParameter, specialtyIDParameter, doctorIDParameter);
        }
    
        public virtual ObjectResult<sp_ReceptionsSetting_Select_Result> sp_ReceptionsSetting_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReceptionsSetting_Select_Result>("sp_ReceptionsSetting_Select");
        }
    
        public virtual int sp_ReceptionsSetting_Update(Nullable<int> patientID, Nullable<int> customerID, Nullable<int> insuranceID, Nullable<int> reasonID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diagnosisID, Nullable<int> diseaseID, Nullable<int> therapyID, Nullable<int> serviceID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, string shortDsc, string dsc, Nullable<byte> receptionUI, Nullable<short> receptionTypeID, Nullable<short> receptionStateID, Nullable<bool> autoPrintAfterPost, Nullable<bool> setPatientFund, Nullable<bool> setPatientFund1, Nullable<bool> setDoctorFund, Nullable<byte> setDoctorFundType, Nullable<bool> setAssistantFund, Nullable<byte> setAssistantFundType, Nullable<bool> autoSetBes, string prescriptionPackSerial, Nullable<bool> autoSMSWelcome, string autoSMSWelcomeMessage, Nullable<bool> autoSMSPatientReceptionPrice, string autoSMSPatientReceptionPriceMessage, Nullable<bool> autoSMSManagement, string autoSMSManagement_Time, string autoSMSManagement_Number, Nullable<bool> autoSMSManagement_AllSumPrices, Nullable<bool> autoSMSManagement_ShiftSumPrices, Nullable<bool> autoSMSManagement_DoctorsSumPrices, Nullable<bool> autoSMSManagement_AssistantsSumPrices, Nullable<bool> autoSMSManagement_RecCount, Nullable<bool> autoSMSManagement_ServicePrice, Nullable<bool> autoSMSManagement_ItemsPrice, Nullable<bool> autoSMSManagement_PatientPrice, Nullable<bool> autoSMSManagement_InsurancePrice, Nullable<bool> autoSMSManagement_DoctorPrice, Nullable<bool> autoSMSManagement_AssistantPrice, Nullable<bool> autoSMSManagement_MarginPrice, Nullable<bool> autoSMSManagement_DoctorPriceDarsad, Nullable<bool> autoSMSManagement_AssistantPriceDarsad, Nullable<bool> autoSMSManagement_DoctorPriceDarsadBed, Nullable<bool> autoSMSManagement_AssistantPriceDarsadBed, Nullable<bool> autoSMSManagement_DoctorPriceDarsadBes, Nullable<bool> autoSMSManagement_AssistantPriceDarsadBes, Nullable<bool> autoSMSManagement_Takh, Nullable<bool> autoSMSManagement_Bed, Nullable<bool> autoSMSManagement_Bes, Nullable<bool> autoSMSManagement_BesPayments, Nullable<bool> autoSMSManagement_Mandeh, Nullable<bool> autoSMSDoctors, string autoSMSDoctors_Time, Nullable<byte> autoSMSDoctorsType, Nullable<int> autoSMSDoctors_DoctorID, Nullable<bool> autoSMSDoctors_AllSumPrices, Nullable<bool> autoSMSDoctors_ShiftSumPrices, Nullable<bool> autoSMSDoctors_RecCount, Nullable<bool> autoSMSDoctors_ServicePrice, Nullable<bool> autoSMSDoctors_ItemsPrice, Nullable<bool> autoSMSDoctors_PatientPrice, Nullable<bool> autoSMSDoctors_InsurancePrice, Nullable<bool> autoSMSDoctors_DoctorPrice, Nullable<bool> autoSMSDoctors_AssistantPrice, Nullable<bool> autoSMSDoctors_MarginPrice, Nullable<bool> autoSMSDoctors_DoctorPriceDarsad, Nullable<bool> autoSMSDoctors_AssistantPriceDarsad, Nullable<bool> autoSMSDoctors_DoctorPriceDarsadBed, Nullable<bool> autoSMSDoctors_AssistantPriceDarsadBed, Nullable<bool> autoSMSDoctors_DoctorPriceDarsadBes, Nullable<bool> autoSMSDoctors_AssistantPriceDarsadBes, Nullable<bool> autoSMSDoctors_Takh, Nullable<bool> autoSMSDoctors_Bed, Nullable<bool> autoSMSDoctors_Bes, Nullable<bool> autoSMSDoctors_BesPayments, Nullable<bool> autoSMSDoctors_Mandeh, Nullable<bool> autoSMSAssistants, string autoSMSAssistants_Time, Nullable<byte> autoSMSAssistantsType, Nullable<int> autoSMSAssistants_AssistantID, Nullable<bool> autoSMSAssistants_AllSumPrices, Nullable<bool> autoSMSAssistants_ShiftSumPrices, Nullable<bool> autoSMSAssistants_RecCount, Nullable<bool> autoSMSAssistants_ServicePrice, Nullable<bool> autoSMSAssistants_ItemsPrice, Nullable<bool> autoSMSAssistants_PatientPrice, Nullable<bool> autoSMSAssistants_InsurancePrice, Nullable<bool> autoSMSAssistants_DoctorPrice, Nullable<bool> autoSMSAssistants_AssistantPrice, Nullable<bool> autoSMSAssistants_MarginPrice, Nullable<bool> autoSMSAssistants_DoctorPriceDarsad, Nullable<bool> autoSMSAssistants_AssistantPriceDarsad, Nullable<bool> autoSMSAssistants_DoctorPriceDarsadBed, Nullable<bool> autoSMSAssistants_AssistantPriceDarsadBed, Nullable<bool> autoSMSAssistants_DoctorPriceDarsadBes, Nullable<bool> autoSMSAssistants_AssistantPriceDarsadBes, Nullable<bool> autoSMSAssistants_Takh, Nullable<bool> autoSMSAssistants_Bed, Nullable<bool> autoSMSAssistants_Bes, Nullable<bool> autoSMSAssistants_BesPayments, Nullable<bool> autoSMSAssistants_Mandeh, Nullable<bool> autoSMSScript, Nullable<short> autoSMSScriptID, string autoSMSManagement_PerfixMsg, string autoSMSManagement_PostfixMsg, string autoSMSDoctors_PerfixMsg, string autoSMSDoctors_PostfixMsg, Nullable<byte> autoSMSDoctors_PerfixSexType, string autoSMSAssistants_PerfixMsg, string autoSMSAssistants_PostfixMsg, Nullable<byte> autoSMSAssistants_PerfixSexType, Nullable<byte> receptionDoctorSelect, Nullable<bool> dayIDByDoctorID, Nullable<bool> petClinic, Nullable<int> userid)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var receptionUIParameter = receptionUI.HasValue ?
                new ObjectParameter("ReceptionUI", receptionUI) :
                new ObjectParameter("ReceptionUI", typeof(byte));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var autoPrintAfterPostParameter = autoPrintAfterPost.HasValue ?
                new ObjectParameter("AutoPrintAfterPost", autoPrintAfterPost) :
                new ObjectParameter("AutoPrintAfterPost", typeof(bool));
    
            var setPatientFundParameter = setPatientFund.HasValue ?
                new ObjectParameter("SetPatientFund", setPatientFund) :
                new ObjectParameter("SetPatientFund", typeof(bool));
    
            var setPatientFund1Parameter = setPatientFund1.HasValue ?
                new ObjectParameter("SetPatientFund1", setPatientFund1) :
                new ObjectParameter("SetPatientFund1", typeof(bool));
    
            var setDoctorFundParameter = setDoctorFund.HasValue ?
                new ObjectParameter("SetDoctorFund", setDoctorFund) :
                new ObjectParameter("SetDoctorFund", typeof(bool));
    
            var setDoctorFundTypeParameter = setDoctorFundType.HasValue ?
                new ObjectParameter("SetDoctorFundType", setDoctorFundType) :
                new ObjectParameter("SetDoctorFundType", typeof(byte));
    
            var setAssistantFundParameter = setAssistantFund.HasValue ?
                new ObjectParameter("SetAssistantFund", setAssistantFund) :
                new ObjectParameter("SetAssistantFund", typeof(bool));
    
            var setAssistantFundTypeParameter = setAssistantFundType.HasValue ?
                new ObjectParameter("SetAssistantFundType", setAssistantFundType) :
                new ObjectParameter("SetAssistantFundType", typeof(byte));
    
            var autoSetBesParameter = autoSetBes.HasValue ?
                new ObjectParameter("AutoSetBes", autoSetBes) :
                new ObjectParameter("AutoSetBes", typeof(bool));
    
            var prescriptionPackSerialParameter = prescriptionPackSerial != null ?
                new ObjectParameter("PrescriptionPackSerial", prescriptionPackSerial) :
                new ObjectParameter("PrescriptionPackSerial", typeof(string));
    
            var autoSMSWelcomeParameter = autoSMSWelcome.HasValue ?
                new ObjectParameter("AutoSMSWelcome", autoSMSWelcome) :
                new ObjectParameter("AutoSMSWelcome", typeof(bool));
    
            var autoSMSWelcomeMessageParameter = autoSMSWelcomeMessage != null ?
                new ObjectParameter("AutoSMSWelcomeMessage", autoSMSWelcomeMessage) :
                new ObjectParameter("AutoSMSWelcomeMessage", typeof(string));
    
            var autoSMSPatientReceptionPriceParameter = autoSMSPatientReceptionPrice.HasValue ?
                new ObjectParameter("AutoSMSPatientReceptionPrice", autoSMSPatientReceptionPrice) :
                new ObjectParameter("AutoSMSPatientReceptionPrice", typeof(bool));
    
            var autoSMSPatientReceptionPriceMessageParameter = autoSMSPatientReceptionPriceMessage != null ?
                new ObjectParameter("AutoSMSPatientReceptionPriceMessage", autoSMSPatientReceptionPriceMessage) :
                new ObjectParameter("AutoSMSPatientReceptionPriceMessage", typeof(string));
    
            var autoSMSManagementParameter = autoSMSManagement.HasValue ?
                new ObjectParameter("AutoSMSManagement", autoSMSManagement) :
                new ObjectParameter("AutoSMSManagement", typeof(bool));
    
            var autoSMSManagement_TimeParameter = autoSMSManagement_Time != null ?
                new ObjectParameter("AutoSMSManagement_Time", autoSMSManagement_Time) :
                new ObjectParameter("AutoSMSManagement_Time", typeof(string));
    
            var autoSMSManagement_NumberParameter = autoSMSManagement_Number != null ?
                new ObjectParameter("AutoSMSManagement_Number", autoSMSManagement_Number) :
                new ObjectParameter("AutoSMSManagement_Number", typeof(string));
    
            var autoSMSManagement_AllSumPricesParameter = autoSMSManagement_AllSumPrices.HasValue ?
                new ObjectParameter("AutoSMSManagement_AllSumPrices", autoSMSManagement_AllSumPrices) :
                new ObjectParameter("AutoSMSManagement_AllSumPrices", typeof(bool));
    
            var autoSMSManagement_ShiftSumPricesParameter = autoSMSManagement_ShiftSumPrices.HasValue ?
                new ObjectParameter("AutoSMSManagement_ShiftSumPrices", autoSMSManagement_ShiftSumPrices) :
                new ObjectParameter("AutoSMSManagement_ShiftSumPrices", typeof(bool));
    
            var autoSMSManagement_DoctorsSumPricesParameter = autoSMSManagement_DoctorsSumPrices.HasValue ?
                new ObjectParameter("AutoSMSManagement_DoctorsSumPrices", autoSMSManagement_DoctorsSumPrices) :
                new ObjectParameter("AutoSMSManagement_DoctorsSumPrices", typeof(bool));
    
            var autoSMSManagement_AssistantsSumPricesParameter = autoSMSManagement_AssistantsSumPrices.HasValue ?
                new ObjectParameter("AutoSMSManagement_AssistantsSumPrices", autoSMSManagement_AssistantsSumPrices) :
                new ObjectParameter("AutoSMSManagement_AssistantsSumPrices", typeof(bool));
    
            var autoSMSManagement_RecCountParameter = autoSMSManagement_RecCount.HasValue ?
                new ObjectParameter("AutoSMSManagement_RecCount", autoSMSManagement_RecCount) :
                new ObjectParameter("AutoSMSManagement_RecCount", typeof(bool));
    
            var autoSMSManagement_ServicePriceParameter = autoSMSManagement_ServicePrice.HasValue ?
                new ObjectParameter("AutoSMSManagement_ServicePrice", autoSMSManagement_ServicePrice) :
                new ObjectParameter("AutoSMSManagement_ServicePrice", typeof(bool));
    
            var autoSMSManagement_ItemsPriceParameter = autoSMSManagement_ItemsPrice.HasValue ?
                new ObjectParameter("AutoSMSManagement_ItemsPrice", autoSMSManagement_ItemsPrice) :
                new ObjectParameter("AutoSMSManagement_ItemsPrice", typeof(bool));
    
            var autoSMSManagement_PatientPriceParameter = autoSMSManagement_PatientPrice.HasValue ?
                new ObjectParameter("AutoSMSManagement_PatientPrice", autoSMSManagement_PatientPrice) :
                new ObjectParameter("AutoSMSManagement_PatientPrice", typeof(bool));
    
            var autoSMSManagement_InsurancePriceParameter = autoSMSManagement_InsurancePrice.HasValue ?
                new ObjectParameter("AutoSMSManagement_InsurancePrice", autoSMSManagement_InsurancePrice) :
                new ObjectParameter("AutoSMSManagement_InsurancePrice", typeof(bool));
    
            var autoSMSManagement_DoctorPriceParameter = autoSMSManagement_DoctorPrice.HasValue ?
                new ObjectParameter("AutoSMSManagement_DoctorPrice", autoSMSManagement_DoctorPrice) :
                new ObjectParameter("AutoSMSManagement_DoctorPrice", typeof(bool));
    
            var autoSMSManagement_AssistantPriceParameter = autoSMSManagement_AssistantPrice.HasValue ?
                new ObjectParameter("AutoSMSManagement_AssistantPrice", autoSMSManagement_AssistantPrice) :
                new ObjectParameter("AutoSMSManagement_AssistantPrice", typeof(bool));
    
            var autoSMSManagement_MarginPriceParameter = autoSMSManagement_MarginPrice.HasValue ?
                new ObjectParameter("AutoSMSManagement_MarginPrice", autoSMSManagement_MarginPrice) :
                new ObjectParameter("AutoSMSManagement_MarginPrice", typeof(bool));
    
            var autoSMSManagement_DoctorPriceDarsadParameter = autoSMSManagement_DoctorPriceDarsad.HasValue ?
                new ObjectParameter("AutoSMSManagement_DoctorPriceDarsad", autoSMSManagement_DoctorPriceDarsad) :
                new ObjectParameter("AutoSMSManagement_DoctorPriceDarsad", typeof(bool));
    
            var autoSMSManagement_AssistantPriceDarsadParameter = autoSMSManagement_AssistantPriceDarsad.HasValue ?
                new ObjectParameter("AutoSMSManagement_AssistantPriceDarsad", autoSMSManagement_AssistantPriceDarsad) :
                new ObjectParameter("AutoSMSManagement_AssistantPriceDarsad", typeof(bool));
    
            var autoSMSManagement_DoctorPriceDarsadBedParameter = autoSMSManagement_DoctorPriceDarsadBed.HasValue ?
                new ObjectParameter("AutoSMSManagement_DoctorPriceDarsadBed", autoSMSManagement_DoctorPriceDarsadBed) :
                new ObjectParameter("AutoSMSManagement_DoctorPriceDarsadBed", typeof(bool));
    
            var autoSMSManagement_AssistantPriceDarsadBedParameter = autoSMSManagement_AssistantPriceDarsadBed.HasValue ?
                new ObjectParameter("AutoSMSManagement_AssistantPriceDarsadBed", autoSMSManagement_AssistantPriceDarsadBed) :
                new ObjectParameter("AutoSMSManagement_AssistantPriceDarsadBed", typeof(bool));
    
            var autoSMSManagement_DoctorPriceDarsadBesParameter = autoSMSManagement_DoctorPriceDarsadBes.HasValue ?
                new ObjectParameter("AutoSMSManagement_DoctorPriceDarsadBes", autoSMSManagement_DoctorPriceDarsadBes) :
                new ObjectParameter("AutoSMSManagement_DoctorPriceDarsadBes", typeof(bool));
    
            var autoSMSManagement_AssistantPriceDarsadBesParameter = autoSMSManagement_AssistantPriceDarsadBes.HasValue ?
                new ObjectParameter("AutoSMSManagement_AssistantPriceDarsadBes", autoSMSManagement_AssistantPriceDarsadBes) :
                new ObjectParameter("AutoSMSManagement_AssistantPriceDarsadBes", typeof(bool));
    
            var autoSMSManagement_TakhParameter = autoSMSManagement_Takh.HasValue ?
                new ObjectParameter("AutoSMSManagement_Takh", autoSMSManagement_Takh) :
                new ObjectParameter("AutoSMSManagement_Takh", typeof(bool));
    
            var autoSMSManagement_BedParameter = autoSMSManagement_Bed.HasValue ?
                new ObjectParameter("AutoSMSManagement_Bed", autoSMSManagement_Bed) :
                new ObjectParameter("AutoSMSManagement_Bed", typeof(bool));
    
            var autoSMSManagement_BesParameter = autoSMSManagement_Bes.HasValue ?
                new ObjectParameter("AutoSMSManagement_Bes", autoSMSManagement_Bes) :
                new ObjectParameter("AutoSMSManagement_Bes", typeof(bool));
    
            var autoSMSManagement_BesPaymentsParameter = autoSMSManagement_BesPayments.HasValue ?
                new ObjectParameter("AutoSMSManagement_BesPayments", autoSMSManagement_BesPayments) :
                new ObjectParameter("AutoSMSManagement_BesPayments", typeof(bool));
    
            var autoSMSManagement_MandehParameter = autoSMSManagement_Mandeh.HasValue ?
                new ObjectParameter("AutoSMSManagement_Mandeh", autoSMSManagement_Mandeh) :
                new ObjectParameter("AutoSMSManagement_Mandeh", typeof(bool));
    
            var autoSMSDoctorsParameter = autoSMSDoctors.HasValue ?
                new ObjectParameter("AutoSMSDoctors", autoSMSDoctors) :
                new ObjectParameter("AutoSMSDoctors", typeof(bool));
    
            var autoSMSDoctors_TimeParameter = autoSMSDoctors_Time != null ?
                new ObjectParameter("AutoSMSDoctors_Time", autoSMSDoctors_Time) :
                new ObjectParameter("AutoSMSDoctors_Time", typeof(string));
    
            var autoSMSDoctorsTypeParameter = autoSMSDoctorsType.HasValue ?
                new ObjectParameter("AutoSMSDoctorsType", autoSMSDoctorsType) :
                new ObjectParameter("AutoSMSDoctorsType", typeof(byte));
    
            var autoSMSDoctors_DoctorIDParameter = autoSMSDoctors_DoctorID.HasValue ?
                new ObjectParameter("AutoSMSDoctors_DoctorID", autoSMSDoctors_DoctorID) :
                new ObjectParameter("AutoSMSDoctors_DoctorID", typeof(int));
    
            var autoSMSDoctors_AllSumPricesParameter = autoSMSDoctors_AllSumPrices.HasValue ?
                new ObjectParameter("AutoSMSDoctors_AllSumPrices", autoSMSDoctors_AllSumPrices) :
                new ObjectParameter("AutoSMSDoctors_AllSumPrices", typeof(bool));
    
            var autoSMSDoctors_ShiftSumPricesParameter = autoSMSDoctors_ShiftSumPrices.HasValue ?
                new ObjectParameter("AutoSMSDoctors_ShiftSumPrices", autoSMSDoctors_ShiftSumPrices) :
                new ObjectParameter("AutoSMSDoctors_ShiftSumPrices", typeof(bool));
    
            var autoSMSDoctors_RecCountParameter = autoSMSDoctors_RecCount.HasValue ?
                new ObjectParameter("AutoSMSDoctors_RecCount", autoSMSDoctors_RecCount) :
                new ObjectParameter("AutoSMSDoctors_RecCount", typeof(bool));
    
            var autoSMSDoctors_ServicePriceParameter = autoSMSDoctors_ServicePrice.HasValue ?
                new ObjectParameter("AutoSMSDoctors_ServicePrice", autoSMSDoctors_ServicePrice) :
                new ObjectParameter("AutoSMSDoctors_ServicePrice", typeof(bool));
    
            var autoSMSDoctors_ItemsPriceParameter = autoSMSDoctors_ItemsPrice.HasValue ?
                new ObjectParameter("AutoSMSDoctors_ItemsPrice", autoSMSDoctors_ItemsPrice) :
                new ObjectParameter("AutoSMSDoctors_ItemsPrice", typeof(bool));
    
            var autoSMSDoctors_PatientPriceParameter = autoSMSDoctors_PatientPrice.HasValue ?
                new ObjectParameter("AutoSMSDoctors_PatientPrice", autoSMSDoctors_PatientPrice) :
                new ObjectParameter("AutoSMSDoctors_PatientPrice", typeof(bool));
    
            var autoSMSDoctors_InsurancePriceParameter = autoSMSDoctors_InsurancePrice.HasValue ?
                new ObjectParameter("AutoSMSDoctors_InsurancePrice", autoSMSDoctors_InsurancePrice) :
                new ObjectParameter("AutoSMSDoctors_InsurancePrice", typeof(bool));
    
            var autoSMSDoctors_DoctorPriceParameter = autoSMSDoctors_DoctorPrice.HasValue ?
                new ObjectParameter("AutoSMSDoctors_DoctorPrice", autoSMSDoctors_DoctorPrice) :
                new ObjectParameter("AutoSMSDoctors_DoctorPrice", typeof(bool));
    
            var autoSMSDoctors_AssistantPriceParameter = autoSMSDoctors_AssistantPrice.HasValue ?
                new ObjectParameter("AutoSMSDoctors_AssistantPrice", autoSMSDoctors_AssistantPrice) :
                new ObjectParameter("AutoSMSDoctors_AssistantPrice", typeof(bool));
    
            var autoSMSDoctors_MarginPriceParameter = autoSMSDoctors_MarginPrice.HasValue ?
                new ObjectParameter("AutoSMSDoctors_MarginPrice", autoSMSDoctors_MarginPrice) :
                new ObjectParameter("AutoSMSDoctors_MarginPrice", typeof(bool));
    
            var autoSMSDoctors_DoctorPriceDarsadParameter = autoSMSDoctors_DoctorPriceDarsad.HasValue ?
                new ObjectParameter("AutoSMSDoctors_DoctorPriceDarsad", autoSMSDoctors_DoctorPriceDarsad) :
                new ObjectParameter("AutoSMSDoctors_DoctorPriceDarsad", typeof(bool));
    
            var autoSMSDoctors_AssistantPriceDarsadParameter = autoSMSDoctors_AssistantPriceDarsad.HasValue ?
                new ObjectParameter("AutoSMSDoctors_AssistantPriceDarsad", autoSMSDoctors_AssistantPriceDarsad) :
                new ObjectParameter("AutoSMSDoctors_AssistantPriceDarsad", typeof(bool));
    
            var autoSMSDoctors_DoctorPriceDarsadBedParameter = autoSMSDoctors_DoctorPriceDarsadBed.HasValue ?
                new ObjectParameter("AutoSMSDoctors_DoctorPriceDarsadBed", autoSMSDoctors_DoctorPriceDarsadBed) :
                new ObjectParameter("AutoSMSDoctors_DoctorPriceDarsadBed", typeof(bool));
    
            var autoSMSDoctors_AssistantPriceDarsadBedParameter = autoSMSDoctors_AssistantPriceDarsadBed.HasValue ?
                new ObjectParameter("AutoSMSDoctors_AssistantPriceDarsadBed", autoSMSDoctors_AssistantPriceDarsadBed) :
                new ObjectParameter("AutoSMSDoctors_AssistantPriceDarsadBed", typeof(bool));
    
            var autoSMSDoctors_DoctorPriceDarsadBesParameter = autoSMSDoctors_DoctorPriceDarsadBes.HasValue ?
                new ObjectParameter("AutoSMSDoctors_DoctorPriceDarsadBes", autoSMSDoctors_DoctorPriceDarsadBes) :
                new ObjectParameter("AutoSMSDoctors_DoctorPriceDarsadBes", typeof(bool));
    
            var autoSMSDoctors_AssistantPriceDarsadBesParameter = autoSMSDoctors_AssistantPriceDarsadBes.HasValue ?
                new ObjectParameter("AutoSMSDoctors_AssistantPriceDarsadBes", autoSMSDoctors_AssistantPriceDarsadBes) :
                new ObjectParameter("AutoSMSDoctors_AssistantPriceDarsadBes", typeof(bool));
    
            var autoSMSDoctors_TakhParameter = autoSMSDoctors_Takh.HasValue ?
                new ObjectParameter("AutoSMSDoctors_Takh", autoSMSDoctors_Takh) :
                new ObjectParameter("AutoSMSDoctors_Takh", typeof(bool));
    
            var autoSMSDoctors_BedParameter = autoSMSDoctors_Bed.HasValue ?
                new ObjectParameter("AutoSMSDoctors_Bed", autoSMSDoctors_Bed) :
                new ObjectParameter("AutoSMSDoctors_Bed", typeof(bool));
    
            var autoSMSDoctors_BesParameter = autoSMSDoctors_Bes.HasValue ?
                new ObjectParameter("AutoSMSDoctors_Bes", autoSMSDoctors_Bes) :
                new ObjectParameter("AutoSMSDoctors_Bes", typeof(bool));
    
            var autoSMSDoctors_BesPaymentsParameter = autoSMSDoctors_BesPayments.HasValue ?
                new ObjectParameter("AutoSMSDoctors_BesPayments", autoSMSDoctors_BesPayments) :
                new ObjectParameter("AutoSMSDoctors_BesPayments", typeof(bool));
    
            var autoSMSDoctors_MandehParameter = autoSMSDoctors_Mandeh.HasValue ?
                new ObjectParameter("AutoSMSDoctors_Mandeh", autoSMSDoctors_Mandeh) :
                new ObjectParameter("AutoSMSDoctors_Mandeh", typeof(bool));
    
            var autoSMSAssistantsParameter = autoSMSAssistants.HasValue ?
                new ObjectParameter("AutoSMSAssistants", autoSMSAssistants) :
                new ObjectParameter("AutoSMSAssistants", typeof(bool));
    
            var autoSMSAssistants_TimeParameter = autoSMSAssistants_Time != null ?
                new ObjectParameter("AutoSMSAssistants_Time", autoSMSAssistants_Time) :
                new ObjectParameter("AutoSMSAssistants_Time", typeof(string));
    
            var autoSMSAssistantsTypeParameter = autoSMSAssistantsType.HasValue ?
                new ObjectParameter("AutoSMSAssistantsType", autoSMSAssistantsType) :
                new ObjectParameter("AutoSMSAssistantsType", typeof(byte));
    
            var autoSMSAssistants_AssistantIDParameter = autoSMSAssistants_AssistantID.HasValue ?
                new ObjectParameter("AutoSMSAssistants_AssistantID", autoSMSAssistants_AssistantID) :
                new ObjectParameter("AutoSMSAssistants_AssistantID", typeof(int));
    
            var autoSMSAssistants_AllSumPricesParameter = autoSMSAssistants_AllSumPrices.HasValue ?
                new ObjectParameter("AutoSMSAssistants_AllSumPrices", autoSMSAssistants_AllSumPrices) :
                new ObjectParameter("AutoSMSAssistants_AllSumPrices", typeof(bool));
    
            var autoSMSAssistants_ShiftSumPricesParameter = autoSMSAssistants_ShiftSumPrices.HasValue ?
                new ObjectParameter("AutoSMSAssistants_ShiftSumPrices", autoSMSAssistants_ShiftSumPrices) :
                new ObjectParameter("AutoSMSAssistants_ShiftSumPrices", typeof(bool));
    
            var autoSMSAssistants_RecCountParameter = autoSMSAssistants_RecCount.HasValue ?
                new ObjectParameter("AutoSMSAssistants_RecCount", autoSMSAssistants_RecCount) :
                new ObjectParameter("AutoSMSAssistants_RecCount", typeof(bool));
    
            var autoSMSAssistants_ServicePriceParameter = autoSMSAssistants_ServicePrice.HasValue ?
                new ObjectParameter("AutoSMSAssistants_ServicePrice", autoSMSAssistants_ServicePrice) :
                new ObjectParameter("AutoSMSAssistants_ServicePrice", typeof(bool));
    
            var autoSMSAssistants_ItemsPriceParameter = autoSMSAssistants_ItemsPrice.HasValue ?
                new ObjectParameter("AutoSMSAssistants_ItemsPrice", autoSMSAssistants_ItemsPrice) :
                new ObjectParameter("AutoSMSAssistants_ItemsPrice", typeof(bool));
    
            var autoSMSAssistants_PatientPriceParameter = autoSMSAssistants_PatientPrice.HasValue ?
                new ObjectParameter("AutoSMSAssistants_PatientPrice", autoSMSAssistants_PatientPrice) :
                new ObjectParameter("AutoSMSAssistants_PatientPrice", typeof(bool));
    
            var autoSMSAssistants_InsurancePriceParameter = autoSMSAssistants_InsurancePrice.HasValue ?
                new ObjectParameter("AutoSMSAssistants_InsurancePrice", autoSMSAssistants_InsurancePrice) :
                new ObjectParameter("AutoSMSAssistants_InsurancePrice", typeof(bool));
    
            var autoSMSAssistants_DoctorPriceParameter = autoSMSAssistants_DoctorPrice.HasValue ?
                new ObjectParameter("AutoSMSAssistants_DoctorPrice", autoSMSAssistants_DoctorPrice) :
                new ObjectParameter("AutoSMSAssistants_DoctorPrice", typeof(bool));
    
            var autoSMSAssistants_AssistantPriceParameter = autoSMSAssistants_AssistantPrice.HasValue ?
                new ObjectParameter("AutoSMSAssistants_AssistantPrice", autoSMSAssistants_AssistantPrice) :
                new ObjectParameter("AutoSMSAssistants_AssistantPrice", typeof(bool));
    
            var autoSMSAssistants_MarginPriceParameter = autoSMSAssistants_MarginPrice.HasValue ?
                new ObjectParameter("AutoSMSAssistants_MarginPrice", autoSMSAssistants_MarginPrice) :
                new ObjectParameter("AutoSMSAssistants_MarginPrice", typeof(bool));
    
            var autoSMSAssistants_DoctorPriceDarsadParameter = autoSMSAssistants_DoctorPriceDarsad.HasValue ?
                new ObjectParameter("AutoSMSAssistants_DoctorPriceDarsad", autoSMSAssistants_DoctorPriceDarsad) :
                new ObjectParameter("AutoSMSAssistants_DoctorPriceDarsad", typeof(bool));
    
            var autoSMSAssistants_AssistantPriceDarsadParameter = autoSMSAssistants_AssistantPriceDarsad.HasValue ?
                new ObjectParameter("AutoSMSAssistants_AssistantPriceDarsad", autoSMSAssistants_AssistantPriceDarsad) :
                new ObjectParameter("AutoSMSAssistants_AssistantPriceDarsad", typeof(bool));
    
            var autoSMSAssistants_DoctorPriceDarsadBedParameter = autoSMSAssistants_DoctorPriceDarsadBed.HasValue ?
                new ObjectParameter("AutoSMSAssistants_DoctorPriceDarsadBed", autoSMSAssistants_DoctorPriceDarsadBed) :
                new ObjectParameter("AutoSMSAssistants_DoctorPriceDarsadBed", typeof(bool));
    
            var autoSMSAssistants_AssistantPriceDarsadBedParameter = autoSMSAssistants_AssistantPriceDarsadBed.HasValue ?
                new ObjectParameter("AutoSMSAssistants_AssistantPriceDarsadBed", autoSMSAssistants_AssistantPriceDarsadBed) :
                new ObjectParameter("AutoSMSAssistants_AssistantPriceDarsadBed", typeof(bool));
    
            var autoSMSAssistants_DoctorPriceDarsadBesParameter = autoSMSAssistants_DoctorPriceDarsadBes.HasValue ?
                new ObjectParameter("AutoSMSAssistants_DoctorPriceDarsadBes", autoSMSAssistants_DoctorPriceDarsadBes) :
                new ObjectParameter("AutoSMSAssistants_DoctorPriceDarsadBes", typeof(bool));
    
            var autoSMSAssistants_AssistantPriceDarsadBesParameter = autoSMSAssistants_AssistantPriceDarsadBes.HasValue ?
                new ObjectParameter("AutoSMSAssistants_AssistantPriceDarsadBes", autoSMSAssistants_AssistantPriceDarsadBes) :
                new ObjectParameter("AutoSMSAssistants_AssistantPriceDarsadBes", typeof(bool));
    
            var autoSMSAssistants_TakhParameter = autoSMSAssistants_Takh.HasValue ?
                new ObjectParameter("AutoSMSAssistants_Takh", autoSMSAssistants_Takh) :
                new ObjectParameter("AutoSMSAssistants_Takh", typeof(bool));
    
            var autoSMSAssistants_BedParameter = autoSMSAssistants_Bed.HasValue ?
                new ObjectParameter("AutoSMSAssistants_Bed", autoSMSAssistants_Bed) :
                new ObjectParameter("AutoSMSAssistants_Bed", typeof(bool));
    
            var autoSMSAssistants_BesParameter = autoSMSAssistants_Bes.HasValue ?
                new ObjectParameter("AutoSMSAssistants_Bes", autoSMSAssistants_Bes) :
                new ObjectParameter("AutoSMSAssistants_Bes", typeof(bool));
    
            var autoSMSAssistants_BesPaymentsParameter = autoSMSAssistants_BesPayments.HasValue ?
                new ObjectParameter("AutoSMSAssistants_BesPayments", autoSMSAssistants_BesPayments) :
                new ObjectParameter("AutoSMSAssistants_BesPayments", typeof(bool));
    
            var autoSMSAssistants_MandehParameter = autoSMSAssistants_Mandeh.HasValue ?
                new ObjectParameter("AutoSMSAssistants_Mandeh", autoSMSAssistants_Mandeh) :
                new ObjectParameter("AutoSMSAssistants_Mandeh", typeof(bool));
    
            var autoSMSScriptParameter = autoSMSScript.HasValue ?
                new ObjectParameter("AutoSMSScript", autoSMSScript) :
                new ObjectParameter("AutoSMSScript", typeof(bool));
    
            var autoSMSScriptIDParameter = autoSMSScriptID.HasValue ?
                new ObjectParameter("AutoSMSScriptID", autoSMSScriptID) :
                new ObjectParameter("AutoSMSScriptID", typeof(short));
    
            var autoSMSManagement_PerfixMsgParameter = autoSMSManagement_PerfixMsg != null ?
                new ObjectParameter("AutoSMSManagement_PerfixMsg", autoSMSManagement_PerfixMsg) :
                new ObjectParameter("AutoSMSManagement_PerfixMsg", typeof(string));
    
            var autoSMSManagement_PostfixMsgParameter = autoSMSManagement_PostfixMsg != null ?
                new ObjectParameter("AutoSMSManagement_PostfixMsg", autoSMSManagement_PostfixMsg) :
                new ObjectParameter("AutoSMSManagement_PostfixMsg", typeof(string));
    
            var autoSMSDoctors_PerfixMsgParameter = autoSMSDoctors_PerfixMsg != null ?
                new ObjectParameter("AutoSMSDoctors_PerfixMsg", autoSMSDoctors_PerfixMsg) :
                new ObjectParameter("AutoSMSDoctors_PerfixMsg", typeof(string));
    
            var autoSMSDoctors_PostfixMsgParameter = autoSMSDoctors_PostfixMsg != null ?
                new ObjectParameter("AutoSMSDoctors_PostfixMsg", autoSMSDoctors_PostfixMsg) :
                new ObjectParameter("AutoSMSDoctors_PostfixMsg", typeof(string));
    
            var autoSMSDoctors_PerfixSexTypeParameter = autoSMSDoctors_PerfixSexType.HasValue ?
                new ObjectParameter("AutoSMSDoctors_PerfixSexType", autoSMSDoctors_PerfixSexType) :
                new ObjectParameter("AutoSMSDoctors_PerfixSexType", typeof(byte));
    
            var autoSMSAssistants_PerfixMsgParameter = autoSMSAssistants_PerfixMsg != null ?
                new ObjectParameter("AutoSMSAssistants_PerfixMsg", autoSMSAssistants_PerfixMsg) :
                new ObjectParameter("AutoSMSAssistants_PerfixMsg", typeof(string));
    
            var autoSMSAssistants_PostfixMsgParameter = autoSMSAssistants_PostfixMsg != null ?
                new ObjectParameter("AutoSMSAssistants_PostfixMsg", autoSMSAssistants_PostfixMsg) :
                new ObjectParameter("AutoSMSAssistants_PostfixMsg", typeof(string));
    
            var autoSMSAssistants_PerfixSexTypeParameter = autoSMSAssistants_PerfixSexType.HasValue ?
                new ObjectParameter("AutoSMSAssistants_PerfixSexType", autoSMSAssistants_PerfixSexType) :
                new ObjectParameter("AutoSMSAssistants_PerfixSexType", typeof(byte));
    
            var receptionDoctorSelectParameter = receptionDoctorSelect.HasValue ?
                new ObjectParameter("ReceptionDoctorSelect", receptionDoctorSelect) :
                new ObjectParameter("ReceptionDoctorSelect", typeof(byte));
    
            var dayIDByDoctorIDParameter = dayIDByDoctorID.HasValue ?
                new ObjectParameter("DayIDByDoctorID", dayIDByDoctorID) :
                new ObjectParameter("DayIDByDoctorID", typeof(bool));
    
            var petClinicParameter = petClinic.HasValue ?
                new ObjectParameter("PetClinic", petClinic) :
                new ObjectParameter("PetClinic", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionsSetting_Update", patientIDParameter, customerIDParameter, insuranceIDParameter, reasonIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, doctorIDParameter, assistantIDParameter, diagnosisIDParameter, diseaseIDParameter, therapyIDParameter, serviceIDParameter, paymentStateIDParameter, paymentTypeIDParameter, shortDscParameter, dscParameter, receptionUIParameter, receptionTypeIDParameter, receptionStateIDParameter, autoPrintAfterPostParameter, setPatientFundParameter, setPatientFund1Parameter, setDoctorFundParameter, setDoctorFundTypeParameter, setAssistantFundParameter, setAssistantFundTypeParameter, autoSetBesParameter, prescriptionPackSerialParameter, autoSMSWelcomeParameter, autoSMSWelcomeMessageParameter, autoSMSPatientReceptionPriceParameter, autoSMSPatientReceptionPriceMessageParameter, autoSMSManagementParameter, autoSMSManagement_TimeParameter, autoSMSManagement_NumberParameter, autoSMSManagement_AllSumPricesParameter, autoSMSManagement_ShiftSumPricesParameter, autoSMSManagement_DoctorsSumPricesParameter, autoSMSManagement_AssistantsSumPricesParameter, autoSMSManagement_RecCountParameter, autoSMSManagement_ServicePriceParameter, autoSMSManagement_ItemsPriceParameter, autoSMSManagement_PatientPriceParameter, autoSMSManagement_InsurancePriceParameter, autoSMSManagement_DoctorPriceParameter, autoSMSManagement_AssistantPriceParameter, autoSMSManagement_MarginPriceParameter, autoSMSManagement_DoctorPriceDarsadParameter, autoSMSManagement_AssistantPriceDarsadParameter, autoSMSManagement_DoctorPriceDarsadBedParameter, autoSMSManagement_AssistantPriceDarsadBedParameter, autoSMSManagement_DoctorPriceDarsadBesParameter, autoSMSManagement_AssistantPriceDarsadBesParameter, autoSMSManagement_TakhParameter, autoSMSManagement_BedParameter, autoSMSManagement_BesParameter, autoSMSManagement_BesPaymentsParameter, autoSMSManagement_MandehParameter, autoSMSDoctorsParameter, autoSMSDoctors_TimeParameter, autoSMSDoctorsTypeParameter, autoSMSDoctors_DoctorIDParameter, autoSMSDoctors_AllSumPricesParameter, autoSMSDoctors_ShiftSumPricesParameter, autoSMSDoctors_RecCountParameter, autoSMSDoctors_ServicePriceParameter, autoSMSDoctors_ItemsPriceParameter, autoSMSDoctors_PatientPriceParameter, autoSMSDoctors_InsurancePriceParameter, autoSMSDoctors_DoctorPriceParameter, autoSMSDoctors_AssistantPriceParameter, autoSMSDoctors_MarginPriceParameter, autoSMSDoctors_DoctorPriceDarsadParameter, autoSMSDoctors_AssistantPriceDarsadParameter, autoSMSDoctors_DoctorPriceDarsadBedParameter, autoSMSDoctors_AssistantPriceDarsadBedParameter, autoSMSDoctors_DoctorPriceDarsadBesParameter, autoSMSDoctors_AssistantPriceDarsadBesParameter, autoSMSDoctors_TakhParameter, autoSMSDoctors_BedParameter, autoSMSDoctors_BesParameter, autoSMSDoctors_BesPaymentsParameter, autoSMSDoctors_MandehParameter, autoSMSAssistantsParameter, autoSMSAssistants_TimeParameter, autoSMSAssistantsTypeParameter, autoSMSAssistants_AssistantIDParameter, autoSMSAssistants_AllSumPricesParameter, autoSMSAssistants_ShiftSumPricesParameter, autoSMSAssistants_RecCountParameter, autoSMSAssistants_ServicePriceParameter, autoSMSAssistants_ItemsPriceParameter, autoSMSAssistants_PatientPriceParameter, autoSMSAssistants_InsurancePriceParameter, autoSMSAssistants_DoctorPriceParameter, autoSMSAssistants_AssistantPriceParameter, autoSMSAssistants_MarginPriceParameter, autoSMSAssistants_DoctorPriceDarsadParameter, autoSMSAssistants_AssistantPriceDarsadParameter, autoSMSAssistants_DoctorPriceDarsadBedParameter, autoSMSAssistants_AssistantPriceDarsadBedParameter, autoSMSAssistants_DoctorPriceDarsadBesParameter, autoSMSAssistants_AssistantPriceDarsadBesParameter, autoSMSAssistants_TakhParameter, autoSMSAssistants_BedParameter, autoSMSAssistants_BesParameter, autoSMSAssistants_BesPaymentsParameter, autoSMSAssistants_MandehParameter, autoSMSScriptParameter, autoSMSScriptIDParameter, autoSMSManagement_PerfixMsgParameter, autoSMSManagement_PostfixMsgParameter, autoSMSDoctors_PerfixMsgParameter, autoSMSDoctors_PostfixMsgParameter, autoSMSDoctors_PerfixSexTypeParameter, autoSMSAssistants_PerfixMsgParameter, autoSMSAssistants_PostfixMsgParameter, autoSMSAssistants_PerfixSexTypeParameter, receptionDoctorSelectParameter, dayIDByDoctorIDParameter, petClinicParameter, useridParameter);
        }
    
        public virtual int sp_ReceptionStates_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionStates_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_ReceptionStates_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionStates_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_ReceptionStates_Select_Result> sp_ReceptionStates_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReceptionStates_Select_Result>("sp_ReceptionStates_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_ReceptionStates_SelectRow_Result> sp_ReceptionStates_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReceptionStates_SelectRow_Result>("sp_ReceptionStates_SelectRow", iDParameter);
        }
    
        public virtual int sp_ReceptionStates_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionStates_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_ReceptionTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_ReceptionTypes_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionTypes_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_ReceptionTypes_Select_Result> sp_ReceptionTypes_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReceptionTypes_Select_Result>("sp_ReceptionTypes_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_ReceptionTypes_SelectRow_Result> sp_ReceptionTypes_SelectRow(Nullable<short> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReceptionTypes_SelectRow_Result>("sp_ReceptionTypes_SelectRow", iDParameter);
        }
    
        public virtual int sp_ReceptionTypes_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionTypes_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_ReceptionVisits_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionVisits_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_ReceptionVisits_Insert(Nullable<short> shiftID, Nullable<int> receptionID, Nullable<byte> rowID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<int> insuranceID, Nullable<System.DateTime> registerDate, Nullable<int> reasonID, Nullable<short> diseaseID, Nullable<short> diagnosisID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyID, Nullable<int> visitID, Nullable<int> bodyID, string dsc, byte[] dscOle, Nullable<bool> sarmai, Nullable<bool> garmai, Nullable<bool> noSarmaGarma, Nullable<bool> shirini, Nullable<bool> torshi, Nullable<bool> shuri, Nullable<bool> tondi, Nullable<bool> atash, Nullable<bool> stress, Nullable<bool> vasvasF, Nullable<bool> vasvasA, Nullable<byte> tasmim, Nullable<byte> khoshBadbin, Nullable<byte> birunDarun, Nullable<byte> energy, Nullable<byte> sleep, Nullable<byte> hafeze, Nullable<byte> govaresh, Nullable<bool> nafkh, Nullable<bool> reflex, Nullable<bool> dardMede, Nullable<bool> abRizeshDahan, Nullable<bool> sardard1, Nullable<bool> sardard2, Nullable<bool> sardard3, Nullable<bool> sarma1, Nullable<bool> sarma2, Nullable<bool> sarma3, Nullable<bool> sarma4, Nullable<bool> sarma5, Nullable<bool> sarma6, Nullable<bool> sarma7, Nullable<bool> sarma8, Nullable<bool> gushSeda, Nullable<byte> gushSedaNo, Nullable<bool> dardOzv1, Nullable<bool> dardOzv2, Nullable<bool> dardOzv3, Nullable<bool> dardOzv4, Nullable<bool> dardOzv5, Nullable<byte> dardOzv5No, Nullable<bool> dardOzv6, Nullable<bool> dardOzv7, Nullable<bool> dardOzv8, Nullable<byte> dardOzv8No, Nullable<bool> dardOzv9, Nullable<bool> dardOzv10, Nullable<bool> selected, Nullable<int> userid)
        {
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var rowIDParameter = rowID.HasValue ?
                new ObjectParameter("RowID", rowID) :
                new ObjectParameter("RowID", typeof(byte));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(short));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(short));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var visitIDParameter = visitID.HasValue ?
                new ObjectParameter("VisitID", visitID) :
                new ObjectParameter("VisitID", typeof(int));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var dscOleParameter = dscOle != null ?
                new ObjectParameter("DscOle", dscOle) :
                new ObjectParameter("DscOle", typeof(byte[]));
    
            var sarmaiParameter = sarmai.HasValue ?
                new ObjectParameter("Sarmai", sarmai) :
                new ObjectParameter("Sarmai", typeof(bool));
    
            var garmaiParameter = garmai.HasValue ?
                new ObjectParameter("Garmai", garmai) :
                new ObjectParameter("Garmai", typeof(bool));
    
            var noSarmaGarmaParameter = noSarmaGarma.HasValue ?
                new ObjectParameter("NoSarmaGarma", noSarmaGarma) :
                new ObjectParameter("NoSarmaGarma", typeof(bool));
    
            var shiriniParameter = shirini.HasValue ?
                new ObjectParameter("Shirini", shirini) :
                new ObjectParameter("Shirini", typeof(bool));
    
            var torshiParameter = torshi.HasValue ?
                new ObjectParameter("Torshi", torshi) :
                new ObjectParameter("Torshi", typeof(bool));
    
            var shuriParameter = shuri.HasValue ?
                new ObjectParameter("Shuri", shuri) :
                new ObjectParameter("Shuri", typeof(bool));
    
            var tondiParameter = tondi.HasValue ?
                new ObjectParameter("Tondi", tondi) :
                new ObjectParameter("Tondi", typeof(bool));
    
            var atashParameter = atash.HasValue ?
                new ObjectParameter("Atash", atash) :
                new ObjectParameter("Atash", typeof(bool));
    
            var stressParameter = stress.HasValue ?
                new ObjectParameter("Stress", stress) :
                new ObjectParameter("Stress", typeof(bool));
    
            var vasvasFParameter = vasvasF.HasValue ?
                new ObjectParameter("VasvasF", vasvasF) :
                new ObjectParameter("VasvasF", typeof(bool));
    
            var vasvasAParameter = vasvasA.HasValue ?
                new ObjectParameter("VasvasA", vasvasA) :
                new ObjectParameter("VasvasA", typeof(bool));
    
            var tasmimParameter = tasmim.HasValue ?
                new ObjectParameter("Tasmim", tasmim) :
                new ObjectParameter("Tasmim", typeof(byte));
    
            var khoshBadbinParameter = khoshBadbin.HasValue ?
                new ObjectParameter("KhoshBadbin", khoshBadbin) :
                new ObjectParameter("KhoshBadbin", typeof(byte));
    
            var birunDarunParameter = birunDarun.HasValue ?
                new ObjectParameter("BirunDarun", birunDarun) :
                new ObjectParameter("BirunDarun", typeof(byte));
    
            var energyParameter = energy.HasValue ?
                new ObjectParameter("Energy", energy) :
                new ObjectParameter("Energy", typeof(byte));
    
            var sleepParameter = sleep.HasValue ?
                new ObjectParameter("Sleep", sleep) :
                new ObjectParameter("Sleep", typeof(byte));
    
            var hafezeParameter = hafeze.HasValue ?
                new ObjectParameter("Hafeze", hafeze) :
                new ObjectParameter("Hafeze", typeof(byte));
    
            var govareshParameter = govaresh.HasValue ?
                new ObjectParameter("Govaresh", govaresh) :
                new ObjectParameter("Govaresh", typeof(byte));
    
            var nafkhParameter = nafkh.HasValue ?
                new ObjectParameter("Nafkh", nafkh) :
                new ObjectParameter("Nafkh", typeof(bool));
    
            var reflexParameter = reflex.HasValue ?
                new ObjectParameter("Reflex", reflex) :
                new ObjectParameter("Reflex", typeof(bool));
    
            var dardMedeParameter = dardMede.HasValue ?
                new ObjectParameter("DardMede", dardMede) :
                new ObjectParameter("DardMede", typeof(bool));
    
            var abRizeshDahanParameter = abRizeshDahan.HasValue ?
                new ObjectParameter("AbRizeshDahan", abRizeshDahan) :
                new ObjectParameter("AbRizeshDahan", typeof(bool));
    
            var sardard1Parameter = sardard1.HasValue ?
                new ObjectParameter("Sardard1", sardard1) :
                new ObjectParameter("Sardard1", typeof(bool));
    
            var sardard2Parameter = sardard2.HasValue ?
                new ObjectParameter("Sardard2", sardard2) :
                new ObjectParameter("Sardard2", typeof(bool));
    
            var sardard3Parameter = sardard3.HasValue ?
                new ObjectParameter("Sardard3", sardard3) :
                new ObjectParameter("Sardard3", typeof(bool));
    
            var sarma1Parameter = sarma1.HasValue ?
                new ObjectParameter("Sarma1", sarma1) :
                new ObjectParameter("Sarma1", typeof(bool));
    
            var sarma2Parameter = sarma2.HasValue ?
                new ObjectParameter("Sarma2", sarma2) :
                new ObjectParameter("Sarma2", typeof(bool));
    
            var sarma3Parameter = sarma3.HasValue ?
                new ObjectParameter("Sarma3", sarma3) :
                new ObjectParameter("Sarma3", typeof(bool));
    
            var sarma4Parameter = sarma4.HasValue ?
                new ObjectParameter("Sarma4", sarma4) :
                new ObjectParameter("Sarma4", typeof(bool));
    
            var sarma5Parameter = sarma5.HasValue ?
                new ObjectParameter("Sarma5", sarma5) :
                new ObjectParameter("Sarma5", typeof(bool));
    
            var sarma6Parameter = sarma6.HasValue ?
                new ObjectParameter("Sarma6", sarma6) :
                new ObjectParameter("Sarma6", typeof(bool));
    
            var sarma7Parameter = sarma7.HasValue ?
                new ObjectParameter("Sarma7", sarma7) :
                new ObjectParameter("Sarma7", typeof(bool));
    
            var sarma8Parameter = sarma8.HasValue ?
                new ObjectParameter("Sarma8", sarma8) :
                new ObjectParameter("Sarma8", typeof(bool));
    
            var gushSedaParameter = gushSeda.HasValue ?
                new ObjectParameter("GushSeda", gushSeda) :
                new ObjectParameter("GushSeda", typeof(bool));
    
            var gushSedaNoParameter = gushSedaNo.HasValue ?
                new ObjectParameter("GushSedaNo", gushSedaNo) :
                new ObjectParameter("GushSedaNo", typeof(byte));
    
            var dardOzv1Parameter = dardOzv1.HasValue ?
                new ObjectParameter("DardOzv1", dardOzv1) :
                new ObjectParameter("DardOzv1", typeof(bool));
    
            var dardOzv2Parameter = dardOzv2.HasValue ?
                new ObjectParameter("DardOzv2", dardOzv2) :
                new ObjectParameter("DardOzv2", typeof(bool));
    
            var dardOzv3Parameter = dardOzv3.HasValue ?
                new ObjectParameter("DardOzv3", dardOzv3) :
                new ObjectParameter("DardOzv3", typeof(bool));
    
            var dardOzv4Parameter = dardOzv4.HasValue ?
                new ObjectParameter("DardOzv4", dardOzv4) :
                new ObjectParameter("DardOzv4", typeof(bool));
    
            var dardOzv5Parameter = dardOzv5.HasValue ?
                new ObjectParameter("DardOzv5", dardOzv5) :
                new ObjectParameter("DardOzv5", typeof(bool));
    
            var dardOzv5NoParameter = dardOzv5No.HasValue ?
                new ObjectParameter("DardOzv5No", dardOzv5No) :
                new ObjectParameter("DardOzv5No", typeof(byte));
    
            var dardOzv6Parameter = dardOzv6.HasValue ?
                new ObjectParameter("DardOzv6", dardOzv6) :
                new ObjectParameter("DardOzv6", typeof(bool));
    
            var dardOzv7Parameter = dardOzv7.HasValue ?
                new ObjectParameter("DardOzv7", dardOzv7) :
                new ObjectParameter("DardOzv7", typeof(bool));
    
            var dardOzv8Parameter = dardOzv8.HasValue ?
                new ObjectParameter("DardOzv8", dardOzv8) :
                new ObjectParameter("DardOzv8", typeof(bool));
    
            var dardOzv8NoParameter = dardOzv8No.HasValue ?
                new ObjectParameter("DardOzv8No", dardOzv8No) :
                new ObjectParameter("DardOzv8No", typeof(byte));
    
            var dardOzv9Parameter = dardOzv9.HasValue ?
                new ObjectParameter("DardOzv9", dardOzv9) :
                new ObjectParameter("DardOzv9", typeof(bool));
    
            var dardOzv10Parameter = dardOzv10.HasValue ?
                new ObjectParameter("DardOzv10", dardOzv10) :
                new ObjectParameter("DardOzv10", typeof(bool));
    
            var selectedParameter = selected.HasValue ?
                new ObjectParameter("Selected", selected) :
                new ObjectParameter("Selected", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionVisits_Insert", shiftIDParameter, receptionIDParameter, rowIDParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, insuranceIDParameter, registerDateParameter, reasonIDParameter, diseaseIDParameter, diagnosisIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyIDParameter, visitIDParameter, bodyIDParameter, dscParameter, dscOleParameter, sarmaiParameter, garmaiParameter, noSarmaGarmaParameter, shiriniParameter, torshiParameter, shuriParameter, tondiParameter, atashParameter, stressParameter, vasvasFParameter, vasvasAParameter, tasmimParameter, khoshBadbinParameter, birunDarunParameter, energyParameter, sleepParameter, hafezeParameter, govareshParameter, nafkhParameter, reflexParameter, dardMedeParameter, abRizeshDahanParameter, sardard1Parameter, sardard2Parameter, sardard3Parameter, sarma1Parameter, sarma2Parameter, sarma3Parameter, sarma4Parameter, sarma5Parameter, sarma6Parameter, sarma7Parameter, sarma8Parameter, gushSedaParameter, gushSedaNoParameter, dardOzv1Parameter, dardOzv2Parameter, dardOzv3Parameter, dardOzv4Parameter, dardOzv5Parameter, dardOzv5NoParameter, dardOzv6Parameter, dardOzv7Parameter, dardOzv8Parameter, dardOzv8NoParameter, dardOzv9Parameter, dardOzv10Parameter, selectedParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_ReceptionVisits_Select_Result> sp_ReceptionVisits_Select(string registerDate_Start, string registerDate_End, Nullable<int> receptionID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<int> insuranceID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyID, Nullable<int> visitCategoryID, Nullable<int> visitSubCategoryID, Nullable<int> visitID, Nullable<int> reasonID, Nullable<short> diagnosisID, Nullable<short> diseaseID, Nullable<int> bodyID, string dsc, Nullable<int> userid, Nullable<int> topRange)
        {
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var visitCategoryIDParameter = visitCategoryID.HasValue ?
                new ObjectParameter("VisitCategoryID", visitCategoryID) :
                new ObjectParameter("VisitCategoryID", typeof(int));
    
            var visitSubCategoryIDParameter = visitSubCategoryID.HasValue ?
                new ObjectParameter("VisitSubCategoryID", visitSubCategoryID) :
                new ObjectParameter("VisitSubCategoryID", typeof(int));
    
            var visitIDParameter = visitID.HasValue ?
                new ObjectParameter("VisitID", visitID) :
                new ObjectParameter("VisitID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(short));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(short));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReceptionVisits_Select_Result>("sp_ReceptionVisits_Select", registerDate_StartParameter, registerDate_EndParameter, receptionIDParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, insuranceIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyIDParameter, visitCategoryIDParameter, visitSubCategoryIDParameter, visitIDParameter, reasonIDParameter, diagnosisIDParameter, diseaseIDParameter, bodyIDParameter, dscParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_ReceptionVisits_SelectRow_Result> sp_ReceptionVisits_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReceptionVisits_SelectRow_Result>("sp_ReceptionVisits_SelectRow", iDParameter);
        }
    
        public virtual int sp_ReceptionVisits_Update(Nullable<int> iD, Nullable<short> shiftID, Nullable<int> receptionID, Nullable<byte> rowID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<int> insuranceID, Nullable<System.DateTime> registerDate, Nullable<int> reasonID, Nullable<short> diseaseID, Nullable<short> diagnosisID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyID, Nullable<int> visitID, Nullable<int> bodyID, string dsc, byte[] dscOle, Nullable<bool> sarmai, Nullable<bool> garmai, Nullable<bool> noSarmaGarma, Nullable<bool> shirini, Nullable<bool> torshi, Nullable<bool> shuri, Nullable<bool> tondi, Nullable<bool> atash, Nullable<bool> stress, Nullable<bool> vasvasF, Nullable<bool> vasvasA, Nullable<byte> tasmim, Nullable<byte> khoshBadbin, Nullable<byte> birunDarun, Nullable<byte> energy, Nullable<byte> sleep, Nullable<byte> hafeze, Nullable<byte> govaresh, Nullable<bool> nafkh, Nullable<bool> reflex, Nullable<bool> dardMede, Nullable<bool> abRizeshDahan, Nullable<bool> sardard1, Nullable<bool> sardard2, Nullable<bool> sardard3, Nullable<bool> sarma1, Nullable<bool> sarma2, Nullable<bool> sarma3, Nullable<bool> sarma4, Nullable<bool> sarma5, Nullable<bool> sarma6, Nullable<bool> sarma7, Nullable<bool> sarma8, Nullable<bool> gushSeda, Nullable<byte> gushSedaNo, Nullable<bool> dardOzv1, Nullable<bool> dardOzv2, Nullable<bool> dardOzv3, Nullable<bool> dardOzv4, Nullable<bool> dardOzv5, Nullable<byte> dardOzv5No, Nullable<bool> dardOzv6, Nullable<bool> dardOzv7, Nullable<bool> dardOzv8, Nullable<byte> dardOzv8No, Nullable<bool> dardOzv9, Nullable<bool> dardOzv10, Nullable<bool> selected, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var rowIDParameter = rowID.HasValue ?
                new ObjectParameter("RowID", rowID) :
                new ObjectParameter("RowID", typeof(byte));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(short));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(short));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var visitIDParameter = visitID.HasValue ?
                new ObjectParameter("VisitID", visitID) :
                new ObjectParameter("VisitID", typeof(int));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var dscOleParameter = dscOle != null ?
                new ObjectParameter("DscOle", dscOle) :
                new ObjectParameter("DscOle", typeof(byte[]));
    
            var sarmaiParameter = sarmai.HasValue ?
                new ObjectParameter("Sarmai", sarmai) :
                new ObjectParameter("Sarmai", typeof(bool));
    
            var garmaiParameter = garmai.HasValue ?
                new ObjectParameter("Garmai", garmai) :
                new ObjectParameter("Garmai", typeof(bool));
    
            var noSarmaGarmaParameter = noSarmaGarma.HasValue ?
                new ObjectParameter("NoSarmaGarma", noSarmaGarma) :
                new ObjectParameter("NoSarmaGarma", typeof(bool));
    
            var shiriniParameter = shirini.HasValue ?
                new ObjectParameter("Shirini", shirini) :
                new ObjectParameter("Shirini", typeof(bool));
    
            var torshiParameter = torshi.HasValue ?
                new ObjectParameter("Torshi", torshi) :
                new ObjectParameter("Torshi", typeof(bool));
    
            var shuriParameter = shuri.HasValue ?
                new ObjectParameter("Shuri", shuri) :
                new ObjectParameter("Shuri", typeof(bool));
    
            var tondiParameter = tondi.HasValue ?
                new ObjectParameter("Tondi", tondi) :
                new ObjectParameter("Tondi", typeof(bool));
    
            var atashParameter = atash.HasValue ?
                new ObjectParameter("Atash", atash) :
                new ObjectParameter("Atash", typeof(bool));
    
            var stressParameter = stress.HasValue ?
                new ObjectParameter("Stress", stress) :
                new ObjectParameter("Stress", typeof(bool));
    
            var vasvasFParameter = vasvasF.HasValue ?
                new ObjectParameter("VasvasF", vasvasF) :
                new ObjectParameter("VasvasF", typeof(bool));
    
            var vasvasAParameter = vasvasA.HasValue ?
                new ObjectParameter("VasvasA", vasvasA) :
                new ObjectParameter("VasvasA", typeof(bool));
    
            var tasmimParameter = tasmim.HasValue ?
                new ObjectParameter("Tasmim", tasmim) :
                new ObjectParameter("Tasmim", typeof(byte));
    
            var khoshBadbinParameter = khoshBadbin.HasValue ?
                new ObjectParameter("KhoshBadbin", khoshBadbin) :
                new ObjectParameter("KhoshBadbin", typeof(byte));
    
            var birunDarunParameter = birunDarun.HasValue ?
                new ObjectParameter("BirunDarun", birunDarun) :
                new ObjectParameter("BirunDarun", typeof(byte));
    
            var energyParameter = energy.HasValue ?
                new ObjectParameter("Energy", energy) :
                new ObjectParameter("Energy", typeof(byte));
    
            var sleepParameter = sleep.HasValue ?
                new ObjectParameter("Sleep", sleep) :
                new ObjectParameter("Sleep", typeof(byte));
    
            var hafezeParameter = hafeze.HasValue ?
                new ObjectParameter("Hafeze", hafeze) :
                new ObjectParameter("Hafeze", typeof(byte));
    
            var govareshParameter = govaresh.HasValue ?
                new ObjectParameter("Govaresh", govaresh) :
                new ObjectParameter("Govaresh", typeof(byte));
    
            var nafkhParameter = nafkh.HasValue ?
                new ObjectParameter("Nafkh", nafkh) :
                new ObjectParameter("Nafkh", typeof(bool));
    
            var reflexParameter = reflex.HasValue ?
                new ObjectParameter("Reflex", reflex) :
                new ObjectParameter("Reflex", typeof(bool));
    
            var dardMedeParameter = dardMede.HasValue ?
                new ObjectParameter("DardMede", dardMede) :
                new ObjectParameter("DardMede", typeof(bool));
    
            var abRizeshDahanParameter = abRizeshDahan.HasValue ?
                new ObjectParameter("AbRizeshDahan", abRizeshDahan) :
                new ObjectParameter("AbRizeshDahan", typeof(bool));
    
            var sardard1Parameter = sardard1.HasValue ?
                new ObjectParameter("Sardard1", sardard1) :
                new ObjectParameter("Sardard1", typeof(bool));
    
            var sardard2Parameter = sardard2.HasValue ?
                new ObjectParameter("Sardard2", sardard2) :
                new ObjectParameter("Sardard2", typeof(bool));
    
            var sardard3Parameter = sardard3.HasValue ?
                new ObjectParameter("Sardard3", sardard3) :
                new ObjectParameter("Sardard3", typeof(bool));
    
            var sarma1Parameter = sarma1.HasValue ?
                new ObjectParameter("Sarma1", sarma1) :
                new ObjectParameter("Sarma1", typeof(bool));
    
            var sarma2Parameter = sarma2.HasValue ?
                new ObjectParameter("Sarma2", sarma2) :
                new ObjectParameter("Sarma2", typeof(bool));
    
            var sarma3Parameter = sarma3.HasValue ?
                new ObjectParameter("Sarma3", sarma3) :
                new ObjectParameter("Sarma3", typeof(bool));
    
            var sarma4Parameter = sarma4.HasValue ?
                new ObjectParameter("Sarma4", sarma4) :
                new ObjectParameter("Sarma4", typeof(bool));
    
            var sarma5Parameter = sarma5.HasValue ?
                new ObjectParameter("Sarma5", sarma5) :
                new ObjectParameter("Sarma5", typeof(bool));
    
            var sarma6Parameter = sarma6.HasValue ?
                new ObjectParameter("Sarma6", sarma6) :
                new ObjectParameter("Sarma6", typeof(bool));
    
            var sarma7Parameter = sarma7.HasValue ?
                new ObjectParameter("Sarma7", sarma7) :
                new ObjectParameter("Sarma7", typeof(bool));
    
            var sarma8Parameter = sarma8.HasValue ?
                new ObjectParameter("Sarma8", sarma8) :
                new ObjectParameter("Sarma8", typeof(bool));
    
            var gushSedaParameter = gushSeda.HasValue ?
                new ObjectParameter("GushSeda", gushSeda) :
                new ObjectParameter("GushSeda", typeof(bool));
    
            var gushSedaNoParameter = gushSedaNo.HasValue ?
                new ObjectParameter("GushSedaNo", gushSedaNo) :
                new ObjectParameter("GushSedaNo", typeof(byte));
    
            var dardOzv1Parameter = dardOzv1.HasValue ?
                new ObjectParameter("DardOzv1", dardOzv1) :
                new ObjectParameter("DardOzv1", typeof(bool));
    
            var dardOzv2Parameter = dardOzv2.HasValue ?
                new ObjectParameter("DardOzv2", dardOzv2) :
                new ObjectParameter("DardOzv2", typeof(bool));
    
            var dardOzv3Parameter = dardOzv3.HasValue ?
                new ObjectParameter("DardOzv3", dardOzv3) :
                new ObjectParameter("DardOzv3", typeof(bool));
    
            var dardOzv4Parameter = dardOzv4.HasValue ?
                new ObjectParameter("DardOzv4", dardOzv4) :
                new ObjectParameter("DardOzv4", typeof(bool));
    
            var dardOzv5Parameter = dardOzv5.HasValue ?
                new ObjectParameter("DardOzv5", dardOzv5) :
                new ObjectParameter("DardOzv5", typeof(bool));
    
            var dardOzv5NoParameter = dardOzv5No.HasValue ?
                new ObjectParameter("DardOzv5No", dardOzv5No) :
                new ObjectParameter("DardOzv5No", typeof(byte));
    
            var dardOzv6Parameter = dardOzv6.HasValue ?
                new ObjectParameter("DardOzv6", dardOzv6) :
                new ObjectParameter("DardOzv6", typeof(bool));
    
            var dardOzv7Parameter = dardOzv7.HasValue ?
                new ObjectParameter("DardOzv7", dardOzv7) :
                new ObjectParameter("DardOzv7", typeof(bool));
    
            var dardOzv8Parameter = dardOzv8.HasValue ?
                new ObjectParameter("DardOzv8", dardOzv8) :
                new ObjectParameter("DardOzv8", typeof(bool));
    
            var dardOzv8NoParameter = dardOzv8No.HasValue ?
                new ObjectParameter("DardOzv8No", dardOzv8No) :
                new ObjectParameter("DardOzv8No", typeof(byte));
    
            var dardOzv9Parameter = dardOzv9.HasValue ?
                new ObjectParameter("DardOzv9", dardOzv9) :
                new ObjectParameter("DardOzv9", typeof(bool));
    
            var dardOzv10Parameter = dardOzv10.HasValue ?
                new ObjectParameter("DardOzv10", dardOzv10) :
                new ObjectParameter("DardOzv10", typeof(bool));
    
            var selectedParameter = selected.HasValue ?
                new ObjectParameter("Selected", selected) :
                new ObjectParameter("Selected", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReceptionVisits_Update", iDParameter, shiftIDParameter, receptionIDParameter, rowIDParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, insuranceIDParameter, registerDateParameter, reasonIDParameter, diseaseIDParameter, diagnosisIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyIDParameter, visitIDParameter, bodyIDParameter, dscParameter, dscOleParameter, sarmaiParameter, garmaiParameter, noSarmaGarmaParameter, shiriniParameter, torshiParameter, shuriParameter, tondiParameter, atashParameter, stressParameter, vasvasFParameter, vasvasAParameter, tasmimParameter, khoshBadbinParameter, birunDarunParameter, energyParameter, sleepParameter, hafezeParameter, govareshParameter, nafkhParameter, reflexParameter, dardMedeParameter, abRizeshDahanParameter, sardard1Parameter, sardard2Parameter, sardard3Parameter, sarma1Parameter, sarma2Parameter, sarma3Parameter, sarma4Parameter, sarma5Parameter, sarma6Parameter, sarma7Parameter, sarma8Parameter, gushSedaParameter, gushSedaNoParameter, dardOzv1Parameter, dardOzv2Parameter, dardOzv3Parameter, dardOzv4Parameter, dardOzv5Parameter, dardOzv5NoParameter, dardOzv6Parameter, dardOzv7Parameter, dardOzv8Parameter, dardOzv8NoParameter, dardOzv9Parameter, dardOzv10Parameter, selectedParameter, useridParameter);
        }
    
        public virtual int Sp_Reminder_Delete(Nullable<int> noteid)
        {
            var noteidParameter = noteid.HasValue ?
                new ObjectParameter("Noteid", noteid) :
                new ObjectParameter("Noteid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Reminder_Delete", noteidParameter);
        }
    
        public virtual ObjectResult<Sp_Reminder_Select_Result> Sp_Reminder_Select(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Reminder_Select_Result>("Sp_Reminder_Select", useridParameter);
        }
    
        public virtual int Sp_Reminder_Update(Nullable<int> iD, Nullable<int> noteTypeID, string title, string dsc, Nullable<bool> reminderBroadcast, Nullable<byte> srcType, Nullable<int> srcID, Nullable<bool> alarm, Nullable<short> alarmTask, Nullable<System.DateTime> alarmDate, string alarmFile, Nullable<byte> alarmMode, Nullable<bool> sendSMS, string sMSNumber, string sMSMessage, ObjectParameter notID, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var noteTypeIDParameter = noteTypeID.HasValue ?
                new ObjectParameter("NoteTypeID", noteTypeID) :
                new ObjectParameter("NoteTypeID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var reminderBroadcastParameter = reminderBroadcast.HasValue ?
                new ObjectParameter("ReminderBroadcast", reminderBroadcast) :
                new ObjectParameter("ReminderBroadcast", typeof(bool));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var srcIDParameter = srcID.HasValue ?
                new ObjectParameter("SrcID", srcID) :
                new ObjectParameter("SrcID", typeof(int));
    
            var alarmParameter = alarm.HasValue ?
                new ObjectParameter("Alarm", alarm) :
                new ObjectParameter("Alarm", typeof(bool));
    
            var alarmTaskParameter = alarmTask.HasValue ?
                new ObjectParameter("AlarmTask", alarmTask) :
                new ObjectParameter("AlarmTask", typeof(short));
    
            var alarmDateParameter = alarmDate.HasValue ?
                new ObjectParameter("AlarmDate", alarmDate) :
                new ObjectParameter("AlarmDate", typeof(System.DateTime));
    
            var alarmFileParameter = alarmFile != null ?
                new ObjectParameter("AlarmFile", alarmFile) :
                new ObjectParameter("AlarmFile", typeof(string));
    
            var alarmModeParameter = alarmMode.HasValue ?
                new ObjectParameter("AlarmMode", alarmMode) :
                new ObjectParameter("AlarmMode", typeof(byte));
    
            var sendSMSParameter = sendSMS.HasValue ?
                new ObjectParameter("SendSMS", sendSMS) :
                new ObjectParameter("SendSMS", typeof(bool));
    
            var sMSNumberParameter = sMSNumber != null ?
                new ObjectParameter("SMSNumber", sMSNumber) :
                new ObjectParameter("SMSNumber", typeof(string));
    
            var sMSMessageParameter = sMSMessage != null ?
                new ObjectParameter("SMSMessage", sMSMessage) :
                new ObjectParameter("SMSMessage", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Reminder_Update", iDParameter, noteTypeIDParameter, titleParameter, dscParameter, reminderBroadcastParameter, srcTypeParameter, srcIDParameter, alarmParameter, alarmTaskParameter, alarmDateParameter, alarmFileParameter, alarmModeParameter, sendSMSParameter, sMSNumberParameter, sMSMessageParameter, notID, useridParameter);
        }
    
        public virtual int Sp_Reminder_UpdateSendSMS(Nullable<int> iD, Nullable<bool> sendSMS)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var sendSMSParameter = sendSMS.HasValue ?
                new ObjectParameter("SendSMS", sendSMS) :
                new ObjectParameter("SendSMS", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Reminder_UpdateSendSMS", iDParameter, sendSMSParameter);
        }
    
        public virtual int sp_ReminderView_Delete(Nullable<int> noteID, Nullable<int> userID)
        {
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReminderView_Delete", noteIDParameter, userIDParameter);
        }
    
        public virtual int sp_ReminderView_Insert(Nullable<int> noteID, Nullable<int> userID)
        {
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReminderView_Insert", noteIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_ReminderView_Select_Result> sp_ReminderView_Select(Nullable<int> noteID, Nullable<int> userID)
        {
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ReminderView_Select_Result>("sp_ReminderView_Select", noteIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Sp_ReminderWithSMS_Select_Result> Sp_ReminderWithSMS_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_ReminderWithSMS_Select_Result>("Sp_ReminderWithSMS_Select");
        }
    
        public virtual int sp_ResetFundsDocotorIDAndAssistantID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ResetFundsDocotorIDAndAssistantID");
        }
    
        public virtual int sp_ResetPrescriptionsMedicalServiceCodes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ResetPrescriptionsMedicalServiceCodes");
        }
    
        public virtual int sp_resetpss(Nullable<int> iD, string pwd, string appValid, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("Pwd", pwd) :
                new ObjectParameter("Pwd", typeof(string));
    
            var appValidParameter = appValid != null ?
                new ObjectParameter("AppValid", appValid) :
                new ObjectParameter("AppValid", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_resetpss", iDParameter, pwdParameter, appValidParameter, useridParameter);
        }
    
        public virtual int sp_Rols_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Rols_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Rols_Insert(string name, string dsc, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Rols_Insert", nameParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Rols_Select_Result> sp_Rols_Select(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Rols_Select_Result>("sp_Rols_Select", nameParameter);
        }
    
        public virtual int sp_Rols_Update(Nullable<int> iD, string name, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Rols_Update", iDParameter, nameParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_Rooms_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Rooms_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Rooms_Insert(Nullable<int> departmentID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Rooms_Insert", departmentIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Rooms_Select_Result> sp_Rooms_Select(Nullable<int> departmentID, string name, Nullable<int> active)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Rooms_Select_Result>("sp_Rooms_Select", departmentIDParameter, nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_Rooms_SelectROW_Result> sp_Rooms_SelectROW(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Rooms_SelectROW_Result>("sp_Rooms_SelectROW", iDParameter);
        }
    
        public virtual int sp_Rooms_Update(Nullable<int> departmentID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Rooms_Update", departmentIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_SaleSetting_Select_Result> sp_SaleSetting_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SaleSetting_Select_Result>("sp_SaleSetting_Select");
        }
    
        public virtual int sp_SaleSetting_Update(Nullable<bool> questionBeforPost, Nullable<bool> questionBeforPrint, Nullable<bool> showDialogBeforPrint, string printer1, string printer2, string printer3, string printer4, string printReportFile1, string printReportFile2, string printReportFile3, string printReportFile4, Nullable<int> firstPrinter, Nullable<bool> autoPrint1AfterPost, Nullable<bool> autoPrint2AfterPost, Nullable<bool> autoPrint3AfterPost, Nullable<bool> autoPrint4AfterPost, Nullable<int> printer3ItemClassID, Nullable<int> printer4ItemClassID, Nullable<bool> printer3OnlyItemClassIDPrint, Nullable<bool> printer4OnlyItemClassIDPrint, Nullable<int> defultCustomerID, Nullable<int> defultDriverID, Nullable<int> defultCarID, Nullable<int> inventoryID, Nullable<short> itemCategoryID, Nullable<short> itemSubCategoryID, Nullable<bool> autoTakh, Nullable<bool> autoTax, Nullable<bool> autoDutiy, Nullable<bool> autoServicePrice, Nullable<double> autoTakhValue, Nullable<double> autoTaxValue, Nullable<double> autoDutiyValue, Nullable<double> autoServicePriceValue, Nullable<double> defaultServicePrice, Nullable<bool> minimumInv, Nullable<bool> autoSetBes, Nullable<int> defaultDayID, Nullable<int> userid)
        {
            var questionBeforPostParameter = questionBeforPost.HasValue ?
                new ObjectParameter("QuestionBeforPost", questionBeforPost) :
                new ObjectParameter("QuestionBeforPost", typeof(bool));
    
            var questionBeforPrintParameter = questionBeforPrint.HasValue ?
                new ObjectParameter("QuestionBeforPrint", questionBeforPrint) :
                new ObjectParameter("QuestionBeforPrint", typeof(bool));
    
            var showDialogBeforPrintParameter = showDialogBeforPrint.HasValue ?
                new ObjectParameter("ShowDialogBeforPrint", showDialogBeforPrint) :
                new ObjectParameter("ShowDialogBeforPrint", typeof(bool));
    
            var printer1Parameter = printer1 != null ?
                new ObjectParameter("Printer1", printer1) :
                new ObjectParameter("Printer1", typeof(string));
    
            var printer2Parameter = printer2 != null ?
                new ObjectParameter("Printer2", printer2) :
                new ObjectParameter("Printer2", typeof(string));
    
            var printer3Parameter = printer3 != null ?
                new ObjectParameter("Printer3", printer3) :
                new ObjectParameter("Printer3", typeof(string));
    
            var printer4Parameter = printer4 != null ?
                new ObjectParameter("Printer4", printer4) :
                new ObjectParameter("Printer4", typeof(string));
    
            var printReportFile1Parameter = printReportFile1 != null ?
                new ObjectParameter("PrintReportFile1", printReportFile1) :
                new ObjectParameter("PrintReportFile1", typeof(string));
    
            var printReportFile2Parameter = printReportFile2 != null ?
                new ObjectParameter("PrintReportFile2", printReportFile2) :
                new ObjectParameter("PrintReportFile2", typeof(string));
    
            var printReportFile3Parameter = printReportFile3 != null ?
                new ObjectParameter("PrintReportFile3", printReportFile3) :
                new ObjectParameter("PrintReportFile3", typeof(string));
    
            var printReportFile4Parameter = printReportFile4 != null ?
                new ObjectParameter("PrintReportFile4", printReportFile4) :
                new ObjectParameter("PrintReportFile4", typeof(string));
    
            var firstPrinterParameter = firstPrinter.HasValue ?
                new ObjectParameter("FirstPrinter", firstPrinter) :
                new ObjectParameter("FirstPrinter", typeof(int));
    
            var autoPrint1AfterPostParameter = autoPrint1AfterPost.HasValue ?
                new ObjectParameter("AutoPrint1AfterPost", autoPrint1AfterPost) :
                new ObjectParameter("AutoPrint1AfterPost", typeof(bool));
    
            var autoPrint2AfterPostParameter = autoPrint2AfterPost.HasValue ?
                new ObjectParameter("AutoPrint2AfterPost", autoPrint2AfterPost) :
                new ObjectParameter("AutoPrint2AfterPost", typeof(bool));
    
            var autoPrint3AfterPostParameter = autoPrint3AfterPost.HasValue ?
                new ObjectParameter("AutoPrint3AfterPost", autoPrint3AfterPost) :
                new ObjectParameter("AutoPrint3AfterPost", typeof(bool));
    
            var autoPrint4AfterPostParameter = autoPrint4AfterPost.HasValue ?
                new ObjectParameter("AutoPrint4AfterPost", autoPrint4AfterPost) :
                new ObjectParameter("AutoPrint4AfterPost", typeof(bool));
    
            var printer3ItemClassIDParameter = printer3ItemClassID.HasValue ?
                new ObjectParameter("Printer3ItemClassID", printer3ItemClassID) :
                new ObjectParameter("Printer3ItemClassID", typeof(int));
    
            var printer4ItemClassIDParameter = printer4ItemClassID.HasValue ?
                new ObjectParameter("Printer4ItemClassID", printer4ItemClassID) :
                new ObjectParameter("Printer4ItemClassID", typeof(int));
    
            var printer3OnlyItemClassIDPrintParameter = printer3OnlyItemClassIDPrint.HasValue ?
                new ObjectParameter("Printer3OnlyItemClassIDPrint", printer3OnlyItemClassIDPrint) :
                new ObjectParameter("Printer3OnlyItemClassIDPrint", typeof(bool));
    
            var printer4OnlyItemClassIDPrintParameter = printer4OnlyItemClassIDPrint.HasValue ?
                new ObjectParameter("Printer4OnlyItemClassIDPrint", printer4OnlyItemClassIDPrint) :
                new ObjectParameter("Printer4OnlyItemClassIDPrint", typeof(bool));
    
            var defultCustomerIDParameter = defultCustomerID.HasValue ?
                new ObjectParameter("DefultCustomerID", defultCustomerID) :
                new ObjectParameter("DefultCustomerID", typeof(int));
    
            var defultDriverIDParameter = defultDriverID.HasValue ?
                new ObjectParameter("DefultDriverID", defultDriverID) :
                new ObjectParameter("DefultDriverID", typeof(int));
    
            var defultCarIDParameter = defultCarID.HasValue ?
                new ObjectParameter("DefultCarID", defultCarID) :
                new ObjectParameter("DefultCarID", typeof(int));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(short));
    
            var autoTakhParameter = autoTakh.HasValue ?
                new ObjectParameter("AutoTakh", autoTakh) :
                new ObjectParameter("AutoTakh", typeof(bool));
    
            var autoTaxParameter = autoTax.HasValue ?
                new ObjectParameter("AutoTax", autoTax) :
                new ObjectParameter("AutoTax", typeof(bool));
    
            var autoDutiyParameter = autoDutiy.HasValue ?
                new ObjectParameter("AutoDutiy", autoDutiy) :
                new ObjectParameter("AutoDutiy", typeof(bool));
    
            var autoServicePriceParameter = autoServicePrice.HasValue ?
                new ObjectParameter("AutoServicePrice", autoServicePrice) :
                new ObjectParameter("AutoServicePrice", typeof(bool));
    
            var autoTakhValueParameter = autoTakhValue.HasValue ?
                new ObjectParameter("AutoTakhValue", autoTakhValue) :
                new ObjectParameter("AutoTakhValue", typeof(double));
    
            var autoTaxValueParameter = autoTaxValue.HasValue ?
                new ObjectParameter("AutoTaxValue", autoTaxValue) :
                new ObjectParameter("AutoTaxValue", typeof(double));
    
            var autoDutiyValueParameter = autoDutiyValue.HasValue ?
                new ObjectParameter("AutoDutiyValue", autoDutiyValue) :
                new ObjectParameter("AutoDutiyValue", typeof(double));
    
            var autoServicePriceValueParameter = autoServicePriceValue.HasValue ?
                new ObjectParameter("AutoServicePriceValue", autoServicePriceValue) :
                new ObjectParameter("AutoServicePriceValue", typeof(double));
    
            var defaultServicePriceParameter = defaultServicePrice.HasValue ?
                new ObjectParameter("DefaultServicePrice", defaultServicePrice) :
                new ObjectParameter("DefaultServicePrice", typeof(double));
    
            var minimumInvParameter = minimumInv.HasValue ?
                new ObjectParameter("MinimumInv", minimumInv) :
                new ObjectParameter("MinimumInv", typeof(bool));
    
            var autoSetBesParameter = autoSetBes.HasValue ?
                new ObjectParameter("AutoSetBes", autoSetBes) :
                new ObjectParameter("AutoSetBes", typeof(bool));
    
            var defaultDayIDParameter = defaultDayID.HasValue ?
                new ObjectParameter("DefaultDayID", defaultDayID) :
                new ObjectParameter("DefaultDayID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SaleSetting_Update", questionBeforPostParameter, questionBeforPrintParameter, showDialogBeforPrintParameter, printer1Parameter, printer2Parameter, printer3Parameter, printer4Parameter, printReportFile1Parameter, printReportFile2Parameter, printReportFile3Parameter, printReportFile4Parameter, firstPrinterParameter, autoPrint1AfterPostParameter, autoPrint2AfterPostParameter, autoPrint3AfterPostParameter, autoPrint4AfterPostParameter, printer3ItemClassIDParameter, printer4ItemClassIDParameter, printer3OnlyItemClassIDPrintParameter, printer4OnlyItemClassIDPrintParameter, defultCustomerIDParameter, defultDriverIDParameter, defultCarIDParameter, inventoryIDParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, autoTakhParameter, autoTaxParameter, autoDutiyParameter, autoServicePriceParameter, autoTakhValueParameter, autoTaxValueParameter, autoDutiyValueParameter, autoServicePriceValueParameter, defaultServicePriceParameter, minimumInvParameter, autoSetBesParameter, defaultDayIDParameter, useridParameter);
        }
    
        public virtual int sp_SaleTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SaleTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_SaleTypes_Insert(string name, string dsc, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SaleTypes_Insert", nameParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_SaleTypes_Select_Result> sp_SaleTypes_Select(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SaleTypes_Select_Result>("sp_SaleTypes_Select", nameParameter);
        }
    
        public virtual int sp_SaleTypes_Update(Nullable<int> iD, string name, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SaleTypes_Update", iDParameter, nameParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sanad_Bedehkaran_Result> sp_Sanad_Bedehkaran()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sanad_Bedehkaran_Result>("sp_Sanad_Bedehkaran");
        }
    
        public virtual ObjectResult<sp_Sanad_Bestankaran_Result> sp_Sanad_Bestankaran()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sanad_Bestankaran_Result>("sp_Sanad_Bestankaran");
        }
    
        public virtual int sp_Sanad_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Sanad_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Sanad_Insert(Nullable<int> patientID, Nullable<int> doctorID, Nullable<int> sanadCategoryID, Nullable<int> sanadSubCategoryID, Nullable<int> sanadTypeID, Nullable<byte> srcType, Nullable<int> srcID, Nullable<double> bed, Nullable<double> bes, string dsc, Nullable<System.DateTime> sanad_date, Nullable<int> noteID, Nullable<int> rolid, Nullable<int> userid)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var sanadCategoryIDParameter = sanadCategoryID.HasValue ?
                new ObjectParameter("SanadCategoryID", sanadCategoryID) :
                new ObjectParameter("SanadCategoryID", typeof(int));
    
            var sanadSubCategoryIDParameter = sanadSubCategoryID.HasValue ?
                new ObjectParameter("SanadSubCategoryID", sanadSubCategoryID) :
                new ObjectParameter("SanadSubCategoryID", typeof(int));
    
            var sanadTypeIDParameter = sanadTypeID.HasValue ?
                new ObjectParameter("SanadTypeID", sanadTypeID) :
                new ObjectParameter("SanadTypeID", typeof(int));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var srcIDParameter = srcID.HasValue ?
                new ObjectParameter("SrcID", srcID) :
                new ObjectParameter("SrcID", typeof(int));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var besParameter = bes.HasValue ?
                new ObjectParameter("Bes", bes) :
                new ObjectParameter("Bes", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var sanad_dateParameter = sanad_date.HasValue ?
                new ObjectParameter("Sanad_date", sanad_date) :
                new ObjectParameter("Sanad_date", typeof(System.DateTime));
    
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Sanad_Insert", patientIDParameter, doctorIDParameter, sanadCategoryIDParameter, sanadSubCategoryIDParameter, sanadTypeIDParameter, srcTypeParameter, srcIDParameter, bedParameter, besParameter, dscParameter, sanad_dateParameter, noteIDParameter, rolidParameter, useridParameter);
        }
    
        public virtual int sp_Sanad_Select(Nullable<int> iD_Start, Nullable<int> iD_End, Nullable<int> patientID, Nullable<int> doctorID, Nullable<int> sanadCategoryID, Nullable<int> sanadSubCategoryID, Nullable<int> sanadTypeID, Nullable<double> bed_Start, Nullable<double> bed_End, Nullable<double> bes_Start, Nullable<double> bes_End, string dsc, string sanad_date_Start, string sanad_date_End, string sanad_Time_Start, string sanad_Time_End, Nullable<byte> srcType, Nullable<int> srcID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var sanadCategoryIDParameter = sanadCategoryID.HasValue ?
                new ObjectParameter("SanadCategoryID", sanadCategoryID) :
                new ObjectParameter("SanadCategoryID", typeof(int));
    
            var sanadSubCategoryIDParameter = sanadSubCategoryID.HasValue ?
                new ObjectParameter("SanadSubCategoryID", sanadSubCategoryID) :
                new ObjectParameter("SanadSubCategoryID", typeof(int));
    
            var sanadTypeIDParameter = sanadTypeID.HasValue ?
                new ObjectParameter("SanadTypeID", sanadTypeID) :
                new ObjectParameter("SanadTypeID", typeof(int));
    
            var bed_StartParameter = bed_Start.HasValue ?
                new ObjectParameter("Bed_Start", bed_Start) :
                new ObjectParameter("Bed_Start", typeof(double));
    
            var bed_EndParameter = bed_End.HasValue ?
                new ObjectParameter("Bed_End", bed_End) :
                new ObjectParameter("Bed_End", typeof(double));
    
            var bes_StartParameter = bes_Start.HasValue ?
                new ObjectParameter("Bes_Start", bes_Start) :
                new ObjectParameter("Bes_Start", typeof(double));
    
            var bes_EndParameter = bes_End.HasValue ?
                new ObjectParameter("Bes_End", bes_End) :
                new ObjectParameter("Bes_End", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var sanad_date_StartParameter = sanad_date_Start != null ?
                new ObjectParameter("Sanad_date_Start", sanad_date_Start) :
                new ObjectParameter("Sanad_date_Start", typeof(string));
    
            var sanad_date_EndParameter = sanad_date_End != null ?
                new ObjectParameter("Sanad_date_End", sanad_date_End) :
                new ObjectParameter("Sanad_date_End", typeof(string));
    
            var sanad_Time_StartParameter = sanad_Time_Start != null ?
                new ObjectParameter("Sanad_Time_Start", sanad_Time_Start) :
                new ObjectParameter("Sanad_Time_Start", typeof(string));
    
            var sanad_Time_EndParameter = sanad_Time_End != null ?
                new ObjectParameter("Sanad_Time_End", sanad_Time_End) :
                new ObjectParameter("Sanad_Time_End", typeof(string));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var srcIDParameter = srcID.HasValue ?
                new ObjectParameter("SrcID", srcID) :
                new ObjectParameter("SrcID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Sanad_Select", iD_StartParameter, iD_EndParameter, patientIDParameter, doctorIDParameter, sanadCategoryIDParameter, sanadSubCategoryIDParameter, sanadTypeIDParameter, bed_StartParameter, bed_EndParameter, bes_StartParameter, bes_EndParameter, dscParameter, sanad_date_StartParameter, sanad_date_EndParameter, sanad_Time_StartParameter, sanad_Time_EndParameter, srcTypeParameter, srcIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sanad_SelectRow_Result> sp_Sanad_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sanad_SelectRow_Result>("sp_Sanad_SelectRow", iDParameter);
        }
    
        public virtual ObjectResult<sp_Sanad_Sum_Bedehkaran_Result> sp_Sanad_Sum_Bedehkaran()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sanad_Sum_Bedehkaran_Result>("sp_Sanad_Sum_Bedehkaran");
        }
    
        public virtual ObjectResult<sp_Sanad_Sum_Bestankaran_Result> sp_Sanad_Sum_Bestankaran()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sanad_Sum_Bestankaran_Result>("sp_Sanad_Sum_Bestankaran");
        }
    
        public virtual int sp_Sanad_Update(Nullable<int> iD, Nullable<int> patientID, Nullable<int> doctorID, Nullable<int> sanadTypeID, Nullable<int> customerID, Nullable<int> sanadCategoryID, Nullable<int> sanadSubCategoryID, Nullable<bool> tasviye, Nullable<double> bed, Nullable<double> bes, string dsc, Nullable<System.DateTime> sanad_date, Nullable<int> noteID, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var sanadTypeIDParameter = sanadTypeID.HasValue ?
                new ObjectParameter("SanadTypeID", sanadTypeID) :
                new ObjectParameter("SanadTypeID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var sanadCategoryIDParameter = sanadCategoryID.HasValue ?
                new ObjectParameter("SanadCategoryID", sanadCategoryID) :
                new ObjectParameter("SanadCategoryID", typeof(int));
    
            var sanadSubCategoryIDParameter = sanadSubCategoryID.HasValue ?
                new ObjectParameter("SanadSubCategoryID", sanadSubCategoryID) :
                new ObjectParameter("SanadSubCategoryID", typeof(int));
    
            var tasviyeParameter = tasviye.HasValue ?
                new ObjectParameter("Tasviye", tasviye) :
                new ObjectParameter("Tasviye", typeof(bool));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var besParameter = bes.HasValue ?
                new ObjectParameter("Bes", bes) :
                new ObjectParameter("Bes", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var sanad_dateParameter = sanad_date.HasValue ?
                new ObjectParameter("Sanad_date", sanad_date) :
                new ObjectParameter("Sanad_date", typeof(System.DateTime));
    
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Sanad_Update", iDParameter, patientIDParameter, doctorIDParameter, sanadTypeIDParameter, customerIDParameter, sanadCategoryIDParameter, sanadSubCategoryIDParameter, tasviyeParameter, bedParameter, besParameter, dscParameter, sanad_dateParameter, noteIDParameter, useridParameter);
        }
    
        public virtual int sp_SanadCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SanadCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_SanadCategories_Insert(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SanadCategories_Insert", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_SanadCategories_Select_Result> sp_SanadCategories_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SanadCategories_Select_Result>("sp_SanadCategories_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_SanadCategories_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SanadCategories_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_SanadSubCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SanadSubCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_SanadSubCategories_Insert(Nullable<int> sanadCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var sanadCategoryIDParameter = sanadCategoryID.HasValue ?
                new ObjectParameter("SanadCategoryID", sanadCategoryID) :
                new ObjectParameter("SanadCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SanadSubCategories_Insert", sanadCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_SanadSubCategories_Select_Result> sp_SanadSubCategories_Select(Nullable<int> sanadCategoryID, string name, Nullable<int> active)
        {
            var sanadCategoryIDParameter = sanadCategoryID.HasValue ?
                new ObjectParameter("SanadCategoryID", sanadCategoryID) :
                new ObjectParameter("SanadCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SanadSubCategories_Select_Result>("sp_SanadSubCategories_Select", sanadCategoryIDParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_SanadSubCategories_Update(Nullable<int> iD, Nullable<int> sanadCategoryID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var sanadCategoryIDParameter = sanadCategoryID.HasValue ?
                new ObjectParameter("SanadCategoryID", sanadCategoryID) :
                new ObjectParameter("SanadCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SanadSubCategories_Update", iDParameter, sanadCategoryIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_SanadTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SanadTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_SanadTypes_Insert(Nullable<int> sanadCategoryID, Nullable<int> sanadSubCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var sanadCategoryIDParameter = sanadCategoryID.HasValue ?
                new ObjectParameter("SanadCategoryID", sanadCategoryID) :
                new ObjectParameter("SanadCategoryID", typeof(int));
    
            var sanadSubCategoryIDParameter = sanadSubCategoryID.HasValue ?
                new ObjectParameter("SanadSubCategoryID", sanadSubCategoryID) :
                new ObjectParameter("SanadSubCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SanadTypes_Insert", sanadCategoryIDParameter, sanadSubCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_SanadTypes_Select_Result> sp_SanadTypes_Select(Nullable<int> sanadCategoryID, Nullable<int> sanadSubCategoryID, string name, Nullable<int> active)
        {
            var sanadCategoryIDParameter = sanadCategoryID.HasValue ?
                new ObjectParameter("SanadCategoryID", sanadCategoryID) :
                new ObjectParameter("SanadCategoryID", typeof(int));
    
            var sanadSubCategoryIDParameter = sanadSubCategoryID.HasValue ?
                new ObjectParameter("SanadSubCategoryID", sanadSubCategoryID) :
                new ObjectParameter("SanadSubCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SanadTypes_Select_Result>("sp_SanadTypes_Select", sanadCategoryIDParameter, sanadSubCategoryIDParameter, nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_SanadTypes_SelectRow_Result> sp_SanadTypes_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SanadTypes_SelectRow_Result>("sp_SanadTypes_SelectRow", iDParameter);
        }
    
        public virtual int sp_SanadTypes_Update(Nullable<int> sanadCategoryID, Nullable<int> sanadSubCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var sanadCategoryIDParameter = sanadCategoryID.HasValue ?
                new ObjectParameter("SanadCategoryID", sanadCategoryID) :
                new ObjectParameter("SanadCategoryID", typeof(int));
    
            var sanadSubCategoryIDParameter = sanadSubCategoryID.HasValue ?
                new ObjectParameter("SanadSubCategoryID", sanadSubCategoryID) :
                new ObjectParameter("SanadSubCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SanadTypes_Update", sanadCategoryIDParameter, sanadSubCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_SentStates_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SentStates_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_SentStates_Insert(string name, string dsc, byte[] icon, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var iconParameter = icon != null ?
                new ObjectParameter("Icon", icon) :
                new ObjectParameter("Icon", typeof(byte[]));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SentStates_Insert", nameParameter, dscParameter, iconParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_SentStates_Select_Result> sp_SentStates_Select(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SentStates_Select_Result>("sp_SentStates_Select", nameParameter);
        }
    
        public virtual ObjectResult<sp_SentStates_SelectRow_Result> sp_SentStates_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SentStates_SelectRow_Result>("sp_SentStates_SelectRow", iDParameter);
        }
    
        public virtual int sp_SentStates_Update(Nullable<int> iD, string name, string dsc, byte[] icon, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var iconParameter = icon != null ?
                new ObjectParameter("Icon", icon) :
                new ObjectParameter("Icon", typeof(byte[]));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SentStates_Update", iDParameter, nameParameter, dscParameter, iconParameter, useridParameter);
        }
    
        public virtual int sp_SentTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SentTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_SentTypes_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SentTypes_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_SentTypes_Select_Result> sp_SentTypes_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SentTypes_Select_Result>("sp_SentTypes_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_SentTypes_SelectRow_Result> sp_SentTypes_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SentTypes_SelectRow_Result>("sp_SentTypes_SelectRow", iDParameter);
        }
    
        public virtual int sp_SentTypes_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SentTypes_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_ServiceCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ServiceCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_ServiceCategories_Insert(Nullable<int> departmentID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ServiceCategories_Insert", departmentIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_ServiceCategories_Select_Result> sp_ServiceCategories_Select(Nullable<short> departmentID, string name, Nullable<int> active)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ServiceCategories_Select_Result>("sp_ServiceCategories_Select", departmentIDParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_ServiceCategories_Update(Nullable<int> iD, Nullable<int> departmentID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ServiceCategories_Update", iDParameter, departmentIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_ServiceSubCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ServiceSubCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_ServiceSubCategories_Insert(Nullable<int> departmentID, Nullable<int> serviceCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ServiceSubCategories_Insert", departmentIDParameter, serviceCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_ServiceSubCategories_Select_Result> sp_ServiceSubCategories_Select(Nullable<int> departmentID, Nullable<int> serviceCategoryID, string name, Nullable<int> active)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ServiceSubCategories_Select_Result>("sp_ServiceSubCategories_Select", departmentIDParameter, serviceCategoryIDParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_ServiceSubCategories_Update(Nullable<int> iD, Nullable<int> departmentID, Nullable<int> serviceCategoryID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ServiceSubCategories_Update", iDParameter, departmentIDParameter, serviceCategoryIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Setting_Select_Result> sp_Setting_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Setting_Select_Result>("sp_Setting_Select");
        }
    
        public virtual int sp_Setting_Update(string iD, string name, byte[] logo, string dsc1, string dsc2, string dsc3, string dsc4, string dayMessage, string tel, string address, string manager, string currency1, string currency2, string currency3, string currencyEndChar, Nullable<int> maxCustomerID, string serverName, Nullable<bool> autoSMSFirstLogin, string autoSMSFirstLoginNumber, Nullable<bool> autoLogOff, string autoLogOffTime, Nullable<bool> autoLogOffAlarm, string autoLogOffAlarmTime, string autoLogOffAlarmMessage, Nullable<bool> autoBackup, string autoBackupTime, string backupPhoneNumber, string autoBackupDir, Nullable<bool> autoSMSCustomer, string autoSMSCustomer_PerfixMsg, Nullable<byte> autoSMSCustomer_PerfixSexType, Nullable<bool> autoSMSCustomer_FirstName, Nullable<bool> autoSMSCustomer_LastName, Nullable<bool> autoSMSCustomer_FullName, Nullable<bool> autoSMSCustomer_ID, string autoSMSCustomer_Msg, Nullable<bool> autoCustomerIDPerUserID, Nullable<int> customerIDPerUserID, Nullable<int> centralID, string serverRoot, Nullable<int> userid)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(byte[]));
    
            var dsc1Parameter = dsc1 != null ?
                new ObjectParameter("Dsc1", dsc1) :
                new ObjectParameter("Dsc1", typeof(string));
    
            var dsc2Parameter = dsc2 != null ?
                new ObjectParameter("Dsc2", dsc2) :
                new ObjectParameter("Dsc2", typeof(string));
    
            var dsc3Parameter = dsc3 != null ?
                new ObjectParameter("Dsc3", dsc3) :
                new ObjectParameter("Dsc3", typeof(string));
    
            var dsc4Parameter = dsc4 != null ?
                new ObjectParameter("Dsc4", dsc4) :
                new ObjectParameter("Dsc4", typeof(string));
    
            var dayMessageParameter = dayMessage != null ?
                new ObjectParameter("DayMessage", dayMessage) :
                new ObjectParameter("DayMessage", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("Tel", tel) :
                new ObjectParameter("Tel", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var managerParameter = manager != null ?
                new ObjectParameter("Manager", manager) :
                new ObjectParameter("Manager", typeof(string));
    
            var currency1Parameter = currency1 != null ?
                new ObjectParameter("Currency1", currency1) :
                new ObjectParameter("Currency1", typeof(string));
    
            var currency2Parameter = currency2 != null ?
                new ObjectParameter("Currency2", currency2) :
                new ObjectParameter("Currency2", typeof(string));
    
            var currency3Parameter = currency3 != null ?
                new ObjectParameter("Currency3", currency3) :
                new ObjectParameter("Currency3", typeof(string));
    
            var currencyEndCharParameter = currencyEndChar != null ?
                new ObjectParameter("CurrencyEndChar", currencyEndChar) :
                new ObjectParameter("CurrencyEndChar", typeof(string));
    
            var maxCustomerIDParameter = maxCustomerID.HasValue ?
                new ObjectParameter("MaxCustomerID", maxCustomerID) :
                new ObjectParameter("MaxCustomerID", typeof(int));
    
            var serverNameParameter = serverName != null ?
                new ObjectParameter("ServerName", serverName) :
                new ObjectParameter("ServerName", typeof(string));
    
            var autoSMSFirstLoginParameter = autoSMSFirstLogin.HasValue ?
                new ObjectParameter("AutoSMSFirstLogin", autoSMSFirstLogin) :
                new ObjectParameter("AutoSMSFirstLogin", typeof(bool));
    
            var autoSMSFirstLoginNumberParameter = autoSMSFirstLoginNumber != null ?
                new ObjectParameter("AutoSMSFirstLoginNumber", autoSMSFirstLoginNumber) :
                new ObjectParameter("AutoSMSFirstLoginNumber", typeof(string));
    
            var autoLogOffParameter = autoLogOff.HasValue ?
                new ObjectParameter("AutoLogOff", autoLogOff) :
                new ObjectParameter("AutoLogOff", typeof(bool));
    
            var autoLogOffTimeParameter = autoLogOffTime != null ?
                new ObjectParameter("AutoLogOffTime", autoLogOffTime) :
                new ObjectParameter("AutoLogOffTime", typeof(string));
    
            var autoLogOffAlarmParameter = autoLogOffAlarm.HasValue ?
                new ObjectParameter("AutoLogOffAlarm", autoLogOffAlarm) :
                new ObjectParameter("AutoLogOffAlarm", typeof(bool));
    
            var autoLogOffAlarmTimeParameter = autoLogOffAlarmTime != null ?
                new ObjectParameter("AutoLogOffAlarmTime", autoLogOffAlarmTime) :
                new ObjectParameter("AutoLogOffAlarmTime", typeof(string));
    
            var autoLogOffAlarmMessageParameter = autoLogOffAlarmMessage != null ?
                new ObjectParameter("AutoLogOffAlarmMessage", autoLogOffAlarmMessage) :
                new ObjectParameter("AutoLogOffAlarmMessage", typeof(string));
    
            var autoBackupParameter = autoBackup.HasValue ?
                new ObjectParameter("AutoBackup", autoBackup) :
                new ObjectParameter("AutoBackup", typeof(bool));
    
            var autoBackupTimeParameter = autoBackupTime != null ?
                new ObjectParameter("AutoBackupTime", autoBackupTime) :
                new ObjectParameter("AutoBackupTime", typeof(string));
    
            var backupPhoneNumberParameter = backupPhoneNumber != null ?
                new ObjectParameter("BackupPhoneNumber", backupPhoneNumber) :
                new ObjectParameter("BackupPhoneNumber", typeof(string));
    
            var autoBackupDirParameter = autoBackupDir != null ?
                new ObjectParameter("AutoBackupDir", autoBackupDir) :
                new ObjectParameter("AutoBackupDir", typeof(string));
    
            var autoSMSCustomerParameter = autoSMSCustomer.HasValue ?
                new ObjectParameter("AutoSMSCustomer", autoSMSCustomer) :
                new ObjectParameter("AutoSMSCustomer", typeof(bool));
    
            var autoSMSCustomer_PerfixMsgParameter = autoSMSCustomer_PerfixMsg != null ?
                new ObjectParameter("AutoSMSCustomer_PerfixMsg", autoSMSCustomer_PerfixMsg) :
                new ObjectParameter("AutoSMSCustomer_PerfixMsg", typeof(string));
    
            var autoSMSCustomer_PerfixSexTypeParameter = autoSMSCustomer_PerfixSexType.HasValue ?
                new ObjectParameter("AutoSMSCustomer_PerfixSexType", autoSMSCustomer_PerfixSexType) :
                new ObjectParameter("AutoSMSCustomer_PerfixSexType", typeof(byte));
    
            var autoSMSCustomer_FirstNameParameter = autoSMSCustomer_FirstName.HasValue ?
                new ObjectParameter("AutoSMSCustomer_FirstName", autoSMSCustomer_FirstName) :
                new ObjectParameter("AutoSMSCustomer_FirstName", typeof(bool));
    
            var autoSMSCustomer_LastNameParameter = autoSMSCustomer_LastName.HasValue ?
                new ObjectParameter("AutoSMSCustomer_LastName", autoSMSCustomer_LastName) :
                new ObjectParameter("AutoSMSCustomer_LastName", typeof(bool));
    
            var autoSMSCustomer_FullNameParameter = autoSMSCustomer_FullName.HasValue ?
                new ObjectParameter("AutoSMSCustomer_FullName", autoSMSCustomer_FullName) :
                new ObjectParameter("AutoSMSCustomer_FullName", typeof(bool));
    
            var autoSMSCustomer_IDParameter = autoSMSCustomer_ID.HasValue ?
                new ObjectParameter("AutoSMSCustomer_ID", autoSMSCustomer_ID) :
                new ObjectParameter("AutoSMSCustomer_ID", typeof(bool));
    
            var autoSMSCustomer_MsgParameter = autoSMSCustomer_Msg != null ?
                new ObjectParameter("AutoSMSCustomer_Msg", autoSMSCustomer_Msg) :
                new ObjectParameter("AutoSMSCustomer_Msg", typeof(string));
    
            var autoCustomerIDPerUserIDParameter = autoCustomerIDPerUserID.HasValue ?
                new ObjectParameter("AutoCustomerIDPerUserID", autoCustomerIDPerUserID) :
                new ObjectParameter("AutoCustomerIDPerUserID", typeof(bool));
    
            var customerIDPerUserIDParameter = customerIDPerUserID.HasValue ?
                new ObjectParameter("CustomerIDPerUserID", customerIDPerUserID) :
                new ObjectParameter("CustomerIDPerUserID", typeof(int));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var serverRootParameter = serverRoot != null ?
                new ObjectParameter("ServerRoot", serverRoot) :
                new ObjectParameter("ServerRoot", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Setting_Update", iDParameter, nameParameter, logoParameter, dsc1Parameter, dsc2Parameter, dsc3Parameter, dsc4Parameter, dayMessageParameter, telParameter, addressParameter, managerParameter, currency1Parameter, currency2Parameter, currency3Parameter, currencyEndCharParameter, maxCustomerIDParameter, serverNameParameter, autoSMSFirstLoginParameter, autoSMSFirstLoginNumberParameter, autoLogOffParameter, autoLogOffTimeParameter, autoLogOffAlarmParameter, autoLogOffAlarmTimeParameter, autoLogOffAlarmMessageParameter, autoBackupParameter, autoBackupTimeParameter, backupPhoneNumberParameter, autoBackupDirParameter, autoSMSCustomerParameter, autoSMSCustomer_PerfixMsgParameter, autoSMSCustomer_PerfixSexTypeParameter, autoSMSCustomer_FirstNameParameter, autoSMSCustomer_LastNameParameter, autoSMSCustomer_FullNameParameter, autoSMSCustomer_IDParameter, autoSMSCustomer_MsgParameter, autoCustomerIDPerUserIDParameter, customerIDPerUserIDParameter, centralIDParameter, serverRootParameter, useridParameter);
        }
    
        public virtual int sp_Setting_UpdateReseller(string resellerID, string resellerAdmin, string resellerTel, byte[] resellerlogo)
        {
            var resellerIDParameter = resellerID != null ?
                new ObjectParameter("ResellerID", resellerID) :
                new ObjectParameter("ResellerID", typeof(string));
    
            var resellerAdminParameter = resellerAdmin != null ?
                new ObjectParameter("ResellerAdmin", resellerAdmin) :
                new ObjectParameter("ResellerAdmin", typeof(string));
    
            var resellerTelParameter = resellerTel != null ?
                new ObjectParameter("ResellerTel", resellerTel) :
                new ObjectParameter("ResellerTel", typeof(string));
    
            var resellerlogoParameter = resellerlogo != null ?
                new ObjectParameter("Resellerlogo", resellerlogo) :
                new ObjectParameter("Resellerlogo", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Setting_UpdateReseller", resellerIDParameter, resellerAdminParameter, resellerTelParameter, resellerlogoParameter);
        }
    
        public virtual int sp_SexTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SexTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_SexTypes_Insert(string name, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SexTypes_Insert", nameParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_SexTypes_Select_Result> sp_SexTypes_Select(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SexTypes_Select_Result>("sp_SexTypes_Select", nameParameter);
        }
    
        public virtual ObjectResult<sp_SexTypes_SelectRow_Result> sp_SexTypes_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SexTypes_SelectRow_Result>("sp_SexTypes_SelectRow", iDParameter);
        }
    
        public virtual int sp_SexTypes_Update(Nullable<int> iD, string name, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SexTypes_Update", iDParameter, nameParameter, useridParameter);
        }
    
        public virtual int sp_Shift_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Shift_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Shift_Insert(Nullable<int> iD, string name, string startTime, string endTime, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var startTimeParameter = startTime != null ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(string));
    
            var endTimeParameter = endTime != null ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Shift_Insert", iDParameter, nameParameter, startTimeParameter, endTimeParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Shift_Select_Result> sp_Shift_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Shift_Select_Result>("sp_Shift_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_Shift_SelectRow_Result> sp_Shift_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Shift_SelectRow_Result>("sp_Shift_SelectRow", iDParameter);
        }
    
        public virtual int sp_Shift_Update(Nullable<int> iD, string name, string startTime, string endTime, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var startTimeParameter = startTime != null ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(string));
    
            var endTimeParameter = endTime != null ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Shift_Update", iDParameter, nameParameter, startTimeParameter, endTimeParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_SMS_SentStateUpdate(string sMSNumber, Nullable<System.DateTime> sentDate, Nullable<byte> sentStateID)
        {
            var sMSNumberParameter = sMSNumber != null ?
                new ObjectParameter("SMSNumber", sMSNumber) :
                new ObjectParameter("SMSNumber", typeof(string));
    
            var sentDateParameter = sentDate.HasValue ?
                new ObjectParameter("SentDate", sentDate) :
                new ObjectParameter("SentDate", typeof(System.DateTime));
    
            var sentStateIDParameter = sentStateID.HasValue ?
                new ObjectParameter("SentStateID", sentStateID) :
                new ObjectParameter("SentStateID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SMS_SentStateUpdate", sMSNumberParameter, sentDateParameter, sentStateIDParameter);
        }
    
        public virtual int sp_SMSBank_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SMSBank_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_SMSBank_DeleteAll(Nullable<short> shiftID, Nullable<int> sMSDeviceID, string sMSNumber, string senderName, string sMSMessage, string sentDate_Start, string sentDate_End, string sentTime_start, string sentTime_end, Nullable<byte> messageKindID, Nullable<byte> messageTypeID, Nullable<int> sentStateID, Nullable<byte> isRead, Nullable<byte> isReply, string deliveryDate_Start, string deliveryDate_end, string deliveryTime_start, string deliveryTime_end, Nullable<byte> serverSendingMode, Nullable<int> stationID, Nullable<int> userid)
        {
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var sMSDeviceIDParameter = sMSDeviceID.HasValue ?
                new ObjectParameter("SMSDeviceID", sMSDeviceID) :
                new ObjectParameter("SMSDeviceID", typeof(int));
    
            var sMSNumberParameter = sMSNumber != null ?
                new ObjectParameter("SMSNumber", sMSNumber) :
                new ObjectParameter("SMSNumber", typeof(string));
    
            var senderNameParameter = senderName != null ?
                new ObjectParameter("SenderName", senderName) :
                new ObjectParameter("SenderName", typeof(string));
    
            var sMSMessageParameter = sMSMessage != null ?
                new ObjectParameter("SMSMessage", sMSMessage) :
                new ObjectParameter("SMSMessage", typeof(string));
    
            var sentDate_StartParameter = sentDate_Start != null ?
                new ObjectParameter("SentDate_Start", sentDate_Start) :
                new ObjectParameter("SentDate_Start", typeof(string));
    
            var sentDate_EndParameter = sentDate_End != null ?
                new ObjectParameter("SentDate_End", sentDate_End) :
                new ObjectParameter("SentDate_End", typeof(string));
    
            var sentTime_startParameter = sentTime_start != null ?
                new ObjectParameter("SentTime_start", sentTime_start) :
                new ObjectParameter("SentTime_start", typeof(string));
    
            var sentTime_endParameter = sentTime_end != null ?
                new ObjectParameter("SentTime_end", sentTime_end) :
                new ObjectParameter("SentTime_end", typeof(string));
    
            var messageKindIDParameter = messageKindID.HasValue ?
                new ObjectParameter("MessageKindID", messageKindID) :
                new ObjectParameter("MessageKindID", typeof(byte));
    
            var messageTypeIDParameter = messageTypeID.HasValue ?
                new ObjectParameter("MessageTypeID", messageTypeID) :
                new ObjectParameter("MessageTypeID", typeof(byte));
    
            var sentStateIDParameter = sentStateID.HasValue ?
                new ObjectParameter("SentStateID", sentStateID) :
                new ObjectParameter("SentStateID", typeof(int));
    
            var isReadParameter = isRead.HasValue ?
                new ObjectParameter("IsRead", isRead) :
                new ObjectParameter("IsRead", typeof(byte));
    
            var isReplyParameter = isReply.HasValue ?
                new ObjectParameter("IsReply", isReply) :
                new ObjectParameter("IsReply", typeof(byte));
    
            var deliveryDate_StartParameter = deliveryDate_Start != null ?
                new ObjectParameter("DeliveryDate_Start", deliveryDate_Start) :
                new ObjectParameter("DeliveryDate_Start", typeof(string));
    
            var deliveryDate_endParameter = deliveryDate_end != null ?
                new ObjectParameter("DeliveryDate_end", deliveryDate_end) :
                new ObjectParameter("DeliveryDate_end", typeof(string));
    
            var deliveryTime_startParameter = deliveryTime_start != null ?
                new ObjectParameter("DeliveryTime_start", deliveryTime_start) :
                new ObjectParameter("DeliveryTime_start", typeof(string));
    
            var deliveryTime_endParameter = deliveryTime_end != null ?
                new ObjectParameter("DeliveryTime_end", deliveryTime_end) :
                new ObjectParameter("DeliveryTime_end", typeof(string));
    
            var serverSendingModeParameter = serverSendingMode.HasValue ?
                new ObjectParameter("ServerSendingMode", serverSendingMode) :
                new ObjectParameter("ServerSendingMode", typeof(byte));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SMSBank_DeleteAll", shiftIDParameter, sMSDeviceIDParameter, sMSNumberParameter, senderNameParameter, sMSMessageParameter, sentDate_StartParameter, sentDate_EndParameter, sentTime_startParameter, sentTime_endParameter, messageKindIDParameter, messageTypeIDParameter, sentStateIDParameter, isReadParameter, isReplyParameter, deliveryDate_StartParameter, deliveryDate_endParameter, deliveryTime_startParameter, deliveryTime_endParameter, serverSendingModeParameter, stationIDParameter, useridParameter);
        }
    
        public virtual int sp_SMSBank_Insert(Nullable<int> sMSDeviceID, Nullable<short> messageKindID, Nullable<int> sMSID, Nullable<short> sMSStateID, string senderNumber, string senderName, string sMSNumber, string sMSMessage, Nullable<byte> messageNumb, Nullable<System.DateTime> sentDate, Nullable<short> sentTypeID, Nullable<int> sentStateID, Nullable<int> messageTypeID, Nullable<byte> serverSendingMode, Nullable<int> stationID, string computerName, Nullable<byte> shiftID, Nullable<int> userid)
        {
            var sMSDeviceIDParameter = sMSDeviceID.HasValue ?
                new ObjectParameter("SMSDeviceID", sMSDeviceID) :
                new ObjectParameter("SMSDeviceID", typeof(int));
    
            var messageKindIDParameter = messageKindID.HasValue ?
                new ObjectParameter("MessageKindID", messageKindID) :
                new ObjectParameter("MessageKindID", typeof(short));
    
            var sMSIDParameter = sMSID.HasValue ?
                new ObjectParameter("SMSID", sMSID) :
                new ObjectParameter("SMSID", typeof(int));
    
            var sMSStateIDParameter = sMSStateID.HasValue ?
                new ObjectParameter("SMSStateID", sMSStateID) :
                new ObjectParameter("SMSStateID", typeof(short));
    
            var senderNumberParameter = senderNumber != null ?
                new ObjectParameter("SenderNumber", senderNumber) :
                new ObjectParameter("SenderNumber", typeof(string));
    
            var senderNameParameter = senderName != null ?
                new ObjectParameter("SenderName", senderName) :
                new ObjectParameter("SenderName", typeof(string));
    
            var sMSNumberParameter = sMSNumber != null ?
                new ObjectParameter("SMSNumber", sMSNumber) :
                new ObjectParameter("SMSNumber", typeof(string));
    
            var sMSMessageParameter = sMSMessage != null ?
                new ObjectParameter("SMSMessage", sMSMessage) :
                new ObjectParameter("SMSMessage", typeof(string));
    
            var messageNumbParameter = messageNumb.HasValue ?
                new ObjectParameter("MessageNumb", messageNumb) :
                new ObjectParameter("MessageNumb", typeof(byte));
    
            var sentDateParameter = sentDate.HasValue ?
                new ObjectParameter("SentDate", sentDate) :
                new ObjectParameter("SentDate", typeof(System.DateTime));
    
            var sentTypeIDParameter = sentTypeID.HasValue ?
                new ObjectParameter("SentTypeID", sentTypeID) :
                new ObjectParameter("SentTypeID", typeof(short));
    
            var sentStateIDParameter = sentStateID.HasValue ?
                new ObjectParameter("SentStateID", sentStateID) :
                new ObjectParameter("SentStateID", typeof(int));
    
            var messageTypeIDParameter = messageTypeID.HasValue ?
                new ObjectParameter("MessageTypeID", messageTypeID) :
                new ObjectParameter("MessageTypeID", typeof(int));
    
            var serverSendingModeParameter = serverSendingMode.HasValue ?
                new ObjectParameter("ServerSendingMode", serverSendingMode) :
                new ObjectParameter("ServerSendingMode", typeof(byte));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(byte));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SMSBank_Insert", sMSDeviceIDParameter, messageKindIDParameter, sMSIDParameter, sMSStateIDParameter, senderNumberParameter, senderNameParameter, sMSNumberParameter, sMSMessageParameter, messageNumbParameter, sentDateParameter, sentTypeIDParameter, sentStateIDParameter, messageTypeIDParameter, serverSendingModeParameter, stationIDParameter, computerNameParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_SMSBank_Select_Result> sp_SMSBank_Select(Nullable<short> shiftID, Nullable<int> sMSDeviceID, string sMSNumber, string senderName, string sMSMessage, string sentDate_Start, string sentDate_End, string sentTime_start, string sentTime_end, Nullable<byte> messageKindID, Nullable<short> messageTypeID, Nullable<short> sentTypeID, Nullable<int> sentStateID, Nullable<byte> isRead, Nullable<byte> isReply, string deliveryDate_Start, string deliveryDate_end, string deliveryTime_start, string deliveryTime_end, Nullable<byte> serverSendingMode, Nullable<int> stationID, Nullable<int> userid)
        {
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var sMSDeviceIDParameter = sMSDeviceID.HasValue ?
                new ObjectParameter("SMSDeviceID", sMSDeviceID) :
                new ObjectParameter("SMSDeviceID", typeof(int));
    
            var sMSNumberParameter = sMSNumber != null ?
                new ObjectParameter("SMSNumber", sMSNumber) :
                new ObjectParameter("SMSNumber", typeof(string));
    
            var senderNameParameter = senderName != null ?
                new ObjectParameter("SenderName", senderName) :
                new ObjectParameter("SenderName", typeof(string));
    
            var sMSMessageParameter = sMSMessage != null ?
                new ObjectParameter("SMSMessage", sMSMessage) :
                new ObjectParameter("SMSMessage", typeof(string));
    
            var sentDate_StartParameter = sentDate_Start != null ?
                new ObjectParameter("SentDate_Start", sentDate_Start) :
                new ObjectParameter("SentDate_Start", typeof(string));
    
            var sentDate_EndParameter = sentDate_End != null ?
                new ObjectParameter("SentDate_End", sentDate_End) :
                new ObjectParameter("SentDate_End", typeof(string));
    
            var sentTime_startParameter = sentTime_start != null ?
                new ObjectParameter("SentTime_start", sentTime_start) :
                new ObjectParameter("SentTime_start", typeof(string));
    
            var sentTime_endParameter = sentTime_end != null ?
                new ObjectParameter("SentTime_end", sentTime_end) :
                new ObjectParameter("SentTime_end", typeof(string));
    
            var messageKindIDParameter = messageKindID.HasValue ?
                new ObjectParameter("MessageKindID", messageKindID) :
                new ObjectParameter("MessageKindID", typeof(byte));
    
            var messageTypeIDParameter = messageTypeID.HasValue ?
                new ObjectParameter("MessageTypeID", messageTypeID) :
                new ObjectParameter("MessageTypeID", typeof(short));
    
            var sentTypeIDParameter = sentTypeID.HasValue ?
                new ObjectParameter("SentTypeID", sentTypeID) :
                new ObjectParameter("SentTypeID", typeof(short));
    
            var sentStateIDParameter = sentStateID.HasValue ?
                new ObjectParameter("SentStateID", sentStateID) :
                new ObjectParameter("SentStateID", typeof(int));
    
            var isReadParameter = isRead.HasValue ?
                new ObjectParameter("IsRead", isRead) :
                new ObjectParameter("IsRead", typeof(byte));
    
            var isReplyParameter = isReply.HasValue ?
                new ObjectParameter("IsReply", isReply) :
                new ObjectParameter("IsReply", typeof(byte));
    
            var deliveryDate_StartParameter = deliveryDate_Start != null ?
                new ObjectParameter("DeliveryDate_Start", deliveryDate_Start) :
                new ObjectParameter("DeliveryDate_Start", typeof(string));
    
            var deliveryDate_endParameter = deliveryDate_end != null ?
                new ObjectParameter("DeliveryDate_end", deliveryDate_end) :
                new ObjectParameter("DeliveryDate_end", typeof(string));
    
            var deliveryTime_startParameter = deliveryTime_start != null ?
                new ObjectParameter("DeliveryTime_start", deliveryTime_start) :
                new ObjectParameter("DeliveryTime_start", typeof(string));
    
            var deliveryTime_endParameter = deliveryTime_end != null ?
                new ObjectParameter("DeliveryTime_end", deliveryTime_end) :
                new ObjectParameter("DeliveryTime_end", typeof(string));
    
            var serverSendingModeParameter = serverSendingMode.HasValue ?
                new ObjectParameter("ServerSendingMode", serverSendingMode) :
                new ObjectParameter("ServerSendingMode", typeof(byte));
    
            var stationIDParameter = stationID.HasValue ?
                new ObjectParameter("StationID", stationID) :
                new ObjectParameter("StationID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SMSBank_Select_Result>("sp_SMSBank_Select", shiftIDParameter, sMSDeviceIDParameter, sMSNumberParameter, senderNameParameter, sMSMessageParameter, sentDate_StartParameter, sentDate_EndParameter, sentTime_startParameter, sentTime_endParameter, messageKindIDParameter, messageTypeIDParameter, sentTypeIDParameter, sentStateIDParameter, isReadParameter, isReplyParameter, deliveryDate_StartParameter, deliveryDate_endParameter, deliveryTime_startParameter, deliveryTime_endParameter, serverSendingModeParameter, stationIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_SMSBank_SelectRow_Result> sp_SMSBank_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SMSBank_SelectRow_Result>("sp_SMSBank_SelectRow", iDParameter);
        }
    
        public virtual int sp_SMSBank_Update(Nullable<int> iD, Nullable<int> sMSDeviceID, Nullable<short> messageKindID, Nullable<int> sMSID, Nullable<short> sMSStateID, string senderNumber, string senderName, string sMSNumber, string sMSMessage, Nullable<byte> messageNumb, Nullable<System.DateTime> sentDate, Nullable<short> sentTypeID, Nullable<int> sentStateID, Nullable<int> messageTypeID, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var sMSDeviceIDParameter = sMSDeviceID.HasValue ?
                new ObjectParameter("SMSDeviceID", sMSDeviceID) :
                new ObjectParameter("SMSDeviceID", typeof(int));
    
            var messageKindIDParameter = messageKindID.HasValue ?
                new ObjectParameter("MessageKindID", messageKindID) :
                new ObjectParameter("MessageKindID", typeof(short));
    
            var sMSIDParameter = sMSID.HasValue ?
                new ObjectParameter("SMSID", sMSID) :
                new ObjectParameter("SMSID", typeof(int));
    
            var sMSStateIDParameter = sMSStateID.HasValue ?
                new ObjectParameter("SMSStateID", sMSStateID) :
                new ObjectParameter("SMSStateID", typeof(short));
    
            var senderNumberParameter = senderNumber != null ?
                new ObjectParameter("SenderNumber", senderNumber) :
                new ObjectParameter("SenderNumber", typeof(string));
    
            var senderNameParameter = senderName != null ?
                new ObjectParameter("SenderName", senderName) :
                new ObjectParameter("SenderName", typeof(string));
    
            var sMSNumberParameter = sMSNumber != null ?
                new ObjectParameter("SMSNumber", sMSNumber) :
                new ObjectParameter("SMSNumber", typeof(string));
    
            var sMSMessageParameter = sMSMessage != null ?
                new ObjectParameter("SMSMessage", sMSMessage) :
                new ObjectParameter("SMSMessage", typeof(string));
    
            var messageNumbParameter = messageNumb.HasValue ?
                new ObjectParameter("MessageNumb", messageNumb) :
                new ObjectParameter("MessageNumb", typeof(byte));
    
            var sentDateParameter = sentDate.HasValue ?
                new ObjectParameter("SentDate", sentDate) :
                new ObjectParameter("SentDate", typeof(System.DateTime));
    
            var sentTypeIDParameter = sentTypeID.HasValue ?
                new ObjectParameter("SentTypeID", sentTypeID) :
                new ObjectParameter("SentTypeID", typeof(short));
    
            var sentStateIDParameter = sentStateID.HasValue ?
                new ObjectParameter("SentStateID", sentStateID) :
                new ObjectParameter("SentStateID", typeof(int));
    
            var messageTypeIDParameter = messageTypeID.HasValue ?
                new ObjectParameter("MessageTypeID", messageTypeID) :
                new ObjectParameter("MessageTypeID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SMSBank_Update", iDParameter, sMSDeviceIDParameter, messageKindIDParameter, sMSIDParameter, sMSStateIDParameter, senderNumberParameter, senderNameParameter, sMSNumberParameter, sMSMessageParameter, messageNumbParameter, sentDateParameter, sentTypeIDParameter, sentStateIDParameter, messageTypeIDParameter, useridParameter);
        }
    
        public virtual int sp_SMSBankMessageKind_Update(Nullable<int> iD, Nullable<short> messageKindID, Nullable<int> userID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var messageKindIDParameter = messageKindID.HasValue ?
                new ObjectParameter("MessageKindID", messageKindID) :
                new ObjectParameter("MessageKindID", typeof(short));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SMSBankMessageKind_Update", iDParameter, messageKindIDParameter, userIDParameter);
        }
    
        public virtual int sp_SMSBankSentState_Update(Nullable<int> iD, Nullable<short> sentStateID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var sentStateIDParameter = sentStateID.HasValue ?
                new ObjectParameter("SentStateID", sentStateID) :
                new ObjectParameter("SentStateID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SMSBankSentState_Update", iDParameter, sentStateIDParameter);
        }
    
        public virtual int sp_SMSDevices_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SMSDevices_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_SMSDevices_Insert(string name, Nullable<byte> cOMPort, Nullable<int> baundRate, Nullable<byte> stopBits, string sMSC, string pIN, string parity, Nullable<byte> dataBits, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var cOMPortParameter = cOMPort.HasValue ?
                new ObjectParameter("COMPort", cOMPort) :
                new ObjectParameter("COMPort", typeof(byte));
    
            var baundRateParameter = baundRate.HasValue ?
                new ObjectParameter("BaundRate", baundRate) :
                new ObjectParameter("BaundRate", typeof(int));
    
            var stopBitsParameter = stopBits.HasValue ?
                new ObjectParameter("StopBits", stopBits) :
                new ObjectParameter("StopBits", typeof(byte));
    
            var sMSCParameter = sMSC != null ?
                new ObjectParameter("SMSC", sMSC) :
                new ObjectParameter("SMSC", typeof(string));
    
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            var parityParameter = parity != null ?
                new ObjectParameter("Parity", parity) :
                new ObjectParameter("Parity", typeof(string));
    
            var dataBitsParameter = dataBits.HasValue ?
                new ObjectParameter("DataBits", dataBits) :
                new ObjectParameter("DataBits", typeof(byte));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SMSDevices_Insert", nameParameter, cOMPortParameter, baundRateParameter, stopBitsParameter, sMSCParameter, pINParameter, parityParameter, dataBitsParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_SMSDevices_Select_Result> sp_SMSDevices_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SMSDevices_Select_Result>("sp_SMSDevices_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_SMSDevices_Update(Nullable<int> iD, string name, Nullable<byte> cOMPort, Nullable<int> baundRate, Nullable<byte> stopBits, string sMSC, string pIN, string parity, Nullable<byte> dataBits, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var cOMPortParameter = cOMPort.HasValue ?
                new ObjectParameter("COMPort", cOMPort) :
                new ObjectParameter("COMPort", typeof(byte));
    
            var baundRateParameter = baundRate.HasValue ?
                new ObjectParameter("BaundRate", baundRate) :
                new ObjectParameter("BaundRate", typeof(int));
    
            var stopBitsParameter = stopBits.HasValue ?
                new ObjectParameter("StopBits", stopBits) :
                new ObjectParameter("StopBits", typeof(byte));
    
            var sMSCParameter = sMSC != null ?
                new ObjectParameter("SMSC", sMSC) :
                new ObjectParameter("SMSC", typeof(string));
    
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            var parityParameter = parity != null ?
                new ObjectParameter("Parity", parity) :
                new ObjectParameter("Parity", typeof(string));
    
            var dataBitsParameter = dataBits.HasValue ?
                new ObjectParameter("DataBits", dataBits) :
                new ObjectParameter("DataBits", typeof(byte));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SMSDevices_Update", iDParameter, nameParameter, cOMPortParameter, baundRateParameter, stopBitsParameter, sMSCParameter, pINParameter, parityParameter, dataBitsParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_SMSTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SMSTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_SMSTypes_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SMSTypes_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_SMSTypes_Select_Result> sp_SMSTypes_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SMSTypes_Select_Result>("sp_SMSTypes_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_SMSTypes_SelectRow_Result> sp_SMSTypes_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SMSTypes_SelectRow_Result>("sp_SMSTypes_SelectRow", iDParameter);
        }
    
        public virtual int sp_SMSTypes_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SMSTypes_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_SoldieingTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SoldieingTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_SoldieingTypes_Insert(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SoldieingTypes_Insert", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_SoldieingTypes_Select_Result> sp_SoldieingTypes_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SoldieingTypes_Select_Result>("sp_SoldieingTypes_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_SoldieingTypes_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SoldieingTypes_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_SoldierTypes_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SoldierTypes_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_SoldierTypes_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SoldierTypes_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_SoldierTypes_Select_Result> sp_SoldierTypes_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SoldierTypes_Select_Result>("sp_SoldierTypes_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_SoldierTypes_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SoldierTypes_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Specialties_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Specialties_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Specialties_Insert(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Specialties_Insert", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Specialties_Select_Result> sp_Specialties_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Specialties_Select_Result>("sp_Specialties_Select", nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_Specialties_SelectRow_Result> sp_Specialties_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Specialties_SelectRow_Result>("sp_Specialties_SelectRow", iDParameter);
        }
    
        public virtual int sp_Specialties_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Specialties_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Storekeepers_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Storekeepers_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Storekeepers_Insert(Nullable<short> iD, Nullable<int> customerID, string name, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Storekeepers_Insert", iDParameter, customerIDParameter, nameParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Storekeepers_Select_Result> sp_Storekeepers_Select(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Storekeepers_Select_Result>("sp_Storekeepers_Select", nameParameter);
        }
    
        public virtual ObjectResult<sp_Storekeepers_SelectRow_Result> sp_Storekeepers_SelectRow(Nullable<short> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Storekeepers_SelectRow_Result>("sp_Storekeepers_SelectRow", iDParameter);
        }
    
        public virtual int sp_Storekeepers_Update(Nullable<int> iD, Nullable<int> customerID, string name, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Storekeepers_Update", iDParameter, customerIDParameter, nameParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_SubjectCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SubjectCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_SubjectCategories_Insert(Nullable<short> kind, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SubjectCategories_Insert", kindParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_SubjectCategories_Select_Result> sp_SubjectCategories_Select(Nullable<short> kind, string name, Nullable<int> active)
        {
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SubjectCategories_Select_Result>("sp_SubjectCategories_Select", kindParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_SubjectCategories_Update(Nullable<int> iD, Nullable<short> kind, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SubjectCategories_Update", iDParameter, kindParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Subjects_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Subjects_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Subjects_Insert(Nullable<int> subjectCategoryID, Nullable<int> subjectSubCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var subjectCategoryIDParameter = subjectCategoryID.HasValue ?
                new ObjectParameter("SubjectCategoryID", subjectCategoryID) :
                new ObjectParameter("SubjectCategoryID", typeof(int));
    
            var subjectSubCategoryIDParameter = subjectSubCategoryID.HasValue ?
                new ObjectParameter("SubjectSubCategoryID", subjectSubCategoryID) :
                new ObjectParameter("SubjectSubCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Subjects_Insert", subjectCategoryIDParameter, subjectSubCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Subjects_Select_Result> sp_Subjects_Select(Nullable<int> subjectCategoryID, Nullable<int> subjectSubCategoryID, string name, Nullable<int> active)
        {
            var subjectCategoryIDParameter = subjectCategoryID.HasValue ?
                new ObjectParameter("SubjectCategoryID", subjectCategoryID) :
                new ObjectParameter("SubjectCategoryID", typeof(int));
    
            var subjectSubCategoryIDParameter = subjectSubCategoryID.HasValue ?
                new ObjectParameter("SubjectSubCategoryID", subjectSubCategoryID) :
                new ObjectParameter("SubjectSubCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Subjects_Select_Result>("sp_Subjects_Select", subjectCategoryIDParameter, subjectSubCategoryIDParameter, nameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_Subjects_SelectRow_Result> sp_Subjects_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Subjects_SelectRow_Result>("sp_Subjects_SelectRow", iDParameter);
        }
    
        public virtual int sp_Subjects_Update(Nullable<int> subjectCategoryID, Nullable<int> subjectSubCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var subjectCategoryIDParameter = subjectCategoryID.HasValue ?
                new ObjectParameter("SubjectCategoryID", subjectCategoryID) :
                new ObjectParameter("SubjectCategoryID", typeof(int));
    
            var subjectSubCategoryIDParameter = subjectSubCategoryID.HasValue ?
                new ObjectParameter("SubjectSubCategoryID", subjectSubCategoryID) :
                new ObjectParameter("SubjectSubCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Subjects_Update", subjectCategoryIDParameter, subjectSubCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_SubjectSubCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SubjectSubCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_SubjectSubCategories_Insert(Nullable<int> subjectCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var subjectCategoryIDParameter = subjectCategoryID.HasValue ?
                new ObjectParameter("SubjectCategoryID", subjectCategoryID) :
                new ObjectParameter("SubjectCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SubjectSubCategories_Insert", subjectCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_SubjectSubCategories_Select_Result> sp_SubjectSubCategories_Select(Nullable<int> subjectCategoryID, string name, Nullable<int> active)
        {
            var subjectCategoryIDParameter = subjectCategoryID.HasValue ?
                new ObjectParameter("SubjectCategoryID", subjectCategoryID) :
                new ObjectParameter("SubjectCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SubjectSubCategories_Select_Result>("sp_SubjectSubCategories_Select", subjectCategoryIDParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_SubjectSubCategories_Update(Nullable<int> subjectCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var subjectCategoryIDParameter = subjectCategoryID.HasValue ?
                new ObjectParameter("SubjectCategoryID", subjectCategoryID) :
                new ObjectParameter("SubjectCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SubjectSubCategories_Update", subjectCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_Attendance1_Result> sp_Sum_Attendance1(Nullable<short> attendanceTypeID, string registerDate_Start, string registerDate_End, string registerTime_Start, string registerTime_End, Nullable<int> customerID, Nullable<byte> shiftID, string dsc, Nullable<int> userid)
        {
            var attendanceTypeIDParameter = attendanceTypeID.HasValue ?
                new ObjectParameter("AttendanceTypeID", attendanceTypeID) :
                new ObjectParameter("AttendanceTypeID", typeof(short));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var registerTime_StartParameter = registerTime_Start != null ?
                new ObjectParameter("RegisterTime_Start", registerTime_Start) :
                new ObjectParameter("RegisterTime_Start", typeof(string));
    
            var registerTime_EndParameter = registerTime_End != null ?
                new ObjectParameter("RegisterTime_End", registerTime_End) :
                new ObjectParameter("RegisterTime_End", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(byte));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_Attendance1_Result>("sp_Sum_Attendance1", attendanceTypeIDParameter, registerDate_StartParameter, registerDate_EndParameter, registerTime_StartParameter, registerTime_EndParameter, customerIDParameter, shiftIDParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_CashReport_Result> sp_Sum_CashReport(Nullable<short> cashID, string moein_date_Start, string moein_date_End, string moein_Time_Start, string moein_Time_End, Nullable<int> rolid, Nullable<int> userid)
        {
            var cashIDParameter = cashID.HasValue ?
                new ObjectParameter("CashID", cashID) :
                new ObjectParameter("CashID", typeof(short));
    
            var moein_date_StartParameter = moein_date_Start != null ?
                new ObjectParameter("Moein_date_Start", moein_date_Start) :
                new ObjectParameter("Moein_date_Start", typeof(string));
    
            var moein_date_EndParameter = moein_date_End != null ?
                new ObjectParameter("Moein_date_End", moein_date_End) :
                new ObjectParameter("Moein_date_End", typeof(string));
    
            var moein_Time_StartParameter = moein_Time_Start != null ?
                new ObjectParameter("Moein_Time_Start", moein_Time_Start) :
                new ObjectParameter("Moein_Time_Start", typeof(string));
    
            var moein_Time_EndParameter = moein_Time_End != null ?
                new ObjectParameter("Moein_Time_End", moein_Time_End) :
                new ObjectParameter("Moein_Time_End", typeof(string));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_CashReport_Result>("sp_Sum_CashReport", cashIDParameter, moein_date_StartParameter, moein_date_EndParameter, moein_Time_StartParameter, moein_Time_EndParameter, rolidParameter, useridParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> sp_sum_Cheque_payment(Nullable<byte> chequeStateID, Nullable<int> bankID, Nullable<short> chequeBookTypeID, Nullable<short> chequeBookID, string chequeNumber, Nullable<double> chequeAmount_start, Nullable<double> chequeAmount_end, string receiver, Nullable<int> customerID, string dsc, string chequeDate_start, string chequeDate_End, string create_date_start, string create_date_end, string payment_date_start, string payment_date_end, Nullable<byte> archive, Nullable<byte> archiveStateID, string archiveDate_Start, string archiveDate_End, Nullable<int> archiveUserID, string archiveDsc, Nullable<int> userid, Nullable<int> topRange)
        {
            var chequeStateIDParameter = chequeStateID.HasValue ?
                new ObjectParameter("ChequeStateID", chequeStateID) :
                new ObjectParameter("ChequeStateID", typeof(byte));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var chequeBookTypeIDParameter = chequeBookTypeID.HasValue ?
                new ObjectParameter("ChequeBookTypeID", chequeBookTypeID) :
                new ObjectParameter("ChequeBookTypeID", typeof(short));
    
            var chequeBookIDParameter = chequeBookID.HasValue ?
                new ObjectParameter("ChequeBookID", chequeBookID) :
                new ObjectParameter("ChequeBookID", typeof(short));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var chequeAmount_startParameter = chequeAmount_start.HasValue ?
                new ObjectParameter("ChequeAmount_start", chequeAmount_start) :
                new ObjectParameter("ChequeAmount_start", typeof(double));
    
            var chequeAmount_endParameter = chequeAmount_end.HasValue ?
                new ObjectParameter("ChequeAmount_end", chequeAmount_end) :
                new ObjectParameter("ChequeAmount_end", typeof(double));
    
            var receiverParameter = receiver != null ?
                new ObjectParameter("Receiver", receiver) :
                new ObjectParameter("Receiver", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var chequeDate_startParameter = chequeDate_start != null ?
                new ObjectParameter("ChequeDate_start", chequeDate_start) :
                new ObjectParameter("ChequeDate_start", typeof(string));
    
            var chequeDate_EndParameter = chequeDate_End != null ?
                new ObjectParameter("ChequeDate_End", chequeDate_End) :
                new ObjectParameter("ChequeDate_End", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var payment_date_startParameter = payment_date_start != null ?
                new ObjectParameter("payment_date_start", payment_date_start) :
                new ObjectParameter("payment_date_start", typeof(string));
    
            var payment_date_endParameter = payment_date_end != null ?
                new ObjectParameter("payment_date_end", payment_date_end) :
                new ObjectParameter("payment_date_end", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveStateIDParameter = archiveStateID.HasValue ?
                new ObjectParameter("ArchiveStateID", archiveStateID) :
                new ObjectParameter("ArchiveStateID", typeof(byte));
    
            var archiveDate_StartParameter = archiveDate_Start != null ?
                new ObjectParameter("ArchiveDate_Start", archiveDate_Start) :
                new ObjectParameter("ArchiveDate_Start", typeof(string));
    
            var archiveDate_EndParameter = archiveDate_End != null ?
                new ObjectParameter("ArchiveDate_End", archiveDate_End) :
                new ObjectParameter("ArchiveDate_End", typeof(string));
    
            var archiveUserIDParameter = archiveUserID.HasValue ?
                new ObjectParameter("ArchiveUserID", archiveUserID) :
                new ObjectParameter("ArchiveUserID", typeof(int));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("sp_sum_Cheque_payment", chequeStateIDParameter, bankIDParameter, chequeBookTypeIDParameter, chequeBookIDParameter, chequeNumberParameter, chequeAmount_startParameter, chequeAmount_endParameter, receiverParameter, customerIDParameter, dscParameter, chequeDate_startParameter, chequeDate_EndParameter, create_date_startParameter, create_date_endParameter, payment_date_startParameter, payment_date_endParameter, archiveParameter, archiveStateIDParameter, archiveDate_StartParameter, archiveDate_EndParameter, archiveUserIDParameter, archiveDscParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> sp_sum_Cheque_Received(Nullable<int> chequeTypeID, Nullable<byte> chequeStateID, Nullable<int> bankID, string bankName, string bankBranch, string accountNumber, string chequeNumber, Nullable<double> chequeAmount_start, Nullable<double> chequeAmount_end, string receiver, Nullable<int> customerID, string dsc, string chequeDate_start, string chequeDate_end, string create_date_start, string create_date_end, string receive_date_start, string receive_date_end, Nullable<byte> archive, Nullable<byte> archiveStateID, string archiveDate_Start, string archiveDate_End, Nullable<int> archiveUserID, string archiveDsc, Nullable<int> userid, Nullable<int> topRange)
        {
            var chequeTypeIDParameter = chequeTypeID.HasValue ?
                new ObjectParameter("ChequeTypeID", chequeTypeID) :
                new ObjectParameter("ChequeTypeID", typeof(int));
    
            var chequeStateIDParameter = chequeStateID.HasValue ?
                new ObjectParameter("ChequeStateID", chequeStateID) :
                new ObjectParameter("ChequeStateID", typeof(byte));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var bankBranchParameter = bankBranch != null ?
                new ObjectParameter("BankBranch", bankBranch) :
                new ObjectParameter("BankBranch", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var chequeAmount_startParameter = chequeAmount_start.HasValue ?
                new ObjectParameter("ChequeAmount_start", chequeAmount_start) :
                new ObjectParameter("ChequeAmount_start", typeof(double));
    
            var chequeAmount_endParameter = chequeAmount_end.HasValue ?
                new ObjectParameter("ChequeAmount_end", chequeAmount_end) :
                new ObjectParameter("ChequeAmount_end", typeof(double));
    
            var receiverParameter = receiver != null ?
                new ObjectParameter("Receiver", receiver) :
                new ObjectParameter("Receiver", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var chequeDate_startParameter = chequeDate_start != null ?
                new ObjectParameter("ChequeDate_start", chequeDate_start) :
                new ObjectParameter("ChequeDate_start", typeof(string));
    
            var chequeDate_endParameter = chequeDate_end != null ?
                new ObjectParameter("ChequeDate_end", chequeDate_end) :
                new ObjectParameter("ChequeDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var receive_date_startParameter = receive_date_start != null ?
                new ObjectParameter("Receive_date_start", receive_date_start) :
                new ObjectParameter("Receive_date_start", typeof(string));
    
            var receive_date_endParameter = receive_date_end != null ?
                new ObjectParameter("Receive_date_end", receive_date_end) :
                new ObjectParameter("Receive_date_end", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveStateIDParameter = archiveStateID.HasValue ?
                new ObjectParameter("ArchiveStateID", archiveStateID) :
                new ObjectParameter("ArchiveStateID", typeof(byte));
    
            var archiveDate_StartParameter = archiveDate_Start != null ?
                new ObjectParameter("ArchiveDate_Start", archiveDate_Start) :
                new ObjectParameter("ArchiveDate_Start", typeof(string));
    
            var archiveDate_EndParameter = archiveDate_End != null ?
                new ObjectParameter("ArchiveDate_End", archiveDate_End) :
                new ObjectParameter("ArchiveDate_End", typeof(string));
    
            var archiveUserIDParameter = archiveUserID.HasValue ?
                new ObjectParameter("ArchiveUserID", archiveUserID) :
                new ObjectParameter("ArchiveUserID", typeof(int));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("sp_sum_Cheque_Received", chequeTypeIDParameter, chequeStateIDParameter, bankIDParameter, bankNameParameter, bankBranchParameter, accountNumberParameter, chequeNumberParameter, chequeAmount_startParameter, chequeAmount_endParameter, receiverParameter, customerIDParameter, dscParameter, chequeDate_startParameter, chequeDate_endParameter, create_date_startParameter, create_date_endParameter, receive_date_startParameter, receive_date_endParameter, archiveParameter, archiveStateIDParameter, archiveDate_StartParameter, archiveDate_EndParameter, archiveUserIDParameter, archiveDscParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_CRM_Result> sp_Sum_CRM(Nullable<short> cRMTypeID, Nullable<short> cRMStateID, Nullable<int> iD_start, Nullable<int> iD_end, Nullable<int> customerGroupID, Nullable<int> customerSubGroupID, Nullable<int> customerID, string registerDate_start, string registerDate_end, string registerTime_start, string registerTime_end, string title, Nullable<short> cRMJobCategoryID, Nullable<int> cRMJobSubCategoryID, Nullable<int> cRMJobID, Nullable<short> cRMResultCategoryID, Nullable<int> cRMResultSubCategoryID, Nullable<int> cRMResultID, Nullable<double> bed_start, Nullable<double> bed_end, Nullable<double> bes_start, Nullable<double> bes_end, Nullable<double> mandeh_start, Nullable<double> mandeh_end, Nullable<byte> archive, Nullable<byte> archiveStateID, string archiveDate_Start, string archiveDate_End, Nullable<int> archiveUserID, string archiveDsc, Nullable<int> shiftID, Nullable<int> rolID, Nullable<int> userid, Nullable<int> cRMStateID_UserView)
        {
            var cRMTypeIDParameter = cRMTypeID.HasValue ?
                new ObjectParameter("CRMTypeID", cRMTypeID) :
                new ObjectParameter("CRMTypeID", typeof(short));
    
            var cRMStateIDParameter = cRMStateID.HasValue ?
                new ObjectParameter("CRMStateID", cRMStateID) :
                new ObjectParameter("CRMStateID", typeof(short));
    
            var iD_startParameter = iD_start.HasValue ?
                new ObjectParameter("ID_start", iD_start) :
                new ObjectParameter("ID_start", typeof(int));
    
            var iD_endParameter = iD_end.HasValue ?
                new ObjectParameter("ID_end", iD_end) :
                new ObjectParameter("ID_end", typeof(int));
    
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(int));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var registerTime_startParameter = registerTime_start != null ?
                new ObjectParameter("RegisterTime_start", registerTime_start) :
                new ObjectParameter("RegisterTime_start", typeof(string));
    
            var registerTime_endParameter = registerTime_end != null ?
                new ObjectParameter("RegisterTime_end", registerTime_end) :
                new ObjectParameter("RegisterTime_end", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var cRMJobCategoryIDParameter = cRMJobCategoryID.HasValue ?
                new ObjectParameter("CRMJobCategoryID", cRMJobCategoryID) :
                new ObjectParameter("CRMJobCategoryID", typeof(short));
    
            var cRMJobSubCategoryIDParameter = cRMJobSubCategoryID.HasValue ?
                new ObjectParameter("CRMJobSubCategoryID", cRMJobSubCategoryID) :
                new ObjectParameter("CRMJobSubCategoryID", typeof(int));
    
            var cRMJobIDParameter = cRMJobID.HasValue ?
                new ObjectParameter("CRMJobID", cRMJobID) :
                new ObjectParameter("CRMJobID", typeof(int));
    
            var cRMResultCategoryIDParameter = cRMResultCategoryID.HasValue ?
                new ObjectParameter("CRMResultCategoryID", cRMResultCategoryID) :
                new ObjectParameter("CRMResultCategoryID", typeof(short));
    
            var cRMResultSubCategoryIDParameter = cRMResultSubCategoryID.HasValue ?
                new ObjectParameter("CRMResultSubCategoryID", cRMResultSubCategoryID) :
                new ObjectParameter("CRMResultSubCategoryID", typeof(int));
    
            var cRMResultIDParameter = cRMResultID.HasValue ?
                new ObjectParameter("CRMResultID", cRMResultID) :
                new ObjectParameter("CRMResultID", typeof(int));
    
            var bed_startParameter = bed_start.HasValue ?
                new ObjectParameter("Bed_start", bed_start) :
                new ObjectParameter("Bed_start", typeof(double));
    
            var bed_endParameter = bed_end.HasValue ?
                new ObjectParameter("Bed_end", bed_end) :
                new ObjectParameter("Bed_end", typeof(double));
    
            var bes_startParameter = bes_start.HasValue ?
                new ObjectParameter("Bes_start", bes_start) :
                new ObjectParameter("Bes_start", typeof(double));
    
            var bes_endParameter = bes_end.HasValue ?
                new ObjectParameter("Bes_end", bes_end) :
                new ObjectParameter("Bes_end", typeof(double));
    
            var mandeh_startParameter = mandeh_start.HasValue ?
                new ObjectParameter("Mandeh_start", mandeh_start) :
                new ObjectParameter("Mandeh_start", typeof(double));
    
            var mandeh_endParameter = mandeh_end.HasValue ?
                new ObjectParameter("Mandeh_end", mandeh_end) :
                new ObjectParameter("Mandeh_end", typeof(double));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveStateIDParameter = archiveStateID.HasValue ?
                new ObjectParameter("ArchiveStateID", archiveStateID) :
                new ObjectParameter("ArchiveStateID", typeof(byte));
    
            var archiveDate_StartParameter = archiveDate_Start != null ?
                new ObjectParameter("ArchiveDate_Start", archiveDate_Start) :
                new ObjectParameter("ArchiveDate_Start", typeof(string));
    
            var archiveDate_EndParameter = archiveDate_End != null ?
                new ObjectParameter("ArchiveDate_End", archiveDate_End) :
                new ObjectParameter("ArchiveDate_End", typeof(string));
    
            var archiveUserIDParameter = archiveUserID.HasValue ?
                new ObjectParameter("ArchiveUserID", archiveUserID) :
                new ObjectParameter("ArchiveUserID", typeof(int));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var rolIDParameter = rolID.HasValue ?
                new ObjectParameter("RolID", rolID) :
                new ObjectParameter("RolID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var cRMStateID_UserViewParameter = cRMStateID_UserView.HasValue ?
                new ObjectParameter("CRMStateID_UserView", cRMStateID_UserView) :
                new ObjectParameter("CRMStateID_UserView", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_CRM_Result>("sp_Sum_CRM", cRMTypeIDParameter, cRMStateIDParameter, iD_startParameter, iD_endParameter, customerGroupIDParameter, customerSubGroupIDParameter, customerIDParameter, registerDate_startParameter, registerDate_endParameter, registerTime_startParameter, registerTime_endParameter, titleParameter, cRMJobCategoryIDParameter, cRMJobSubCategoryIDParameter, cRMJobIDParameter, cRMResultCategoryIDParameter, cRMResultSubCategoryIDParameter, cRMResultIDParameter, bed_startParameter, bed_endParameter, bes_startParameter, bes_endParameter, mandeh_startParameter, mandeh_endParameter, archiveParameter, archiveStateIDParameter, archiveDate_StartParameter, archiveDate_EndParameter, archiveUserIDParameter, archiveDscParameter, shiftIDParameter, rolIDParameter, useridParameter, cRMStateID_UserViewParameter);
        }
    
        public virtual int sp_Sum_Funds(Nullable<int> iD_Start, Nullable<int> iD_End, Nullable<byte> sexTypeID, string customerName, Nullable<short> paymentTypeID, Nullable<int> receptionID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<int> fundCategoryID, Nullable<int> fundSubCategoryID, Nullable<int> fundTypeID, Nullable<double> bed_Start, Nullable<double> bed_End, Nullable<double> bes_Start, Nullable<double> bes_End, string dsc, string registerDate_Start, string registerDate_End, string registerDate_Time_Start, string registerDate_Time_End, Nullable<byte> srcType, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var fundCategoryIDParameter = fundCategoryID.HasValue ?
                new ObjectParameter("FundCategoryID", fundCategoryID) :
                new ObjectParameter("FundCategoryID", typeof(int));
    
            var fundSubCategoryIDParameter = fundSubCategoryID.HasValue ?
                new ObjectParameter("FundSubCategoryID", fundSubCategoryID) :
                new ObjectParameter("FundSubCategoryID", typeof(int));
    
            var fundTypeIDParameter = fundTypeID.HasValue ?
                new ObjectParameter("FundTypeID", fundTypeID) :
                new ObjectParameter("FundTypeID", typeof(int));
    
            var bed_StartParameter = bed_Start.HasValue ?
                new ObjectParameter("Bed_Start", bed_Start) :
                new ObjectParameter("Bed_Start", typeof(double));
    
            var bed_EndParameter = bed_End.HasValue ?
                new ObjectParameter("Bed_End", bed_End) :
                new ObjectParameter("Bed_End", typeof(double));
    
            var bes_StartParameter = bes_Start.HasValue ?
                new ObjectParameter("Bes_Start", bes_Start) :
                new ObjectParameter("Bes_Start", typeof(double));
    
            var bes_EndParameter = bes_End.HasValue ?
                new ObjectParameter("Bes_End", bes_End) :
                new ObjectParameter("Bes_End", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var registerDate_Time_StartParameter = registerDate_Time_Start != null ?
                new ObjectParameter("RegisterDate_Time_Start", registerDate_Time_Start) :
                new ObjectParameter("RegisterDate_Time_Start", typeof(string));
    
            var registerDate_Time_EndParameter = registerDate_Time_End != null ?
                new ObjectParameter("RegisterDate_Time_End", registerDate_Time_End) :
                new ObjectParameter("RegisterDate_Time_End", typeof(string));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Sum_Funds", iD_StartParameter, iD_EndParameter, sexTypeIDParameter, customerNameParameter, paymentTypeIDParameter, receptionIDParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, fundCategoryIDParameter, fundSubCategoryIDParameter, fundTypeIDParameter, bed_StartParameter, bed_EndParameter, bes_StartParameter, bes_EndParameter, dscParameter, registerDate_StartParameter, registerDate_EndParameter, registerDate_Time_StartParameter, registerDate_Time_EndParameter, srcTypeParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_Funds_PaymentTypes_Result> sp_Sum_Funds_PaymentTypes(string registerDate_Start, string registerDate_End)
        {
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_Funds_PaymentTypes_Result>("sp_Sum_Funds_PaymentTypes", registerDate_StartParameter, registerDate_EndParameter);
        }
    
        public virtual ObjectResult<sp_Sum_Inv_Result> sp_Sum_Inv(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid, Nullable<int> topRange)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_Inv_Result>("sp_Sum_Inv", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InventoryHeaders_Result> sp_Sum_InventoryHeaders(Nullable<short> driverID, Nullable<short> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<short> deskID, Nullable<int> serial_Start, Nullable<int> serial_End, string barnameh, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<int> senderID, Nullable<int> customerID, string customerName, Nullable<short> storekeeperID, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<double> sumPrices_Start, Nullable<double> sumPrices_End, Nullable<double> mandeh_Start, Nullable<double> mandeh_End, string dsc, Nullable<int> userid, Nullable<int> shiftID, Nullable<int> topRange)
        {
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(short));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(short));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var serial_StartParameter = serial_Start.HasValue ?
                new ObjectParameter("Serial_Start", serial_Start) :
                new ObjectParameter("Serial_Start", typeof(int));
    
            var serial_EndParameter = serial_End.HasValue ?
                new ObjectParameter("Serial_End", serial_End) :
                new ObjectParameter("Serial_End", typeof(int));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var sumPrices_StartParameter = sumPrices_Start.HasValue ?
                new ObjectParameter("SumPrices_Start", sumPrices_Start) :
                new ObjectParameter("SumPrices_Start", typeof(double));
    
            var sumPrices_EndParameter = sumPrices_End.HasValue ?
                new ObjectParameter("SumPrices_End", sumPrices_End) :
                new ObjectParameter("SumPrices_End", typeof(double));
    
            var mandeh_StartParameter = mandeh_Start.HasValue ?
                new ObjectParameter("Mandeh_Start", mandeh_Start) :
                new ObjectParameter("Mandeh_Start", typeof(double));
    
            var mandeh_EndParameter = mandeh_End.HasValue ?
                new ObjectParameter("Mandeh_End", mandeh_End) :
                new ObjectParameter("Mandeh_End", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InventoryHeaders_Result>("sp_Sum_InventoryHeaders", driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, deskIDParameter, serial_StartParameter, serial_EndParameter, barnamehParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, storekeeperIDParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, sumPrices_StartParameter, sumPrices_EndParameter, mandeh_StartParameter, mandeh_EndParameter, dscParameter, useridParameter, shiftIDParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvPriceIn_Result> sp_Sum_InvPriceIn(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid, Nullable<int> topRange)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvPriceIn_Result>("sp_Sum_InvPriceIn", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvPriceOut_Result> sp_Sum_InvPriceOut(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid, Nullable<int> topRange)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvPriceOut_Result>("sp_Sum_InvPriceOut", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvReports_Result> sp_Sum_InvReports(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvReports_Result>("sp_Sum_InvReports", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvReports_Customers_Result> sp_Sum_InvReports_Customers(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvReports_Customers_Result>("sp_Sum_InvReports_Customers", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvReports_CustomersAndItems_Result> sp_Sum_InvReports_CustomersAndItems(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvReports_CustomersAndItems_Result>("sp_Sum_InvReports_CustomersAndItems", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvReports_Days_Result> sp_Sum_InvReports_Days(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvReports_Days_Result>("sp_Sum_InvReports_Days", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvReports_DaysAndItems_Result> sp_Sum_InvReports_DaysAndItems(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvReports_DaysAndItems_Result>("sp_Sum_InvReports_DaysAndItems", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvReports_DaysAndShift_Result> sp_Sum_InvReports_DaysAndShift(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvReports_DaysAndShift_Result>("sp_Sum_InvReports_DaysAndShift", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvReports_DaysAndUsers_Result> sp_Sum_InvReports_DaysAndUsers(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvReports_DaysAndUsers_Result>("sp_Sum_InvReports_DaysAndUsers", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvReports_Desks_Result> sp_Sum_InvReports_Desks(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvReports_Desks_Result>("sp_Sum_InvReports_Desks", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvReports_DesksAndItems_Result> sp_Sum_InvReports_DesksAndItems(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvReports_DesksAndItems_Result>("sp_Sum_InvReports_DesksAndItems", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvReports_Drivers_Result> sp_Sum_InvReports_Drivers(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvReports_Drivers_Result>("sp_Sum_InvReports_Drivers", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvReports_DriversAndCustomers_Result> sp_Sum_InvReports_DriversAndCustomers(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvReports_DriversAndCustomers_Result>("sp_Sum_InvReports_DriversAndCustomers", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvReports_InOutTypes_Result> sp_Sum_InvReports_InOutTypes(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvReports_InOutTypes_Result>("sp_Sum_InvReports_InOutTypes", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvReports_Inventories_Result> sp_Sum_InvReports_Inventories(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvReports_Inventories_Result>("sp_Sum_InvReports_Inventories", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvReports_InventoriesAndItems_Result> sp_Sum_InvReports_InventoriesAndItems(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvReports_InventoriesAndItems_Result>("sp_Sum_InvReports_InventoriesAndItems", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvReports_Items_Result> sp_Sum_InvReports_Items(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvReports_Items_Result>("sp_Sum_InvReports_Items", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvReports_Months_Result> sp_Sum_InvReports_Months(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvReports_Months_Result>("sp_Sum_InvReports_Months", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvReports_MonthsAndItems_Result> sp_Sum_InvReports_MonthsAndItems(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvReports_MonthsAndItems_Result>("sp_Sum_InvReports_MonthsAndItems", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvReports_SaleTypes_Result> sp_Sum_InvReports_SaleTypes(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvReports_SaleTypes_Result>("sp_Sum_InvReports_SaleTypes", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvReports_SaleTypesAndItems_Result> sp_Sum_InvReports_SaleTypesAndItems(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvReports_SaleTypesAndItems_Result>("sp_Sum_InvReports_SaleTypesAndItems", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvReports_Shift_Result> sp_Sum_InvReports_Shift(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvReports_Shift_Result>("sp_Sum_InvReports_Shift", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvReports_ShiftAndItems_Result> sp_Sum_InvReports_ShiftAndItems(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvReports_ShiftAndItems_Result>("sp_Sum_InvReports_ShiftAndItems", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvReports_Users_Result> sp_Sum_InvReports_Users(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvReports_Users_Result>("sp_Sum_InvReports_Users", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_InvReports_UsersAndItems_Result> sp_Sum_InvReports_UsersAndItems(Nullable<int> serial, Nullable<int> driverID, Nullable<int> carID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<byte> inOutTypeID, Nullable<byte> saleTypeID, Nullable<short> inventoryTypeID, Nullable<short> inventoryID, Nullable<short> storekeeperID, Nullable<short> deskID, Nullable<int> senderID, Nullable<int> customerID, string customerName, string customerTel, string customerAddress, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemClassID, Nullable<int> itemID, Nullable<double> numberIn_start, Nullable<double> numberIn_end, Nullable<double> numberOut_start, Nullable<double> numberOut_end, Nullable<byte> countingUnitID, Nullable<double> fee_Start, Nullable<double> fee_End, string barnameh, string expDate_start, string expDate_end, string dsc, string registerDate_start, string registerDate_end, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> shiftID, Nullable<int> userid)
        {
            var serialParameter = serial.HasValue ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(int));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var inOutTypeIDParameter = inOutTypeID.HasValue ?
                new ObjectParameter("InOutTypeID", inOutTypeID) :
                new ObjectParameter("InOutTypeID", typeof(byte));
    
            var saleTypeIDParameter = saleTypeID.HasValue ?
                new ObjectParameter("SaleTypeID", saleTypeID) :
                new ObjectParameter("SaleTypeID", typeof(byte));
    
            var inventoryTypeIDParameter = inventoryTypeID.HasValue ?
                new ObjectParameter("InventoryTypeID", inventoryTypeID) :
                new ObjectParameter("InventoryTypeID", typeof(short));
    
            var inventoryIDParameter = inventoryID.HasValue ?
                new ObjectParameter("InventoryID", inventoryID) :
                new ObjectParameter("InventoryID", typeof(short));
    
            var storekeeperIDParameter = storekeeperID.HasValue ?
                new ObjectParameter("StorekeeperID", storekeeperID) :
                new ObjectParameter("StorekeeperID", typeof(short));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(short));
    
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("SenderID", senderID) :
                new ObjectParameter("SenderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerTelParameter = customerTel != null ?
                new ObjectParameter("CustomerTel", customerTel) :
                new ObjectParameter("CustomerTel", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemClassIDParameter = itemClassID.HasValue ?
                new ObjectParameter("ItemClassID", itemClassID) :
                new ObjectParameter("ItemClassID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var numberIn_startParameter = numberIn_start.HasValue ?
                new ObjectParameter("NumberIn_start", numberIn_start) :
                new ObjectParameter("NumberIn_start", typeof(double));
    
            var numberIn_endParameter = numberIn_end.HasValue ?
                new ObjectParameter("NumberIn_end", numberIn_end) :
                new ObjectParameter("NumberIn_end", typeof(double));
    
            var numberOut_startParameter = numberOut_start.HasValue ?
                new ObjectParameter("NumberOut_start", numberOut_start) :
                new ObjectParameter("NumberOut_start", typeof(double));
    
            var numberOut_endParameter = numberOut_end.HasValue ?
                new ObjectParameter("NumberOut_end", numberOut_end) :
                new ObjectParameter("NumberOut_end", typeof(double));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var fee_StartParameter = fee_Start.HasValue ?
                new ObjectParameter("Fee_Start", fee_Start) :
                new ObjectParameter("Fee_Start", typeof(double));
    
            var fee_EndParameter = fee_End.HasValue ?
                new ObjectParameter("Fee_End", fee_End) :
                new ObjectParameter("Fee_End", typeof(double));
    
            var barnamehParameter = barnameh != null ?
                new ObjectParameter("Barnameh", barnameh) :
                new ObjectParameter("Barnameh", typeof(string));
    
            var expDate_startParameter = expDate_start != null ?
                new ObjectParameter("ExpDate_start", expDate_start) :
                new ObjectParameter("ExpDate_start", typeof(string));
    
            var expDate_endParameter = expDate_end != null ?
                new ObjectParameter("ExpDate_end", expDate_end) :
                new ObjectParameter("ExpDate_end", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var registerDate_startParameter = registerDate_start != null ?
                new ObjectParameter("RegisterDate_start", registerDate_start) :
                new ObjectParameter("RegisterDate_start", typeof(string));
    
            var registerDate_endParameter = registerDate_end != null ?
                new ObjectParameter("RegisterDate_end", registerDate_end) :
                new ObjectParameter("RegisterDate_end", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_InvReports_UsersAndItems_Result>("sp_Sum_InvReports_UsersAndItems", serialParameter, driverIDParameter, carIDParameter, fromLocationIDParameter, toLocationIDParameter, inOutTypeIDParameter, saleTypeIDParameter, inventoryTypeIDParameter, inventoryIDParameter, storekeeperIDParameter, deskIDParameter, senderIDParameter, customerIDParameter, customerNameParameter, customerTelParameter, customerAddressParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemClassIDParameter, itemIDParameter, numberIn_startParameter, numberIn_endParameter, numberOut_startParameter, numberOut_endParameter, countingUnitIDParameter, fee_StartParameter, fee_EndParameter, barnamehParameter, expDate_startParameter, expDate_endParameter, dscParameter, registerDate_startParameter, registerDate_endParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, shiftIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_Laboratories_Result> sp_Sum_Laboratories(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<int> laboratoryID, Nullable<int> patientID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> departmentID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<short> labStateID, Nullable<int> labCenterID, string deliveryDate_Start, string deliveryDate_End, string completeDate_Start, string completeDate_End, Nullable<int> factorSerial, string senderName, string receiverName, Nullable<int> labColorD, Nullable<int> labJobID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var laboratoryIDParameter = laboratoryID.HasValue ?
                new ObjectParameter("LaboratoryID", laboratoryID) :
                new ObjectParameter("LaboratoryID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var labStateIDParameter = labStateID.HasValue ?
                new ObjectParameter("LabStateID", labStateID) :
                new ObjectParameter("LabStateID", typeof(short));
    
            var labCenterIDParameter = labCenterID.HasValue ?
                new ObjectParameter("LabCenterID", labCenterID) :
                new ObjectParameter("LabCenterID", typeof(int));
    
            var deliveryDate_StartParameter = deliveryDate_Start != null ?
                new ObjectParameter("DeliveryDate_Start", deliveryDate_Start) :
                new ObjectParameter("DeliveryDate_Start", typeof(string));
    
            var deliveryDate_EndParameter = deliveryDate_End != null ?
                new ObjectParameter("DeliveryDate_End", deliveryDate_End) :
                new ObjectParameter("DeliveryDate_End", typeof(string));
    
            var completeDate_StartParameter = completeDate_Start != null ?
                new ObjectParameter("CompleteDate_Start", completeDate_Start) :
                new ObjectParameter("CompleteDate_Start", typeof(string));
    
            var completeDate_EndParameter = completeDate_End != null ?
                new ObjectParameter("CompleteDate_End", completeDate_End) :
                new ObjectParameter("CompleteDate_End", typeof(string));
    
            var factorSerialParameter = factorSerial.HasValue ?
                new ObjectParameter("FactorSerial", factorSerial) :
                new ObjectParameter("FactorSerial", typeof(int));
    
            var senderNameParameter = senderName != null ?
                new ObjectParameter("SenderName", senderName) :
                new ObjectParameter("SenderName", typeof(string));
    
            var receiverNameParameter = receiverName != null ?
                new ObjectParameter("ReceiverName", receiverName) :
                new ObjectParameter("ReceiverName", typeof(string));
    
            var labColorDParameter = labColorD.HasValue ?
                new ObjectParameter("LabColorD", labColorD) :
                new ObjectParameter("LabColorD", typeof(int));
    
            var labJobIDParameter = labJobID.HasValue ?
                new ObjectParameter("LabJobID", labJobID) :
                new ObjectParameter("LabJobID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_Laboratories_Result>("sp_Sum_Laboratories", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, laboratoryIDParameter, patientIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, departmentIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, labStateIDParameter, labCenterIDParameter, deliveryDate_StartParameter, deliveryDate_EndParameter, completeDate_StartParameter, completeDate_EndParameter, factorSerialParameter, senderNameParameter, receiverNameParameter, labColorDParameter, labJobIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, useridParameter, topRangeParameter);
        }
    
        public virtual int sp_Sum_Moein(Nullable<int> iD_Start, Nullable<int> iD_End, Nullable<int> customerGroupID, Nullable<int> customerSubGroupID, Nullable<int> customerID, Nullable<short> cashID, Nullable<int> moeinCategoryID, Nullable<int> moeinSubCategoryID, Nullable<int> moeinTypeID, Nullable<double> bed_Start, Nullable<double> bed_End, Nullable<double> bes_Start, Nullable<double> bes_End, string dsc, string moein_date_Start, string moein_date_End, string moein_Time_Start, string moein_Time_End, Nullable<byte> srcType, Nullable<int> srcID, Nullable<byte> tasviye, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(int));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var cashIDParameter = cashID.HasValue ?
                new ObjectParameter("CashID", cashID) :
                new ObjectParameter("CashID", typeof(short));
    
            var moeinCategoryIDParameter = moeinCategoryID.HasValue ?
                new ObjectParameter("MoeinCategoryID", moeinCategoryID) :
                new ObjectParameter("MoeinCategoryID", typeof(int));
    
            var moeinSubCategoryIDParameter = moeinSubCategoryID.HasValue ?
                new ObjectParameter("MoeinSubCategoryID", moeinSubCategoryID) :
                new ObjectParameter("MoeinSubCategoryID", typeof(int));
    
            var moeinTypeIDParameter = moeinTypeID.HasValue ?
                new ObjectParameter("MoeinTypeID", moeinTypeID) :
                new ObjectParameter("MoeinTypeID", typeof(int));
    
            var bed_StartParameter = bed_Start.HasValue ?
                new ObjectParameter("Bed_Start", bed_Start) :
                new ObjectParameter("Bed_Start", typeof(double));
    
            var bed_EndParameter = bed_End.HasValue ?
                new ObjectParameter("Bed_End", bed_End) :
                new ObjectParameter("Bed_End", typeof(double));
    
            var bes_StartParameter = bes_Start.HasValue ?
                new ObjectParameter("Bes_Start", bes_Start) :
                new ObjectParameter("Bes_Start", typeof(double));
    
            var bes_EndParameter = bes_End.HasValue ?
                new ObjectParameter("Bes_End", bes_End) :
                new ObjectParameter("Bes_End", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var moein_date_StartParameter = moein_date_Start != null ?
                new ObjectParameter("Moein_date_Start", moein_date_Start) :
                new ObjectParameter("Moein_date_Start", typeof(string));
    
            var moein_date_EndParameter = moein_date_End != null ?
                new ObjectParameter("Moein_date_End", moein_date_End) :
                new ObjectParameter("Moein_date_End", typeof(string));
    
            var moein_Time_StartParameter = moein_Time_Start != null ?
                new ObjectParameter("Moein_Time_Start", moein_Time_Start) :
                new ObjectParameter("Moein_Time_Start", typeof(string));
    
            var moein_Time_EndParameter = moein_Time_End != null ?
                new ObjectParameter("Moein_Time_End", moein_Time_End) :
                new ObjectParameter("Moein_Time_End", typeof(string));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var srcIDParameter = srcID.HasValue ?
                new ObjectParameter("SrcID", srcID) :
                new ObjectParameter("SrcID", typeof(int));
    
            var tasviyeParameter = tasviye.HasValue ?
                new ObjectParameter("Tasviye", tasviye) :
                new ObjectParameter("Tasviye", typeof(byte));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Sum_Moein", iD_StartParameter, iD_EndParameter, customerGroupIDParameter, customerSubGroupIDParameter, customerIDParameter, cashIDParameter, moeinCategoryIDParameter, moeinSubCategoryIDParameter, moeinTypeIDParameter, bed_StartParameter, bed_EndParameter, bes_StartParameter, bes_EndParameter, dscParameter, moein_date_StartParameter, moein_date_EndParameter, moein_Time_StartParameter, moein_Time_EndParameter, srcTypeParameter, srcIDParameter, tasviyeParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_MoeinReports_Result> sp_Sum_MoeinReports(Nullable<int> iD_Start, Nullable<int> iD_End, Nullable<int> customerGroupID, Nullable<int> customerSubGroupID, Nullable<int> customerID, Nullable<int> moeinCategoryID, Nullable<int> moeinSubCategoryID, Nullable<int> moeinTypeID, Nullable<double> bed_Start, Nullable<double> bed_End, Nullable<double> bes_Start, Nullable<double> bes_End, string dsc, string moein_date_Start, string moein_date_End, string moein_Time_Start, string moein_Time_End, Nullable<byte> srcType, Nullable<int> srcID, Nullable<byte> tasviye, Nullable<int> rolid, Nullable<int> userid)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(int));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var moeinCategoryIDParameter = moeinCategoryID.HasValue ?
                new ObjectParameter("MoeinCategoryID", moeinCategoryID) :
                new ObjectParameter("MoeinCategoryID", typeof(int));
    
            var moeinSubCategoryIDParameter = moeinSubCategoryID.HasValue ?
                new ObjectParameter("MoeinSubCategoryID", moeinSubCategoryID) :
                new ObjectParameter("MoeinSubCategoryID", typeof(int));
    
            var moeinTypeIDParameter = moeinTypeID.HasValue ?
                new ObjectParameter("MoeinTypeID", moeinTypeID) :
                new ObjectParameter("MoeinTypeID", typeof(int));
    
            var bed_StartParameter = bed_Start.HasValue ?
                new ObjectParameter("Bed_Start", bed_Start) :
                new ObjectParameter("Bed_Start", typeof(double));
    
            var bed_EndParameter = bed_End.HasValue ?
                new ObjectParameter("Bed_End", bed_End) :
                new ObjectParameter("Bed_End", typeof(double));
    
            var bes_StartParameter = bes_Start.HasValue ?
                new ObjectParameter("Bes_Start", bes_Start) :
                new ObjectParameter("Bes_Start", typeof(double));
    
            var bes_EndParameter = bes_End.HasValue ?
                new ObjectParameter("Bes_End", bes_End) :
                new ObjectParameter("Bes_End", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var moein_date_StartParameter = moein_date_Start != null ?
                new ObjectParameter("Moein_date_Start", moein_date_Start) :
                new ObjectParameter("Moein_date_Start", typeof(string));
    
            var moein_date_EndParameter = moein_date_End != null ?
                new ObjectParameter("Moein_date_End", moein_date_End) :
                new ObjectParameter("Moein_date_End", typeof(string));
    
            var moein_Time_StartParameter = moein_Time_Start != null ?
                new ObjectParameter("Moein_Time_Start", moein_Time_Start) :
                new ObjectParameter("Moein_Time_Start", typeof(string));
    
            var moein_Time_EndParameter = moein_Time_End != null ?
                new ObjectParameter("Moein_Time_End", moein_Time_End) :
                new ObjectParameter("Moein_Time_End", typeof(string));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var srcIDParameter = srcID.HasValue ?
                new ObjectParameter("SrcID", srcID) :
                new ObjectParameter("SrcID", typeof(int));
    
            var tasviyeParameter = tasviye.HasValue ?
                new ObjectParameter("Tasviye", tasviye) :
                new ObjectParameter("Tasviye", typeof(byte));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_MoeinReports_Result>("sp_Sum_MoeinReports", iD_StartParameter, iD_EndParameter, customerGroupIDParameter, customerSubGroupIDParameter, customerIDParameter, moeinCategoryIDParameter, moeinSubCategoryIDParameter, moeinTypeIDParameter, bed_StartParameter, bed_EndParameter, bes_StartParameter, bes_EndParameter, dscParameter, moein_date_StartParameter, moein_date_EndParameter, moein_Time_StartParameter, moein_Time_EndParameter, srcTypeParameter, srcIDParameter, tasviyeParameter, rolidParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_MoeinReports_Customers_Result> sp_Sum_MoeinReports_Customers(Nullable<int> iD_Start, Nullable<int> iD_End, Nullable<int> customerGroupID, Nullable<int> customerSubGroupID, Nullable<int> customerID, Nullable<int> moeinCategoryID, Nullable<int> moeinSubCategoryID, Nullable<int> moeinTypeID, Nullable<double> bed_Start, Nullable<double> bed_End, Nullable<double> bes_Start, Nullable<double> bes_End, string dsc, string moein_date_Start, string moein_date_End, string moein_Time_Start, string moein_Time_End, Nullable<byte> srcType, Nullable<int> srcID, Nullable<byte> tasviye, Nullable<int> rolid, Nullable<int> userid)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(int));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var moeinCategoryIDParameter = moeinCategoryID.HasValue ?
                new ObjectParameter("MoeinCategoryID", moeinCategoryID) :
                new ObjectParameter("MoeinCategoryID", typeof(int));
    
            var moeinSubCategoryIDParameter = moeinSubCategoryID.HasValue ?
                new ObjectParameter("MoeinSubCategoryID", moeinSubCategoryID) :
                new ObjectParameter("MoeinSubCategoryID", typeof(int));
    
            var moeinTypeIDParameter = moeinTypeID.HasValue ?
                new ObjectParameter("MoeinTypeID", moeinTypeID) :
                new ObjectParameter("MoeinTypeID", typeof(int));
    
            var bed_StartParameter = bed_Start.HasValue ?
                new ObjectParameter("Bed_Start", bed_Start) :
                new ObjectParameter("Bed_Start", typeof(double));
    
            var bed_EndParameter = bed_End.HasValue ?
                new ObjectParameter("Bed_End", bed_End) :
                new ObjectParameter("Bed_End", typeof(double));
    
            var bes_StartParameter = bes_Start.HasValue ?
                new ObjectParameter("Bes_Start", bes_Start) :
                new ObjectParameter("Bes_Start", typeof(double));
    
            var bes_EndParameter = bes_End.HasValue ?
                new ObjectParameter("Bes_End", bes_End) :
                new ObjectParameter("Bes_End", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var moein_date_StartParameter = moein_date_Start != null ?
                new ObjectParameter("Moein_date_Start", moein_date_Start) :
                new ObjectParameter("Moein_date_Start", typeof(string));
    
            var moein_date_EndParameter = moein_date_End != null ?
                new ObjectParameter("Moein_date_End", moein_date_End) :
                new ObjectParameter("Moein_date_End", typeof(string));
    
            var moein_Time_StartParameter = moein_Time_Start != null ?
                new ObjectParameter("Moein_Time_Start", moein_Time_Start) :
                new ObjectParameter("Moein_Time_Start", typeof(string));
    
            var moein_Time_EndParameter = moein_Time_End != null ?
                new ObjectParameter("Moein_Time_End", moein_Time_End) :
                new ObjectParameter("Moein_Time_End", typeof(string));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var srcIDParameter = srcID.HasValue ?
                new ObjectParameter("SrcID", srcID) :
                new ObjectParameter("SrcID", typeof(int));
    
            var tasviyeParameter = tasviye.HasValue ?
                new ObjectParameter("Tasviye", tasviye) :
                new ObjectParameter("Tasviye", typeof(byte));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_MoeinReports_Customers_Result>("sp_Sum_MoeinReports_Customers", iD_StartParameter, iD_EndParameter, customerGroupIDParameter, customerSubGroupIDParameter, customerIDParameter, moeinCategoryIDParameter, moeinSubCategoryIDParameter, moeinTypeIDParameter, bed_StartParameter, bed_EndParameter, bes_StartParameter, bes_EndParameter, dscParameter, moein_date_StartParameter, moein_date_EndParameter, moein_Time_StartParameter, moein_Time_EndParameter, srcTypeParameter, srcIDParameter, tasviyeParameter, rolidParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_MoeinReports_CustomersAndMoeinTypes_Result> sp_Sum_MoeinReports_CustomersAndMoeinTypes(Nullable<int> iD_Start, Nullable<int> iD_End, Nullable<int> customerGroupID, Nullable<int> customerSubGroupID, Nullable<int> customerID, Nullable<int> moeinCategoryID, Nullable<int> moeinSubCategoryID, Nullable<int> moeinTypeID, Nullable<double> bed_Start, Nullable<double> bed_End, Nullable<double> bes_Start, Nullable<double> bes_End, string dsc, string moein_date_Start, string moein_date_End, string moein_Time_Start, string moein_Time_End, Nullable<byte> srcType, Nullable<int> srcID, Nullable<byte> tasviye, Nullable<int> rolid, Nullable<int> userid)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(int));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var moeinCategoryIDParameter = moeinCategoryID.HasValue ?
                new ObjectParameter("MoeinCategoryID", moeinCategoryID) :
                new ObjectParameter("MoeinCategoryID", typeof(int));
    
            var moeinSubCategoryIDParameter = moeinSubCategoryID.HasValue ?
                new ObjectParameter("MoeinSubCategoryID", moeinSubCategoryID) :
                new ObjectParameter("MoeinSubCategoryID", typeof(int));
    
            var moeinTypeIDParameter = moeinTypeID.HasValue ?
                new ObjectParameter("MoeinTypeID", moeinTypeID) :
                new ObjectParameter("MoeinTypeID", typeof(int));
    
            var bed_StartParameter = bed_Start.HasValue ?
                new ObjectParameter("Bed_Start", bed_Start) :
                new ObjectParameter("Bed_Start", typeof(double));
    
            var bed_EndParameter = bed_End.HasValue ?
                new ObjectParameter("Bed_End", bed_End) :
                new ObjectParameter("Bed_End", typeof(double));
    
            var bes_StartParameter = bes_Start.HasValue ?
                new ObjectParameter("Bes_Start", bes_Start) :
                new ObjectParameter("Bes_Start", typeof(double));
    
            var bes_EndParameter = bes_End.HasValue ?
                new ObjectParameter("Bes_End", bes_End) :
                new ObjectParameter("Bes_End", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var moein_date_StartParameter = moein_date_Start != null ?
                new ObjectParameter("Moein_date_Start", moein_date_Start) :
                new ObjectParameter("Moein_date_Start", typeof(string));
    
            var moein_date_EndParameter = moein_date_End != null ?
                new ObjectParameter("Moein_date_End", moein_date_End) :
                new ObjectParameter("Moein_date_End", typeof(string));
    
            var moein_Time_StartParameter = moein_Time_Start != null ?
                new ObjectParameter("Moein_Time_Start", moein_Time_Start) :
                new ObjectParameter("Moein_Time_Start", typeof(string));
    
            var moein_Time_EndParameter = moein_Time_End != null ?
                new ObjectParameter("Moein_Time_End", moein_Time_End) :
                new ObjectParameter("Moein_Time_End", typeof(string));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var srcIDParameter = srcID.HasValue ?
                new ObjectParameter("SrcID", srcID) :
                new ObjectParameter("SrcID", typeof(int));
    
            var tasviyeParameter = tasviye.HasValue ?
                new ObjectParameter("Tasviye", tasviye) :
                new ObjectParameter("Tasviye", typeof(byte));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_MoeinReports_CustomersAndMoeinTypes_Result>("sp_Sum_MoeinReports_CustomersAndMoeinTypes", iD_StartParameter, iD_EndParameter, customerGroupIDParameter, customerSubGroupIDParameter, customerIDParameter, moeinCategoryIDParameter, moeinSubCategoryIDParameter, moeinTypeIDParameter, bed_StartParameter, bed_EndParameter, bes_StartParameter, bes_EndParameter, dscParameter, moein_date_StartParameter, moein_date_EndParameter, moein_Time_StartParameter, moein_Time_EndParameter, srcTypeParameter, srcIDParameter, tasviyeParameter, rolidParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_MoeinReports_MoeinTypes_Result> sp_Sum_MoeinReports_MoeinTypes(Nullable<int> iD_Start, Nullable<int> iD_End, Nullable<int> customerGroupID, Nullable<int> customerSubGroupID, Nullable<int> customerID, Nullable<int> moeinCategoryID, Nullable<int> moeinSubCategoryID, Nullable<int> moeinTypeID, Nullable<double> bed_Start, Nullable<double> bed_End, Nullable<double> bes_Start, Nullable<double> bes_End, string dsc, string moein_date_Start, string moein_date_End, string moein_Time_Start, string moein_Time_End, Nullable<byte> srcType, Nullable<int> srcID, Nullable<byte> tasviye, Nullable<int> rolid, Nullable<int> userid)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(int));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var moeinCategoryIDParameter = moeinCategoryID.HasValue ?
                new ObjectParameter("MoeinCategoryID", moeinCategoryID) :
                new ObjectParameter("MoeinCategoryID", typeof(int));
    
            var moeinSubCategoryIDParameter = moeinSubCategoryID.HasValue ?
                new ObjectParameter("MoeinSubCategoryID", moeinSubCategoryID) :
                new ObjectParameter("MoeinSubCategoryID", typeof(int));
    
            var moeinTypeIDParameter = moeinTypeID.HasValue ?
                new ObjectParameter("MoeinTypeID", moeinTypeID) :
                new ObjectParameter("MoeinTypeID", typeof(int));
    
            var bed_StartParameter = bed_Start.HasValue ?
                new ObjectParameter("Bed_Start", bed_Start) :
                new ObjectParameter("Bed_Start", typeof(double));
    
            var bed_EndParameter = bed_End.HasValue ?
                new ObjectParameter("Bed_End", bed_End) :
                new ObjectParameter("Bed_End", typeof(double));
    
            var bes_StartParameter = bes_Start.HasValue ?
                new ObjectParameter("Bes_Start", bes_Start) :
                new ObjectParameter("Bes_Start", typeof(double));
    
            var bes_EndParameter = bes_End.HasValue ?
                new ObjectParameter("Bes_End", bes_End) :
                new ObjectParameter("Bes_End", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var moein_date_StartParameter = moein_date_Start != null ?
                new ObjectParameter("Moein_date_Start", moein_date_Start) :
                new ObjectParameter("Moein_date_Start", typeof(string));
    
            var moein_date_EndParameter = moein_date_End != null ?
                new ObjectParameter("Moein_date_End", moein_date_End) :
                new ObjectParameter("Moein_date_End", typeof(string));
    
            var moein_Time_StartParameter = moein_Time_Start != null ?
                new ObjectParameter("Moein_Time_Start", moein_Time_Start) :
                new ObjectParameter("Moein_Time_Start", typeof(string));
    
            var moein_Time_EndParameter = moein_Time_End != null ?
                new ObjectParameter("Moein_Time_End", moein_Time_End) :
                new ObjectParameter("Moein_Time_End", typeof(string));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var srcIDParameter = srcID.HasValue ?
                new ObjectParameter("SrcID", srcID) :
                new ObjectParameter("SrcID", typeof(int));
    
            var tasviyeParameter = tasviye.HasValue ?
                new ObjectParameter("Tasviye", tasviye) :
                new ObjectParameter("Tasviye", typeof(byte));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_MoeinReports_MoeinTypes_Result>("sp_Sum_MoeinReports_MoeinTypes", iD_StartParameter, iD_EndParameter, customerGroupIDParameter, customerSubGroupIDParameter, customerIDParameter, moeinCategoryIDParameter, moeinSubCategoryIDParameter, moeinTypeIDParameter, bed_StartParameter, bed_EndParameter, bes_StartParameter, bes_EndParameter, dscParameter, moein_date_StartParameter, moein_date_EndParameter, moein_Time_StartParameter, moein_Time_EndParameter, srcTypeParameter, srcIDParameter, tasviyeParameter, rolidParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Sum_MoeinReports_MoeinTypesAndCustomers_Result> sp_Sum_MoeinReports_MoeinTypesAndCustomers(Nullable<int> iD_Start, Nullable<int> iD_End, Nullable<int> customerGroupID, Nullable<int> customerSubGroupID, Nullable<int> customerID, Nullable<int> moeinCategoryID, Nullable<int> moeinSubCategoryID, Nullable<int> moeinTypeID, Nullable<double> bed_Start, Nullable<double> bed_End, Nullable<double> bes_Start, Nullable<double> bes_End, string dsc, string moein_date_Start, string moein_date_End, string moein_Time_Start, string moein_Time_End, Nullable<byte> srcType, Nullable<int> srcID, Nullable<byte> tasviye, Nullable<int> rolid, Nullable<int> userid)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var customerGroupIDParameter = customerGroupID.HasValue ?
                new ObjectParameter("CustomerGroupID", customerGroupID) :
                new ObjectParameter("CustomerGroupID", typeof(int));
    
            var customerSubGroupIDParameter = customerSubGroupID.HasValue ?
                new ObjectParameter("CustomerSubGroupID", customerSubGroupID) :
                new ObjectParameter("CustomerSubGroupID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var moeinCategoryIDParameter = moeinCategoryID.HasValue ?
                new ObjectParameter("MoeinCategoryID", moeinCategoryID) :
                new ObjectParameter("MoeinCategoryID", typeof(int));
    
            var moeinSubCategoryIDParameter = moeinSubCategoryID.HasValue ?
                new ObjectParameter("MoeinSubCategoryID", moeinSubCategoryID) :
                new ObjectParameter("MoeinSubCategoryID", typeof(int));
    
            var moeinTypeIDParameter = moeinTypeID.HasValue ?
                new ObjectParameter("MoeinTypeID", moeinTypeID) :
                new ObjectParameter("MoeinTypeID", typeof(int));
    
            var bed_StartParameter = bed_Start.HasValue ?
                new ObjectParameter("Bed_Start", bed_Start) :
                new ObjectParameter("Bed_Start", typeof(double));
    
            var bed_EndParameter = bed_End.HasValue ?
                new ObjectParameter("Bed_End", bed_End) :
                new ObjectParameter("Bed_End", typeof(double));
    
            var bes_StartParameter = bes_Start.HasValue ?
                new ObjectParameter("Bes_Start", bes_Start) :
                new ObjectParameter("Bes_Start", typeof(double));
    
            var bes_EndParameter = bes_End.HasValue ?
                new ObjectParameter("Bes_End", bes_End) :
                new ObjectParameter("Bes_End", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var moein_date_StartParameter = moein_date_Start != null ?
                new ObjectParameter("Moein_date_Start", moein_date_Start) :
                new ObjectParameter("Moein_date_Start", typeof(string));
    
            var moein_date_EndParameter = moein_date_End != null ?
                new ObjectParameter("Moein_date_End", moein_date_End) :
                new ObjectParameter("Moein_date_End", typeof(string));
    
            var moein_Time_StartParameter = moein_Time_Start != null ?
                new ObjectParameter("Moein_Time_Start", moein_Time_Start) :
                new ObjectParameter("Moein_Time_Start", typeof(string));
    
            var moein_Time_EndParameter = moein_Time_End != null ?
                new ObjectParameter("Moein_Time_End", moein_Time_End) :
                new ObjectParameter("Moein_Time_End", typeof(string));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var srcIDParameter = srcID.HasValue ?
                new ObjectParameter("SrcID", srcID) :
                new ObjectParameter("SrcID", typeof(int));
    
            var tasviyeParameter = tasviye.HasValue ?
                new ObjectParameter("Tasviye", tasviye) :
                new ObjectParameter("Tasviye", typeof(byte));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_MoeinReports_MoeinTypesAndCustomers_Result>("sp_Sum_MoeinReports_MoeinTypesAndCustomers", iD_StartParameter, iD_EndParameter, customerGroupIDParameter, customerSubGroupIDParameter, customerIDParameter, moeinCategoryIDParameter, moeinSubCategoryIDParameter, moeinTypeIDParameter, bed_StartParameter, bed_EndParameter, bes_StartParameter, bes_EndParameter, dscParameter, moein_date_StartParameter, moein_date_EndParameter, moein_Time_StartParameter, moein_Time_EndParameter, srcTypeParameter, srcIDParameter, tasviyeParameter, rolidParameter, useridParameter);
        }
    
        public virtual int sp_Sum_Orders(string recever, Nullable<int> customerID, string customer_ContactName, string customer_General, string customer_HomeAddress, Nullable<int> driverID, Nullable<int> carID, Nullable<int> deskID, Nullable<int> itemID, Nullable<byte> paymentStateID, string dsc, string create_date_start, string create_date_end, string create_Time_start, string create_Time_end, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var receverParameter = recever != null ?
                new ObjectParameter("Recever", recever) :
                new ObjectParameter("Recever", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customer_ContactNameParameter = customer_ContactName != null ?
                new ObjectParameter("Customer_ContactName", customer_ContactName) :
                new ObjectParameter("Customer_ContactName", typeof(string));
    
            var customer_GeneralParameter = customer_General != null ?
                new ObjectParameter("Customer_General", customer_General) :
                new ObjectParameter("Customer_General", typeof(string));
    
            var customer_HomeAddressParameter = customer_HomeAddress != null ?
                new ObjectParameter("Customer_HomeAddress", customer_HomeAddress) :
                new ObjectParameter("Customer_HomeAddress", typeof(string));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var carIDParameter = carID.HasValue ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(int));
    
            var deskIDParameter = deskID.HasValue ?
                new ObjectParameter("DeskID", deskID) :
                new ObjectParameter("DeskID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(byte));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var create_date_startParameter = create_date_start != null ?
                new ObjectParameter("create_date_start", create_date_start) :
                new ObjectParameter("create_date_start", typeof(string));
    
            var create_date_endParameter = create_date_end != null ?
                new ObjectParameter("create_date_end", create_date_end) :
                new ObjectParameter("create_date_end", typeof(string));
    
            var create_Time_startParameter = create_Time_start != null ?
                new ObjectParameter("create_Time_start", create_Time_start) :
                new ObjectParameter("create_Time_start", typeof(string));
    
            var create_Time_endParameter = create_Time_end != null ?
                new ObjectParameter("create_Time_end", create_Time_end) :
                new ObjectParameter("create_Time_end", typeof(string));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Sum_Orders", receverParameter, customerIDParameter, customer_ContactNameParameter, customer_GeneralParameter, customer_HomeAddressParameter, driverIDParameter, carIDParameter, deskIDParameter, itemIDParameter, paymentStateIDParameter, dscParameter, create_date_startParameter, create_date_endParameter, create_Time_startParameter, create_Time_endParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual int sp_Sum_Payments(Nullable<int> iD_Start, Nullable<int> iD_End, Nullable<int> customerID, Nullable<double> bed_Start, Nullable<double> bed_End, Nullable<double> bes_Start, Nullable<double> bes_End, Nullable<int> bankID, string bankName, string accountNumber, Nullable<byte> paymentInOutTypeID, Nullable<short> paymentTypeID, string serial, Nullable<byte> payerTypeID, string payerName, string payerBank, string paymentDate_Start, string paymentDate_End, string paymentTime_Start, string paymentTime_End, Nullable<byte> chequeStateID, string dsc, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var bed_StartParameter = bed_Start.HasValue ?
                new ObjectParameter("Bed_Start", bed_Start) :
                new ObjectParameter("Bed_Start", typeof(double));
    
            var bed_EndParameter = bed_End.HasValue ?
                new ObjectParameter("Bed_End", bed_End) :
                new ObjectParameter("Bed_End", typeof(double));
    
            var bes_StartParameter = bes_Start.HasValue ?
                new ObjectParameter("Bes_Start", bes_Start) :
                new ObjectParameter("Bes_Start", typeof(double));
    
            var bes_EndParameter = bes_End.HasValue ?
                new ObjectParameter("Bes_End", bes_End) :
                new ObjectParameter("Bes_End", typeof(double));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var paymentInOutTypeIDParameter = paymentInOutTypeID.HasValue ?
                new ObjectParameter("PaymentInOutTypeID", paymentInOutTypeID) :
                new ObjectParameter("PaymentInOutTypeID", typeof(byte));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var serialParameter = serial != null ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(string));
    
            var payerTypeIDParameter = payerTypeID.HasValue ?
                new ObjectParameter("PayerTypeID", payerTypeID) :
                new ObjectParameter("PayerTypeID", typeof(byte));
    
            var payerNameParameter = payerName != null ?
                new ObjectParameter("PayerName", payerName) :
                new ObjectParameter("PayerName", typeof(string));
    
            var payerBankParameter = payerBank != null ?
                new ObjectParameter("PayerBank", payerBank) :
                new ObjectParameter("PayerBank", typeof(string));
    
            var paymentDate_StartParameter = paymentDate_Start != null ?
                new ObjectParameter("PaymentDate_Start", paymentDate_Start) :
                new ObjectParameter("PaymentDate_Start", typeof(string));
    
            var paymentDate_EndParameter = paymentDate_End != null ?
                new ObjectParameter("PaymentDate_End", paymentDate_End) :
                new ObjectParameter("PaymentDate_End", typeof(string));
    
            var paymentTime_StartParameter = paymentTime_Start != null ?
                new ObjectParameter("PaymentTime_Start", paymentTime_Start) :
                new ObjectParameter("PaymentTime_Start", typeof(string));
    
            var paymentTime_EndParameter = paymentTime_End != null ?
                new ObjectParameter("PaymentTime_End", paymentTime_End) :
                new ObjectParameter("PaymentTime_End", typeof(string));
    
            var chequeStateIDParameter = chequeStateID.HasValue ?
                new ObjectParameter("ChequeStateID", chequeStateID) :
                new ObjectParameter("ChequeStateID", typeof(byte));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Sum_Payments", iD_StartParameter, iD_EndParameter, customerIDParameter, bed_StartParameter, bed_EndParameter, bes_StartParameter, bes_EndParameter, bankIDParameter, bankNameParameter, accountNumberParameter, paymentInOutTypeIDParameter, paymentTypeIDParameter, serialParameter, payerTypeIDParameter, payerNameParameter, payerBankParameter, paymentDate_StartParameter, paymentDate_EndParameter, paymentTime_StartParameter, paymentTime_EndParameter, chequeStateIDParameter, dscParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_Prescriptions_Result> sp_Sum_Prescriptions(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, string expDate_Start, string expDate_End, string receptionDate_Start, string receptionDate_End, Nullable<int> receptionID, Nullable<int> doctorID, Nullable<int> nezamPezeshki, Nullable<int> specialtyID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<int> departmentID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<int> reasonID, Nullable<short> diseaseID, Nullable<short> diagnosisID, Nullable<int> bedID, Nullable<int> bodyID, Nullable<short> serviceTime_Start, Nullable<short> serviceTime_End, string dsc, Nullable<byte> archive, string archiveDsc, Nullable<short> prescriptionCashTypeID, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var expDate_StartParameter = expDate_Start != null ?
                new ObjectParameter("ExpDate_Start", expDate_Start) :
                new ObjectParameter("ExpDate_Start", typeof(string));
    
            var expDate_EndParameter = expDate_End != null ?
                new ObjectParameter("ExpDate_End", expDate_End) :
                new ObjectParameter("ExpDate_End", typeof(string));
    
            var receptionDate_StartParameter = receptionDate_Start != null ?
                new ObjectParameter("ReceptionDate_Start", receptionDate_Start) :
                new ObjectParameter("ReceptionDate_Start", typeof(string));
    
            var receptionDate_EndParameter = receptionDate_End != null ?
                new ObjectParameter("ReceptionDate_End", receptionDate_End) :
                new ObjectParameter("ReceptionDate_End", typeof(string));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var nezamPezeshkiParameter = nezamPezeshki.HasValue ?
                new ObjectParameter("NezamPezeshki", nezamPezeshki) :
                new ObjectParameter("NezamPezeshki", typeof(int));
    
            var specialtyIDParameter = specialtyID.HasValue ?
                new ObjectParameter("SpecialtyID", specialtyID) :
                new ObjectParameter("SpecialtyID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(short));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(short));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var serviceTime_StartParameter = serviceTime_Start.HasValue ?
                new ObjectParameter("ServiceTime_Start", serviceTime_Start) :
                new ObjectParameter("ServiceTime_Start", typeof(short));
    
            var serviceTime_EndParameter = serviceTime_End.HasValue ?
                new ObjectParameter("ServiceTime_End", serviceTime_End) :
                new ObjectParameter("ServiceTime_End", typeof(short));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var prescriptionCashTypeIDParameter = prescriptionCashTypeID.HasValue ?
                new ObjectParameter("PrescriptionCashTypeID", prescriptionCashTypeID) :
                new ObjectParameter("PrescriptionCashTypeID", typeof(short));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_Prescriptions_Result>("sp_Sum_Prescriptions", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, expDate_StartParameter, expDate_EndParameter, receptionDate_StartParameter, receptionDate_EndParameter, receptionIDParameter, doctorIDParameter, nezamPezeshkiParameter, specialtyIDParameter, assistantIDParameter, patientIDParameter, departmentIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, reasonIDParameter, diseaseIDParameter, diagnosisIDParameter, bedIDParameter, bodyIDParameter, serviceTime_StartParameter, serviceTime_EndParameter, dscParameter, archiveParameter, archiveDscParameter, prescriptionCashTypeIDParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_PrescriptionsSalamat_Result> sp_Sum_PrescriptionsSalamat(Nullable<int> prescriptionCashTypeID, Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<int> insuranceID, Nullable<int> doctorID, string dsc)
        {
            var prescriptionCashTypeIDParameter = prescriptionCashTypeID.HasValue ?
                new ObjectParameter("PrescriptionCashTypeID", prescriptionCashTypeID) :
                new ObjectParameter("PrescriptionCashTypeID", typeof(int));
    
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_PrescriptionsSalamat_Result>("sp_Sum_PrescriptionsSalamat", prescriptionCashTypeIDParameter, iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, insuranceIDParameter, doctorIDParameter, dscParameter);
        }
    
        public virtual int sp_Sum_ReceptionAssistantsReport(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, string shortDsc, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Sum_ReceptionAssistantsReport", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, shortDscParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_Result> sp_Sum_ReceptionReports(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_Result>("sp_Sum_ReceptionReports", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_Assistants_Result> sp_Sum_ReceptionReports_Assistants(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_Assistants_Result>("sp_Sum_ReceptionReports_Assistants", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_AssistantsAndMedicalServices_Result> sp_Sum_ReceptionReports_AssistantsAndMedicalServices(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_AssistantsAndMedicalServices_Result>("sp_Sum_ReceptionReports_AssistantsAndMedicalServices", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_Customers_Result> sp_Sum_ReceptionReports_Customers(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_Customers_Result>("sp_Sum_ReceptionReports_Customers", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_CustomersAndPatients_Result> sp_Sum_ReceptionReports_CustomersAndPatients(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_CustomersAndPatients_Result>("sp_Sum_ReceptionReports_CustomersAndPatients", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_Days_Result> sp_Sum_ReceptionReports_Days(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_Days_Result>("sp_Sum_ReceptionReports_Days", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_DaysAndShift_Result> sp_Sum_ReceptionReports_DaysAndShift(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_DaysAndShift_Result>("sp_Sum_ReceptionReports_DaysAndShift", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_DaysAndUsers_Result> sp_Sum_ReceptionReports_DaysAndUsers(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_DaysAndUsers_Result>("sp_Sum_ReceptionReports_DaysAndUsers", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_Departments_Result> sp_Sum_ReceptionReports_Departments(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_Departments_Result>("sp_Sum_ReceptionReports_Departments", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_DepartmentsAndMedicalServices_Result> sp_Sum_ReceptionReports_DepartmentsAndMedicalServices(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_DepartmentsAndMedicalServices_Result>("sp_Sum_ReceptionReports_DepartmentsAndMedicalServices", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_Doctors_Result> sp_Sum_ReceptionReports_Doctors(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_Doctors_Result>("sp_Sum_ReceptionReports_Doctors", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_DoctorsAndMedicalServices_Result> sp_Sum_ReceptionReports_DoctorsAndMedicalServices(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_DoctorsAndMedicalServices_Result>("sp_Sum_ReceptionReports_DoctorsAndMedicalServices", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_DoctorsAndPatients_Result> sp_Sum_ReceptionReports_DoctorsAndPatients(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_DoctorsAndPatients_Result>("sp_Sum_ReceptionReports_DoctorsAndPatients", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_Insurances_Result> sp_Sum_ReceptionReports_Insurances(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_Insurances_Result>("sp_Sum_ReceptionReports_Insurances", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_MedicalServices_Result> sp_Sum_ReceptionReports_MedicalServices(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_MedicalServices_Result>("sp_Sum_ReceptionReports_MedicalServices", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_Months_Result> sp_Sum_ReceptionReports_Months(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_Months_Result>("sp_Sum_ReceptionReports_Months", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_Patients_Result> sp_Sum_ReceptionReports_Patients(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_Patients_Result>("sp_Sum_ReceptionReports_Patients", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_PaymentTypes_Result> sp_Sum_ReceptionReports_PaymentTypes(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_PaymentTypes_Result>("sp_Sum_ReceptionReports_PaymentTypes", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_Reasons_Result> sp_Sum_ReceptionReports_Reasons(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_Reasons_Result>("sp_Sum_ReceptionReports_Reasons", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_ReceptionStates_Result> sp_Sum_ReceptionReports_ReceptionStates(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_ReceptionStates_Result>("sp_Sum_ReceptionReports_ReceptionStates", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_ReceptionTypes_Result> sp_Sum_ReceptionReports_ReceptionTypes(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_ReceptionTypes_Result>("sp_Sum_ReceptionReports_ReceptionTypes", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_Shift_Result> sp_Sum_ReceptionReports_Shift(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_Shift_Result>("sp_Sum_ReceptionReports_Shift", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_ShiftAndMedicalServices_Result> sp_Sum_ReceptionReports_ShiftAndMedicalServices(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_ShiftAndMedicalServices_Result>("sp_Sum_ReceptionReports_ShiftAndMedicalServices", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_ShiftAndPatients_Result> sp_Sum_ReceptionReports_ShiftAndPatients(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_ShiftAndPatients_Result>("sp_Sum_ReceptionReports_ShiftAndPatients", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_SumMedicalServices_Result> sp_Sum_ReceptionReports_SumMedicalServices(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_SumMedicalServices_Result>("sp_Sum_ReceptionReports_SumMedicalServices", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_Therapies_Result> sp_Sum_ReceptionReports_Therapies(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_Therapies_Result>("sp_Sum_ReceptionReports_Therapies", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_Users_Result> sp_Sum_ReceptionReports_Users(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_Users_Result>("sp_Sum_ReceptionReports_Users", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionReports_UsersAndMedicalServices_Result> sp_Sum_ReceptionReports_UsersAndMedicalServices(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionReports_UsersAndMedicalServices_Result>("sp_Sum_ReceptionReports_UsersAndMedicalServices", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_Receptions_Result> sp_Sum_Receptions(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, Nullable<int> petID, string patientMeli, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, string insuranceNumber, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, Nullable<int> prescriptionID, string shortDsc, Nullable<double> bes_Start, Nullable<double> bes_End, Nullable<byte> archive, string archiveDsc, Nullable<int> centralID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var petIDParameter = petID.HasValue ?
                new ObjectParameter("PetID", petID) :
                new ObjectParameter("PetID", typeof(int));
    
            var patientMeliParameter = patientMeli != null ?
                new ObjectParameter("PatientMeli", patientMeli) :
                new ObjectParameter("PatientMeli", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var bes_StartParameter = bes_Start.HasValue ?
                new ObjectParameter("Bes_Start", bes_Start) :
                new ObjectParameter("Bes_Start", typeof(double));
    
            var bes_EndParameter = bes_End.HasValue ?
                new ObjectParameter("Bes_End", bes_End) :
                new ObjectParameter("Bes_End", typeof(double));
    
            var archiveParameter = archive.HasValue ?
                new ObjectParameter("Archive", archive) :
                new ObjectParameter("Archive", typeof(byte));
    
            var archiveDscParameter = archiveDsc != null ?
                new ObjectParameter("ArchiveDsc", archiveDsc) :
                new ObjectParameter("ArchiveDsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_Receptions_Result>("sp_Sum_Receptions", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, petIDParameter, patientMeliParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, insuranceNumberParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, prescriptionIDParameter, shortDscParameter, bes_StartParameter, bes_EndParameter, archiveParameter, archiveDscParameter, centralIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_ReceptionServices_Result> sp_Sum_ReceptionServices(string registerDate_Start, string registerDate_End, Nullable<int> receptionID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> patientID, Nullable<int> departmentID, Nullable<int> roomID, Nullable<int> bedID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, Nullable<int> reasonID, Nullable<short> diseaseID, Nullable<short> diagnosisID, Nullable<int> bodyID, Nullable<short> serviceTime_Start, Nullable<short> serviceTime_End, string dsc, Nullable<int> centralID, Nullable<bool> servicePriceNotZero, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var receptionIDParameter = receptionID.HasValue ?
                new ObjectParameter("ReceptionID", receptionID) :
                new ObjectParameter("ReceptionID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var bedIDParameter = bedID.HasValue ?
                new ObjectParameter("BedID", bedID) :
                new ObjectParameter("BedID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(short));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(short));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var serviceTime_StartParameter = serviceTime_Start.HasValue ?
                new ObjectParameter("ServiceTime_Start", serviceTime_Start) :
                new ObjectParameter("ServiceTime_Start", typeof(short));
    
            var serviceTime_EndParameter = serviceTime_End.HasValue ?
                new ObjectParameter("ServiceTime_End", serviceTime_End) :
                new ObjectParameter("ServiceTime_End", typeof(short));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var centralIDParameter = centralID.HasValue ?
                new ObjectParameter("CentralID", centralID) :
                new ObjectParameter("CentralID", typeof(int));
    
            var servicePriceNotZeroParameter = servicePriceNotZero.HasValue ?
                new ObjectParameter("ServicePriceNotZero", servicePriceNotZero) :
                new ObjectParameter("ServicePriceNotZero", typeof(bool));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_ReceptionServices_Result>("sp_Sum_ReceptionServices", registerDate_StartParameter, registerDate_EndParameter, receptionIDParameter, doctorIDParameter, assistantIDParameter, patientIDParameter, departmentIDParameter, roomIDParameter, bedIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, reasonIDParameter, diseaseIDParameter, diagnosisIDParameter, bodyIDParameter, serviceTime_StartParameter, serviceTime_EndParameter, dscParameter, centralIDParameter, servicePriceNotZeroParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual int sp_Sum_ReceptionsG(Nullable<int> iD_Start, Nullable<int> iD_End, string registerDate_Start, string registerDate_End, Nullable<byte> sexTypeID, Nullable<int> patientID, Nullable<int> customerID, Nullable<short> reasonID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> diseaseID, Nullable<int> departmentID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> therapyID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> insuranceID, Nullable<short> shiftID, Nullable<short> yaranehID, Nullable<short> mokamelID, Nullable<short> paymentStateID, Nullable<short> paymentTypeID, Nullable<short> receptionStateID, Nullable<short> receptionTypeID, string shortDsc, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var registerDate_StartParameter = registerDate_Start != null ?
                new ObjectParameter("RegisterDate_Start", registerDate_Start) :
                new ObjectParameter("RegisterDate_Start", typeof(string));
    
            var registerDate_EndParameter = registerDate_End != null ?
                new ObjectParameter("RegisterDate_End", registerDate_End) :
                new ObjectParameter("RegisterDate_End", typeof(string));
    
            var sexTypeIDParameter = sexTypeID.HasValue ?
                new ObjectParameter("SexTypeID", sexTypeID) :
                new ObjectParameter("SexTypeID", typeof(byte));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(short));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(short));
    
            var yaranehIDParameter = yaranehID.HasValue ?
                new ObjectParameter("YaranehID", yaranehID) :
                new ObjectParameter("YaranehID", typeof(short));
    
            var mokamelIDParameter = mokamelID.HasValue ?
                new ObjectParameter("MokamelID", mokamelID) :
                new ObjectParameter("MokamelID", typeof(short));
    
            var paymentStateIDParameter = paymentStateID.HasValue ?
                new ObjectParameter("PaymentStateID", paymentStateID) :
                new ObjectParameter("PaymentStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(short));
    
            var receptionStateIDParameter = receptionStateID.HasValue ?
                new ObjectParameter("ReceptionStateID", receptionStateID) :
                new ObjectParameter("ReceptionStateID", typeof(short));
    
            var receptionTypeIDParameter = receptionTypeID.HasValue ?
                new ObjectParameter("ReceptionTypeID", receptionTypeID) :
                new ObjectParameter("ReceptionTypeID", typeof(short));
    
            var shortDscParameter = shortDsc != null ?
                new ObjectParameter("ShortDsc", shortDsc) :
                new ObjectParameter("ShortDsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Sum_ReceptionsG", iD_StartParameter, iD_EndParameter, registerDate_StartParameter, registerDate_EndParameter, sexTypeIDParameter, patientIDParameter, customerIDParameter, reasonIDParameter, doctorIDParameter, assistantIDParameter, diseaseIDParameter, departmentIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, therapyIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, insuranceIDParameter, shiftIDParameter, yaranehIDParameter, mokamelIDParameter, paymentStateIDParameter, paymentTypeIDParameter, receptionStateIDParameter, receptionTypeIDParameter, shortDscParameter, useridParameter, topRangeParameter);
        }
    
        public virtual int sp_Sum_Sanad(Nullable<int> iD_Start, Nullable<int> iD_End, Nullable<int> patientID, Nullable<int> doctorID, Nullable<int> sanadCategoryID, Nullable<int> sanadSubCategoryID, Nullable<int> sanadTypeID, Nullable<double> bed_Start, Nullable<double> bed_End, Nullable<double> bes_Start, Nullable<double> bes_End, string dsc, string sanad_date_Start, string sanad_date_End, string sanad_Time_Start, string sanad_Time_End, Nullable<byte> srcType, Nullable<int> srcID, Nullable<int> rolid, Nullable<int> userid, Nullable<int> topRange)
        {
            var iD_StartParameter = iD_Start.HasValue ?
                new ObjectParameter("ID_Start", iD_Start) :
                new ObjectParameter("ID_Start", typeof(int));
    
            var iD_EndParameter = iD_End.HasValue ?
                new ObjectParameter("ID_End", iD_End) :
                new ObjectParameter("ID_End", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var sanadCategoryIDParameter = sanadCategoryID.HasValue ?
                new ObjectParameter("SanadCategoryID", sanadCategoryID) :
                new ObjectParameter("SanadCategoryID", typeof(int));
    
            var sanadSubCategoryIDParameter = sanadSubCategoryID.HasValue ?
                new ObjectParameter("SanadSubCategoryID", sanadSubCategoryID) :
                new ObjectParameter("SanadSubCategoryID", typeof(int));
    
            var sanadTypeIDParameter = sanadTypeID.HasValue ?
                new ObjectParameter("SanadTypeID", sanadTypeID) :
                new ObjectParameter("SanadTypeID", typeof(int));
    
            var bed_StartParameter = bed_Start.HasValue ?
                new ObjectParameter("Bed_Start", bed_Start) :
                new ObjectParameter("Bed_Start", typeof(double));
    
            var bed_EndParameter = bed_End.HasValue ?
                new ObjectParameter("Bed_End", bed_End) :
                new ObjectParameter("Bed_End", typeof(double));
    
            var bes_StartParameter = bes_Start.HasValue ?
                new ObjectParameter("Bes_Start", bes_Start) :
                new ObjectParameter("Bes_Start", typeof(double));
    
            var bes_EndParameter = bes_End.HasValue ?
                new ObjectParameter("Bes_End", bes_End) :
                new ObjectParameter("Bes_End", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var sanad_date_StartParameter = sanad_date_Start != null ?
                new ObjectParameter("Sanad_date_Start", sanad_date_Start) :
                new ObjectParameter("Sanad_date_Start", typeof(string));
    
            var sanad_date_EndParameter = sanad_date_End != null ?
                new ObjectParameter("Sanad_date_End", sanad_date_End) :
                new ObjectParameter("Sanad_date_End", typeof(string));
    
            var sanad_Time_StartParameter = sanad_Time_Start != null ?
                new ObjectParameter("Sanad_Time_Start", sanad_Time_Start) :
                new ObjectParameter("Sanad_Time_Start", typeof(string));
    
            var sanad_Time_EndParameter = sanad_Time_End != null ?
                new ObjectParameter("Sanad_Time_End", sanad_Time_End) :
                new ObjectParameter("Sanad_Time_End", typeof(string));
    
            var srcTypeParameter = srcType.HasValue ?
                new ObjectParameter("SrcType", srcType) :
                new ObjectParameter("SrcType", typeof(byte));
    
            var srcIDParameter = srcID.HasValue ?
                new ObjectParameter("SrcID", srcID) :
                new ObjectParameter("SrcID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("Rolid", rolid) :
                new ObjectParameter("Rolid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Sum_Sanad", iD_StartParameter, iD_EndParameter, patientIDParameter, doctorIDParameter, sanadCategoryIDParameter, sanadSubCategoryIDParameter, sanadTypeIDParameter, bed_StartParameter, bed_EndParameter, bes_StartParameter, bes_EndParameter, dscParameter, sanad_date_StartParameter, sanad_date_EndParameter, sanad_Time_StartParameter, sanad_Time_EndParameter, srcTypeParameter, srcIDParameter, rolidParameter, useridParameter, topRangeParameter);
        }
    
        public virtual ObjectResult<sp_Sum_WorkCalendar_Result> sp_Sum_WorkCalendar(string appointmentTime_Start, string appointmentTime_End, string besRegisterDate_Start, string besRegisterDate_End, Nullable<int> patientID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<short> insuranceID, Nullable<int> diseaseID, Nullable<short> departmentID, Nullable<int> therapyID, Nullable<int> medicalServiceID, string dsc, Nullable<short> workCalendarStateID, Nullable<int> paymentTypeID, string toDayDate, Nullable<byte> reserveState, Nullable<byte> isBes, Nullable<bool> done, Nullable<bool> delay, Nullable<bool> notCome, Nullable<int> shiftID, Nullable<int> userID)
        {
            var appointmentTime_StartParameter = appointmentTime_Start != null ?
                new ObjectParameter("AppointmentTime_Start", appointmentTime_Start) :
                new ObjectParameter("AppointmentTime_Start", typeof(string));
    
            var appointmentTime_EndParameter = appointmentTime_End != null ?
                new ObjectParameter("AppointmentTime_End", appointmentTime_End) :
                new ObjectParameter("AppointmentTime_End", typeof(string));
    
            var besRegisterDate_StartParameter = besRegisterDate_Start != null ?
                new ObjectParameter("BesRegisterDate_Start", besRegisterDate_Start) :
                new ObjectParameter("BesRegisterDate_Start", typeof(string));
    
            var besRegisterDate_EndParameter = besRegisterDate_End != null ?
                new ObjectParameter("BesRegisterDate_End", besRegisterDate_End) :
                new ObjectParameter("BesRegisterDate_End", typeof(string));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(short));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(short));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var workCalendarStateIDParameter = workCalendarStateID.HasValue ?
                new ObjectParameter("WorkCalendarStateID", workCalendarStateID) :
                new ObjectParameter("WorkCalendarStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var toDayDateParameter = toDayDate != null ?
                new ObjectParameter("ToDayDate", toDayDate) :
                new ObjectParameter("ToDayDate", typeof(string));
    
            var reserveStateParameter = reserveState.HasValue ?
                new ObjectParameter("ReserveState", reserveState) :
                new ObjectParameter("ReserveState", typeof(byte));
    
            var isBesParameter = isBes.HasValue ?
                new ObjectParameter("IsBes", isBes) :
                new ObjectParameter("IsBes", typeof(byte));
    
            var doneParameter = done.HasValue ?
                new ObjectParameter("Done", done) :
                new ObjectParameter("Done", typeof(bool));
    
            var delayParameter = delay.HasValue ?
                new ObjectParameter("Delay", delay) :
                new ObjectParameter("Delay", typeof(bool));
    
            var notComeParameter = notCome.HasValue ?
                new ObjectParameter("NotCome", notCome) :
                new ObjectParameter("NotCome", typeof(bool));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sum_WorkCalendar_Result>("sp_Sum_WorkCalendar", appointmentTime_StartParameter, appointmentTime_EndParameter, besRegisterDate_StartParameter, besRegisterDate_EndParameter, patientIDParameter, doctorIDParameter, assistantIDParameter, insuranceIDParameter, diseaseIDParameter, departmentIDParameter, therapyIDParameter, medicalServiceIDParameter, dscParameter, workCalendarStateIDParameter, paymentTypeIDParameter, toDayDateParameter, reserveStateParameter, isBesParameter, doneParameter, delayParameter, notComeParameter, shiftIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_SumDiseaseHistories_GByDiseaseHistoryTypeID_Result> sp_SumDiseaseHistories_GByDiseaseHistoryTypeID(Nullable<int> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SumDiseaseHistories_GByDiseaseHistoryTypeID_Result>("sp_SumDiseaseHistories_GByDiseaseHistoryTypeID", patientIDParameter);
        }
    
        public virtual int sp_Therapies_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Therapies_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Therapies_Insert(Nullable<int> reasonID, Nullable<int> departmentID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> bodyID, Nullable<int> iD, string name, Nullable<int> insuranceID, Nullable<int> serviceTime, Nullable<double> servicePrice, Nullable<double> patientPrice, Nullable<double> doctorPrice, Nullable<double> assistantPrice, Nullable<double> insurancePrice, Nullable<double> marginPrice, Nullable<double> yaranehPrice, Nullable<double> mokamelPrice, Nullable<double> takh, Nullable<double> bed, Nullable<double> zaribJ, Nullable<double> zaribD, Nullable<double> zaribB, Nullable<double> zaribK, Nullable<int> code, string dsc, Nullable<bool> active, Nullable<double> factorSumPrices, Nullable<double> factorTakh, Nullable<double> factorTax, Nullable<double> factorDutiy, Nullable<bool> del, Nullable<bool> @lock, Nullable<int> userid)
        {
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var serviceTimeParameter = serviceTime.HasValue ?
                new ObjectParameter("ServiceTime", serviceTime) :
                new ObjectParameter("ServiceTime", typeof(int));
    
            var servicePriceParameter = servicePrice.HasValue ?
                new ObjectParameter("ServicePrice", servicePrice) :
                new ObjectParameter("ServicePrice", typeof(double));
    
            var patientPriceParameter = patientPrice.HasValue ?
                new ObjectParameter("PatientPrice", patientPrice) :
                new ObjectParameter("PatientPrice", typeof(double));
    
            var doctorPriceParameter = doctorPrice.HasValue ?
                new ObjectParameter("DoctorPrice", doctorPrice) :
                new ObjectParameter("DoctorPrice", typeof(double));
    
            var assistantPriceParameter = assistantPrice.HasValue ?
                new ObjectParameter("AssistantPrice", assistantPrice) :
                new ObjectParameter("AssistantPrice", typeof(double));
    
            var insurancePriceParameter = insurancePrice.HasValue ?
                new ObjectParameter("InsurancePrice", insurancePrice) :
                new ObjectParameter("InsurancePrice", typeof(double));
    
            var marginPriceParameter = marginPrice.HasValue ?
                new ObjectParameter("MarginPrice", marginPrice) :
                new ObjectParameter("MarginPrice", typeof(double));
    
            var yaranehPriceParameter = yaranehPrice.HasValue ?
                new ObjectParameter("YaranehPrice", yaranehPrice) :
                new ObjectParameter("YaranehPrice", typeof(double));
    
            var mokamelPriceParameter = mokamelPrice.HasValue ?
                new ObjectParameter("MokamelPrice", mokamelPrice) :
                new ObjectParameter("MokamelPrice", typeof(double));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var zaribJParameter = zaribJ.HasValue ?
                new ObjectParameter("ZaribJ", zaribJ) :
                new ObjectParameter("ZaribJ", typeof(double));
    
            var zaribDParameter = zaribD.HasValue ?
                new ObjectParameter("ZaribD", zaribD) :
                new ObjectParameter("ZaribD", typeof(double));
    
            var zaribBParameter = zaribB.HasValue ?
                new ObjectParameter("ZaribB", zaribB) :
                new ObjectParameter("ZaribB", typeof(double));
    
            var zaribKParameter = zaribK.HasValue ?
                new ObjectParameter("ZaribK", zaribK) :
                new ObjectParameter("ZaribK", typeof(double));
    
            var codeParameter = code.HasValue ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var factorSumPricesParameter = factorSumPrices.HasValue ?
                new ObjectParameter("FactorSumPrices", factorSumPrices) :
                new ObjectParameter("FactorSumPrices", typeof(double));
    
            var factorTakhParameter = factorTakh.HasValue ?
                new ObjectParameter("FactorTakh", factorTakh) :
                new ObjectParameter("FactorTakh", typeof(double));
    
            var factorTaxParameter = factorTax.HasValue ?
                new ObjectParameter("FactorTax", factorTax) :
                new ObjectParameter("FactorTax", typeof(double));
    
            var factorDutiyParameter = factorDutiy.HasValue ?
                new ObjectParameter("FactorDutiy", factorDutiy) :
                new ObjectParameter("FactorDutiy", typeof(double));
    
            var delParameter = del.HasValue ?
                new ObjectParameter("Del", del) :
                new ObjectParameter("Del", typeof(bool));
    
            var lockParameter = @lock.HasValue ?
                new ObjectParameter("Lock", @lock) :
                new ObjectParameter("Lock", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Therapies_Insert", reasonIDParameter, departmentIDParameter, doctorIDParameter, assistantIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, bodyIDParameter, iDParameter, nameParameter, insuranceIDParameter, serviceTimeParameter, servicePriceParameter, patientPriceParameter, doctorPriceParameter, assistantPriceParameter, insurancePriceParameter, marginPriceParameter, yaranehPriceParameter, mokamelPriceParameter, takhParameter, bedParameter, zaribJParameter, zaribDParameter, zaribBParameter, zaribKParameter, codeParameter, dscParameter, activeParameter, factorSumPricesParameter, factorTakhParameter, factorTaxParameter, factorDutiyParameter, delParameter, lockParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Therapies_Select_Result> sp_Therapies_Select(string name, Nullable<int> reasonID, Nullable<int> departmentID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> bodyID, Nullable<int> insuranceID, string dsc, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Therapies_Select_Result>("sp_Therapies_Select", nameParameter, reasonIDParameter, departmentIDParameter, doctorIDParameter, assistantIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, bodyIDParameter, insuranceIDParameter, dscParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_Therapies_SelectRow_Result> sp_Therapies_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Therapies_SelectRow_Result>("sp_Therapies_SelectRow", iDParameter);
        }
    
        public virtual int sp_Therapies_Update(Nullable<int> reasonID, Nullable<int> departmentID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<int> therapyCategoryID, Nullable<int> therapySubCategoryID, Nullable<int> bodyID, Nullable<int> iD, string name, Nullable<int> insuranceID, Nullable<int> serviceTime, Nullable<double> servicePrice, Nullable<double> patientPrice, Nullable<double> doctorPrice, Nullable<double> assistantPrice, Nullable<double> insurancePrice, Nullable<double> marginPrice, Nullable<double> yaranehPrice, Nullable<double> mokamelPrice, Nullable<double> takh, Nullable<double> bed, Nullable<double> zaribJ, Nullable<double> zaribD, Nullable<double> zaribB, Nullable<double> zaribK, Nullable<int> code, string dsc, Nullable<bool> active, Nullable<double> factorSumPrices, Nullable<double> factorTakh, Nullable<double> factorTax, Nullable<double> factorDutiy, Nullable<bool> del, Nullable<bool> @lock, Nullable<int> userid)
        {
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var therapySubCategoryIDParameter = therapySubCategoryID.HasValue ?
                new ObjectParameter("TherapySubCategoryID", therapySubCategoryID) :
                new ObjectParameter("TherapySubCategoryID", typeof(int));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(int));
    
            var serviceTimeParameter = serviceTime.HasValue ?
                new ObjectParameter("ServiceTime", serviceTime) :
                new ObjectParameter("ServiceTime", typeof(int));
    
            var servicePriceParameter = servicePrice.HasValue ?
                new ObjectParameter("ServicePrice", servicePrice) :
                new ObjectParameter("ServicePrice", typeof(double));
    
            var patientPriceParameter = patientPrice.HasValue ?
                new ObjectParameter("PatientPrice", patientPrice) :
                new ObjectParameter("PatientPrice", typeof(double));
    
            var doctorPriceParameter = doctorPrice.HasValue ?
                new ObjectParameter("DoctorPrice", doctorPrice) :
                new ObjectParameter("DoctorPrice", typeof(double));
    
            var assistantPriceParameter = assistantPrice.HasValue ?
                new ObjectParameter("AssistantPrice", assistantPrice) :
                new ObjectParameter("AssistantPrice", typeof(double));
    
            var insurancePriceParameter = insurancePrice.HasValue ?
                new ObjectParameter("InsurancePrice", insurancePrice) :
                new ObjectParameter("InsurancePrice", typeof(double));
    
            var marginPriceParameter = marginPrice.HasValue ?
                new ObjectParameter("MarginPrice", marginPrice) :
                new ObjectParameter("MarginPrice", typeof(double));
    
            var yaranehPriceParameter = yaranehPrice.HasValue ?
                new ObjectParameter("YaranehPrice", yaranehPrice) :
                new ObjectParameter("YaranehPrice", typeof(double));
    
            var mokamelPriceParameter = mokamelPrice.HasValue ?
                new ObjectParameter("MokamelPrice", mokamelPrice) :
                new ObjectParameter("MokamelPrice", typeof(double));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var zaribJParameter = zaribJ.HasValue ?
                new ObjectParameter("ZaribJ", zaribJ) :
                new ObjectParameter("ZaribJ", typeof(double));
    
            var zaribDParameter = zaribD.HasValue ?
                new ObjectParameter("ZaribD", zaribD) :
                new ObjectParameter("ZaribD", typeof(double));
    
            var zaribBParameter = zaribB.HasValue ?
                new ObjectParameter("ZaribB", zaribB) :
                new ObjectParameter("ZaribB", typeof(double));
    
            var zaribKParameter = zaribK.HasValue ?
                new ObjectParameter("ZaribK", zaribK) :
                new ObjectParameter("ZaribK", typeof(double));
    
            var codeParameter = code.HasValue ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var factorSumPricesParameter = factorSumPrices.HasValue ?
                new ObjectParameter("FactorSumPrices", factorSumPrices) :
                new ObjectParameter("FactorSumPrices", typeof(double));
    
            var factorTakhParameter = factorTakh.HasValue ?
                new ObjectParameter("FactorTakh", factorTakh) :
                new ObjectParameter("FactorTakh", typeof(double));
    
            var factorTaxParameter = factorTax.HasValue ?
                new ObjectParameter("FactorTax", factorTax) :
                new ObjectParameter("FactorTax", typeof(double));
    
            var factorDutiyParameter = factorDutiy.HasValue ?
                new ObjectParameter("FactorDutiy", factorDutiy) :
                new ObjectParameter("FactorDutiy", typeof(double));
    
            var delParameter = del.HasValue ?
                new ObjectParameter("Del", del) :
                new ObjectParameter("Del", typeof(bool));
    
            var lockParameter = @lock.HasValue ?
                new ObjectParameter("Lock", @lock) :
                new ObjectParameter("Lock", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Therapies_Update", reasonIDParameter, departmentIDParameter, doctorIDParameter, assistantIDParameter, therapyCategoryIDParameter, therapySubCategoryIDParameter, bodyIDParameter, iDParameter, nameParameter, insuranceIDParameter, serviceTimeParameter, servicePriceParameter, patientPriceParameter, doctorPriceParameter, assistantPriceParameter, insurancePriceParameter, marginPriceParameter, yaranehPriceParameter, mokamelPriceParameter, takhParameter, bedParameter, zaribJParameter, zaribDParameter, zaribBParameter, zaribKParameter, codeParameter, dscParameter, activeParameter, factorSumPricesParameter, factorTakhParameter, factorTaxParameter, factorDutiyParameter, delParameter, lockParameter, useridParameter);
        }
    
        public virtual int sp_Therapies_UpdatePrices(Nullable<int> th_ID)
        {
            var th_IDParameter = th_ID.HasValue ?
                new ObjectParameter("Th_ID", th_ID) :
                new ObjectParameter("Th_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Therapies_UpdatePrices", th_IDParameter);
        }
    
        public virtual int sp_TherapyCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TherapyCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_TherapyCategories_Insert(Nullable<int> departmentID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TherapyCategories_Insert", departmentIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_TherapyCategories_Select_Result> sp_TherapyCategories_Select(Nullable<int> departmentID, string name, Nullable<int> active)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TherapyCategories_Select_Result>("sp_TherapyCategories_Select", departmentIDParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_TherapyCategories_Update(Nullable<int> departmentID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TherapyCategories_Update", departmentIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_TherapyItems_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TherapyItems_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_TherapyItems_Insert(Nullable<short> rowID, Nullable<int> therapyID, Nullable<bool> autoSelect, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemID, Nullable<byte> countingUnitID, Nullable<double> numberOut, Nullable<double> price, Nullable<double> total, Nullable<double> takh, Nullable<double> tax, Nullable<double> dutiy, string dsc, Nullable<int> userid)
        {
            var rowIDParameter = rowID.HasValue ?
                new ObjectParameter("RowID", rowID) :
                new ObjectParameter("RowID", typeof(short));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var autoSelectParameter = autoSelect.HasValue ?
                new ObjectParameter("AutoSelect", autoSelect) :
                new ObjectParameter("AutoSelect", typeof(bool));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var numberOutParameter = numberOut.HasValue ?
                new ObjectParameter("NumberOut", numberOut) :
                new ObjectParameter("NumberOut", typeof(double));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(double));
    
            var dutiyParameter = dutiy.HasValue ?
                new ObjectParameter("Dutiy", dutiy) :
                new ObjectParameter("Dutiy", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TherapyItems_Insert", rowIDParameter, therapyIDParameter, autoSelectParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemIDParameter, countingUnitIDParameter, numberOutParameter, priceParameter, totalParameter, takhParameter, taxParameter, dutiyParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_TherapyItems_Select_Result> sp_TherapyItems_Select(Nullable<int> therapyID, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemID)
        {
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TherapyItems_Select_Result>("sp_TherapyItems_Select", therapyIDParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemIDParameter);
        }
    
        public virtual ObjectResult<sp_TherapyItems_SelectRow_Result> sp_TherapyItems_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TherapyItems_SelectRow_Result>("sp_TherapyItems_SelectRow", iDParameter);
        }
    
        public virtual int sp_TherapyItems_Update(Nullable<int> iD, Nullable<short> rowID, Nullable<int> therapyID, Nullable<bool> autoSelect, Nullable<short> itemCategoryID, Nullable<int> itemSubCategoryID, Nullable<int> itemID, Nullable<byte> countingUnitID, Nullable<double> numberOut, Nullable<double> price, Nullable<double> total, Nullable<double> takh, Nullable<double> tax, Nullable<double> dutiy, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var rowIDParameter = rowID.HasValue ?
                new ObjectParameter("RowID", rowID) :
                new ObjectParameter("RowID", typeof(short));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var autoSelectParameter = autoSelect.HasValue ?
                new ObjectParameter("AutoSelect", autoSelect) :
                new ObjectParameter("AutoSelect", typeof(bool));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(short));
    
            var itemSubCategoryIDParameter = itemSubCategoryID.HasValue ?
                new ObjectParameter("ItemSubCategoryID", itemSubCategoryID) :
                new ObjectParameter("ItemSubCategoryID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var countingUnitIDParameter = countingUnitID.HasValue ?
                new ObjectParameter("CountingUnitID", countingUnitID) :
                new ObjectParameter("CountingUnitID", typeof(byte));
    
            var numberOutParameter = numberOut.HasValue ?
                new ObjectParameter("NumberOut", numberOut) :
                new ObjectParameter("NumberOut", typeof(double));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(double));
    
            var dutiyParameter = dutiy.HasValue ?
                new ObjectParameter("Dutiy", dutiy) :
                new ObjectParameter("Dutiy", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TherapyItems_Update", iDParameter, rowIDParameter, therapyIDParameter, autoSelectParameter, itemCategoryIDParameter, itemSubCategoryIDParameter, itemIDParameter, countingUnitIDParameter, numberOutParameter, priceParameter, totalParameter, takhParameter, taxParameter, dutiyParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_TherapyServices_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TherapyServices_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_TherapyServices_Insert(Nullable<int> iD, Nullable<int> therapyID, Nullable<bool> autoSelect, Nullable<byte> rowID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> serviceCode, Nullable<double> numb, Nullable<short> serviceTime_P, Nullable<double> servicePrice_P, Nullable<double> patientPrice_P, Nullable<double> doctorPrice_P, Nullable<double> assistantPrice_P, Nullable<double> insurancePrice_P, Nullable<double> marginPrice_P, Nullable<double> yaranehPrice_P, Nullable<double> mokamelPrice_P, Nullable<double> takh_P, Nullable<double> bed_P, Nullable<double> zaribJ_P, Nullable<double> zaribD_P, Nullable<double> zaribB_P, Nullable<double> zaribK_P, Nullable<short> serviceTime, Nullable<double> servicePrice, Nullable<double> patientPrice, Nullable<double> doctorPrice, Nullable<double> assistantPrice, Nullable<double> insurancePrice, Nullable<double> marginPrice, Nullable<double> yaranehPrice, Nullable<double> mokamelPrice, Nullable<double> takh, Nullable<double> bed, Nullable<double> zaribJ, Nullable<double> zaribD, Nullable<double> zaribB, Nullable<double> zaribK, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var autoSelectParameter = autoSelect.HasValue ?
                new ObjectParameter("AutoSelect", autoSelect) :
                new ObjectParameter("AutoSelect", typeof(bool));
    
            var rowIDParameter = rowID.HasValue ?
                new ObjectParameter("RowID", rowID) :
                new ObjectParameter("RowID", typeof(byte));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var serviceCodeParameter = serviceCode.HasValue ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(int));
    
            var numbParameter = numb.HasValue ?
                new ObjectParameter("Numb", numb) :
                new ObjectParameter("Numb", typeof(double));
    
            var serviceTime_PParameter = serviceTime_P.HasValue ?
                new ObjectParameter("ServiceTime_P", serviceTime_P) :
                new ObjectParameter("ServiceTime_P", typeof(short));
    
            var servicePrice_PParameter = servicePrice_P.HasValue ?
                new ObjectParameter("ServicePrice_P", servicePrice_P) :
                new ObjectParameter("ServicePrice_P", typeof(double));
    
            var patientPrice_PParameter = patientPrice_P.HasValue ?
                new ObjectParameter("PatientPrice_P", patientPrice_P) :
                new ObjectParameter("PatientPrice_P", typeof(double));
    
            var doctorPrice_PParameter = doctorPrice_P.HasValue ?
                new ObjectParameter("DoctorPrice_P", doctorPrice_P) :
                new ObjectParameter("DoctorPrice_P", typeof(double));
    
            var assistantPrice_PParameter = assistantPrice_P.HasValue ?
                new ObjectParameter("AssistantPrice_P", assistantPrice_P) :
                new ObjectParameter("AssistantPrice_P", typeof(double));
    
            var insurancePrice_PParameter = insurancePrice_P.HasValue ?
                new ObjectParameter("InsurancePrice_P", insurancePrice_P) :
                new ObjectParameter("InsurancePrice_P", typeof(double));
    
            var marginPrice_PParameter = marginPrice_P.HasValue ?
                new ObjectParameter("MarginPrice_P", marginPrice_P) :
                new ObjectParameter("MarginPrice_P", typeof(double));
    
            var yaranehPrice_PParameter = yaranehPrice_P.HasValue ?
                new ObjectParameter("YaranehPrice_P", yaranehPrice_P) :
                new ObjectParameter("YaranehPrice_P", typeof(double));
    
            var mokamelPrice_PParameter = mokamelPrice_P.HasValue ?
                new ObjectParameter("MokamelPrice_P", mokamelPrice_P) :
                new ObjectParameter("MokamelPrice_P", typeof(double));
    
            var takh_PParameter = takh_P.HasValue ?
                new ObjectParameter("Takh_P", takh_P) :
                new ObjectParameter("Takh_P", typeof(double));
    
            var bed_PParameter = bed_P.HasValue ?
                new ObjectParameter("Bed_P", bed_P) :
                new ObjectParameter("Bed_P", typeof(double));
    
            var zaribJ_PParameter = zaribJ_P.HasValue ?
                new ObjectParameter("ZaribJ_P", zaribJ_P) :
                new ObjectParameter("ZaribJ_P", typeof(double));
    
            var zaribD_PParameter = zaribD_P.HasValue ?
                new ObjectParameter("ZaribD_P", zaribD_P) :
                new ObjectParameter("ZaribD_P", typeof(double));
    
            var zaribB_PParameter = zaribB_P.HasValue ?
                new ObjectParameter("ZaribB_P", zaribB_P) :
                new ObjectParameter("ZaribB_P", typeof(double));
    
            var zaribK_PParameter = zaribK_P.HasValue ?
                new ObjectParameter("ZaribK_P", zaribK_P) :
                new ObjectParameter("ZaribK_P", typeof(double));
    
            var serviceTimeParameter = serviceTime.HasValue ?
                new ObjectParameter("ServiceTime", serviceTime) :
                new ObjectParameter("ServiceTime", typeof(short));
    
            var servicePriceParameter = servicePrice.HasValue ?
                new ObjectParameter("ServicePrice", servicePrice) :
                new ObjectParameter("ServicePrice", typeof(double));
    
            var patientPriceParameter = patientPrice.HasValue ?
                new ObjectParameter("PatientPrice", patientPrice) :
                new ObjectParameter("PatientPrice", typeof(double));
    
            var doctorPriceParameter = doctorPrice.HasValue ?
                new ObjectParameter("DoctorPrice", doctorPrice) :
                new ObjectParameter("DoctorPrice", typeof(double));
    
            var assistantPriceParameter = assistantPrice.HasValue ?
                new ObjectParameter("AssistantPrice", assistantPrice) :
                new ObjectParameter("AssistantPrice", typeof(double));
    
            var insurancePriceParameter = insurancePrice.HasValue ?
                new ObjectParameter("InsurancePrice", insurancePrice) :
                new ObjectParameter("InsurancePrice", typeof(double));
    
            var marginPriceParameter = marginPrice.HasValue ?
                new ObjectParameter("MarginPrice", marginPrice) :
                new ObjectParameter("MarginPrice", typeof(double));
    
            var yaranehPriceParameter = yaranehPrice.HasValue ?
                new ObjectParameter("YaranehPrice", yaranehPrice) :
                new ObjectParameter("YaranehPrice", typeof(double));
    
            var mokamelPriceParameter = mokamelPrice.HasValue ?
                new ObjectParameter("MokamelPrice", mokamelPrice) :
                new ObjectParameter("MokamelPrice", typeof(double));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var zaribJParameter = zaribJ.HasValue ?
                new ObjectParameter("ZaribJ", zaribJ) :
                new ObjectParameter("ZaribJ", typeof(double));
    
            var zaribDParameter = zaribD.HasValue ?
                new ObjectParameter("ZaribD", zaribD) :
                new ObjectParameter("ZaribD", typeof(double));
    
            var zaribBParameter = zaribB.HasValue ?
                new ObjectParameter("ZaribB", zaribB) :
                new ObjectParameter("ZaribB", typeof(double));
    
            var zaribKParameter = zaribK.HasValue ?
                new ObjectParameter("ZaribK", zaribK) :
                new ObjectParameter("ZaribK", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TherapyServices_Insert", iDParameter, therapyIDParameter, autoSelectParameter, rowIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, serviceCodeParameter, numbParameter, serviceTime_PParameter, servicePrice_PParameter, patientPrice_PParameter, doctorPrice_PParameter, assistantPrice_PParameter, insurancePrice_PParameter, marginPrice_PParameter, yaranehPrice_PParameter, mokamelPrice_PParameter, takh_PParameter, bed_PParameter, zaribJ_PParameter, zaribD_PParameter, zaribB_PParameter, zaribK_PParameter, serviceTimeParameter, servicePriceParameter, patientPriceParameter, doctorPriceParameter, assistantPriceParameter, insurancePriceParameter, marginPriceParameter, yaranehPriceParameter, mokamelPriceParameter, takhParameter, bedParameter, zaribJParameter, zaribDParameter, zaribBParameter, zaribKParameter, dscParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_TherapyServices_Select_Result> sp_TherapyServices_Select(Nullable<int> therapyID, Nullable<int> medicalServiceID)
        {
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TherapyServices_Select_Result>("sp_TherapyServices_Select", therapyIDParameter, medicalServiceIDParameter);
        }
    
        public virtual ObjectResult<sp_TherapyServices_SelectRow_Result> sp_TherapyServices_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TherapyServices_SelectRow_Result>("sp_TherapyServices_SelectRow", iDParameter);
        }
    
        public virtual int sp_TherapyServices_Update(Nullable<int> iD, Nullable<int> therapyID, Nullable<bool> autoSelect, Nullable<byte> rowID, Nullable<int> serviceCategoryID, Nullable<int> serviceSubCategoryID, Nullable<int> medicalServiceID, Nullable<int> serviceCode, Nullable<double> numb, Nullable<short> serviceTime_P, Nullable<double> servicePrice_P, Nullable<double> patientPrice_P, Nullable<double> doctorPrice_P, Nullable<double> assistantPrice_P, Nullable<double> insurancePrice_P, Nullable<double> marginPrice_P, Nullable<double> yaranehPrice_P, Nullable<double> mokamelPrice_P, Nullable<double> takh_P, Nullable<double> bed_P, Nullable<double> zaribJ_P, Nullable<double> zaribD_P, Nullable<double> zaribB_P, Nullable<double> zaribK_P, Nullable<short> serviceTime, Nullable<double> servicePrice, Nullable<double> patientPrice, Nullable<double> doctorPrice, Nullable<double> assistantPrice, Nullable<double> insurancePrice, Nullable<double> marginPrice, Nullable<double> yaranehPrice, Nullable<double> mokamelPrice, Nullable<double> takh, Nullable<double> bed, Nullable<double> zaribJ, Nullable<double> zaribD, Nullable<double> zaribB, Nullable<double> zaribK, string dsc, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var autoSelectParameter = autoSelect.HasValue ?
                new ObjectParameter("AutoSelect", autoSelect) :
                new ObjectParameter("AutoSelect", typeof(bool));
    
            var rowIDParameter = rowID.HasValue ?
                new ObjectParameter("RowID", rowID) :
                new ObjectParameter("RowID", typeof(byte));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceSubCategoryIDParameter = serviceSubCategoryID.HasValue ?
                new ObjectParameter("ServiceSubCategoryID", serviceSubCategoryID) :
                new ObjectParameter("ServiceSubCategoryID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var serviceCodeParameter = serviceCode.HasValue ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(int));
    
            var numbParameter = numb.HasValue ?
                new ObjectParameter("Numb", numb) :
                new ObjectParameter("Numb", typeof(double));
    
            var serviceTime_PParameter = serviceTime_P.HasValue ?
                new ObjectParameter("ServiceTime_P", serviceTime_P) :
                new ObjectParameter("ServiceTime_P", typeof(short));
    
            var servicePrice_PParameter = servicePrice_P.HasValue ?
                new ObjectParameter("ServicePrice_P", servicePrice_P) :
                new ObjectParameter("ServicePrice_P", typeof(double));
    
            var patientPrice_PParameter = patientPrice_P.HasValue ?
                new ObjectParameter("PatientPrice_P", patientPrice_P) :
                new ObjectParameter("PatientPrice_P", typeof(double));
    
            var doctorPrice_PParameter = doctorPrice_P.HasValue ?
                new ObjectParameter("DoctorPrice_P", doctorPrice_P) :
                new ObjectParameter("DoctorPrice_P", typeof(double));
    
            var assistantPrice_PParameter = assistantPrice_P.HasValue ?
                new ObjectParameter("AssistantPrice_P", assistantPrice_P) :
                new ObjectParameter("AssistantPrice_P", typeof(double));
    
            var insurancePrice_PParameter = insurancePrice_P.HasValue ?
                new ObjectParameter("InsurancePrice_P", insurancePrice_P) :
                new ObjectParameter("InsurancePrice_P", typeof(double));
    
            var marginPrice_PParameter = marginPrice_P.HasValue ?
                new ObjectParameter("MarginPrice_P", marginPrice_P) :
                new ObjectParameter("MarginPrice_P", typeof(double));
    
            var yaranehPrice_PParameter = yaranehPrice_P.HasValue ?
                new ObjectParameter("YaranehPrice_P", yaranehPrice_P) :
                new ObjectParameter("YaranehPrice_P", typeof(double));
    
            var mokamelPrice_PParameter = mokamelPrice_P.HasValue ?
                new ObjectParameter("MokamelPrice_P", mokamelPrice_P) :
                new ObjectParameter("MokamelPrice_P", typeof(double));
    
            var takh_PParameter = takh_P.HasValue ?
                new ObjectParameter("Takh_P", takh_P) :
                new ObjectParameter("Takh_P", typeof(double));
    
            var bed_PParameter = bed_P.HasValue ?
                new ObjectParameter("Bed_P", bed_P) :
                new ObjectParameter("Bed_P", typeof(double));
    
            var zaribJ_PParameter = zaribJ_P.HasValue ?
                new ObjectParameter("ZaribJ_P", zaribJ_P) :
                new ObjectParameter("ZaribJ_P", typeof(double));
    
            var zaribD_PParameter = zaribD_P.HasValue ?
                new ObjectParameter("ZaribD_P", zaribD_P) :
                new ObjectParameter("ZaribD_P", typeof(double));
    
            var zaribB_PParameter = zaribB_P.HasValue ?
                new ObjectParameter("ZaribB_P", zaribB_P) :
                new ObjectParameter("ZaribB_P", typeof(double));
    
            var zaribK_PParameter = zaribK_P.HasValue ?
                new ObjectParameter("ZaribK_P", zaribK_P) :
                new ObjectParameter("ZaribK_P", typeof(double));
    
            var serviceTimeParameter = serviceTime.HasValue ?
                new ObjectParameter("ServiceTime", serviceTime) :
                new ObjectParameter("ServiceTime", typeof(short));
    
            var servicePriceParameter = servicePrice.HasValue ?
                new ObjectParameter("ServicePrice", servicePrice) :
                new ObjectParameter("ServicePrice", typeof(double));
    
            var patientPriceParameter = patientPrice.HasValue ?
                new ObjectParameter("PatientPrice", patientPrice) :
                new ObjectParameter("PatientPrice", typeof(double));
    
            var doctorPriceParameter = doctorPrice.HasValue ?
                new ObjectParameter("DoctorPrice", doctorPrice) :
                new ObjectParameter("DoctorPrice", typeof(double));
    
            var assistantPriceParameter = assistantPrice.HasValue ?
                new ObjectParameter("AssistantPrice", assistantPrice) :
                new ObjectParameter("AssistantPrice", typeof(double));
    
            var insurancePriceParameter = insurancePrice.HasValue ?
                new ObjectParameter("InsurancePrice", insurancePrice) :
                new ObjectParameter("InsurancePrice", typeof(double));
    
            var marginPriceParameter = marginPrice.HasValue ?
                new ObjectParameter("MarginPrice", marginPrice) :
                new ObjectParameter("MarginPrice", typeof(double));
    
            var yaranehPriceParameter = yaranehPrice.HasValue ?
                new ObjectParameter("YaranehPrice", yaranehPrice) :
                new ObjectParameter("YaranehPrice", typeof(double));
    
            var mokamelPriceParameter = mokamelPrice.HasValue ?
                new ObjectParameter("MokamelPrice", mokamelPrice) :
                new ObjectParameter("MokamelPrice", typeof(double));
    
            var takhParameter = takh.HasValue ?
                new ObjectParameter("Takh", takh) :
                new ObjectParameter("Takh", typeof(double));
    
            var bedParameter = bed.HasValue ?
                new ObjectParameter("Bed", bed) :
                new ObjectParameter("Bed", typeof(double));
    
            var zaribJParameter = zaribJ.HasValue ?
                new ObjectParameter("ZaribJ", zaribJ) :
                new ObjectParameter("ZaribJ", typeof(double));
    
            var zaribDParameter = zaribD.HasValue ?
                new ObjectParameter("ZaribD", zaribD) :
                new ObjectParameter("ZaribD", typeof(double));
    
            var zaribBParameter = zaribB.HasValue ?
                new ObjectParameter("ZaribB", zaribB) :
                new ObjectParameter("ZaribB", typeof(double));
    
            var zaribKParameter = zaribK.HasValue ?
                new ObjectParameter("ZaribK", zaribK) :
                new ObjectParameter("ZaribK", typeof(double));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TherapyServices_Update", iDParameter, therapyIDParameter, autoSelectParameter, rowIDParameter, serviceCategoryIDParameter, serviceSubCategoryIDParameter, medicalServiceIDParameter, serviceCodeParameter, numbParameter, serviceTime_PParameter, servicePrice_PParameter, patientPrice_PParameter, doctorPrice_PParameter, assistantPrice_PParameter, insurancePrice_PParameter, marginPrice_PParameter, yaranehPrice_PParameter, mokamelPrice_PParameter, takh_PParameter, bed_PParameter, zaribJ_PParameter, zaribD_PParameter, zaribB_PParameter, zaribK_PParameter, serviceTimeParameter, servicePriceParameter, patientPriceParameter, doctorPriceParameter, assistantPriceParameter, insurancePriceParameter, marginPriceParameter, yaranehPriceParameter, mokamelPriceParameter, takhParameter, bedParameter, zaribJParameter, zaribDParameter, zaribBParameter, zaribKParameter, dscParameter, useridParameter);
        }
    
        public virtual int sp_TherapySubCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TherapySubCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_TherapySubCategories_Insert(Nullable<int> departmentID, Nullable<int> therapyCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TherapySubCategories_Insert", departmentIDParameter, therapyCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_TherapySubCategories_Select_Result> sp_TherapySubCategories_Select(Nullable<int> departmentID, Nullable<int> therapyCategoryID, string name, Nullable<int> active)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TherapySubCategories_Select_Result>("sp_TherapySubCategories_Select", departmentIDParameter, therapyCategoryIDParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_TherapySubCategories_Update(Nullable<int> iD, Nullable<int> departmentID, Nullable<int> therapyCategoryID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var therapyCategoryIDParameter = therapyCategoryID.HasValue ?
                new ObjectParameter("TherapyCategoryID", therapyCategoryID) :
                new ObjectParameter("TherapyCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TherapySubCategories_Update", iDParameter, departmentIDParameter, therapyCategoryIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_trans_del(Nullable<int> id, Nullable<bool> delall)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var delallParameter = delall.HasValue ?
                new ObjectParameter("delall", delall) :
                new ObjectParameter("delall", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_trans_del", idParameter, delallParameter);
        }
    
        public virtual int sp_trans_ins(Nullable<int> userid, string objectName, Nullable<int> rowid, string actname)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var objectNameParameter = objectName != null ?
                new ObjectParameter("ObjectName", objectName) :
                new ObjectParameter("ObjectName", typeof(string));
    
            var rowidParameter = rowid.HasValue ?
                new ObjectParameter("rowid", rowid) :
                new ObjectParameter("rowid", typeof(int));
    
            var actnameParameter = actname != null ?
                new ObjectParameter("actname", actname) :
                new ObjectParameter("actname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_trans_ins", useridParameter, objectNameParameter, rowidParameter, actnameParameter);
        }
    
        public virtual ObjectResult<sp_trans_sel_Result> sp_trans_sel(string date_start, string date_end, string time_start, string time_end, Nullable<int> userid, Nullable<short> stationid, Nullable<byte> actid, Nullable<int> objectid, Nullable<int> rowid, Nullable<int> topRange)
        {
            var date_startParameter = date_start != null ?
                new ObjectParameter("date_start", date_start) :
                new ObjectParameter("date_start", typeof(string));
    
            var date_endParameter = date_end != null ?
                new ObjectParameter("date_end", date_end) :
                new ObjectParameter("date_end", typeof(string));
    
            var time_startParameter = time_start != null ?
                new ObjectParameter("time_start", time_start) :
                new ObjectParameter("time_start", typeof(string));
    
            var time_endParameter = time_end != null ?
                new ObjectParameter("time_end", time_end) :
                new ObjectParameter("time_end", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var stationidParameter = stationid.HasValue ?
                new ObjectParameter("stationid", stationid) :
                new ObjectParameter("stationid", typeof(short));
    
            var actidParameter = actid.HasValue ?
                new ObjectParameter("actid", actid) :
                new ObjectParameter("actid", typeof(byte));
    
            var objectidParameter = objectid.HasValue ?
                new ObjectParameter("objectid", objectid) :
                new ObjectParameter("objectid", typeof(int));
    
            var rowidParameter = rowid.HasValue ?
                new ObjectParameter("rowid", rowid) :
                new ObjectParameter("rowid", typeof(int));
    
            var topRangeParameter = topRange.HasValue ?
                new ObjectParameter("TopRange", topRange) :
                new ObjectParameter("TopRange", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_trans_sel_Result>("sp_trans_sel", date_startParameter, date_endParameter, time_startParameter, time_endParameter, useridParameter, stationidParameter, actidParameter, objectidParameter, rowidParameter, topRangeParameter);
        }
    
        public virtual int Sp_UniqueValueCheck(string tableName, string fieldName, string fieldValue)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var fieldValueParameter = fieldValue != null ?
                new ObjectParameter("FieldValue", fieldValue) :
                new ObjectParameter("FieldValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_UniqueValueCheck", tableNameParameter, fieldNameParameter, fieldValueParameter);
        }
    
        public virtual int sp_users_delete(Nullable<int> id, Nullable<int> userid)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_users_delete", idParameter, useridParameter);
        }
    
        public virtual int sp_users_insert(Nullable<int> iD, Nullable<int> rolid, Nullable<byte> usertypeid, Nullable<int> employeeID, string username, string loginname, string pwd, string dsc, string appValid, Nullable<bool> active, Nullable<int> imageID, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("rolid", rolid) :
                new ObjectParameter("rolid", typeof(int));
    
            var usertypeidParameter = usertypeid.HasValue ?
                new ObjectParameter("usertypeid", usertypeid) :
                new ObjectParameter("usertypeid", typeof(byte));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var loginnameParameter = loginname != null ?
                new ObjectParameter("loginname", loginname) :
                new ObjectParameter("loginname", typeof(string));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("pwd", pwd) :
                new ObjectParameter("pwd", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("dsc", dsc) :
                new ObjectParameter("dsc", typeof(string));
    
            var appValidParameter = appValid != null ?
                new ObjectParameter("AppValid", appValid) :
                new ObjectParameter("AppValid", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_users_insert", iDParameter, rolidParameter, usertypeidParameter, employeeIDParameter, usernameParameter, loginnameParameter, pwdParameter, dscParameter, appValidParameter, activeParameter, imageIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_users_Select_Result> sp_users_Select(Nullable<int> rolid, Nullable<byte> usertypeid, string username, string loginname, Nullable<int> active)
        {
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("rolid", rolid) :
                new ObjectParameter("rolid", typeof(int));
    
            var usertypeidParameter = usertypeid.HasValue ?
                new ObjectParameter("usertypeid", usertypeid) :
                new ObjectParameter("usertypeid", typeof(byte));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var loginnameParameter = loginname != null ?
                new ObjectParameter("loginname", loginname) :
                new ObjectParameter("loginname", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_users_Select_Result>("sp_users_Select", rolidParameter, usertypeidParameter, usernameParameter, loginnameParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_users_SelectRow_Result> sp_users_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_users_SelectRow_Result>("sp_users_SelectRow", iDParameter);
        }
    
        public virtual int sp_users_update(Nullable<int> id, Nullable<int> rolid, Nullable<byte> usertypeid, Nullable<int> employeeID, string username, string loginname, string dsc, string accvalid, string appValid, Nullable<bool> active, Nullable<int> imageID, Nullable<int> userid)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var rolidParameter = rolid.HasValue ?
                new ObjectParameter("rolid", rolid) :
                new ObjectParameter("rolid", typeof(int));
    
            var usertypeidParameter = usertypeid.HasValue ?
                new ObjectParameter("usertypeid", usertypeid) :
                new ObjectParameter("usertypeid", typeof(byte));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var loginnameParameter = loginname != null ?
                new ObjectParameter("loginname", loginname) :
                new ObjectParameter("loginname", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("dsc", dsc) :
                new ObjectParameter("dsc", typeof(string));
    
            var accvalidParameter = accvalid != null ?
                new ObjectParameter("Accvalid", accvalid) :
                new ObjectParameter("Accvalid", typeof(string));
    
            var appValidParameter = appValid != null ?
                new ObjectParameter("AppValid", appValid) :
                new ObjectParameter("AppValid", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_users_update", idParameter, rolidParameter, usertypeidParameter, employeeIDParameter, usernameParameter, loginnameParameter, dscParameter, accvalidParameter, appValidParameter, activeParameter, imageIDParameter, useridParameter);
        }
    
        public virtual ObjectResult<Sp_UsersAndCRMStatesViewState_Select_Result> Sp_UsersAndCRMStatesViewState_Select(Nullable<int> cRMStateID)
        {
            var cRMStateIDParameter = cRMStateID.HasValue ?
                new ObjectParameter("CRMStateID", cRMStateID) :
                new ObjectParameter("CRMStateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_UsersAndCRMStatesViewState_Select_Result>("Sp_UsersAndCRMStatesViewState_Select", cRMStateIDParameter);
        }
    
        public virtual ObjectResult<Sp_UsersAndNoteViewState_Select_Result> Sp_UsersAndNoteViewState_Select(Nullable<int> noteID)
        {
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_UsersAndNoteViewState_Select_Result>("Sp_UsersAndNoteViewState_Select", noteIDParameter);
        }
    
        public virtual ObjectResult<Sp_UsersAndReminderState_Select_Result> Sp_UsersAndReminderState_Select(Nullable<int> noteID)
        {
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_UsersAndReminderState_Select_Result>("Sp_UsersAndReminderState_Select", noteIDParameter);
        }
    
        public virtual int Sp_UsersPermissions_Update(Nullable<int> iD, string validName, string accValid, string appValid, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var validNameParameter = validName != null ?
                new ObjectParameter("ValidName", validName) :
                new ObjectParameter("ValidName", typeof(string));
    
            var accValidParameter = accValid != null ?
                new ObjectParameter("AccValid", accValid) :
                new ObjectParameter("AccValid", typeof(string));
    
            var appValidParameter = appValid != null ?
                new ObjectParameter("AppValid", appValid) :
                new ObjectParameter("AppValid", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_UsersPermissions_Update", iDParameter, validNameParameter, accValidParameter, appValidParameter, useridParameter);
        }
    
        public virtual int sp_VisitCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VisitCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_VisitCategories_Insert(Nullable<int> departmentID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VisitCategories_Insert", departmentIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_VisitCategories_Select_Result> sp_VisitCategories_Select(Nullable<int> departmentID, string name, Nullable<int> active)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VisitCategories_Select_Result>("sp_VisitCategories_Select", departmentIDParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_VisitCategories_Update(Nullable<int> iD, Nullable<int> departmentID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VisitCategories_Update", iDParameter, departmentIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Visits_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Visits_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_Visits_Insert(Nullable<int> departmentID, Nullable<int> visitCategoryID, Nullable<int> visitSubCategoryID, Nullable<int> diagnosisID, Nullable<int> iD, string name, Nullable<int> bodyID, Nullable<int> doctorID, string dsc, Nullable<bool> active, Nullable<bool> autoSelect, Nullable<int> userid)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var visitCategoryIDParameter = visitCategoryID.HasValue ?
                new ObjectParameter("VisitCategoryID", visitCategoryID) :
                new ObjectParameter("VisitCategoryID", typeof(int));
    
            var visitSubCategoryIDParameter = visitSubCategoryID.HasValue ?
                new ObjectParameter("VisitSubCategoryID", visitSubCategoryID) :
                new ObjectParameter("VisitSubCategoryID", typeof(int));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var autoSelectParameter = autoSelect.HasValue ?
                new ObjectParameter("AutoSelect", autoSelect) :
                new ObjectParameter("AutoSelect", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Visits_Insert", departmentIDParameter, visitCategoryIDParameter, visitSubCategoryIDParameter, diagnosisIDParameter, iDParameter, nameParameter, bodyIDParameter, doctorIDParameter, dscParameter, activeParameter, autoSelectParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Visits_Select_Result> sp_Visits_Select(Nullable<int> departmentID, Nullable<int> visitCategoryID, Nullable<int> visitSubCategoryID, Nullable<int> diagnosisID, Nullable<int> bodyID, Nullable<int> doctorID, string name, string dsc, Nullable<int> active)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var visitCategoryIDParameter = visitCategoryID.HasValue ?
                new ObjectParameter("VisitCategoryID", visitCategoryID) :
                new ObjectParameter("VisitCategoryID", typeof(int));
    
            var visitSubCategoryIDParameter = visitSubCategoryID.HasValue ?
                new ObjectParameter("VisitSubCategoryID", visitSubCategoryID) :
                new ObjectParameter("VisitSubCategoryID", typeof(int));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(int));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Visits_Select_Result>("sp_Visits_Select", departmentIDParameter, visitCategoryIDParameter, visitSubCategoryIDParameter, diagnosisIDParameter, bodyIDParameter, doctorIDParameter, nameParameter, dscParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_Visits_SelectRow_Result> sp_Visits_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Visits_SelectRow_Result>("sp_Visits_SelectRow", iDParameter);
        }
    
        public virtual int sp_Visits_Update(Nullable<int> departmentID, Nullable<int> visitCategoryID, Nullable<int> visitSubCategoryID, Nullable<int> diagnosisID, Nullable<int> iD, string name, Nullable<int> bodyID, Nullable<int> doctorID, string dsc, Nullable<bool> active, Nullable<bool> autoSelect, Nullable<int> userid)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var visitCategoryIDParameter = visitCategoryID.HasValue ?
                new ObjectParameter("VisitCategoryID", visitCategoryID) :
                new ObjectParameter("VisitCategoryID", typeof(int));
    
            var visitSubCategoryIDParameter = visitSubCategoryID.HasValue ?
                new ObjectParameter("VisitSubCategoryID", visitSubCategoryID) :
                new ObjectParameter("VisitSubCategoryID", typeof(int));
    
            var diagnosisIDParameter = diagnosisID.HasValue ?
                new ObjectParameter("DiagnosisID", diagnosisID) :
                new ObjectParameter("DiagnosisID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var bodyIDParameter = bodyID.HasValue ?
                new ObjectParameter("BodyID", bodyID) :
                new ObjectParameter("BodyID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var autoSelectParameter = autoSelect.HasValue ?
                new ObjectParameter("AutoSelect", autoSelect) :
                new ObjectParameter("AutoSelect", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Visits_Update", departmentIDParameter, visitCategoryIDParameter, visitSubCategoryIDParameter, diagnosisIDParameter, iDParameter, nameParameter, bodyIDParameter, doctorIDParameter, dscParameter, activeParameter, autoSelectParameter, useridParameter);
        }
    
        public virtual int sp_VisitSubCategories_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VisitSubCategories_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_VisitSubCategories_Insert(Nullable<int> departmentID, Nullable<int> visitCategoryID, Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var visitCategoryIDParameter = visitCategoryID.HasValue ?
                new ObjectParameter("VisitCategoryID", visitCategoryID) :
                new ObjectParameter("VisitCategoryID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VisitSubCategories_Insert", departmentIDParameter, visitCategoryIDParameter, iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_VisitSubCategories_Select_Result> sp_VisitSubCategories_Select(Nullable<int> departmentID, Nullable<int> visitCategoryID, string name, Nullable<int> active)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var visitCategoryIDParameter = visitCategoryID.HasValue ?
                new ObjectParameter("VisitCategoryID", visitCategoryID) :
                new ObjectParameter("VisitCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VisitSubCategories_Select_Result>("sp_VisitSubCategories_Select", departmentIDParameter, visitCategoryIDParameter, nameParameter, activeParameter);
        }
    
        public virtual int sp_VisitSubCategories_Update(Nullable<int> iD, Nullable<int> departmentID, Nullable<int> visitCategoryID, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var visitCategoryIDParameter = visitCategoryID.HasValue ?
                new ObjectParameter("VisitCategoryID", visitCategoryID) :
                new ObjectParameter("VisitCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VisitSubCategories_Update", iDParameter, departmentIDParameter, visitCategoryIDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_WebSites_Select_Result> sp_WebSites_Select(Nullable<int> iD, Nullable<int> customerID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WebSites_Select_Result>("sp_WebSites_Select", iDParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<sp_WebSMSSetting_Select_Result> sp_WebSMSSetting_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WebSMSSetting_Select_Result>("sp_WebSMSSetting_Select");
        }
    
        public virtual int sp_WebSMSSetting_Update(string hostName, string proxyServer, string proxyPort, string proxyUserName, string proxyPassword, string userName, string password, string libKey, Nullable<bool> autoSendReminderSMS, string sMSNumberForReminder, string arefRayanehURL, string arefRayanehAccount, string arefRayanehPassword, string arefRayanehLibKey, Nullable<int> userid)
        {
            var hostNameParameter = hostName != null ?
                new ObjectParameter("HostName", hostName) :
                new ObjectParameter("HostName", typeof(string));
    
            var proxyServerParameter = proxyServer != null ?
                new ObjectParameter("ProxyServer", proxyServer) :
                new ObjectParameter("ProxyServer", typeof(string));
    
            var proxyPortParameter = proxyPort != null ?
                new ObjectParameter("ProxyPort", proxyPort) :
                new ObjectParameter("ProxyPort", typeof(string));
    
            var proxyUserNameParameter = proxyUserName != null ?
                new ObjectParameter("ProxyUserName", proxyUserName) :
                new ObjectParameter("ProxyUserName", typeof(string));
    
            var proxyPasswordParameter = proxyPassword != null ?
                new ObjectParameter("ProxyPassword", proxyPassword) :
                new ObjectParameter("ProxyPassword", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var libKeyParameter = libKey != null ?
                new ObjectParameter("LibKey", libKey) :
                new ObjectParameter("LibKey", typeof(string));
    
            var autoSendReminderSMSParameter = autoSendReminderSMS.HasValue ?
                new ObjectParameter("AutoSendReminderSMS", autoSendReminderSMS) :
                new ObjectParameter("AutoSendReminderSMS", typeof(bool));
    
            var sMSNumberForReminderParameter = sMSNumberForReminder != null ?
                new ObjectParameter("SMSNumberForReminder", sMSNumberForReminder) :
                new ObjectParameter("SMSNumberForReminder", typeof(string));
    
            var arefRayanehURLParameter = arefRayanehURL != null ?
                new ObjectParameter("ArefRayanehURL", arefRayanehURL) :
                new ObjectParameter("ArefRayanehURL", typeof(string));
    
            var arefRayanehAccountParameter = arefRayanehAccount != null ?
                new ObjectParameter("ArefRayanehAccount", arefRayanehAccount) :
                new ObjectParameter("ArefRayanehAccount", typeof(string));
    
            var arefRayanehPasswordParameter = arefRayanehPassword != null ?
                new ObjectParameter("ArefRayanehPassword", arefRayanehPassword) :
                new ObjectParameter("ArefRayanehPassword", typeof(string));
    
            var arefRayanehLibKeyParameter = arefRayanehLibKey != null ?
                new ObjectParameter("ArefRayanehLibKey", arefRayanehLibKey) :
                new ObjectParameter("ArefRayanehLibKey", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WebSMSSetting_Update", hostNameParameter, proxyServerParameter, proxyPortParameter, proxyUserNameParameter, proxyPasswordParameter, userNameParameter, passwordParameter, libKeyParameter, autoSendReminderSMSParameter, sMSNumberForReminderParameter, arefRayanehURLParameter, arefRayanehAccountParameter, arefRayanehPasswordParameter, arefRayanehLibKeyParameter, useridParameter);
        }
    
        public virtual int sp_WorkCalendar_Delete(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WorkCalendar_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_WorkCalendar_DeleteAll(string appointmentTime_Start, string appointmentTime_End, string besRegisterDate_Start, string besRegisterDate_End, Nullable<int> patientID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<short> insuranceID, Nullable<int> diseaseID, Nullable<short> departmentID, Nullable<int> therapyID, Nullable<int> medicalServiceID, string dsc, Nullable<short> workCalendarStateID, Nullable<int> paymentTypeID, string toDayDate, Nullable<byte> reserveState, Nullable<byte> isBes, Nullable<bool> done, Nullable<bool> delay, Nullable<bool> notCome, Nullable<int> shiftid, Nullable<int> cUserid, Nullable<int> userid)
        {
            var appointmentTime_StartParameter = appointmentTime_Start != null ?
                new ObjectParameter("AppointmentTime_Start", appointmentTime_Start) :
                new ObjectParameter("AppointmentTime_Start", typeof(string));
    
            var appointmentTime_EndParameter = appointmentTime_End != null ?
                new ObjectParameter("AppointmentTime_End", appointmentTime_End) :
                new ObjectParameter("AppointmentTime_End", typeof(string));
    
            var besRegisterDate_StartParameter = besRegisterDate_Start != null ?
                new ObjectParameter("BesRegisterDate_Start", besRegisterDate_Start) :
                new ObjectParameter("BesRegisterDate_Start", typeof(string));
    
            var besRegisterDate_EndParameter = besRegisterDate_End != null ?
                new ObjectParameter("BesRegisterDate_End", besRegisterDate_End) :
                new ObjectParameter("BesRegisterDate_End", typeof(string));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(short));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(short));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var workCalendarStateIDParameter = workCalendarStateID.HasValue ?
                new ObjectParameter("WorkCalendarStateID", workCalendarStateID) :
                new ObjectParameter("WorkCalendarStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var toDayDateParameter = toDayDate != null ?
                new ObjectParameter("ToDayDate", toDayDate) :
                new ObjectParameter("ToDayDate", typeof(string));
    
            var reserveStateParameter = reserveState.HasValue ?
                new ObjectParameter("ReserveState", reserveState) :
                new ObjectParameter("ReserveState", typeof(byte));
    
            var isBesParameter = isBes.HasValue ?
                new ObjectParameter("IsBes", isBes) :
                new ObjectParameter("IsBes", typeof(byte));
    
            var doneParameter = done.HasValue ?
                new ObjectParameter("Done", done) :
                new ObjectParameter("Done", typeof(bool));
    
            var delayParameter = delay.HasValue ?
                new ObjectParameter("Delay", delay) :
                new ObjectParameter("Delay", typeof(bool));
    
            var notComeParameter = notCome.HasValue ?
                new ObjectParameter("NotCome", notCome) :
                new ObjectParameter("NotCome", typeof(bool));
    
            var shiftidParameter = shiftid.HasValue ?
                new ObjectParameter("shiftid", shiftid) :
                new ObjectParameter("shiftid", typeof(int));
    
            var cUseridParameter = cUserid.HasValue ?
                new ObjectParameter("CUserid", cUserid) :
                new ObjectParameter("CUserid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WorkCalendar_DeleteAll", appointmentTime_StartParameter, appointmentTime_EndParameter, besRegisterDate_StartParameter, besRegisterDate_EndParameter, patientIDParameter, doctorIDParameter, assistantIDParameter, insuranceIDParameter, diseaseIDParameter, departmentIDParameter, therapyIDParameter, medicalServiceIDParameter, dscParameter, workCalendarStateIDParameter, paymentTypeIDParameter, toDayDateParameter, reserveStateParameter, isBesParameter, doneParameter, delayParameter, notComeParameter, shiftidParameter, cUseridParameter, useridParameter);
        }
    
        public virtual int sp_WorkCalendar_Insert(Nullable<int> iD, Nullable<int> patientID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<short> insuranceID, Nullable<int> diseaseID, Nullable<short> departmentID, Nullable<int> therapyID, Nullable<int> medicalServiceID, Nullable<double> numb, Nullable<System.DateTime> appointmentTime, Nullable<short> appointmentRate, Nullable<bool> delay, string comeTime, Nullable<bool> notCome, Nullable<bool> done, string dsc, Nullable<short> workCalendarStateID, Nullable<double> bes, Nullable<System.DateTime> besRegisterDate, Nullable<int> paymentTypeID, Nullable<int> shiftid, Nullable<bool> del, Nullable<bool> @lock, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(short));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(short));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var numbParameter = numb.HasValue ?
                new ObjectParameter("Numb", numb) :
                new ObjectParameter("Numb", typeof(double));
    
            var appointmentTimeParameter = appointmentTime.HasValue ?
                new ObjectParameter("AppointmentTime", appointmentTime) :
                new ObjectParameter("AppointmentTime", typeof(System.DateTime));
    
            var appointmentRateParameter = appointmentRate.HasValue ?
                new ObjectParameter("AppointmentRate", appointmentRate) :
                new ObjectParameter("AppointmentRate", typeof(short));
    
            var delayParameter = delay.HasValue ?
                new ObjectParameter("Delay", delay) :
                new ObjectParameter("Delay", typeof(bool));
    
            var comeTimeParameter = comeTime != null ?
                new ObjectParameter("ComeTime", comeTime) :
                new ObjectParameter("ComeTime", typeof(string));
    
            var notComeParameter = notCome.HasValue ?
                new ObjectParameter("NotCome", notCome) :
                new ObjectParameter("NotCome", typeof(bool));
    
            var doneParameter = done.HasValue ?
                new ObjectParameter("Done", done) :
                new ObjectParameter("Done", typeof(bool));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var workCalendarStateIDParameter = workCalendarStateID.HasValue ?
                new ObjectParameter("WorkCalendarStateID", workCalendarStateID) :
                new ObjectParameter("WorkCalendarStateID", typeof(short));
    
            var besParameter = bes.HasValue ?
                new ObjectParameter("Bes", bes) :
                new ObjectParameter("Bes", typeof(double));
    
            var besRegisterDateParameter = besRegisterDate.HasValue ?
                new ObjectParameter("BesRegisterDate", besRegisterDate) :
                new ObjectParameter("BesRegisterDate", typeof(System.DateTime));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var shiftidParameter = shiftid.HasValue ?
                new ObjectParameter("Shiftid", shiftid) :
                new ObjectParameter("Shiftid", typeof(int));
    
            var delParameter = del.HasValue ?
                new ObjectParameter("Del", del) :
                new ObjectParameter("Del", typeof(bool));
    
            var lockParameter = @lock.HasValue ?
                new ObjectParameter("Lock", @lock) :
                new ObjectParameter("Lock", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WorkCalendar_Insert", iDParameter, patientIDParameter, doctorIDParameter, assistantIDParameter, insuranceIDParameter, diseaseIDParameter, departmentIDParameter, therapyIDParameter, medicalServiceIDParameter, numbParameter, appointmentTimeParameter, appointmentRateParameter, delayParameter, comeTimeParameter, notComeParameter, doneParameter, dscParameter, workCalendarStateIDParameter, besParameter, besRegisterDateParameter, paymentTypeIDParameter, shiftidParameter, delParameter, lockParameter, useridParameter);
        }
    
        public virtual int sp_WorkCalendar_Null(Nullable<int> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WorkCalendar_Null", iDParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_WorkCalendar_Select_Result> sp_WorkCalendar_Select(string appointmentTime_Start, string appointmentTime_End, string besRegisterDate_Start, string besRegisterDate_End, Nullable<int> patientID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<short> insuranceID, Nullable<int> diseaseID, Nullable<short> departmentID, Nullable<int> therapyID, Nullable<int> medicalServiceID, string dsc, Nullable<short> workCalendarStateID, Nullable<int> paymentTypeID, string toDayDate, Nullable<byte> reserveState, Nullable<byte> isBes, Nullable<bool> done, Nullable<bool> delay, Nullable<bool> notCome, Nullable<int> shiftID, Nullable<int> userID)
        {
            var appointmentTime_StartParameter = appointmentTime_Start != null ?
                new ObjectParameter("AppointmentTime_Start", appointmentTime_Start) :
                new ObjectParameter("AppointmentTime_Start", typeof(string));
    
            var appointmentTime_EndParameter = appointmentTime_End != null ?
                new ObjectParameter("AppointmentTime_End", appointmentTime_End) :
                new ObjectParameter("AppointmentTime_End", typeof(string));
    
            var besRegisterDate_StartParameter = besRegisterDate_Start != null ?
                new ObjectParameter("BesRegisterDate_Start", besRegisterDate_Start) :
                new ObjectParameter("BesRegisterDate_Start", typeof(string));
    
            var besRegisterDate_EndParameter = besRegisterDate_End != null ?
                new ObjectParameter("BesRegisterDate_End", besRegisterDate_End) :
                new ObjectParameter("BesRegisterDate_End", typeof(string));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(short));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(short));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var workCalendarStateIDParameter = workCalendarStateID.HasValue ?
                new ObjectParameter("WorkCalendarStateID", workCalendarStateID) :
                new ObjectParameter("WorkCalendarStateID", typeof(short));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var toDayDateParameter = toDayDate != null ?
                new ObjectParameter("ToDayDate", toDayDate) :
                new ObjectParameter("ToDayDate", typeof(string));
    
            var reserveStateParameter = reserveState.HasValue ?
                new ObjectParameter("ReserveState", reserveState) :
                new ObjectParameter("ReserveState", typeof(byte));
    
            var isBesParameter = isBes.HasValue ?
                new ObjectParameter("IsBes", isBes) :
                new ObjectParameter("IsBes", typeof(byte));
    
            var doneParameter = done.HasValue ?
                new ObjectParameter("Done", done) :
                new ObjectParameter("Done", typeof(bool));
    
            var delayParameter = delay.HasValue ?
                new ObjectParameter("Delay", delay) :
                new ObjectParameter("Delay", typeof(bool));
    
            var notComeParameter = notCome.HasValue ?
                new ObjectParameter("NotCome", notCome) :
                new ObjectParameter("NotCome", typeof(bool));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WorkCalendar_Select_Result>("sp_WorkCalendar_Select", appointmentTime_StartParameter, appointmentTime_EndParameter, besRegisterDate_StartParameter, besRegisterDate_EndParameter, patientIDParameter, doctorIDParameter, assistantIDParameter, insuranceIDParameter, diseaseIDParameter, departmentIDParameter, therapyIDParameter, medicalServiceIDParameter, dscParameter, workCalendarStateIDParameter, paymentTypeIDParameter, toDayDateParameter, reserveStateParameter, isBesParameter, doneParameter, delayParameter, notComeParameter, shiftIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_WorkCalendar_SelectRow_Result> sp_WorkCalendar_SelectRow(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WorkCalendar_SelectRow_Result>("sp_WorkCalendar_SelectRow", iDParameter);
        }
    
        public virtual int sp_WorkCalendar_Update(Nullable<int> iD, Nullable<int> patientID, Nullable<int> doctorID, Nullable<int> assistantID, Nullable<short> insuranceID, Nullable<int> diseaseID, Nullable<short> departmentID, Nullable<int> therapyID, Nullable<int> medicalServiceID, Nullable<double> numb, Nullable<System.DateTime> appointmentTime, Nullable<short> appointmentRate, Nullable<bool> delay, string comeTime, Nullable<bool> notCome, Nullable<bool> done, string dsc, Nullable<short> workCalendarStateID, Nullable<double> bes, Nullable<System.DateTime> besRegisterDate, Nullable<int> paymentTypeID, Nullable<int> shiftID, Nullable<bool> del, Nullable<bool> @lock, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            var insuranceIDParameter = insuranceID.HasValue ?
                new ObjectParameter("InsuranceID", insuranceID) :
                new ObjectParameter("InsuranceID", typeof(short));
    
            var diseaseIDParameter = diseaseID.HasValue ?
                new ObjectParameter("DiseaseID", diseaseID) :
                new ObjectParameter("DiseaseID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(short));
    
            var therapyIDParameter = therapyID.HasValue ?
                new ObjectParameter("TherapyID", therapyID) :
                new ObjectParameter("TherapyID", typeof(int));
    
            var medicalServiceIDParameter = medicalServiceID.HasValue ?
                new ObjectParameter("MedicalServiceID", medicalServiceID) :
                new ObjectParameter("MedicalServiceID", typeof(int));
    
            var numbParameter = numb.HasValue ?
                new ObjectParameter("Numb", numb) :
                new ObjectParameter("Numb", typeof(double));
    
            var appointmentTimeParameter = appointmentTime.HasValue ?
                new ObjectParameter("AppointmentTime", appointmentTime) :
                new ObjectParameter("AppointmentTime", typeof(System.DateTime));
    
            var appointmentRateParameter = appointmentRate.HasValue ?
                new ObjectParameter("AppointmentRate", appointmentRate) :
                new ObjectParameter("AppointmentRate", typeof(short));
    
            var delayParameter = delay.HasValue ?
                new ObjectParameter("Delay", delay) :
                new ObjectParameter("Delay", typeof(bool));
    
            var comeTimeParameter = comeTime != null ?
                new ObjectParameter("ComeTime", comeTime) :
                new ObjectParameter("ComeTime", typeof(string));
    
            var notComeParameter = notCome.HasValue ?
                new ObjectParameter("NotCome", notCome) :
                new ObjectParameter("NotCome", typeof(bool));
    
            var doneParameter = done.HasValue ?
                new ObjectParameter("Done", done) :
                new ObjectParameter("Done", typeof(bool));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var workCalendarStateIDParameter = workCalendarStateID.HasValue ?
                new ObjectParameter("WorkCalendarStateID", workCalendarStateID) :
                new ObjectParameter("WorkCalendarStateID", typeof(short));
    
            var besParameter = bes.HasValue ?
                new ObjectParameter("Bes", bes) :
                new ObjectParameter("Bes", typeof(double));
    
            var besRegisterDateParameter = besRegisterDate.HasValue ?
                new ObjectParameter("BesRegisterDate", besRegisterDate) :
                new ObjectParameter("BesRegisterDate", typeof(System.DateTime));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var delParameter = del.HasValue ?
                new ObjectParameter("Del", del) :
                new ObjectParameter("Del", typeof(bool));
    
            var lockParameter = @lock.HasValue ?
                new ObjectParameter("Lock", @lock) :
                new ObjectParameter("Lock", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WorkCalendar_Update", iDParameter, patientIDParameter, doctorIDParameter, assistantIDParameter, insuranceIDParameter, diseaseIDParameter, departmentIDParameter, therapyIDParameter, medicalServiceIDParameter, numbParameter, appointmentTimeParameter, appointmentRateParameter, delayParameter, comeTimeParameter, notComeParameter, doneParameter, dscParameter, workCalendarStateIDParameter, besParameter, besRegisterDateParameter, paymentTypeIDParameter, shiftIDParameter, delParameter, lockParameter, useridParameter);
        }
    
        public virtual ObjectResult<Sp_WorkCalendarAutoSMS_Result> Sp_WorkCalendarAutoSMS(string appointmentTime, Nullable<int> doctorID, Nullable<int> assistantID)
        {
            var appointmentTimeParameter = appointmentTime != null ?
                new ObjectParameter("AppointmentTime", appointmentTime) :
                new ObjectParameter("AppointmentTime", typeof(string));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var assistantIDParameter = assistantID.HasValue ?
                new ObjectParameter("AssistantID", assistantID) :
                new ObjectParameter("AssistantID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_WorkCalendarAutoSMS_Result>("Sp_WorkCalendarAutoSMS", appointmentTimeParameter, doctorIDParameter, assistantIDParameter);
        }
    
        public virtual ObjectResult<sp_WorkCalendarSetting_Select_Result> sp_WorkCalendarSetting_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WorkCalendarSetting_Select_Result>("sp_WorkCalendarSetting_Select");
        }
    
        public virtual int sp_WorkCalendarSetting_Update(Nullable<bool> autoSMSWorkCalendarPatient, Nullable<bool> autoSMSWorkCalendarDoctor, Nullable<bool> autoSMSWorkCalendarAssistant, Nullable<bool> autoSMSWorkCalendarToDay, string autoSMSWorkCalendarToDayTime, Nullable<bool> autoSMSWorkCalendarToDayPatient, Nullable<bool> autoSMSWorkCalendarToDayDoctor, Nullable<bool> autoSMSWorkCalendarToDayAssistant, Nullable<bool> autoSMSWorkCalendarTomorrow, string autoSMSWorkCalendarTomorrowTime, Nullable<bool> autoSMSWorkCalendarTomorrowDoctor, Nullable<bool> autoSMSWorkCalendarTomorrowPatient, Nullable<bool> autoSMSWorkCalendarTomorrowAssistant, Nullable<int> userid)
        {
            var autoSMSWorkCalendarPatientParameter = autoSMSWorkCalendarPatient.HasValue ?
                new ObjectParameter("AutoSMSWorkCalendarPatient", autoSMSWorkCalendarPatient) :
                new ObjectParameter("AutoSMSWorkCalendarPatient", typeof(bool));
    
            var autoSMSWorkCalendarDoctorParameter = autoSMSWorkCalendarDoctor.HasValue ?
                new ObjectParameter("AutoSMSWorkCalendarDoctor", autoSMSWorkCalendarDoctor) :
                new ObjectParameter("AutoSMSWorkCalendarDoctor", typeof(bool));
    
            var autoSMSWorkCalendarAssistantParameter = autoSMSWorkCalendarAssistant.HasValue ?
                new ObjectParameter("AutoSMSWorkCalendarAssistant", autoSMSWorkCalendarAssistant) :
                new ObjectParameter("AutoSMSWorkCalendarAssistant", typeof(bool));
    
            var autoSMSWorkCalendarToDayParameter = autoSMSWorkCalendarToDay.HasValue ?
                new ObjectParameter("AutoSMSWorkCalendarToDay", autoSMSWorkCalendarToDay) :
                new ObjectParameter("AutoSMSWorkCalendarToDay", typeof(bool));
    
            var autoSMSWorkCalendarToDayTimeParameter = autoSMSWorkCalendarToDayTime != null ?
                new ObjectParameter("AutoSMSWorkCalendarToDayTime", autoSMSWorkCalendarToDayTime) :
                new ObjectParameter("AutoSMSWorkCalendarToDayTime", typeof(string));
    
            var autoSMSWorkCalendarToDayPatientParameter = autoSMSWorkCalendarToDayPatient.HasValue ?
                new ObjectParameter("AutoSMSWorkCalendarToDayPatient", autoSMSWorkCalendarToDayPatient) :
                new ObjectParameter("AutoSMSWorkCalendarToDayPatient", typeof(bool));
    
            var autoSMSWorkCalendarToDayDoctorParameter = autoSMSWorkCalendarToDayDoctor.HasValue ?
                new ObjectParameter("AutoSMSWorkCalendarToDayDoctor", autoSMSWorkCalendarToDayDoctor) :
                new ObjectParameter("AutoSMSWorkCalendarToDayDoctor", typeof(bool));
    
            var autoSMSWorkCalendarToDayAssistantParameter = autoSMSWorkCalendarToDayAssistant.HasValue ?
                new ObjectParameter("AutoSMSWorkCalendarToDayAssistant", autoSMSWorkCalendarToDayAssistant) :
                new ObjectParameter("AutoSMSWorkCalendarToDayAssistant", typeof(bool));
    
            var autoSMSWorkCalendarTomorrowParameter = autoSMSWorkCalendarTomorrow.HasValue ?
                new ObjectParameter("AutoSMSWorkCalendarTomorrow", autoSMSWorkCalendarTomorrow) :
                new ObjectParameter("AutoSMSWorkCalendarTomorrow", typeof(bool));
    
            var autoSMSWorkCalendarTomorrowTimeParameter = autoSMSWorkCalendarTomorrowTime != null ?
                new ObjectParameter("AutoSMSWorkCalendarTomorrowTime", autoSMSWorkCalendarTomorrowTime) :
                new ObjectParameter("AutoSMSWorkCalendarTomorrowTime", typeof(string));
    
            var autoSMSWorkCalendarTomorrowDoctorParameter = autoSMSWorkCalendarTomorrowDoctor.HasValue ?
                new ObjectParameter("AutoSMSWorkCalendarTomorrowDoctor", autoSMSWorkCalendarTomorrowDoctor) :
                new ObjectParameter("AutoSMSWorkCalendarTomorrowDoctor", typeof(bool));
    
            var autoSMSWorkCalendarTomorrowPatientParameter = autoSMSWorkCalendarTomorrowPatient.HasValue ?
                new ObjectParameter("AutoSMSWorkCalendarTomorrowPatient", autoSMSWorkCalendarTomorrowPatient) :
                new ObjectParameter("AutoSMSWorkCalendarTomorrowPatient", typeof(bool));
    
            var autoSMSWorkCalendarTomorrowAssistantParameter = autoSMSWorkCalendarTomorrowAssistant.HasValue ?
                new ObjectParameter("AutoSMSWorkCalendarTomorrowAssistant", autoSMSWorkCalendarTomorrowAssistant) :
                new ObjectParameter("AutoSMSWorkCalendarTomorrowAssistant", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WorkCalendarSetting_Update", autoSMSWorkCalendarPatientParameter, autoSMSWorkCalendarDoctorParameter, autoSMSWorkCalendarAssistantParameter, autoSMSWorkCalendarToDayParameter, autoSMSWorkCalendarToDayTimeParameter, autoSMSWorkCalendarToDayPatientParameter, autoSMSWorkCalendarToDayDoctorParameter, autoSMSWorkCalendarToDayAssistantParameter, autoSMSWorkCalendarTomorrowParameter, autoSMSWorkCalendarTomorrowTimeParameter, autoSMSWorkCalendarTomorrowDoctorParameter, autoSMSWorkCalendarTomorrowPatientParameter, autoSMSWorkCalendarTomorrowAssistantParameter, useridParameter);
        }
    
        public virtual int sp_WorkCalendarStates_Delete(Nullable<short> iD, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WorkCalendarStates_Delete", iDParameter, useridParameter);
        }
    
        public virtual int sp_WorkCalendarStates_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WorkCalendarStates_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_WorkCalendarStates_Select_Result> sp_WorkCalendarStates_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WorkCalendarStates_Select_Result>("sp_WorkCalendarStates_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_WorkCalendarStates_Update(Nullable<short> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WorkCalendarStates_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual int sp_Yaraneh_Insert(string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Yaraneh_Insert", nameParameter, dscParameter, activeParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_Yaraneh_Select_Result> sp_Yaraneh_Select(string name, Nullable<int> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Yaraneh_Select_Result>("sp_Yaraneh_Select", nameParameter, activeParameter);
        }
    
        public virtual int sp_Yaraneh_Update(Nullable<int> iD, string name, string dsc, Nullable<bool> active, Nullable<int> userid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dscParameter = dsc != null ?
                new ObjectParameter("Dsc", dsc) :
                new ObjectParameter("Dsc", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Yaraneh_Update", iDParameter, nameParameter, dscParameter, activeParameter, useridParameter);
        }
    }
}
